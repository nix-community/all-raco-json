#hasheq((author . "damien.mattei@gmail.com") (authors . ("damien.mattei@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scheme-plus" "doc/scheme-plus@Scheme-PLUS-for-Racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Scheme-PLUS-for-Racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Scheme-PLUS-for-Racket.txt"))) (checksum . "5a95f2c54da09a0590d659a212e743fb15b05b05") (checksum-error . #f) (collection . "Scheme+") (conflicts . ()) (date-added . 1698480283) (dependencies . ("base" "srfi-lib" "sci" "r6rs-lib" "reprovide-lang-lib" "scribble-lib" "racket-doc" "scribble-code-examples" "scribble-doc")) (description . "Scheme+   for Racket  : infix notation with operator precedence, overloading for binary and n-arity operators and for procedures.\r\nTo use the curly infix syntax of SRFI 105 begin your program by:\r\n#lang reader \"SRFI-105.rkt\"\r\nthe file is in the archive package or can be retrieved here:\r\nhttps://github.com/damien-mattei/Scheme-PLUS-for-Racket/tree/main/src\r\n") (implies . ()) (license . "LGPL-3.0-or-later") (modules . ((lib "Scheme+/examples/chaos+.rkt") (lib "Scheme+/scribblings/scheme-plus.scrbl") (lib "Scheme+/main.rkt") (lib "Scheme+/src/REPL-Scheme-PLUS.rkt") (lib "Scheme+/examples/prefix+.rkt") (lib "Scheme+/operators-list.rkt") (lib "Scheme+/range.rkt") (lib "Scheme+/examples/SssDyna+.rkt") (lib "Scheme+/insert.rkt") (lib "Scheme+/condx.rkt") (lib "Scheme+/def.rkt") (lib "Scheme+/while-do.rkt") (lib "Scheme+/if-then-else.rkt") (lib "Scheme+/examples/matrix-by-vectors+.rkt") (lib "Scheme+/parse-square-brackets.rkt") (lib "Scheme+/examples/examples-curly-infix2.rkt") (lib "Scheme+/bitwise.rkt") (lib "Scheme+/array.rkt") (lib "Scheme+/when-unless.rkt") (lib "Scheme+/if-parser.rkt") (lib "Scheme+/block.rkt") (lib "Scheme+/for_next_step.rkt") (lib "Scheme+/examples/matrix+.rkt") (lib "Scheme+/examples/exo_retropropagationNhidden_layers_matrix_v2+.rkt") (lib "Scheme+/increment.rkt") (lib "Scheme+/syntax.rkt") (lib "Scheme+/operators.rkt") (lib "Scheme+/examples/example-Scheme+.rkt") (lib "Scheme+/modulo.rkt") (lib "Scheme+/assignment.rkt") (lib "Scheme+/infix.rkt") (lib "Scheme+/n-arity.rkt") (lib "Scheme+/infix-with-precedence-to-prefix.rkt") (lib "Scheme+/overload.rkt") (lib "Scheme+/examples/prefix-def+.rkt") (lib "Scheme+/declare.rkt") (lib "Scheme+/examples/SssRec+.rkt") (lib "Scheme+/examples/examples-curly-infix.rkt") (lib "Scheme+/bracket-apply.rkt") (lib "Scheme+/not-equal.rkt") (lib "Scheme+/repeat-until.rkt") (lib "Scheme+/examples/zeta+.rkt") (lib "Scheme+/nfx.rkt") (lib "Scheme+/slice.rkt") (lib "Scheme+/exponential.rkt") (lib "Scheme+/Scheme+.rkt") (lib "Scheme+/examples/exo_retropropagationNhidden_layers_matrix_v2_by_vectors+.rkt"))) (name . "Scheme-PLUS-for-Racket") (readme-url . "https://github.com/damien-mattei/Scheme-PLUS-for-Racket/tree/main/README.md") (ring . 1) (rt-dependencies . ("base" "srfi-lib" "sci" "r6rs-lib" "reprovide-lang-lib")) (search-terms . #hasheq((|105| . #t) (:build-success: . #t) (:docs: . #t) (SRFI . #t) (author:damien.mattei@gmail.com . #t) (author:damien.matteiÎ»8a4fcdf . #t) (infix . #t) (operator . #t) (overload . #t) (precedence . #t) (ring:1 . #t))) (source . "https://github.com/damien-mattei/Scheme-PLUS-for-Racket.git#main") (tags . ("105" "infix" "operator" "overload" "precedence" "SRFI")) (versions . #hash((default . #hasheq((checksum . "5a95f2c54da09a0590d659a212e743fb15b05b05") (source . "https://github.com/damien-mattei/Scheme-PLUS-for-Racket.git#main") (source_url . "https://github.com/damien-mattei/Scheme-PLUS-for-Racket.git#main"))))))