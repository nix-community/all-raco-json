#hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f8307b2fdb2ede778b6b1cacd08e053e2ae250a6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "net-lib" "net-cookies-lib" "web-server-lib" "db-lib" "draw-lib" "rackunit-lib" "rackunit-gui" "rackunit-typed" "snip-lib" "typed-racket-lib" "gui-lib" "pict-lib" "images-lib" "racket-index" "sandbox-lib" "pconvert-lib")) (description . "Types for various libraries") (implies . ("rackunit-typed")) (license . "(Apache-2.0 OR MIT)") (modules . ((lib "typed/net/imap.rkt") (lib "typed/net/url-connect.rkt") (lib "typed/framework/prefs-contract.rkt") (lib "typed/net/sendurl.rkt") (lib "typed/private/framework-types.rkt") (lib "typed/pict.rkt") (lib "typed/net/url.rkt") (lib "typed/syntax/modread.rkt") (lib "typed/racket/gui/no-check/lang/reader.rkt") (lib "typed/net/cookies.rkt") (lib "typed/net/mime.rkt") (lib "typed/mrlib/gif.rkt") (lib "typed/racket/private/gui-types.rkt") (lib "typed/racket/snip.rkt") (lib "typed/private/require-batch.rkt") (lib "typed/openssl.rkt") (lib "typed/syntax/readerr.rkt") (lib "typed/racket/async-channel.rkt") (lib "typed/net/qp.rkt") (lib "typed/net/uri-codec.rkt") (lib "typed/net/head.rkt") (lib "typed/net/cookies/common.rkt") (lib "typed/json.rkt") (lib "typed/srfi/19.rkt") (lib "typed/framework/framework.rkt") (lib "typed/syntax/stx.rkt") (lib "typed/mred/mred.rkt") (lib "typed/syntax/srcloc.rkt") (lib "typed/net/sendmail.rkt") (lib "typed/db.rkt") (lib "typed/net/base64.rkt") (lib "typed/racket/fasl.rkt") (lib "typed/net/cgi.rkt") (lib "typed/racket/gui/no-check.rkt") (lib "typed/net/http-client.rkt") (lib "typed/file/gif.rkt") (lib "typed/net/url-structs.rkt") (lib "typed/openssl/types.rkt") (lib "typed/racket/extflonum.rkt") (lib "typed/net/cookies/server.rkt") (lib "typed/mrlib/bitmap-label.rkt") (lib "typed/setup/getinfo.rkt") (lib "typed/net/pop3.rkt") (lib "typed/net/dns.rkt") (lib "typed/images/logos.rkt") (lib "typed/xml.rkt") (lib "typed/xml/plist.rkt") (lib "typed/web-server/configuration/responders.rkt") (lib "typed/mzlib/pconvert-prop.rkt") (lib "typed/net/ftp.rkt") (lib "typed/mrlib/panel-wob.rkt") (lib "typed/net/nntp.rkt") (lib "typed/racket/gui.rkt") (lib "typed/net/gifwrite.rkt") (lib "typed/web-server/http.rkt") (lib "typed/racket/gui/base.rkt") (lib "typed/racket/sandbox.rkt") (lib "typed/openssl/sha1.rkt") (lib "typed/net/cookie.rkt") (lib "typed/racket/flonum.rkt") (lib "typed/racket/random.rkt") (lib "typed/net/smtp.rkt") (lib "typed/net/git-checkout.rkt") (lib "typed/xml/path.rkt") (lib "typed/racket/draw.rkt") (lib "typed/srfi/14.rkt") (lib "typed/images/compile-time.rkt") (lib "typed/openssl/md5.rkt") (lib "typed/db/sqlite3.rkt") (lib "typed/framework.rkt") (lib "typed/racket/os.rkt") (lib "typed/file/glob.rkt") (lib "typed/images/icons.rkt") (lib "typed/file/convertible.rkt") (lib "typed/db/base.rkt"))) (name . "typed-racket-more") (ring . 0) (rt-dependencies . ("srfi-lite-lib" "base" "net-lib" "net-cookies-lib" ("web-server-lib" #:version "1.6") ("db-lib" #:version "1.5") "draw-lib" "rackunit-lib" "rackunit-gui" "rackunit-typed" "snip-lib" ("typed-racket-lib" #:version "1.14") ("gui-lib" #:version "1.49") "pict-lib" "images-lib" "racket-index" "sandbox-lib" "pconvert-lib")) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:samthλ5dd761c . #t) (author:stamourv@racket-lang.org . #t) (author:stamourvλc4199c9 . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/typed-racket/?path=typed-racket-more") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f8307b2fdb2ede778b6b1cacd08e053e2ae250a6") (source . "git://github.com/racket/typed-racket/?path=typed-racket-more") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-more"))))))