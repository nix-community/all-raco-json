#hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "combinator-parser" "doc/combinator-parser@combinator-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/combinator-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/combinator-parser.txt"))) (checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "compatibility-lib" "scribble-lib" "parser-tools-doc" "racket-doc" "at-exp-lib" "lazy" "scheme-lib")) (description . "A combinator parser library retained for backwards compatibility. Using parser-tools/yacc or ragg instead is recommended.") (implies . ()) (license . #f) (modules . ((lib "combinator-parser/private-combinator/structs.rkt") (lib "combinator-parser/main.rkt") (lib "combinator-parser/examples/combinator-example.rkt") (lib "combinator-parser/private-combinator/parser-sigs.rkt") (lib "combinator-parser/scribblings/combinator-parser.scrbl") (lib "combinator-parser/private-combinator/combinator.rkt") (lib "combinator-parser/private-combinator/errors.rkt") (lib "combinator-parser/combinator-unit.rkt") (lib "combinator-parser/private-combinator/combinator-parser.rkt"))) (name . "combinator-parser") (ring . 1) (rt-dependencies . ("base" "parser-tools-lib" "compatibility-lib" "scribble-lib" "parser-tools-doc" "racket-doc" "at-exp-lib" "lazy" "scheme-lib")) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:asumuÎ»d49bf81 . #t) (legacy . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/combinator-parser/tree/master") (tags . ("legacy" "parsing")) (versions . #hash((default . #hasheq((checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (source . "github://github.com/takikawa/combinator-parser/master") (source_url . "http://github.com/takikawa/combinator-parser/tree/master"))))))