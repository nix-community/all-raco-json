#hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-test.txt"))) (checksum . "c458efe6c36ee0915c6a025c75c10301a95aaf55") (checksum-error . #f) (collection . "qi") (conflicts . ()) (date-added . 1637806985) (dependencies . ("base" "rackunit-lib" "adjutor" "math-lib" "sandbox-lib" "qi-lib")) (description . "A general-purpose functional DSL. [tests only]") (implies . ()) (license . #f) (modules . ((lib "qi/tests/compiler/rules/deforest.rkt") (lib "qi/tests/compiler/private/expand-util.rkt") (lib "qi/tests/flow.rkt") (lib "qi/tests/threading.rkt") (lib "qi/tests/switch.rkt") (lib "qi/tests/compiler/semantics.rkt") (lib "qi/tests/qi.rkt") (lib "qi/tests/macro.rkt") (lib "qi/tests/on.rkt") (lib "qi/tests/space.rkt") (lib "qi/tests/private/util.rkt") (lib "qi/tests/compiler/rules/full-cycle.rkt") (lib "qi/tests/compiler/rules.rkt") (lib "qi/tests/compiler/rules/normalize.rkt") (lib "qi/tests/util.rkt") (lib "qi/tests/compiler/impl.rkt") (lib "qi/tests/compiler/strategy.rkt") (lib "qi/tests/expander.rkt") (lib "qi/tests/compiler/rules/private/deforest-util.rkt") (lib "qi/tests/definitions.rkt") (lib "qi/tests/compiler.rkt"))) (name . "qi-test") (readme-url . #f) (ring . 1) (rt-dependencies . ("base")) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (author:skasivajÎ»a994fcf . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/drym-org/qi.git?path=qi-test#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "c458efe6c36ee0915c6a025c75c10301a95aaf55") (source . "https://github.com/drym-org/qi.git?path=qi-test#main") (source_url . "https://github.com/drym-org/qi.git?path=qi-test#main"))))))