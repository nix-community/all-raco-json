#hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-lib.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . "tulip") (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "curly-fn")) (description . "") (implies . ()) (modules . ((lib "tulip/lang/parser.rkt") (lib "tulip/lang/lexer.rkt") (lib "tulip/private/util/curry.rkt") (lib "tulip/lang/configure-runtime.rkt") (lib "tulip/racket/ffi.rkt") (lib "tulip/lang/emitter.rkt") (lib "tulip/list.rkt") (lib "tulip/private/util/srcloc.rkt") (lib "tulip/private/util/syntax-loc-props.rkt") (lib "tulip/private/configured-runtime-lang.rkt") (lib "tulip/base.rkt") (lib "tulip/lang/reader.rkt") (lib "tulip/main.rkt") (lib "tulip/math.rkt"))) (name . "tulip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib"))))))