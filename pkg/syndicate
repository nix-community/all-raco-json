#hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syndicate.txt") (test-failure-log . "server/built/test-fail/syndicate.txt") (test-success-log . #f))) (checksum . "e75453d0b48cd7f449ba834d0cc70d39ce1ab55d") (checksum-error . #f) (collection . "syndicate") (conflicts . ()) (date-added . 1620810385) (dependencies . ("base" "auxiliary-macro-context" "data-lib" "libb2" "noise-protocol" "preserves" "struct-defaults" "web-server-lib" "at-exp-lib" "libsodium" "rackunit-lib")) (description . "A new, high-performance reimplementation of Syndicate that takes the                                                                                           \r\nlanguage-level constructs of facets, endpoints, and fields to heart,                                                                                           \r\nintegrating knowledge of facets and endpoints into the dataspace                                                                                               \r\nimplementation itself. It also includes a form of object-capabilities                                                                                          \r\nfor securing access to dataspaces and other distributed objects.                                                                                               \r\n") (implies . ()) (license . #f) (modules . ((lib "syndicate/dataflow.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/entity-ref.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/field.rkt") (lib "syndicate/distributed/noise.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/bin/syndicate-server-debug.rkt") (lib "syndicate/main.rkt") (lib "syndicate/driver-support.rkt") (lib "syndicate/test/core/during-with-spawn.rkt") (lib "syndicate/skeleton.rkt") (lib "syndicate/rewrite.rkt") (lib "syndicate/drivers/stream.rkt") (lib "syndicate/test/core/rewrite.rkt") (lib "syndicate/gensym.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/test/core/sturdy.rkt") (lib "syndicate/distributed/tcp.rkt") (lib "syndicate/async.rkt") (lib "syndicate/actor.rkt") (lib "syndicate/query.rkt") (lib "syndicate/private/install.rkt") (lib "syndicate/drivers/racket-event.rkt") (lib "syndicate/support/hash.rkt") (lib "syndicate/syntax.rkt") (lib "syndicate/service.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/test/core/republish-wildcard-observe.rkt") (lib "syndicate/engine.rkt") (lib "syndicate/event-expander.rkt") (lib "syndicate/test/core/self-loop.rkt") (lib "syndicate/sturdy.rkt") (lib "syndicate/schema-compiler.rkt") (lib "syndicate/relay.rkt") (lib "syndicate/drivers/http.rkt") (lib "syndicate/distributed/ports.rkt") (lib "syndicate/pattern-expander.rkt") (lib "syndicate/bin/syndicate-server.rkt") (lib "syndicate/distributed/gatekeeper.rkt") (lib "syndicate/bag.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate/smart-pattern.rkt") (lib "syndicate/dataspace.rkt") (lib "syndicate/support/counter.rkt") (lib "syndicate/test/core/dataflow.rkt") (lib "syndicate/drivers/timer.rkt"))) (name . "syndicate") (ring . 1) (rt-dependencies . ("base" "auxiliary-macro-context" "data-lib" "libb2" "noise-protocol" "preserves" "struct-defaults" "web-server-lib")) (search-terms . #hasheq((:build-success: . #t) (actors . #t) (author:tonygarnockjones@gmail.com . #t) (author:tonygarnockjonesÎ»e662f65 . #t) (capabilities . #t) (dataspaces . #t) (distributed . #t) (network . #t) (ring:1 . #t) (syndicate . #t))) (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (tags . ("actors" "capabilities" "dataspaces" "distributed" "network" "syndicate")) (versions . #hash((default . #hasheq((checksum . "e75453d0b48cd7f449ba834d0cc70d39ce1ab55d") (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (source_url . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main"))))))