#hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag-lib.txt"))) (checksum . "30cbf95e6a717e71fb8bda6b15a7253aed36115a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556803657) (dependencies . ("base" "br-parser-tools-lib" "rackunit-lib" "syntax-color-lib")) (description . "") (implies . ("br-parser-tools-lib")) (license . #f) (modules . ((lib "brag/test/test-cutter.rkt") (lib "brag/rules/rule-structs.rkt") (lib "brag/examples/simple-line-drawing/examples/letter-i.rkt") (lib "brag/test/test-hide-and-splice.rkt") (lib "brag/test/test-simple-arithmetic-grammar.rkt") (lib "brag/codegen/reader.rkt") (lib "brag/codegen/codegen.rkt") (lib "brag/examples/whitespace.rkt") (lib "brag/examples/0n1.rkt") (lib "brag/test/test-wordy.rkt") (lib "brag/private/internal-support.rkt") (lib "brag/examples/top-level-cut-3.rkt") (lib "brag/examples/simple-line-drawing/lexer.rkt") (lib "brag/examples/simple-arithmetic-grammar.rkt") (lib "brag/test/test-parser.rkt") (lib "brag/test/test-start-and-atok.rkt") (lib "brag/examples/simple-line-drawing.rkt") (lib "brag/rules/parser.rkt") (lib "brag/examples/top-level-cut-2.rkt") (lib "brag/main.rkt") (lib "brag/test/test-0n1n.rkt") (lib "brag/examples/simple-line-drawing/grammar.rkt") (lib "brag/examples/wordy.rkt") (lib "brag/rules/lexer.rkt") (lib "brag/test/test-cutter-another.rkt") (lib "brag/private/indenter.rkt") (lib "brag/examples/cutter.rkt") (lib "brag/examples/empty-symbol.rkt") (lib "brag/examples/01-equal.rkt") (lib "brag/test/test-baby-json.rkt") (lib "brag/test/test-0n1.rkt") (lib "brag/examples/baby-json-hider.rkt") (lib "brag/test/test-empty-symbol.rkt") (lib "brag/rules/stx-types.rkt") (lib "brag/test/test-make-rule-parser.rkt") (lib "brag/examples/simple-line-drawing/lang/reader.rkt") (lib "brag/examples/top-level-cut-1.rkt") (lib "brag/test/test-weird-grammar.rkt") (lib "brag/test/test-whitespace.rkt") (lib "brag/codegen/satisfaction.rkt") (lib "brag/examples/nested-repeats.rkt") (lib "brag/examples/simple-line-drawing/interpret.rkt") (lib "brag/test/test-flatten.rkt") (lib "brag/test/weird-grammar.rkt") (lib "brag/test/test-all.rkt") (lib "brag/examples/baby-json-alt2.rkt") (lib "brag/examples/baby-json.rkt") (lib "brag/test/test-01-equal.rkt") (lib "brag/examples/statlist-grammar.rkt") (lib "brag/examples/simple-line-drawing/semantics.rkt") (lib "brag/examples/subrule.rkt") (lib "brag/examples/lua-parser.rkt") (lib "brag/test/test-quotation-marks-and-backslashes.rkt") (lib "brag/test/test-lexer.rkt") (lib "brag/test/test-nested-repeats.rkt") (lib "brag/test/test-baby-json-hider.rkt") (lib "brag/examples/start-and-atok.rkt") (lib "brag/rules/stx.rkt") (lib "brag/examples/add-mult.rkt") (lib "brag/test/test-old-token.rkt") (lib "brag/examples/cutter-another.rkt") (lib "brag/test/test-top-level-cut.rkt") (lib "brag/examples/bnf.rkt") (lib "brag/codegen/runtime.rkt") (lib "brag/test/test-codepoints.rkt") (lib "brag/examples/codepoints.rkt") (lib "brag/test/test-simple-line-drawing.rkt") (lib "brag/test/test-errors.rkt") (lib "brag/examples/hide-and-splice.rkt") (lib "brag/examples/curly-quantifier.rkt") (lib "brag/examples/nested-word-list.rkt") (lib "brag/codegen/expander.rkt") (lib "brag/examples/0n1n.rkt") (lib "brag/private/colorer.rkt") (lib "brag/codegen/flatten.rkt") (lib "brag/examples/quotation-marks-and-backslashes.rkt") (lib "brag/support.rkt") (lib "brag/test/test-curly-quantifier.rkt") (lib "brag/examples/baby-json-alt.rkt"))) (name . "brag-lib") (readme-url . #f) (ring . 1) (rt-dependencies . (("base" #:version "6.3") "br-parser-tools-lib" "rackunit-lib" "syntax-color-lib")) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:mb@mbtype.com . #t) (author:mbÎ»3e83b64 . #t) (lib . #t) (ring:1 . #t))) (source . "https://gitlab.com/mbutterick/brag.git?path=brag-lib") (tags . ("lib")) (versions . #hash((default . #hasheq((checksum . "30cbf95e6a717e71fb8bda6b15a7253aed36115a") (source . "https://gitlab.com/mbutterick/brag.git?path=brag-lib") (source_url . "https://gitlab.com/mbutterick/brag.git?path=brag-lib"))))))