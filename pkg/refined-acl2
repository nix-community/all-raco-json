#hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/refined-acl2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (checksum-error . #f) (collection . "refined-acl2") (conflicts . ()) (dependencies . ("mischief")) (description . "Refined ACL2: experimental implementation of ACL2-verifiable code with ML modules and Racket macros.") (implies . ()) (license . #f) (modules . ((lib "refined-acl2/legacy/type/field.rkt") (lib "refined-acl2/examples/id-non-dracula/fresh.rkt") (lib "refined-acl2/model/quote.rkt") (lib "refined-acl2/tests/diff.rkt") (lib "refined-acl2/tests/suite/component.rkt") (lib "refined-acl2/examples/id-non-dracula/original.rkt") (lib "refined-acl2/examples/vm.rkt") (lib "refined-acl2/prelude/base/mutual.rkt") (lib "refined-acl2/prelude.rkt") (lib "refined-acl2/legacy/ref.rkt") (lib "refined-acl2/prelude/sexp.rkt") (lib "refined-acl2/prelude/base/datatype.rkt") (lib "refined-acl2/prelude/set-of.rkt") (lib "refined-acl2/tests/suite/modular.rkt") (lib "refined-acl2/expansion/alpha.rkt") (lib "refined-acl2/tests/suite/atomic.rkt") (lib "refined-acl2/legacy/type/description.rkt") (lib "refined-acl2/legacy/check.rkt") (lib "refined-acl2/model/names.rkt") (lib "refined-acl2/certify.rkt") (lib "refined-acl2/examples/id-non-dracula/check.rkt") (lib "refined-acl2/model/api.rkt") (lib "refined-acl2/primitive.rkt") (lib "refined-acl2/proof/dynamic.rkt") (lib "refined-acl2/legacy/type/function.rkt") (lib "refined-acl2/prelude/core/keywords.rkt") (lib "refined-acl2/model/data.rkt") (lib "refined-acl2/proof/static.rkt") (lib "refined-acl2/expansion/grammar.rkt") (lib "refined-acl2/legacy/api.rkt") (lib "refined-acl2/model/verify.rkt") (lib "refined-acl2/prelude/base/match.rkt") (lib "refined-acl2/examples/sexp.rkt") (lib "refined-acl2/legacy/rename.rkt") (lib "refined-acl2/prelude/core/support.rkt") (lib "refined-acl2/examples/virtual-machine/soundness.rkt") (lib "refined-acl2/prelude/core/description.rkt") (lib "refined-acl2/tests/suite/surface.rkt") (lib "refined-acl2/model.rkt") (lib "refined-acl2/legacy/type.rkt") (lib "refined-acl2/main.rkt") (lib "refined-acl2/prelude/core.rkt") (lib "refined-acl2/examples/bug.rkt") (lib "refined-acl2/legacy/registry.rkt") (lib "refined-acl2/legacy/type/generic.rkt") (lib "refined-acl2/model/acl2.rkt") (lib "refined-acl2/expansion/dependency.rkt") (lib "refined-acl2/expansion/paths.rkt") (lib "refined-acl2/model/syntax.rkt") (lib "refined-acl2/prelude/base.rkt") (lib "refined-acl2/legacy/type/value.rkt") (lib "refined-acl2/legacy/proof.rkt") (lib "refined-acl2/model/unparse.rkt") (lib "refined-acl2/base.rkt") (lib "refined-acl2/prelude/core/imported.rkt") (lib "refined-acl2/legacy/type/theorem.rkt") (lib "refined-acl2/model/parse.rkt") (lib "refined-acl2/prelude/core/atomic.rkt") (lib "refined-acl2/expansion/names.rkt") (lib "refined-acl2/model/subst.rkt") (lib "refined-acl2/legacy/unique.rkt") (lib "refined-acl2/examples/ast.rkt") (lib "refined-acl2/prelude/core/expansion.rkt") (lib "refined-acl2/examples/generic.rkt") (lib "refined-acl2/legacy/type/component.rkt") (lib "refined-acl2/prelude/base/primitive.rkt") (lib "refined-acl2/prelude/base/shorthand.rkt") (lib "refined-acl2/proof/term.rkt") (lib "refined-acl2/model/proof-term.rkt") (lib "refined-acl2/prelude/core/expressions.rkt") (lib "refined-acl2/tests/harness.rkt") (lib "refined-acl2/expansion/runtime.rkt") (lib "refined-acl2/prelude/core/input-streams.rkt") (lib "refined-acl2/tests/run.rkt") (lib "refined-acl2/kernel.rkt") (lib "refined-acl2/examples/virtual-machine/descriptions.rkt") (lib "refined-acl2/core.rkt") (lib "refined-acl2/prelude/core/component.rkt") (lib "refined-acl2/examples/id-non-dracula/different.rkt") (lib "refined-acl2/examples/diss.rkt") (lib "refined-acl2/expansion/simplify.rkt") (lib "refined-acl2/prelude/list-of.rkt") (lib "refined-acl2/tests/suite/macro.rkt") (lib "refined-acl2/prelude/type.rkt") (lib "refined-acl2/examples/id-non-dracula/identical.rkt") (lib "refined-acl2/prelude/base/struct.rkt") (lib "refined-acl2/legacy/type/base.rkt"))) (name . "refined-acl2") (readme-url . #f) (ring . 1) (rt-dependencies . ("mischief")) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:cce@racket-lang.org . #t) (author:cceÎ»a0ce749 . #t) (ring:1 . #t))) (source . "http://github.com/carl-eastlund/refined-acl2/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (source . "github://github.com/carl-eastlund/refined-acl2/master") (source_url . "http://github.com/carl-eastlund/refined-acl2/tree/master"))))))