#hasheq((author . "mb@mbtype.com clements@racket-lang.org dyoo@hashcollision.org") (authors . ("mb@mbtype.com" "clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ragg" "doc/ragg@ragg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ragg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ragg.txt"))) (checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "rackunit-lib" "python-tokenizer" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Given a grammar in EBNF, `ragg` produces a parser that generates a syntax object with source locations. This package is maintained for backward compatibility. `brag` is an updated version.") (implies . ()) (license . #f) (modules . ((lib "ragg/examples/simple-line-drawing/examples/letter-i.rkt") (lib "ragg/test/test-parser.rkt") (lib "ragg/test/test-wordy.rkt") (lib "ragg/test/test-01-equal.rkt") (lib "ragg/examples/baby-json.rkt") (lib "ragg/rules/parser.rkt") (lib "ragg/test/test-0n1n.rkt") (lib "ragg/codegen/lang/reader.rkt") (lib "ragg/examples/simple-line-drawing/semantics.rkt") (lib "ragg/codegen/satisfaction.rkt") (lib "ragg/examples/statlist-grammar.rkt") (lib "ragg/examples/python-grammar.rkt") (lib "ragg/examples/simple-arithmetic-grammar.rkt") (lib "ragg/test/test-weird-grammar.rkt") (lib "ragg/lang/reader.rkt") (lib "ragg/rules/rule-structs.rkt") (lib "ragg/test/test-old-token.rkt") (lib "ragg/test/weird-grammar.rkt") (lib "ragg/examples/simple-line-drawing/lang/reader.rkt") (lib "ragg/ragg.scrbl") (lib "ragg/codegen/flatten.rkt") (lib "ragg/examples/lua-parser.rkt") (lib "ragg/test/test-errors.rkt") (lib "ragg/test/test-baby-json.rkt") (lib "ragg/examples/bnf.rkt") (lib "ragg/support.rkt") (lib "ragg/private/internal-support.rkt") (lib "ragg/test/test-lexer.rkt") (lib "ragg/test/test-0n1.rkt") (lib "ragg/examples/simple-line-drawing/lexer.rkt") (lib "ragg/codegen/sexp-based-lang.rkt") (lib "ragg/rules/stx.rkt") (lib "ragg/examples/nested-word-list.rkt") (lib "ragg/rules/stx-types.rkt") (lib "ragg/rules/lexer.rkt") (lib "ragg/test/test-all.rkt") (lib "ragg/test/test-flatten.rkt") (lib "ragg/test/test-simple-arithmetic-grammar.rkt") (lib "ragg/codegen/runtime.rkt") (lib "ragg/rules/runtime.rkt") (lib "ragg/cfg-parser/cfg-parser.rkt") (lib "ragg/test/test-simple-line-drawing.rkt") (lib "ragg/examples/0n1.rkt") (lib "ragg/examples/0n1n.rkt") (lib "ragg/codegen/codegen.rkt") (lib "ragg/examples/01-equal.rkt") (lib "ragg/examples/simple-line-drawing/interpret.rkt") (lib "ragg/examples/simple-line-drawing/grammar.rkt") (lib "ragg/test/exercise-python-grammar.rkt") (lib "ragg/examples/wordy.rkt") (lib "ragg/examples/simple-line-drawing.rkt"))) (name . "ragg") (ring . 1) (rt-dependencies . ("base" "parser-tools-lib" "rackunit-lib" "python-tokenizer")) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:clementsλf8f5441 . #t) (author:dyoo@hashcollision.org . #t) (author:dyooλ8d6c641 . #t) (author:mb@mbtype.com . #t) (author:mbλ3e83b64 . #t) (legacy . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/ragg.git") (tags . ("legacy" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (source . "https://github.com/jbclements/ragg.git") (source_url . "https://github.com/jbclements/ragg.git"))))))