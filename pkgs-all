#hash(("1d6" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/1d6.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/1d6.txt"))) (checksum . "ae3bf1fc265bd1815dc8f9d6bbb153afdbf3a53d") (checksum-error . #f) (collection . "1d6") (conflicts . ()) (date-added . 1553839150) (dependencies . ("base" "brag" "beautiful-racket-lib" "scribble-lib" "rackunit-lib" "racket-doc" "beautiful-racket-lib")) (description . "A partial implementation of the Troll dice-rolling language in Racket.") (implies . ()) (modules . ((lib "1d6/expander.rkt") (lib "1d6/tokenizer.rkt") (lib "1d6/reader.rkt") (lib "1d6/main.rkt") (lib "1d6/parser.rkt") (lib "1d6/grammar.rkt"))) (name . "1d6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (game . #t) (lang . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/1d6.git") (tags . ("game" "lang" "random")) (versions . #hash((default . #hasheq((checksum . "ae3bf1fc265bd1815dc8f9d6bbb153afdbf3a53d") (source . "https://github.com/jessealama/1d6.git") (source_url . "https://github.com/jessealama/1d6.git"))))))) ("2048" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2048" "doc/2048@2048/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2048.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2048.txt"))) (checksum . "ef07f6f91d58f00c50aafb239926596477e56e50") (checksum-error . #f) (collection . "2048") (conflicts . ()) (date-added . 1582818247) (dependencies . ("base" "draw-lib" "gui-lib" "icns" "pict-lib" "string-constants-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "scribble-lib" "rackunit-lib" "rackunit-typed")) (description . "The game of 2048 in Racket") (implies . ()) (modules . ((lib "2048/kernel.rkt") (lib "2048/multicast.rkt") (lib "2048/pict/file-icon.rkt") (lib "2048/gui/preferences-redirect.rkt") (lib "2048/state.rkt") (lib "2048/include-agpl.rkt") (lib "2048/scribblings/2048.scrbl") (lib "2048/write-icons.rkt") (lib "2048/pict/stx.rkt") (lib "2048/gui/utils.rkt") (lib "2048/pict.rkt") (lib "2048/kernel/board.rkt") (lib "2048/kernel/saved.rkt") (lib "2048/pict/utils.rkt") (lib "2048/kernel/tree.rkt") (lib "2048/gui/scratch/all-bookmarks.rkt") (lib "2048/main/gui/2048.rkt") (lib "2048/gui.rkt") (lib "2048/kernel/game.rkt") (lib "2048/pict/color.rkt"))) (name . "2048") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (game . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/2048.git") (tags . ("app" "application" "game" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "ef07f6f91d58f00c50aafb239926596477e56e50") (source . "https://github.com/LiberalArtist/2048.git") (source_url . "https://github.com/LiberalArtist/2048.git"))))))) ("2htdp-typed" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2htdp-typed" "doc/2htdp-typed@2htdp-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2htdp-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2htdp-typed.txt"))) (checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "typed-racket-lib" "typed-racket-more" "unstable-list-lib" "unstable-contract-lib" "scribble-lib" "racket-doc" "htdp-doc" "typed-racket-doc")) (description . "A partial version of 2htdp for Typed Racket") (implies . ()) (modules . ((lib "typed/scribblings/2htdp-typed.scrbl") (lib "typed/2htdp/image.rkt") (lib "typed/2htdp/private/big-bang-wrapper.rkt") (lib "typed/2htdp/batch-io.rkt") (lib "typed/lang/posn.rkt") (lib "typed/2htdp/universe.rkt"))) (name . "2htdp-typed") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (big-bang . #t) (gui . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master") (tags . ("2htdp" "big-bang" "gui" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (source . "git://github.com/lexi-lambda/racket-2htdp-typed") (source_url . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master"))))))) ("3s" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "3s" "doc/3s@3s/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3s.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/3s.txt"))) (checksum . "9a5036b0e6ec282223bebe8310bd8421ec60d3e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("lux" "base" "openal" "racket-doc" "scribble-lib")) (description . "positional sound and mixing for lux and other programs") (implies . ()) (modules . ((lib "3s/main.rkt") (lib "3s/tests/example.rkt") (lib "3s/3s.scrbl") (lib "lux/chaos/3s.rkt"))) (name . "3s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (k . #t) (ring:1 . #t) (s . #t))) (source . "http://github.com/jeapostrophe/3s/tree/master") (tags . ("audio" "games" "k" "s")) (versions . #hash((default . #hasheq((checksum . "9a5036b0e6ec282223bebe8310bd8421ec60d3e5") (source . "git://github.com/jeapostrophe/3s") (source_url . "http://github.com/jeapostrophe/3s/tree/master"))))))) ("4chdl" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/4chdl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/4chdl.txt"))) (checksum . "9b0fe3b0e3ac69755cac70d583e80ffb19b1ff2f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1642902514) (dependencies . ("base" "http-easy")) (description . "4chan image downloader and library to interact with the JSON API.") (implies . ()) (modules . ((lib "4chdl/private/api.rkt") (lib "4chdl/main.rkt") (lib "4chdl/private/http.rkt") (lib "4chdl/private/logger.rkt") (lib "4chdl/private/url.rkt") (lib "4chdl/private/download.rkt"))) (name . "4chdl") (ring . 1) (search-terms . #hasheq((4chan . #t) (:build-success: . #t) (api . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (client . #t) (http . #t) (ring:1 . #t))) (source . "https://github.com/winny-/4chdl.git") (tags . ("4chan" "api" "client" "http")) (versions . #hash((default . #hasheq((checksum . "9b0fe3b0e3ac69755cac70d583e80ffb19b1ff2f") (source . "https://github.com/winny-/4chdl.git") (source_url . "https://github.com/winny-/4chdl.git"))))))) ("ANU-Web-Quantum-RNG" . #hasheq((author . "tetsumi@protonmail.com") (authors . ("tetsumi@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "awqrng" "doc/awqrng@ANU-Web-Quantum-RNG/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ANU-Web-Quantum-RNG.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ANU-Web-Quantum-RNG.txt"))) (checksum . "e8de6a730ecdf8665dfa0e01540b199d51d2667a") (checksum-error . #f) (collection . "ANU-Web-Quantum-RNG") (conflicts . ()) (date-added . 1560204951) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "To fetch true random numbers from the quantum random number generator of the Australian National University (QRNG@ANU).") (implies . ()) (modules . ((lib "ANU-Web-Quantum-RNG/scribblings/awqrng.scrbl") (lib "ANU-Web-Quantum-RNG/main.rkt"))) (name . "ANU-Web-Quantum-RNG") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Quantum . #t) (RNG . #t) (Random . #t) (author:tetsumi@protonmail.com . #t) (ring:1 . #t))) (source . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git") (tags . ("Quantum" "Random" "RNG")) (versions . #hash((default . #hasheq((checksum . "e8de6a730ecdf8665dfa0e01540b199d51d2667a") (source . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git") (source_url . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git"))))))) ("Adapton" . #hasheq((author . "cwolfmentzer@gmail.com hammer@cs.umd.edu") (authors . ("cwolfmentzer@gmail.com" "hammer@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adapton" "doc/adapton@Adapton/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Adapton.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Adapton.txt"))) (checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Adapton: Composable, Demand-Driven Incremental Computation") (implies . ()) (modules . ((lib "adapton/tests.rkt") (lib "adapton/adapton.rkt") (lib "adapton/merge-sort.rkt") (lib "adapton/graphing.rkt") (lib "adapton/tools-for-testing.rkt") (lib "adapton/data-structures.rkt") (lib "adapton/main.rkt") (lib "adapton/adapton.scrbl") (lib "adapton/memo-table-modification-tools.rkt"))) (name . "Adapton") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cwolfmentzer@gmail.com . #t) (author:hammer@cs.umd.edu . #t) (memoization . #t) (ring:1 . #t))) (source . "http://github.com/plum-umd/adapton.racket/tree/master") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (source . "git://github.com/plum-umd/adapton.racket") (source_url . "http://github.com/plum-umd/adapton.racket/tree/master"))))))) ("Agatha" . #hasheq((author . "filhojoseildo@gmail.com") (authors . ("filhojoseildo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "agatha" "doc/agatha@Agatha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Agatha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Agatha.txt"))) (checksum . "de9e340b97dbb22677dc3ba74d6ec8826bf9af90") (checksum-error . #f) (collection . "agatha") (conflicts . ()) (date-added . 1577480524) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Uma linguagem para Logica de primeira ordem") (implies . ()) (modules . ((lib "agatha/main.rkt") (lib "agatha/parser-test.rkt") (lib "agatha/agatha-test4.rkt") (lib "agatha/boolean-evaluator.rkt") (lib "agatha/agatha-test3.rkt") (lib "agatha/scribblings/agatha.scrbl") (lib "agatha/parser-boolean-prefix.rkt") (lib "agatha/parser.rkt") (lib "agatha/reader.rkt") (lib "agatha/symbolize.rkt") (lib "agatha/utils.rkt") (lib "agatha/tokenizer.rkt") (lib "agatha/agatha-test2.rkt") (lib "agatha/expander.rkt") (lib "agatha/agatha-test1.rkt") (lib "agatha/parser-boolean-parentesis.rkt"))) (name . "Agatha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Logic . #t) (author:filhojoseildo@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/joseildofilho/Agatha-Lang.git") (tags . ("Logic")) (versions . #hash((default . #hasheq((checksum . "de9e340b97dbb22677dc3ba74d6ec8826bf9af90") (source . "https://github.com/joseildofilho/Agatha-Lang.git") (source_url . "https://github.com/joseildofilho/Agatha-Lang.git"))))))) ("BSA-drracket-teachpacks" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/BSA-drracket-teachpacks.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1609093465) (dependencies . ()) (description . "The DrRacket teach packs for the Bootstrap plus the files used for Fall 2020. ") (implies . ()) (modules . ()) (name . "BSA-drracket-teachpacks") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:matthias@ccs.neu.edu . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (source_url . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git"))))))) ("DrRacketTheme" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/DrRacketTheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/DrRacketTheme.txt"))) (checksum . "6ee86a2b2824f755bdaf771c788559d9cab7639c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "gui-lib" "pict-lib" "draw-lib")) (description . "set the background image for DrRacket\r\nView -> Set Background") (implies . ()) (modules . ((lib "DrRacketTheme/theme.rkt"))) (name . "DrRacketTheme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (plugin . #t) (ring:1 . #t))) (source . "https://github.com/Syntacticlosure/DrRacketTheme.git") (tags . ("plugin")) (versions . #hash((default . #hasheq((checksum . "6ee86a2b2824f755bdaf771c788559d9cab7639c") (source . "https://github.com/Syntacticlosure/DrRacketTheme.git") (source_url . "https://github.com/Syntacticlosure/DrRacketTheme.git"))))))) ("Drrackgit" . #hasheq((author . "bradley.busching@gmail.com") (authors . ("bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/Drrackgit.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Drrackgit.txt") (test-failure-log . "server/built/test-fail/Drrackgit.txt") (test-success-log . #f))) (checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("libgit2")) (description . "A git plugin for DrRacket.") (implies . ()) (modules . ((lib "Drrackgit/drrackgit.rkt"))) (name . "Drrackgit") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:bradley.busching@gmail.com . #t) (git . #t) (github . #t) (ring:1 . #t))) (source . "http://github.com/bbusching/drrackgit/tree/master") (tags . ("git" "github")) (versions . #hash((default . #hasheq((checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (source . "git://github.com/bbusching/drrackgit") (source_url . "http://github.com/bbusching/drrackgit/tree/master"))))))) ("Fairylog" . #hasheq((author . "pezi_pink@pinksquirrellabs.com") (authors . ("pezi_pink@pinksquirrellabs.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fairylog" "doc/fairylog@Fairylog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Fairylog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Fairylog.txt"))) (checksum . "f0c1d0d82e2ed9ff02486ddd91a0ede5c5483ef7") (checksum-error . #f) (collection . "fairylog") (conflicts . ()) (date-added . 1549919081) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Verilog dialect and source-to-source compiler, with various compile time features and macros.") (implies . ()) (modules . ((lib "fairylog/lang/language-info.rkt") (lib "fairylog/reader.rkt") (lib "fairylog/lang/reader.rkt") (lib "fairylog/main.rkt") (lib "fairylog/expander.rkt") (lib "fairylog/scribblings/fairylog.scrbl") (lib "fairylog/lang/runtime-config.rkt"))) (name . "Fairylog") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pezi_pink@pinksquirrellabs.com . #t) (fpga . #t) (ring:1 . #t) (verilog . #t))) (source . "https://github.com/pezipink/fairylog.git") (tags . ("fpga" "verilog")) (versions . #hash((default . #hasheq((checksum . "f0c1d0d82e2ed9ff02486ddd91a0ede5c5483ef7") (source . "https://github.com/pezipink/fairylog.git") (source_url . "https://github.com/pezipink/fairylog.git"))))))) ("Funktionuckelt" . #hasheq((author . "coluckenbach@adct.com") (authors . ("coluckenbach@adct.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Funktionuckelt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Funktionuckelt.txt"))) (checksum . "c465bd2afced654c4bf08b70740cd2be6a383a62") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "A dark eye-friendly color scheme for Racket") (implies . ()) (modules . ()) (name . "Funktionuckelt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:coluckenbach@adct.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/DondiBronson/Funktionuckelt.git") (tags . ("colorscheme")) (versions . #hash((default . #hasheq((checksum . "c465bd2afced654c4bf08b70740cd2be6a383a62") (source . "https://github.com/DondiBronson/Funktionuckelt.git") (source_url . "https://github.com/DondiBronson/Funktionuckelt.git"))))))) ("GDLisp" . #hasheq((author . "benedek.szilvasy@gmail.com") (authors . ("benedek.szilvasy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gdlisp" "doc/gdlisp@GDLisp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/GDLisp.txt") (test-failure-log . "server/built/test-fail/GDLisp.txt") (test-success-log . #f))) (checksum . "8941375b15bf915513afbb60f8ab0cc963488ee1") (checksum-error . #f) (collection . "gdlisp") (conflicts . ()) (date-added . 1662822007) (dependencies . ("base" "syntax-classes-lib" "file-watchers" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A lisp dialect that compiles to GDScript, for the Godot engine.") (implies . ()) (modules . ((lib "gdlisp/cli.rkt") (lib "gdlisp/scribblings/gdlisp.scrbl") (lib "gdlisp/compiler.rkt") (lib "gdlisp/utils.rkt") (lib "gdlisp/extra-macros.rkt") (lib "gdlisp/examples/example.rkt") (lib "gdlisp/lang/reader.rkt") (lib "gdlisp/examples/hello_world.rkt") (lib "gdlisp/main.rkt") (lib "gdlisp/parser.rkt") (lib "gdlisp/extra-symbols.rkt"))) (name . "GDLisp") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:benedek.szilvasy@gmail.com . #t) (compiler . #t) (games . #t) (lang . #t) (language . #t) (ring:2 . #t))) (source . "https://github.com/eutro/gdlisp.git") (tags . ("compiler" "games" "lang" "language")) (versions . #hash((default . #hasheq((checksum . "8941375b15bf915513afbb60f8ab0cc963488ee1") (source . "https://github.com/eutro/gdlisp.git") (source_url . "https://github.com/eutro/gdlisp.git"))))))) ("GLPK" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glpk" "doc/glpk@GLPK/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/GLPK.txt") (test-failure-log . "server/built/test-fail/GLPK.txt") (test-success-log . #f))) (checksum . "ff20adf1ea0f6792b6a858aa421c79ce22a8fd5d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib" "scribble-math" "typed-racket-more")) (description . "An interface to the Gnu Linear Programming Kit (GLPK)") (implies . ()) (modules . ((lib "glpk/lp-solve.rkt") (lib "glpk/chicken-example.rkt") (lib "glpk/tests/use-lib.rkt") (lib "glpk/tests/tests.rkt") (lib "glpk/glpk.scrbl") (lib "glpk/main.rkt") (lib "glpk/lib.rkt"))) (name . "GLPK") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (linear-programming . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/glpk/tree/master") (tags . ("linear-programming" "math")) (versions . #hash((default . #hasheq((checksum . "ff20adf1ea0f6792b6a858aa421c79ce22a8fd5d") (source . "git://github.com/jbclements/glpk") (source_url . "http://github.com/jbclements/glpk/tree/master"))))))) ("HoLy" . #hasheq((author . "anihirash@gmail.com") (authors . ("anihirash@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/HoLy.txt") (docs . (("main" "HoLy" "doc/HoLy@HoLy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/HoLy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/HoLy.txt"))) (checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (checksum-error . #f) (collection . "HoLy") (conflicts . ()) (dependencies . ("web-server" "scribble-lib" "racket-doc")) (description . "HoLy is simple http library for creating your web-applications and rest api's easier.\r\n\r\nThis library covers only http-server layer(url-dispatching, cookies, parameters). \r\n\r\nLibrary in aplha state - api unstable. \r\nPull requests are welcome!") (implies . ()) (modules . ((lib "HoLy/main.rkt") (lib "HoLy/scribblings/HoLy.scrbl"))) (name . "HoLy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:anihirash@gmail.com . #t) (framework . #t) (http . #t) (rest . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/nihirash/holy.git") (tags . ("api" "framework" "http" "rest" "web")) (versions . #hash((default . #hasheq((checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (source . "https://github.com/nihirash/holy.git") (source_url . "https://github.com/nihirash/holy.git"))))))) ("Ibkre" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "manual" "doc/manual@Ibkre/index.html"))) (failure-log . "server/built/fail/Ibkre.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9874511b6c5b920ffdbe4e40c6ac2cdeec4a9b8c") (checksum-error . #f) (collection . "ibkre") (conflicts . ()) (date-added . 1623958586) (dependencies . ("base" "opt" "bitsyntax" "syndicate" "rackunit-lib" "typed-racket-more" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-typed" "sandbox-lib")) (description . "IBK Actor/Syndicate Library") (implies . ()) (modules . ((lib "ibkre/logging.rkt") (lib "ibkre/data/contract.rkt") (lib "ibkre/util.rkt") (lib "ibkre/coding/msg.rkt") (lib "ibkre/data/tick-attribute.rkt") (lib "ibkre/data/order.rkt") (lib "ibkre/data/msgids.rkt") (lib "ibkre/api/rsp/tws-ready-sig.rkt") (lib "ibkre/api/req/scanner-parameters.rkt") (lib "ibkre/data/bar-size.rkt") (lib "ibkre/api/rsp/tws-inbound-dispatch-sig.rkt") (lib "ibkre/inbound.rkt") (lib "ibkre/api/rsp/dispatch-ground-unit.rkt") (lib "ibkre/txid/gen-tx-rand.rkt") (lib "ibkre/api/msg.rkt") (lib "ibkre/ready-unit.rkt") (lib "ibkre/coding/tick.rkt") (lib "ibkre/coding/primitive.rkt") (lib "ibkre/communicate.rkt") (lib "ibkre/comm/types.rkt") (lib "ibkre/api/req/request.rkt") (lib "ibkre/coding/field.rkt") (lib "ibkre/comm/msgs.rkt") (lib "ibkre/coding/parse.rkt") (lib "ibkre/data/field.rkt") (lib "ibkre/txid/gen-tx-id-sig.rkt") (lib "ibkre/txid/gen-tx-rand-unit.rkt") (lib "ibkre/api/req/tws-msg.rkt") (lib "ibkre/comm/encode.rkt") (lib "ibkre/comm/logging.rkt") (lib "ibkre/api/rsp/tws-inbound-handler-sig.rkt") (lib "ibkre/api/rsp/tws-inbound-handler-unit.rkt") (lib "ibkre/api/rsp/tws-inbound-sig.rkt") (lib "ibkre/scribblings/manual.scrbl") (lib "ibkre/session.rkt") (lib "ibkre/coding/order.rkt") (lib "ibkre/api/req/account.rkt") (lib "ibkre/data/tick.rkt") (lib "ibkre/coding/contract.rkt") (lib "ibkre/coding/decode.rkt") (lib "ibkre/comm/connection.rkt"))) (name . "Ibkre") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (IBK . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/ibkre.git") (tags . ("IBK")) (versions . #hash((default . #hasheq((checksum . "9874511b6c5b920ffdbe4e40c6ac2cdeec4a9b8c") (source . "https://gitlab.com/RayRacine/ibkre.git") (source_url . "https://gitlab.com/RayRacine/ibkre.git"))))))) ("Package-Backward-Compatibility-Checker" . #hasheq((author . "moonsolo@gmail.com") (authors . ("moonsolo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Package-Backward-Compatibility-Checker.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Package-Backward-Compatibility-Checker.txt"))) (checksum . "615d1f61514f0f1348590443f2798eae5c45ebf0") (checksum-error . #f) (collection . "bc-checker") (conflicts . ()) (date-added . 1638206211) (dependencies . ("base" "raco-static-web" "package-analysis" "rebellion" "remote-shell" "pkg-build")) (description . "check backward compatibility of changes to Racket and/or base packages") (implies . ()) (modules . ((lib "bc-checker/conf.rkt") (lib "bc-checker/catalog-updator.rkt") (lib "bc-checker/build.rkt") (lib "bc-checker/main.rkt"))) (name . "Package-Backward-Compatibility-Checker") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:moonsolo@gmail.com . #t) (package . #t) (ring:1 . #t))) (source . "https://github.com/capfredf/pkg-backward-comp-check.git") (tags . ("package")) (versions . #hash((default . #hasheq((checksum . "615d1f61514f0f1348590443f2798eae5c45ebf0") (source . "https://github.com/capfredf/pkg-backward-comp-check.git") (source_url . "https://github.com/capfredf/pkg-backward-comp-check.git"))))))) ("Packrat" . #hasheq((author . "simon.haines@scalardata.com") (authors . ("simon.haines@scalardata.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "packrat" "doc/packrat@Packrat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Packrat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Packrat.txt"))) (checksum . "b439a1d997df7bc6cf5d5c4f349355d84cb89e03") (checksum-error . #f) (collection . "packrat") (conflicts . ()) (date-added . 1561599393) (dependencies . ("base" "rackunit-lib" "srfi-lite-lib" "scribble-lib" "racket-doc")) (description . "A small library of parsing combinators and a syntax for defining parsers based on the portable packrat parsing library by Tony Garnock-Jones.") (implies . ()) (modules . ((lib "packrat/parse.rkt") (lib "packrat/combinator.rkt") (lib "packrat/main.rkt") (lib "packrat/test.rkt") (lib "packrat/scribblings/packrat.scrbl") (lib "packrat/parser-struct.rkt"))) (name . "Packrat") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:simon.haines@scalardata.com . #t) (combinator . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/simonhaines/packrat.git") (tags . ("combinator" "parser")) (versions . #hash((default . #hasheq((checksum . "b439a1d997df7bc6cf5d5c4f349355d84cb89e03") (source . "https://github.com/simonhaines/packrat.git") (source_url . "https://github.com/simonhaines/packrat.git"))))))) ("Qi-Quickscripts" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qi-quickscripts" "doc/qi-quickscripts@Qi-Quickscripts/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Qi-Quickscripts.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Qi-Quickscripts.txt"))) (checksum . "dd4e94ad020f901d10dc7fa83801803e50837277") (checksum-error . #f) (collection . "qi-quickscripts") (conflicts . ()) (date-added . 1636643795) (dependencies . ("base" "quickscript" "scribble-lib" "racket-doc")) (description . "DrRacket integration scripts for the Qi language") (implies . ()) (modules . ((lib "qi-quickscripts/register.rkt") (lib "qi-quickscripts/scribblings/qi-quickscripts.scrbl") (lib "qi-quickscripts/scripts/insert-qi.rkt") (lib "qi-quickscripts/unregister.rkt"))) (name . "Qi-Quickscripts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (Qi . #t) (Quickscript . #t) (author:spdegabrielle@gmail.com . #t) (keybindings . #t) (ring:1 . #t))) (source . "https://github.com/spdegabrielle/Qi-Quickscripts.git#master") (tags . ("DrRacket" "keybindings" "Qi" "Quickscript")) (versions . #hash((default . #hasheq((checksum . "dd4e94ad020f901d10dc7fa83801803e50837277") (source . "https://github.com/spdegabrielle/Qi-Quickscripts.git#master") (source_url . "https://github.com/spdegabrielle/Qi-Quickscripts.git#master"))))))) ("Quaternion" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quaternion" "doc/quaternion@Quaternion/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Quaternion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Quaternion.txt"))) (checksum . "96591d338f423f741f712150d0e20da93500f1e8") (checksum-error . #f) (collection . "quaternion") (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "typed-racket-doc" "racket-doc" "math-doc")) (description . "Quaternion procedures for rotation of vectors and koordinates, avoids gimbal-lock.") (implies . ()) (modules . ((lib "quaternion/quaternion.scrbl") (lib "quaternion/quaternion.rkt") (lib "quaternion/main.rkt"))) (name . "Quaternion") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-success: . #t) (:docs: . #t) (author:andreas8001@hotmail.com . #t) (math . #t) (pict3d . #t) (quaternion . #t) (ring:1 . #t))) (source . "http://github.com/APOS80/Quaternion/tree/master") (tags . ("3D" "math" "pict3d" "quaternion")) (versions . #hash((default . #hasheq((checksum . "96591d338f423f741f712150d0e20da93500f1e8") (source . "git://github.com/APOS80/Quaternion") (source_url . "http://github.com/APOS80/Quaternion/tree/master"))))))) ("SAT" . #hasheq((author . "guannanwei@outlook.com") (authors . ("guannanwei@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SAT" "doc/SAT@SAT/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SAT.txt") (test-failure-log . "server/built/test-fail/SAT.txt") (test-success-log . #f))) (checksum . "68cf0699f447d2c420db3b8a03fe83163af62dbe") (checksum-error . #f) (collection . "SAT") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A simple SAT solver based on DPLL.") (implies . ()) (modules . ((lib "SAT/lib/dpll.rkt") (lib "SAT/lib/utils.rkt") (lib "SAT/scribblings/SAT.scrbl") (lib "SAT/main.rkt") (lib "SAT/lib/sat.rkt") (lib "SAT/test.rkt") (lib "SAT/lib/dpli.rkt") (lib "SAT/lib/parser.rkt") (lib "SAT/lib/dp.rkt") (lib "SAT/lib/dplb.rkt"))) (name . "SAT") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:guannanwei@outlook.com . #t) (ring:1 . #t))) (source . "http://github.com/Kraks/SAT.rkt/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "68cf0699f447d2c420db3b8a03fe83163af62dbe") (source . "git://github.com/Kraks/SAT.rkt") (source_url . "http://github.com/Kraks/SAT.rkt/tree/master"))))))) ("SSE" . #hasheq((author . "qxacur@use.startmail.com") (authors . ("qxacur@use.startmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SSE" "doc/SSE@SSE/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SSE.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/SSE.txt"))) (checksum . "a6858b7ca41a6ab482c170e6223dc8ac4c7f4eb2") (checksum-error . #f) (collection . "SSE") (conflicts . ()) (date-added . 1592455260) (dependencies . ("base" "web-server-lib" "web-server-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Server Sent Events for Racket") (implies . ()) (modules . ((lib "SSE/scribblings/SSE.scrbl") (lib "SSE/sse.rkt") (lib "SSE/main.rkt") (lib "SSE/legacy.rkt"))) (name . "SSE") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:qxacur@use.startmail.com . #t) (html . #t) (http . #t) (ring:1 . #t) (web-server . #t))) (source . "https://gitlab.com/oquijano/sse.git") (tags . ("html" "http" "web-server")) (versions . #hash((default . #hasheq((checksum . "a6858b7ca41a6ab482c170e6223dc8ac4c7f4eb2") (source . "https://gitlab.com/oquijano/sse.git") (source_url . "https://gitlab.com/oquijano/sse.git"))))))) ("XMPP" . #hasheq((author . "racket@navlost.eu") (authors . ("racket@navlost.eu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xmpp-core" "doc/xmpp-core@XMPP/index.html") ("main" "xmpp-errors" "doc/xmpp-errors@XMPP/index.html") ("main" "xmpp" "doc/xmpp@XMPP/index.html") ("main" "xmpp-xep-0030" "doc/xmpp-xep-0030@XMPP/index.html") ("main" "xmpp-iq" "doc/xmpp-iq@XMPP/index.html") ("main" "xmpp-transport" "doc/xmpp-transport@XMPP/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/XMPP.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/XMPP.txt"))) (checksum . "baeffce8726e30ee49e9f1e19d76fb519cc660af") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659176766) (dependencies . ("sasl-lib" "base" "racket-doc" "scribble-lib")) (description . "An XMPP library.") (implies . ()) (modules . ((lib "xmpp/transport.rkt") (lib "xmpp/xep-0030/disco-info.rkt") (lib "xmpp/transport/send-callback.rkt") (lib "xmpp/transport/private/network-io.rkt") (lib "xmpp/transport/main.rkt") (lib "xmpp/xep-0030/xmpp-xep-0030.scrbl") (lib "xmpp/iq/make-iq-reply.rkt") (lib "xmpp/transport/private/xmpp-io.rkt") (lib "xmpp/transport/xmpp-transport.scrbl") (lib "xmpp/errors/service-unavailable.rkt") (lib "xmpp/transport/private/auth.rkt") (lib "xmpp/iq/main.rkt") (lib "xmpp/xep-0030/disco.rkt") (lib "xmpp/xep-0030/main.rkt") (lib "xmpp/core/xmpp-core.scrbl") (lib "xmpp/errors/main.rkt") (lib "xmpp/core/debug.rkt") (lib "xmpp/core/id.rkt") (lib "xmpp/iq/xmpp-iq.scrbl") (lib "xmpp/core.rkt") (lib "xmpp/xmpp.scrbl") (lib "xmpp/errors.rkt") (lib "xmpp/errors/xmpp-errors.scrbl") (lib "xmpp/core/jid.rkt") (lib "xmpp/main.rkt") (lib "xmpp/xep-0030/disco-items.rkt") (lib "xmpp/xep-0030/datatypes.rkt") (lib "xmpp/xep-0030.rkt") (lib "xmpp/xep-0030/private/xmpp-xexpr.rkt") (lib "xmpp/transport/connection.rkt") (lib "xmpp/core/connection-struct.rkt") (lib "xmpp/core/main.rkt") (lib "xmpp/iq.rkt"))) (name . "XMPP") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@navlost.eu . #t) (communication . #t) (im . #t) (messaging . #t) (presence . #t) (ring:1 . #t) (xmpp . #t))) (source . "https://gitlab.com/navlost.eu/xmpp/libraries/racket/xmpp.git#devel") (tags . ("communication" "im" "messaging" "presence" "xmpp")) (versions . #hash((default . #hasheq((checksum . "baeffce8726e30ee49e9f1e19d76fb519cc660af") (source . "https://gitlab.com/navlost.eu/xmpp/libraries/racket/xmpp.git#devel") (source_url . "https://gitlab.com/navlost.eu/xmpp/libraries/racket/xmpp.git#devel"))))))) ("_" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_" "doc/_@_/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_.txt"))) (checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (checksum-error . #f) (collection . "_") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "_/scribblings/_.scrbl") (lib "_/main.rkt"))) (name . "_") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/LeifAndersen/racket-_/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (source . "git://github.com/LeifAndersen/racket-_") (source_url . "http://github.com/LeifAndersen/racket-_/tree/master"))))))) ("_-exp" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_-exp" "doc/_-exp@_-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_-exp.txt"))) (checksum . "7bc80bb0137c92effc29f5d01bbc6a14034712eb") (checksum-error . #f) (collection . "_-exp") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "syntax-color-lib" "scribble-lib" "racket-doc" "scribble-doc" "adjutor")) (description . "A  metalanguage similar to #lang at-exp, but with a configurable command character") (implies . ()) (modules . ((lib "_-exp/current-command-char.rkt") (lib "_-exp/language-info.rkt") (lib "_-exp/runtime-config.rkt") (lib "_-exp/main.rkt") (lib "_-exp/scribblings/_-exp.scrbl"))) (name . "_-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/_-exp.git") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "7bc80bb0137c92effc29f5d01bbc6a14034712eb") (source . "https://github.com/LiberalArtist/_-exp.git") (source_url . "https://github.com/LiberalArtist/_-exp.git"))))))) ("abnf" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/abnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/abnf.txt"))) (checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Attributed BNFs for Scribble") (implies . ()) (modules . ((lib "scribble/abnf.rkt"))) (name . "abnf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bnf . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/samth/abnf/tree/master") (tags . ("bnf" "scribble")) (versions . #hash((default . #hasheq((checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (source . "git://github.com/samth/abnf") (source_url . "http://github.com/samth/abnf/tree/master"))))))) ("acl2s-scribblings" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acl2s" "doc/acl2s@acl2s-scribblings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acl2s-scribblings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/acl2s-scribblings.txt"))) (checksum . "ac77d9f0d87a9e3c3929e86444dfcd4b3d59640c") (checksum-error . #f) (collection . "acl2s-scribblings") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "syntax-classes-lib" "syntax-class-or" "racket-doc" "scribble-lib")) (description . "a scribble document for beginner mode of ACL2s") (implies . ()) (modules . ((lib "acl2s-scribblings/acl2s-printer.rkt") (lib "acl2s-scribblings/acl2s-placeholder.rkt") (lib "acl2s-scribblings/scribblings/acl2s.scrbl") (lib "acl2s-scribblings/util/branch-conditions.rkt") (lib "acl2s-scribblings/util/stx.rkt") (lib "acl2s-scribblings/util/check-generator-predicate.rkt"))) (name . "acl2s-scribblings") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ac77d9f0d87a9e3c3929e86444dfcd4b3d59640c") (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (source_url . "https://github.com/AlexKnauth/acl2s-scribblings.git"))))))) ("acmart" . #hasheq((author . "leif@leifandersen.net Fare") (authors . ("leif@leifandersen.net" "Fare")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/acmart.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "635c23c87b8f75e61375a5cdeeaef23e2afa2a2a") (checksum-error . #f) (collection . (multi)) (conflicts . ("scribble-lib")) (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-text-lib" "scribble-html-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "rackunit-lib")) (description . "#lang for the acmart paper format") (implies . ("scribble-html-lib")) (modules . ((lib "scribble/blueboxes.rkt") (lib "scribble/private/manual-ex.rkt") (lib "scribble/private/provide-structs.rkt") (lib "scribble/lp/lang/lang2.rkt") (lib "scribble/urls.rkt") (lib "scribble/private/manual-mod.rkt") (lib "scribble/private/manual-sprop.rkt") (lib "scriblib/figure.rkt") (lib "scribble/decode-struct.rkt") (lib "scribble/doc/lang/reader.rkt") (lib "scribble/html-render.rkt") (lib "scriblib/footnote.rkt") (lib "scribble/private/manual-proc.rkt") (lib "scribble/render.rkt") (lib "scribble/tag.rkt") (lib "scribble/acmart/lang.rkt") (lib "scribble/basic.rkt") (lib "scribble/private/manual-vars.rkt") (lib "scribble/book/lang.rkt") (lib "scriblib/bibtex.rkt") (lib "scribble/lncs/lang/reader.rkt") (lib "scribble/base/lang/configure-runtime.rkt") (lib "scriblib/gui-eval.rkt") (lib "scribble/jfp/lang/reader.rkt") (lib "scribble/comment-reader.rkt") (lib "scribble/bnf.rkt") (lib "scribble/private/qsloc.rkt") (lib "scribble/latex-render.rkt") (lib "scribble/valid-blueboxes-info.rkt") (lib "scribble/private/manual-class.rkt") (lib "scribble/private/lang-parameters.rkt") (lib "scribble/private/literal-anchor.rkt") (lib "scribble/core.rkt") (lib "scribble/private/manual-tech.rkt") (lib "scribble/lp2.rkt") (lib "scribble/run.rkt") (lib "scribble/doclang2.rkt") (lib "scribble/eval.rkt") (lib "scribble/lp-include.rkt") (lib "scribble/private/doc-begin.rkt") (lib "scriblib/render-cond.rkt") (lib "scribble/private/on-demand.rkt") (lib "scribble/report/lang/reader.rkt") (lib "scribble/sigplan/lang.rkt") (lib "scribble/render-struct.rkt") (lib "scribble/elsarticle/lang.rkt") (lib "help/help.rkt") (lib "scribble/manual/lang.rkt") (lib "scribble/lp/lang/lang.rkt") (lib "scribble/doclang.rkt") (lib "scribble/provide-doc-transform.rkt") (lib "scribble/private/defaults.rkt") (lib "scribble/private/manual-history.rkt") (lib "scribble/private/manual-bind.rkt") (lib "scribble/private/run-pdflatex.rkt") (lib "scribble/config.rkt") (lib "scribble/private/serialize.rkt") (lib "scribble/private/render-utils.rkt") (lib "scribble/lp/lang/reader.rkt") (lib "scribble/racket.rkt") (lib "scribble/acmart/lang/reader.rkt") (lib "scribble/private/manual-code.rkt") (lib "scribble/private/manual-bib.rkt") (lib "scribble/latex-properties.rkt") (lib "scribble/acmart.rkt") (lib "scribble/lncs/lang.rkt") (lib "scribble/pdf-render.rkt") (lib "scribble/doc/main.rkt") (lib "scribble/book/lang/reader.rkt") (lib "scribble/jfp/lang.rkt") (lib "scribble/manual.rkt") (lib "scriblib/book-index.rkt") (lib "scribble/sigplan/lang/reader.rkt") (lib "scribble/private/manual-utils.rkt") (lib "scribble/private/manual-defaults.rkt") (lib "scribble/lp/lang/common.rkt") (lib "scribble/xref.rkt") (lib "scribble/private/manual-scheme.rkt") (lib "scribble/latex-prefix.rkt") (lib "scriblib/private/counter.rkt") (lib "scribble/srcdoc.rkt") (lib "scribble/base/lang/reader.rkt") (lib "scribble/lp.rkt") (lib "scribble/private/lp.rkt") (lib "scriblib/autobib.rkt") (lib "scribble/private/manual-unit.rkt") (lib "scribble/elsarticle/lang/reader.rkt") (lib "scribble/example.rkt") (lib "scribble/contract-render.rkt") (lib "scriblib/private/gui-eval-exn.rkt") (lib "scribble/extract.rkt") (lib "scribble/private/tag.rkt") (lib "scribble/doc/reader.rkt") (lib "scribble/markdown-render.rkt") (lib "scribble/private/latex-index.rkt") (lib "scribble/private/indirect-renderer.rkt") (lib "scribble/manual-struct.rkt") (lib "scribble/base-render.rkt") (lib "scribble/struct.rkt") (lib "scribble/examples.rkt") (lib "scribble/private/manual-method.rkt") (lib "scribble/scheme.rkt") (lib "scribble/private/manual-form.rkt") (lib "help/search.rkt") (lib "scribble/report/lang.rkt") (lib "scribble/search.rkt") (lib "scribble/decode.rkt") (lib "scribble/private/manual-class-struct.rkt") (lib "scribble/sigplan.rkt") (lib "scribble/private/manual-style.rkt") (lib "scribble/text-render.rkt") (lib "scribble/jfp.rkt") (lib "scribble/html-properties.rkt") (lib "scribble/base.rkt") (lib "scribble/base/lang.rkt") (lib "scribble/manual/lang/reader.rkt"))) (name . "acmart") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:Fare . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t))) (source . "http://github.com/racket/scribble/tree/master?path=scribble-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "635c23c87b8f75e61375a5cdeeaef23e2afa2a2a") (source . "git://github.com/racket/scribble?path=scribble-lib") (source_url . "http://github.com/racket/scribble/tree/master?path=scribble-lib"))))))) ("acmsmall" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acmsmall" "doc/acmsmall@acmsmall/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acmsmall.txt") (test-failure-log . "server/built/test-fail/acmsmall.txt") (test-success-log . #f))) (checksum . "15a951e4dff06856862d2a87afd032b983a705be") (checksum-error . #f) (collection . "scribble") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Port of the acmsmall style to Scribble") (implies . ()) (modules . ((lib "scribble/example.scrbl") (lib "scribble/acmsmall.scrbl") (lib "scribble/download.rkt") (lib "scribble/acmsmall.rkt") (lib "scribble/example-bib.rkt"))) (name . "acmsmall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/stamourv/acmsmall-scribble/tree/master") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "15a951e4dff06856862d2a87afd032b983a705be") (source . "git://github.com/stamourv/acmsmall-scribble") (source_url . "http://github.com/stamourv/acmsmall-scribble/tree/master"))))))) ("adjutor" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adjutor" "doc/adjutor@adjutor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/adjutor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/adjutor.txt"))) (checksum . "5a9ae8570213cfffde644ecf405df500490de05c") (checksum-error . #f) (collection . "adjutor") (conflicts . ()) (dependencies . ("base" "static-rename-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-spec" "scribble-doc")) (description . "A helper library") (implies . ()) (modules . ((lib "adjutor/unstable/link-change-evt.rkt") (lib "adjutor/scribblings/unstable/todo.scrbl") (lib "adjutor/stable/in-value-star.rkt") (lib "adjutor/scribblings/stable.scrbl") (lib "adjutor/stable/when-unless.rkt") (lib "adjutor/stable/environment-variables.rkt") (lib "adjutor/stable/rx.rkt") (lib "adjutor/stable/serialize.rkt") (lib "adjutor/scribblings/adjutor.scrbl") (lib "adjutor/unstable/test.rkt") (lib "adjutor/unstable/check-args.rkt") (lib "adjutor/unstable.rkt") (lib "adjutor/unstable/test-link-change-evt.rkt") (lib "adjutor/stable/for.rkt") (lib "adjutor/scribblings/unstable/link-change-evt.scrbl") (lib "adjutor/unstable/find-executable-path.rkt") (lib "adjutor/stable/misc.rkt") (lib "adjutor/stable/define-star.rkt") (lib "adjutor/scribblings/unstable.scrbl") (lib "adjutor/scribblings/unstable/find-executable-path.scrbl") (lib "adjutor/unstable/structure.rkt") (lib "adjutor/racket/base/minus.rkt") (lib "adjutor/main.rkt") (lib "adjutor/stable/require-provide.rkt") (lib "adjutor/scribblings/utils.rkt") (lib "adjutor/unstable/todo.rkt"))) (name . "adjutor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (sugar . #t) (util . #t) (utility . #t))) (source . "https://github.com/LiberalArtist/adjutor.git") (tags . ("sugar" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "5a9ae8570213cfffde644ecf405df500490de05c") (source . "https://github.com/LiberalArtist/adjutor.git") (source_url . "https://github.com/LiberalArtist/adjutor.git"))))))) ("admiral-edu-server" . #hasheq((author . "clements@racket-lang.org josephmcollard@gmail.com") (authors . ("clements@racket-lang.org" "josephmcollard@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/admiral-edu-server.txt") (test-failure-log . "server/built/test-fail/admiral-edu-server.txt") (test-success-log . #f))) (checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws" "base" "db-lib" "net-lib" "typed-racket-lib" "web-server-lib" "yaml" "rackunit-lib" "typed-racket-more")) (description . "The Racket code associated with the Captain Teach server") (implies . ()) (modules . ((lib "admiral-edu/pages/assignments.rkt") (lib "admiral-edu/pages/typed-xml.rkt") (lib "admiral-edu/pages/submit.rkt") (lib "admiral-edu/pages/dependencies.rkt") (lib "admiral-edu/pages/assignments/list.rkt") (lib "admiral-edu/authoring/next-action.rkt") (lib "admiral-edu/ct-session.rkt") (lib "admiral-edu/util/failure.rkt") (lib "admiral-edu/pages/feedback.rkt") (lib "admiral-edu/pages/assignments/student-view.rkt") (lib "admiral-edu/pages/author.rkt") (lib "admiral-edu/database/mysql/migrate-0-1.rkt") (lib "admiral-edu/temporary-hacks.rkt") (lib "admiral-edu/pages/next.rkt") (lib "admiral-edu/auth/google-openidc.rkt") (lib "admiral-edu/storage/cloud-storage.rkt") (lib "admiral-edu/authoring/hold-for-review-handler.rkt") (lib "admiral-edu/pages/index.rkt") (lib "admiral-edu/database/mysql/typed-db.rkt") (lib "admiral-edu/database/mysql/review.rkt") (lib "admiral-edu/database/mysql.rkt") (lib "admiral-edu/util/roster.rkt") (lib "admiral-edu/configuration.rkt") (lib "admiral-edu/captain-teach.rkt") (lib "admiral-edu/database/mysql/submission.rkt") (lib "admiral-edu/database/mysql/assignment.rkt") (lib "admiral-edu/paths.rkt") (lib "admiral-edu/pages/review.rkt") (lib "admiral-edu/logging.rkt") (lib "admiral-edu/pages/export.rkt") (lib "admiral-edu/database/mysql/migrate.rkt") (lib "admiral-edu/authoring/three-condition-study.rkt") (lib "admiral-edu/pages/errors.rkt") (lib "admiral-edu/pages/browse.rkt") (lib "admiral-edu/pages/assignments/status.rkt") (lib "admiral-edu/storage/storage.rkt") (lib "admiral-edu/util/common.rkt") (lib "admiral-edu/authoring/util.rkt") (lib "admiral-edu/pages/file-container-helpers.rkt") (lib "admiral-edu/database/mysql/class.rkt") (lib "admiral-edu/database/mysql/user.rkt") (lib "admiral-edu/util/file-extension-type.rkt") (lib "admiral-edu/pages/assignments/action.rkt") (lib "admiral-edu/pages/assignments/dashboard.rkt") (lib "admiral-edu/database/mysql/common.rkt") (lib "admiral-edu/authoring/typed-yaml.rkt") (lib "admiral-edu/pages/roster.rkt") (lib "admiral-edu/util/basic-types.rkt") (lib "admiral-edu/email/email.rkt") (lib "admiral-edu/authoring/assignment-parser.rkt") (lib "admiral-edu/database/mysql/migrate-2-3.rkt") (lib "admiral-edu/dispatch-typed.rkt") (lib "admiral-edu/database/mysql/system.rkt") (lib "admiral-edu/pages/path-xexprs.rkt") (lib "admiral-edu/authoring/assignment.rkt") (lib "admiral-edu/base.rkt") (lib "admiral-edu/authoring/assignment-structs.rkt") (lib "admiral-edu/database/mysql/role.rkt") (lib "admiral-edu/pages/templates.rkt") (lib "admiral-edu/database/mysql/migrate-1-2.rkt") (lib "admiral-edu/pages/responses.rkt") (lib "admiral-edu/util/failure-untyped.rkt") (lib "admiral-edu/dispatch.rkt") (lib "admiral-edu/storage/local-storage.rkt") (lib "admiral-edu/storage/storage-basic-tr.rkt") (lib "admiral-edu/database/mysql/untyped-db.rkt") (lib "admiral-edu/util/authorized.rkt") (lib "admiral-edu/pages/download.rkt") (lib "admiral-edu/database/mysql/roles.rkt") (lib "admiral-edu/util/config-file-reader.rkt") (lib "admiral-edu/tests/test-configuration.rkt"))) (name . "admiral-edu-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (author:josephmcollard@gmail.com . #t) (captain-teach . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/admiral-edu-server/tree/master") (tags . ("captain-teach")) (versions . #hash((default . #hasheq((checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (source . "git://github.com/jbclements/admiral-edu-server") (source_url . "http://github.com/jbclements/admiral-edu-server/tree/master"))))))) ("advent-of-code" . #hasheq((author . "benedek.szilvasy@gmail.com") (authors . ("benedek.szilvasy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "advent-of-code" "doc/advent-of-code@advent-of-code/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/advent-of-code.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/advent-of-code.txt"))) (checksum . "b3d7d8f86a7a59a006b6d65cfd8bc5a5f9369c05") (checksum-error . #f) (collection . "advent-of-code") (conflicts . ()) (date-added . 1637502612) (dependencies . ("base" "net-lib" "http-easy" "scribble-lib" "racket-doc" "net-doc")) (description . "Package for fetching Advent of Code input.") (implies . ()) (modules . ((lib "advent-of-code/answer.rkt") (lib "advent-of-code/meta.rkt") (lib "advent-of-code/scribblings/advent-of-code.scrbl") (lib "advent-of-code/input.rkt") (lib "advent-of-code/request.rkt") (lib "advent-of-code/main.rkt"))) (name . "advent-of-code") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (advent-of-code . #t) (author:benedek.szilvasy@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/eutro/advent-of-code-racket.git#master") (tags . ("advent-of-code")) (versions . #hash((default . #hasheq((checksum . "b3d7d8f86a7a59a006b6d65cfd8bc5a5f9369c05") (source . "https://github.com/eutro/advent-of-code-racket.git#master") (source_url . "https://github.com/eutro/advent-of-code-racket.git#master"))))))) ("affix" . #hasheq((author . "hello@morcmarc.com") (authors . ("hello@morcmarc.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "affix" "doc/affix@affix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/affix.txt") (test-failure-log . "server/built/test-fail/affix.txt") (test-success-log . #f))) (checksum . "32a8e88e8547227d473013d8f90f41f6b5665b69") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket" "rackunit-lib" "scribble-lib")) (description . "Managing Racket application state") (implies . ()) (modules . ((lib "affix/base.rkt") (lib "affix/affix.scrbl") (lib "example/server.rkt") (lib "affix/main.rkt") (lib "example/config.rkt") (lib "example/main.rkt") (lib "affix/state.rkt"))) (name . "affix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hello@morcmarc.com . #t) (components . #t) (lifecycle . #t) (mount . #t) (ring:1 . #t) (state . #t))) (source . "https://github.com/morcmarc/affix.git") (tags . ("components" "lifecycle" "mount" "state")) (versions . #hash((default . #hasheq((checksum . "32a8e88e8547227d473013d8f90f41f6b5665b69") (source . "https://github.com/morcmarc/affix.git") (source_url . "https://github.com/morcmarc/affix.git"))))))) ("afl" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "afl" "doc/afl@afl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/afl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/afl.txt"))) (checksum . "a51e609615f7645d773a726b225d3356b751d017") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622133243) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples")) (description . "a lang-extension that provides rackjure-like anonymous function literals") (implies . ()) (modules . ((lib "afl/tests/test-afl-at-exp-racket.rkt") (lib "afl/tests/test-afl-racket.rkt") (lib "afl/lang/reader.rkt") (lib "afl/lang/language-info.rkt") (lib "afl/tests/test-afl-scribble.rkt") (lib "afl/reader.rkt") (lib "afl/lang/runtime-config.rkt") (lib "afl/docs/afl.scrbl"))) (name . "afl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (sugar . #t) (syntax . #t))) (source . "https://github.com/AlexKnauth/afl.git#master") (tags . ("lambda" "lang-extension" "sugar" "syntax")) (versions . #hash((default . #hasheq((checksum . "a51e609615f7645d773a726b225d3356b751d017") (source . "https://github.com/AlexKnauth/afl.git#master") (source_url . "https://github.com/AlexKnauth/afl.git#master"))))))) ("aful" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aful" "doc/aful@aful/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aful.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aful.txt"))) (checksum . "e7f7270bdb70708f58bbda27ffad07509085e5fe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799357) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "phc-toolkit" "scribble-enhanced" "scribble-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples" "scribble-doc")) (description . "A fork of #lang afl which also supports #lang aflu/unhygienic.") (implies . ()) (modules . ((lib "aful/reader.rkt") (lib "aful/tests/test-aful-scribble.rkt") (lib "aful/lang/language-info.rkt") (lib "aful/tests/test-aful-at-exp-racket.rkt") (lib "aful/unhygienic/lang/language-info.rkt") (lib "aful/unhygienic/lang/reader.rkt") (lib "aful/lang/runtime-config.rkt") (lib "aful/tests/test-aful-racket.rkt") (lib "aful/unhygienic/lang/runtime-config.rkt") (lib "aful/unhygienic/hygienic-reader-extension--extend-reader--unhygienic.rkt") (lib "aful/lang/reader.rkt") (lib "aful/docs/aful.scrbl") (lib "aful/scribble-enhanced.rkt"))) (name . "aful") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/aful.git#unhygienic") (tags . ("lambda" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "e7f7270bdb70708f58bbda27ffad07509085e5fe") (source . "https://github.com/jsmaniac/aful.git#unhygienic") (source_url . "https://github.com/jsmaniac/aful.git#unhygienic"))))))) ("agile" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "agile" "doc/agile@agile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/agile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/agile.txt"))) (checksum . "18c2c50e96ead195190c26dab8b79f7fecbc72ea") (checksum-error . #f) (collection . "agile") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "#lang agile ;; == (require (for-syntax racket/base syntax/parse))") (implies . ()) (modules . ((lib "agile/main.rkt") (lib "agile/scribblings/agile.scrbl") (lib "agile/lang/reader.rkt"))) (name . "agile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (agile . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/agile.git") (tags . ("agile")) (versions . #hash((default . #hasheq((checksum . "18c2c50e96ead195190c26dab8b79f7fecbc72ea") (source . "https://github.com/bennn/agile.git") (source_url . "https://github.com/bennn/agile.git"))))))) ("al2-test-runner" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "al2-test-runner" "doc/al2-test-runner@al2-test-runner/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/al2-test-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/al2-test-runner.txt"))) (checksum . "b6757271932151dff6507ee6f1b690d0268da808") (checksum-error . #f) (collection . "al2-test-runner") (conflicts . ()) (date-added . 1598053618) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "Alternative way of running rackunit tests") (implies . ()) (modules . ((lib "al2-test-runner/main.rkt") (lib "al2-test-runner/scribblings/al2-test-runner.scrbl"))) (name . "al2-test-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/alex-hhh/al2-test-runner.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "b6757271932151dff6507ee6f1b690d0268da808") (source . "https://github.com/alex-hhh/al2-test-runner.git") (source_url . "https://github.com/alex-hhh/al2-test-runner.git"))))))) ("alexis-collection-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/alexis-collection-lens.txt") (docs . (("main" "alexis-collection-lens" "doc/alexis-collection-lens@alexis-collection-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collection-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-collection-lens.txt"))) (checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (checksum-error . #f) (collection . "alexis") (conflicts . ()) (dependencies . ("alexis-collections" "base" "curly-fn" "lens" "scribble-lib" "at-exp-lib" "cover" "cover-coveralls" "doc-coverage" "rackunit-lib" "racket-doc")) (description . "Deprecated. Use the collections-lens package instead.") (implies . ()) (modules . ((lib "alexis/collection/lens/private/sandbox.rkt") (lib "alexis/scribblings/main.scrbl") (lib "alexis/collection/lens/private/test/doc-coverage.rkt") (lib "alexis/collection/lens.rkt"))) (name . "alexis-collection-lens") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (source . "git://github.com/lexi-lambda/alexis-collection-lens.git") (source_url . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master"))))))) ("alexis-collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-collections" "doc/alexis-collections@alexis-collections/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collections.txt") (test-failure-log . "server/built/test-fail/alexis-collections.txt") (test-success-log . #f))) (checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("alexis-util" "base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the collections package instead.") (implies . ("collections")) (modules . ((lib "alexis/collection/private/test/dict.rkt") (lib "alexis/collection/private/test/collection.rkt") (lib "alexis/scribblings/alexis-collections.scrbl") (lib "alexis/collection/private/test/contract.rkt") (lib "alexis/collection.rkt") (lib "alexis/collection/private/test/sequence-lib.rkt") (lib "alexis/collection/private/test/sequence.rkt") (lib "alexis/collection/private/test/match.rkt"))) (name . "alexis-collections") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (source . "git://github.com/lexi-lambda/racket-alexis-collections") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master"))))))) ("alexis-multicast" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-multicast" "doc/alexis-multicast@alexis-multicast/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-multicast.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-multicast.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "alexis-util" "rackunit-lib" "cover" "cover-coveralls" "racket-doc" "scribble-lib")) (description . "One-to-many buffered  asynchronous channels") (implies . ()) (modules . ((lib "alexis/private/test/multicast.rkt") (lib "alexis/scribblings/alexis-multicast.scrbl") (lib "alexis/multicast.rkt"))) (name . "alexis-multicast") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast"))))))) ("alexis-pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-pvector" "doc/alexis-pvector@alexis-pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-pvector.txt"))) (checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("alexis-collections" "base" "pvector" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the pvector package instead.") (implies . ("pvector")) (modules . ((lib "alexis/private/test/main.rkt") (lib "alexis/scribblings/alexis-pvector.scrbl") (lib "alexis/pvector.rkt"))) (name . "alexis-pvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (source . "git://github.com/lexi-lambda/racket-alexis-pvector") (source_url . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master"))))))) ("alexis-util" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-util" "doc/alexis-util@alexis-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-util.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "match-plus" "scribble-lib" "static-rename" "threading" "typed-racket-lib" "rackunit-lib" "at-exp-lib" "racket-doc" "typed-racket-doc" "sandbox-lib")) (description . "Various utilities and helper functions I've found useful") (implies . ()) (modules . ((lib "alexis/util/renamed.rkt") (lib "alexis/private/test/struct.rkt") (lib "alexis/util/threading.rkt") (lib "alexis/scribblings/alexis-util-untyped.scrbl") (lib "alexis/scribblings/alexis-util-extras.scrbl") (lib "alexis/scribblings/alexis-util.scrbl") (lib "alexis/util/struct.rkt") (lib "alexis/util/comparator.rkt") (lib "alexis/util/match.rkt") (lib "alexis/util/abbreviations.rkt") (lib "alexis/scribblings/alexis-util-typed.scrbl") (lib "typed/alexis/bool.rkt") (lib "typed/alexis/util/comparator.rkt") (lib "alexis/util/wrap.rkt") (lib "alexis/private/test/comparator.rkt") (lib "alexis/bool.rkt"))) (name . "alexis-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util"))))))) ("alexknauth-music" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-music.txt") (test-failure-log . "server/built/test-fail/alexknauth-music.txt") (test-success-log . #f))) (checksum . "e9dc2e3654d59d6eedbec3dfe67db77d0f8b0d16") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1653495963) (dependencies . ("base" "agile" "collections-lib" "htdp-lib" "math-lib" "graph" "txexpr" "reprovide-lang" "rsound" "unstable-lib" "at-exp-lib" "rackunit-lib")) (description . "Some stuff for representing music and music theory") (implies . ()) (modules . ((lib "music/data/time/measures.rkt") (lib "music/notation/musicxml/read/score.rkt") (lib "music/data/chord/chord.rkt") (lib "music/data/tuning/scale-tuning.rkt") (lib "music/data/chord/infer-chord.rkt") (lib "music/data/time/time-signature.rkt") (lib "music/notation/musicxml/read/musicxml-file.rkt") (lib "music/data/note/note.rkt") (lib "music/util/defs.rkt") (lib "music/data/musical-set-theory/pitch-class-set.rkt") (lib "music/notation/image/chord-chart.rkt") (lib "music/data/score/main.rkt") (lib "music/data/chord/infer-segment-chord.rkt") (lib "music/data/score/key-signature.rkt") (lib "music/notation/musicxml/read/metadata.rkt") (lib "music/util/txexpr.rkt") (lib "music/data/instrument/main.rkt") (lib "music/data/instrument/string-spec.rkt") (lib "music/data/note/note-there.rkt") (lib "music/data/note/main.rkt") (lib "music/notation/musicxml/voice-assign.rkt") (lib "music/data/time/main.rkt") (lib "music/notation/rsound/scale-tuning.rkt") (lib "music/data/score/score.rkt") (lib "music/data/instrument/chord-fingering.rkt") (lib "music/notation/musicxml/score.rkt") (lib "music/notation/lilypond/lilypond-file.rkt") (lib "music/util/filter-maximal.rkt") (lib "music/data/scale/main.rkt") (lib "music/notation/musicxml/harmony-element.rkt") (lib "music/data/instrument/fingering.rkt") (lib "music/notation/musicxml/metadata.rkt") (lib "music/data/note/note-held.rkt") (lib "music/data/note/note-class.rkt") (lib "music/data/chord/chord-symbol.rkt") (lib "music/data/chord/partition-point.rkt") (lib "music/data/chord/main.rkt") (lib "music/data/scale/scale-note.rkt") (lib "music/data/musical-set-theory/forte-number.rkt") (lib "music/data/musical-set-theory/pitch-class.rkt") (lib "music/data/time/duration.rkt") (lib "music/util/define-product-combinations.rkt") (lib "music/data/chord/infer-segmentation.rkt") (lib "music/data/scale/scale-note-held.rkt") (lib "music/notation/musicxml/musicxml-file.rkt") (lib "music/data/time/position.rkt") (lib "music/data/time/tempo.rkt") (lib "music/data/score/clef.rkt") (lib "music/notation/musicxml/clef.rkt") (lib "music/data/score/metadata.rkt") (lib "music/example/Bach-Goldberg-Canone-alla-Quarta.rkt") (lib "music/data/time/time-period.rkt") (lib "music/data/instrument/add-guitar-part.rkt") (lib "music/notation/rsound/frequency.rkt") (lib "music/data/scale/scale.rkt") (lib "music/demo/Bach-Goldberg-Canone-alla-Quarta.rkt"))) (name . "alexknauth-music") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:alexander@knauth.org . #t) (composition . #t) (music . #t) (musicxml . #t) (ring:1 . #t) (sound . #t))) (source . "https://github.com/AlexKnauth/music.git") (tags . ("audio" "composition" "music" "musicxml" "sound")) (versions . #hash((default . #hasheq((checksum . "e9dc2e3654d59d6eedbec3dfe67db77d0f8b0d16") (source . "https://github.com/AlexKnauth/music.git") (source_url . "https://github.com/AlexKnauth/music.git"))))))) ("alexknauth-my-object" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-object" "doc/my-object@alexknauth-my-object/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-my-object.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexknauth-my-object.txt"))) (checksum . "62e46a159c8a5391e13e71f1be5af28ab727b2ba") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens" "hash-lambda" "kw-utils" "unstable-lib" "rackunit-lib" "scribble-lib" "racket-doc" "heresy")) (description . "my version of objects, inspired by \"things\" from heresy") (implies . ()) (modules . ((lib "my-object/main.rkt") (lib "my-object/docs/my-object.scrbl") (lib "my-object/my-object.rkt") (lib "my-object/stuff.rkt"))) (name . "alexknauth-my-object") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/my-object/tree/master") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "62e46a159c8a5391e13e71f1be5af28ab727b2ba") (source . "git://github.com/AlexKnauth/my-object") (source_url . "http://github.com/AlexKnauth/my-object/tree/master"))))))) ("algebraic" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "algebraic" "doc/algebraic@algebraic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/algebraic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/algebraic.txt"))) (checksum . "706b2d01ab735a01e372c33da49995339194e024") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1549106222) (dependencies . ("base" "draw-lib" "pict-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib" "texmath")) (description . "Algebraic Racket") (implies . ()) (modules . ((lib "algebraic/scribblings/algebraic-function.scrbl") (lib "algebraic/racket/base.rkt") (lib "algebraic/data/monoid.rkt") (lib "algebraic/scribblings/algebraic-tutorial-core.scrbl") (lib "algebraic/racket/base/forms.rkt") (lib "algebraic/data/truthy.rkt") (lib "algebraic/scribblings/algebraic-includes.rkt") (lib "algebraic/control/monad.rkt") (lib "algebraic/data.rkt") (lib "algebraic/product.rkt") (lib "algebraic/scribblings/algebraic-class-base.scrbl") (lib "algebraic/data/values.rkt") (lib "algebraic/scribblings/algebraic-class-core.scrbl") (lib "algebraic/scribblings/algebraic-tutorial-host.scrbl") (lib "algebraic/linter.rkt") (lib "algebraic/scribblings/algebraic-racket.scrbl") (lib "algebraic/data/functor.rkt") (lib "algebraic/data/maybe.rkt") (lib "algebraic/control/applicative.rkt") (lib "algebraic/macro-tests.rkt") (lib "algebraic/model/ext.rkt") (lib "algebraic/data/box.rkt") (lib "algebraic/data/list.rkt") (lib "algebraic/syntax-list.rkt") (lib "algebraic/class.rkt") (lib "algebraic/base.rkt") (lib "algebraic/data/event.rkt") (lib "algebraic/model/core.rkt") (lib "algebraic/racket/base/linted.rkt") (lib "algebraic/racket/base/forms-tests.rkt") (lib "algebraic/model/host.rkt") (lib "algebraic/scribblings/algebraic-syntax-list.scrbl") (lib "algebraic/sum.rkt") (lib "algebraic/syntax.rkt") (lib "algebraic/class-tests.rkt") (lib "algebraic/macro.rkt") (lib "algebraic/scribblings/algebraic-class.scrbl") (lib "algebraic/scribblings/algebraic-forms.scrbl") (lib "algebraic/scribblings/algebraic-data.scrbl") (lib "algebraic/scribblings/algebraic-tutorial-ext.scrbl") (lib "algebraic/function.rkt") (lib "algebraic/scribblings/algebraic-tutorial.scrbl") (lib "algebraic/scribblings/algebraic.scrbl") (lib "algebraic/scribblings/algebraic-linter.scrbl") (lib "algebraic/scribblings/algebraic-prelude.scrbl") (lib "algebraic/private.rkt") (lib "algebraic/scribblings/algebraic-macro.scrbl") (lib "algebraic/scribblings/algebraic-class-data.scrbl") (lib "algebraic/prelude.rkt") (lib "algebraic/data/semigroup.rkt") (lib "algebraic/pretty.rkt"))) (name . "algebraic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (data-structures . #t) (functional . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-algebraic.git") (tags . ("data-structures" "functional" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "706b2d01ab735a01e372c33da49995339194e024") (source . "https://github.com/dedbox/racket-algebraic.git") (source_url . "https://github.com/dedbox/racket-algebraic.git"))))))) ("algebraic-app" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "algebraic-app" "doc/algebraic-app@algebraic-app/index.html"))) (failure-log . "server/built/fail/algebraic-app.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "60355507f5dc713df68ab962d17b64015be9b06e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1558854737) (dependencies . ("algebraic" "base" "k-infix" "rackunit-lib" "scribble-lib")) (description . "Inline operator syntax for Algebraic Racket") (implies . ()) (modules . ((lib "algebraic/app.rkt") (lib "algebraic/app-tests.rkt") (lib "algebraic/scribblings/algebraic-app.scrbl") (lib "algebraic/scribblings/algebraic-app-includes.rkt"))) (name . "algebraic-app") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (app-syntax . #t) (application . #t) (author:dedbox@gmail.com . #t) (function . #t) (inline . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-algebraic-app.git") (tags . ("app-syntax" "application" "function" "inline")) (versions . #hash((default . #hasheq((checksum . "60355507f5dc713df68ab962d17b64015be9b06e") (source . "https://github.com/dedbox/racket-algebraic-app.git") (source_url . "https://github.com/dedbox/racket-algebraic-app.git"))))))) ("algorithms" . #hasheq((author . "codereport@outlook.com") (authors . ("codereport@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "algorithms" "doc/algorithms@algorithms/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/algorithms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/algorithms.txt"))) (checksum . "4e8474520efd0afd41cf1ac71c1089bac2e261b2") (checksum-error . #f) (collection . "algorithms") (conflicts . ()) (date-added . 1589682444) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package containing many useful algorithms (borrowed from many other programming languages).") (implies . ()) (modules . ((lib "algorithms/main.rkt") (lib "algorithms/scribblings/algorithms.scrbl"))) (name . "algorithms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algorithms . #t) (author:codereport@outlook.com . #t) (lists . #t) (ring:1 . #t))) (source . "https://github.com/codereport/racket-algorithms.git") (tags . ("algorithms" "lists")) (versions . #hash((default . #hasheq((checksum . "4e8474520efd0afd41cf1ac71c1089bac2e261b2") (source . "https://github.com/codereport/racket-algorithms.git") (source_url . "https://github.com/codereport/racket-algorithms.git"))))))) ("alpaca" . #hasheq((author . "oleks.litus@gmail.com") (authors . ("oleks.litus@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/alpaca.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "24e0cebc55d5d82262902a47d2f323f6ea4045d4") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/traido/alpaca-api-rkt.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1652059286) (dependencies . ()) (description . "Racket client for Alpaca API") (implies . ()) (modules . ()) (name . "alpaca") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:oleks.litus@gmail.com . #t) (client-api . #t) (ring:1 . #t) (stocks . #t) (trading . #t))) (source . "https://github.com/traido/alpaca-api-rkt.git") (tags . ("client-api" "stocks" "trading")) (versions . #hash((default . #hasheq((checksum . "24e0cebc55d5d82262902a47d2f323f6ea4045d4") (source . "https://github.com/traido/alpaca-api-rkt.git") (source_url . "https://github.com/traido/alpaca-api-rkt.git"))))))) ("amap" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "amap" "doc/amap@amap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/amap.txt") (test-failure-log . "server/built/test-fail/amap.txt") (test-success-log . #f))) (checksum . "15a49b88386a453ef2ed07b694cf0d62a42211d2") (checksum-error . #f) (collection . "amap") (conflicts . ()) (date-added . 1571985145) (dependencies . ("base" "request" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "Gaode Amap web service API") (implies . ()) (modules . ((lib "amap/main.rkt") (lib "amap/scribblings/amap.scrbl"))) (name . "amap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (amap . #t) (author:yanyingwang1@gmail.com . #t) (gaode . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/amap.git") (tags . ("amap" "gaode")) (versions . #hash((default . #hasheq((checksum . "15a49b88386a453ef2ed07b694cf0d62a42211d2") (source . "https://github.com/yanyingwang/amap.git") (source_url . "https://github.com/yanyingwang/amap.git"))))))) ("anaphoric" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anaphoric" "doc/anaphoric@anaphoric/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anaphoric.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anaphoric.txt"))) (checksum . "c648ec2aad6d2b2ec72acc729143454d1e855cf6") (checksum-error . #f) (collection . "anaphoric") (conflicts . ()) (date-added . 1614453033) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Anaphoric versions of `if`, `when` and `cond`. They bind the value of the condition expression to `it`.") (implies . ()) (modules . ((lib "anaphoric/test/and-let-test.rkt") (lib "anaphoric/amap.rkt") (lib "anaphoric/test/if-let-test.rkt") (lib "anaphoric/aand.rkt") (lib "anaphoric/test/awhen-test.rkt") (lib "anaphoric/scribblings/anaphoric.scrbl") (lib "anaphoric/aif.rkt") (lib "anaphoric/cond-let.rkt") (lib "anaphoric/if-let.rkt") (lib "anaphoric/acond.rkt") (lib "anaphoric/test/amap-test.rkt") (lib "anaphoric/test/aif-test.rkt") (lib "anaphoric/afilter.rkt") (lib "anaphoric/test/acond-test.rkt") (lib "anaphoric/it.rkt") (lib "anaphoric/and-let.rkt") (lib "anaphoric/main.rkt") (lib "anaphoric/test/aand-test.rkt") (lib "anaphoric/test/when-let-test.rkt") (lib "anaphoric/awhen.rkt") (lib "anaphoric/test/afilter-test.rkt") (lib "anaphoric/test/it-test.rkt") (lib "anaphoric/when-let.rkt") (lib "anaphoric/test/cond-let-test.rkt"))) (name . "anaphoric") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/jsmaniac/anaphoric.git#main") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "c648ec2aad6d2b2ec72acc729143454d1e855cf6") (source . "https://github.com/jsmaniac/anaphoric.git#main") (source_url . "https://github.com/jsmaniac/anaphoric.git#main"))))))) ("anarki" . #hasheq((author . "rokitna@hotmail.com arc.racket@akkartik.com zkanfer@gmail.com") (authors . ("rokitna@hotmail.com" "arc.racket@akkartik.com" "zkanfer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anarki" "doc/anarki@anarki/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anarki.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anarki.txt"))) (checksum . "6f3fecdaa46e25b34c22dd01d30b19bd60ef05e5") (checksum-error . #f) (collection . "anarki") (conflicts . ()) (dependencies . ("base" "sha" "racket-doc" "scribble-lib")) (description . "Community-managed variant of the Arc dialect of Lisp") (implies . ()) (modules . ((lib "anarki/lib/racket-lang-demo/racket-deep-dependency.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-application.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-deep-dependency.rkt") (lib "anarki/lang/reader.rkt") (lib "anarki/main.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-library.rkt") (lib "anarki/ac.rkt") (lib "anarki/lib/uuid.rkt") (lib "anarki/brackets.rkt") (lib "anarki/boot.rkt") (lib "anarki/lang/module-begin.rkt") (lib "anarki/scribblings/anarki.scrbl") (lib "anarki/lib/racket-lang-demo/racket-application.rkt") (lib "anarki/lib/ns.rkt"))) (name . "anarki") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:arc.racket@akkartik.com . #t) (author:rokitna@hotmail.com . #t) (author:zkanfer@gmail.com . #t) (language . #t) (ring:1 . #t) (unstable . #t) (web . #t))) (source . "http://github.com/arclanguage/anarki/tree/master") (tags . ("language" "unstable" "web")) (versions . #hash((default . #hasheq((checksum . "6f3fecdaa46e25b34c22dd01d30b19bd60ef05e5") (source . "git://github.com/arclanguage/anarki") (source_url . "http://github.com/arclanguage/anarki/tree/master"))))))) ("andlet" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "andlet-manual" "doc/andlet-manual@andlet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/andlet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/andlet.txt"))) (checksum . "2da90e6a47c2f87c57d05d9bd7bc221677d4b9d5") (checksum-error . #f) (collection . "andlet") (conflicts . ()) (date-added . 1597017052) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Coupling and logic to let and let* forms.") (implies . ()) (modules . ((lib "andlet/private/andlet.rkt") (lib "andlet/andlet-manual.scrbl") (lib "andlet/main.rkt"))) (name . "andlet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://bitbucket.org/derend/andlet.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "2da90e6a47c2f87c57d05d9bd7bc221677d4b9d5") (source . "https://bitbucket.org/derend/andlet.git") (source_url . "https://bitbucket.org/derend/andlet.git"))))))) ("animated-canvas" . #hasheq((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (authors . ("spdegabrielle@gmail.com" "m.douglas.williams@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "animated-canvas" "doc/animated-canvas@animated-canvas/index.html"))) (failure-log . "server/built/fail/animated-canvas.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "53b3c3c861c6d8c899ae71f59b2741673c61f887") (checksum-error . #f) (collection . "animated-canvas") (conflicts . ()) (date-added . 1576854867) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "CONTRIBUTORS welcome. Package converted from PLaneT. \r\nThis library provides an animated-canvas% class that specializes the Gracket canvas% class to provide a simple double-buffered animation capability in Racket. Two demonstration programs are also provided.") (implies . ()) (modules . ((lib "animated-canvas/main.rkt") (lib "animated-canvas/private/examples/animated-insertion-sort.rkt") (lib "animated-canvas/private/animated-canvas.rkt") (lib "animated-canvas/private/examples/animated-bubble-sort.rkt") (lib "animated-canvas/scribblings/animated-canvas.scrbl") (lib "animated-canvas/private/examples/anim.rkt") (lib "animated-canvas/private/lines.rkt"))) (name . "animated-canvas") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (animation . #t) (author:m.douglas.williams@gmail.com . #t) (author:spdegabrielle@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/spdegabrielle/animated-canvas.git") (tags . ("animation" "gui")) (versions . #hash((default . #hasheq((checksum . "53b3c3c861c6d8c899ae71f59b2741673c61f887") (source . "https://github.com/spdegabrielle/animated-canvas.git") (source_url . "https://github.com/spdegabrielle/animated-canvas.git"))))))) ("ansi" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/ansi.txt") (success-log . "server/built/install/ansi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ansi.txt"))) (checksum . "c14081de59bc7273f1f9088a51d6d9c202b2b9d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib")) (description . "ANSI and VT10x escape sequences for Racket.") (implies . ()) (modules . ((lib "ansi/ansi.rkt") (lib "ansi/test-screen-size.rkt") (lib "ansi/private/install.rkt") (lib "ansi/private/tty-raw-extension.rkt") (lib "ansi/main.rkt") (lib "ansi/test-ansi.rkt") (lib "ansi/test-raw.rkt") (lib "ansi/lcd-terminal.rkt") (lib "ansi/test-modes.rkt"))) (name . "ansi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "http://github.com/tonyg/racket-ansi/tree/master") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "c14081de59bc7273f1f9088a51d6d9c202b2b9d0") (source . "github://github.com/tonyg/racket-ansi/master") (source_url . "http://github.com/tonyg/racket-ansi/tree/master"))))))) ("ansi-color" . #hasheq((author . "renato@athaydes.com") (authors . ("renato@athaydes.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ansi-color" "doc/ansi-color@ansi-color/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ansi-color.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ansi-color.txt"))) (checksum . "20363d90fcef9219580ec0d6a78eea834df39d21") (checksum-error . #f) (collection . "ansi-color") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library to make it easy to write colorized and styled output in terminals that support ANSI escape codes (most command lines).") (implies . ()) (modules . ((lib "ansi-color/scribblings/ansi-color.scrbl") (lib "ansi-color/display.rkt") (lib "ansi-color/main.rkt") (lib "ansi-color/demo.rkt"))) (name . "ansi-color") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (author:renato@athaydes.com . #t) (cli . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/renatoathaydes/ansi-color.git") (tags . ("ansi" "cli" "terminal")) (versions . #hash((default . #hasheq((checksum . "20363d90fcef9219580ec0d6a78eea834df39d21") (source . "https://github.com/renatoathaydes/ansi-color.git") (source_url . "https://github.com/renatoathaydes/ansi-color.git"))))))) ("aoc-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aoc-racket" "doc/aoc-racket@aoc-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aoc-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aoc-racket.txt"))) (checksum . "14cae851fe7506b8552066fb746fa5589a6cc258") (checksum-error . #f) (collection . "aoc-racket") (conflicts . ()) (date-added . 1556661319) (dependencies . ("brag-lib" "csp" "srfi-lite-lib" "graph" "base" "scribble-lib" "sugar" "rackunit-lib" "math-lib" "beautiful-racket-lib" "gregor" "debug" "draw-lib" "gui-lib" "rackunit-lib" "racket-doc" "scribble-doc" "rackunit-doc" "at-exp-lib" "math-doc")) (description . "Solutions & explanations — in Racket, of course — for the Advent of Code puzzles") (implies . ()) (modules . ((lib "aoc-racket/2020/23.rkt") (lib "aoc-racket/2017/d14/main.rkt") (lib "aoc-racket/2017/d11/star2.rkt") (lib "aoc-racket/2020/22.rkt") (lib "aoc-racket/2017/d07/main.rkt") (lib "aoc-racket/2020/05.rkt") (lib "aoc-racket/2016/day14/test.rkt") (lib "aoc-racket/2016/day03/lang.rkt") (lib "aoc-racket/2016/day16/input.rkt") (lib "aoc-racket/2017/d10/test2.rkt") (lib "aoc-racket/2017/d02/star2.rkt") (lib "aoc-racket/2017/d21/main.rkt") (lib "aoc-racket/2019/07.rkt") (lib "aoc-racket/2016/day02/test.rkt") (lib "aoc-racket/2020/01.rkt") (lib "aoc-racket/2017/d09/test2.rkt") (lib "aoc-racket/2017/d02/star1.rkt") (lib "aoc-racket/2020/03.rkt") (lib "aoc-racket/2016/day09/input.rkt") (lib "aoc-racket/2016/day18/test.rkt") (lib "aoc-racket/2016/day15/test.rkt") (lib "aoc-racket/2017/d12/star1.rkt") (lib "aoc-racket/2019/25.rkt") (lib "aoc-racket/2016/day20/test.rkt") (lib "aoc-racket/2020/08.rkt") (lib "aoc-racket/2017/d01/main.rkt") (lib "aoc-racket/2020/14.rkt") (lib "aoc-racket/2020/21.rkt") (lib "aoc-racket/2017/d23/star2.rkt") (lib "aoc-racket/2021/12.rkt") (lib "aoc-racket/2016/day22/test.rkt") (lib "aoc-racket/2017/d03/star1.rkt") (lib "aoc-racket/2016/day17/input.rkt") (lib "aoc-racket/2017/d19/star2.rkt") (lib "aoc-racket/2019/07-gen.rkt") (lib "aoc-racket/2016/day18/lang.rkt") (lib "aoc-racket/2019/06.rkt") (lib "aoc-racket/2016/day21/test.rkt") (lib "aoc-racket/2017/d09/star2.rkt") (lib "aoc-racket/2021/02.rkt") (lib "aoc-racket/2019/15.rkt") (lib "aoc-racket/2016/day10/lang.rkt") (lib "aoc-racket/2017/d14/test1.rkt") (lib "aoc-racket/2016/day24/input.rkt") (lib "aoc-racket/day01.rkt") (lib "aoc-racket/2018/05.rkt") (lib "aoc-racket/2017/d07/test1.rkt") (lib "aoc-racket/2016/day16/test-b.rkt") (lib "aoc-racket/2016/day01/lang.rkt") (lib "aoc-racket/2017/d18/main.rkt") (lib "aoc-racket/2017/d11/test1.rkt") (lib "aoc-racket/2016/day23/test.rkt") (lib "aoc-racket/2019/22.rkt") (lib "aoc-racket/2017/d18/main2.rkt") (lib "aoc-racket/day12.rkt") (lib "aoc-racket/day13.rkt") (lib "aoc-racket/2017/d23/star1.rkt") (lib "aoc-racket/2016/day08/lang.rkt") (lib "aoc-racket/2020/07.rkt") (lib "aoc-racket/2016/day04/test.rkt") (lib "aoc-racket/2017/d10/main.rkt") (lib "aoc-racket/2016/day16/lang.rkt") (lib "aoc-racket/day09.rkt") (lib "aoc-racket/2016/day19/test.rkt") (lib "aoc-racket/2017/d06/main.rkt") (lib "aoc-racket/2017/d15/main.rkt") (lib "aoc-racket/2016/day20/input.rkt") (lib "aoc-racket/aoc-racket.scrbl") (lib "aoc-racket/2019/08.rkt") (lib "aoc-racket/2017/d24/test1.rkt") (lib "aoc-racket/day19.rkt") (lib "aoc-racket/2017/d18/test2.rkt") (lib "aoc-racket/2017/d20/star1.rkt") (lib "aoc-racket/2016/day06/test.rkt") (lib "aoc-racket/2018/06.rkt") (lib "aoc-racket/2021/03.rkt") (lib "aoc-racket/2016/day16/input-b.rkt") (lib "aoc-racket/2016/day15/input-b.rkt") (lib "aoc-racket/2021/13.rkt") (lib "aoc-racket/2017/d11/star1.rkt") (lib "aoc-racket/2017/d13/star1.rkt") (lib "aoc-racket/2017/d19/main.rkt") (lib "aoc-racket/2018/03.rkt") (lib "aoc-racket/2020/19.rkt") (lib "aoc-racket/2018/stub.rkt") (lib "aoc-racket/2020/20.rkt") (lib "aoc-racket/2017/d21/star1.rkt") (lib "aoc-racket/2017/d17/star2.rkt") (lib "aoc-racket/2017/d23/main.rkt") (lib "aoc-racket/2016/day21/input.rkt") (lib "aoc-racket/2020/02.rkt") (lib "aoc-racket/2016/day14/lang.rkt") (lib "aoc-racket/2016/day22/lang.rkt") (lib "aoc-racket/day15.rkt") (lib "aoc-racket/2017/d15/test2.rkt") (lib "aoc-racket/2016/day13/test.rkt") (lib "aoc-racket/day10.rkt") (lib "aoc-racket/2017/d10/star1.rkt") (lib "aoc-racket/2017/d14/star1.rkt") (lib "aoc-racket/day17.rkt") (lib "aoc-racket/2016/day10/input.rkt") (lib "aoc-racket/2016/day07/input.rkt") (lib "aoc-racket/2016/day10/test.rkt") (lib "aoc-racket/2016/day09/lang.rkt") (lib "aoc-racket/2017/d08/test2.rkt") (lib "aoc-racket/2017/d05/main.rkt") (lib "aoc-racket/2017/d17/main.rkt") (lib "aoc-racket/day22.rkt") (lib "aoc-racket/2018/07.rkt") (lib "aoc-racket/2020/11.rkt") (lib "aoc-racket/2017/d24/star2.rkt") (lib "aoc-racket/2016/day25/input.rkt") (lib "aoc-racket/2017/d03/test2.rkt") (lib "aoc-racket/2017/d11/test2.rkt") (lib "aoc-racket/main.rkt") (lib "aoc-racket/2017/d09/main.rkt") (lib "aoc-racket/helper.rkt") (lib "aoc-racket/2017/d06/test1.rkt") (lib "aoc-racket/2017/d12/test1.rkt") (lib "aoc-racket/2016/day18/input.rkt") (lib "aoc-racket/2017/d11/main.rkt") (lib "aoc-racket/2016/day24/test.rkt") (lib "aoc-racket/2017/d04/main.rkt") (lib "aoc-racket/2017/d06/star1.rkt") (lib "aoc-racket/2019/09.rkt") (lib "aoc-racket/2017/d03/star2.rkt") (lib "aoc-racket/2016/day17/lang.rkt") (lib "aoc-racket/2016/day14/input.rkt") (lib "aoc-racket/2017/d24/star1.rkt") (lib "aoc-racket/2020/16.rkt") (lib "aoc-racket/2016/day05/lang.rkt") (lib "aoc-racket/2019/16.rkt") (lib "aoc-racket/2017/d13/test2.rkt") (lib "aoc-racket/2017/d03/main.rkt") (lib "aoc-racket/2016/day08/input.rkt") (lib "aoc-racket/2017/d16/test1.rkt") (lib "aoc-racket/2020/24.rkt") (lib "aoc-racket/2021/14.rkt") (lib "aoc-racket/2017/d01/test2.rkt") (lib "aoc-racket/2019/02.rkt") (lib "aoc-racket/2019/24.rkt") (lib "aoc-racket/2017/d14/test2.rkt") (lib "aoc-racket/2017/d13/main.rkt") (lib "aoc-racket/2017/d15/test1.rkt") (lib "aoc-racket/2016/day21/lang.rkt") (lib "aoc-racket/2019/13.rkt") (lib "aoc-racket/2016/day17/test.rkt") (lib "aoc-racket/2017/d17/star1.rkt") (lib "aoc-racket/2019/19.rkt") (lib "aoc-racket/2016/day08/test.rkt") (lib "aoc-racket/2016/day13/input.rkt") (lib "aoc-racket/2017/d22/main.rkt") (lib "aoc-racket/2017/d07/star1.rkt") (lib "aoc-racket/day11.rkt") (lib "aoc-racket/2017/d08/test1.rkt") (lib "aoc-racket/2019/12.rkt") (lib "aoc-racket/2016/day24/lang.rkt") (lib "aoc-racket/2017/d01/star1.rkt") (lib "aoc-racket/2017/d25/star1.rkt") (lib "aoc-racket/2020/25.rkt") (lib "aoc-racket/2018/02.rkt") (lib "aoc-racket/2018/08.rkt") (lib "aoc-racket/2016/day04/input.rkt") (lib "aoc-racket/2020/13.rkt") (lib "aoc-racket/day14.rkt") (lib "aoc-racket/2017/d02/main.rkt") (lib "aoc-racket/2017/d10/star2.rkt") (lib "aoc-racket/2017/aoc-lang.rkt") (lib "aoc-racket/2020/04.rkt") (lib "aoc-racket/2016/day03/lang-b.rkt") (lib "aoc-racket/2016/day02/lang-b.rkt") (lib "aoc-racket/2017/d19/test1.rkt") (lib "aoc-racket/2019/03.rkt") (lib "aoc-racket/2017/d04/test1.rkt") (lib "aoc-racket/2019/10.rkt") (lib "aoc-racket/2016/day23/input.rkt") (lib "aoc-racket/2018/11.rkt") (lib "aoc-racket/2018/10.rkt") (lib "aoc-racket/2017/d13/star2.rkt") (lib "aoc-racket/2017/d20/test1.rkt") (lib "aoc-racket/2017/d22/test2.rkt") (lib "aoc-racket/2019/17.rkt") (lib "aoc-racket/2018/09.rkt") (lib "aoc-racket/2017/d09/test1.rkt") (lib "aoc-racket/2017/d17/test1.rkt") (lib "aoc-racket/2021/01.rkt") (lib "aoc-racket/2018/04.rkt") (lib "aoc-racket/2016/day16/test.rkt") (lib "aoc-racket/2019/04.rkt") (lib "aoc-racket/2017/d12/star2.rkt") (lib "aoc-racket/2017/d08/star1.rkt") (lib "aoc-racket/2016/day12/input.rkt") (lib "aoc-racket/2017/d14/star2.rkt") (lib "aoc-racket/2021/11.rkt") (lib "aoc-racket/2016/day15/input.rkt") (lib "aoc-racket/2019/05.rkt") (lib "aoc-racket/2020/15.rkt") (lib "aoc-racket/day08.rkt") (lib "aoc-racket/2017/d18/test1.rkt") (lib "aoc-racket/2017/d12/test2.rkt") (lib "aoc-racket/2017/d13/test1.rkt") (lib "aoc-racket/2018/01.rkt") (lib "aoc-racket/2021/09.rkt") (lib "aoc-racket/2017/d05/star2.rkt") (lib "aoc-racket/2017/d22/test1.rkt") (lib "aoc-racket/day07.rkt") (lib "aoc-racket/2016/day15/lang.rkt") (lib "aoc-racket/2017/helper.rkt") (lib "aoc-racket/2020/18.rkt") (lib "aoc-racket/2020/06.rkt") (lib "aoc-racket/2017/d16/main.rkt") (lib "aoc-racket/2017/d24/test2.rkt") (lib "aoc-racket/2017/d08/star2.rkt") (lib "aoc-racket/2017/d20/star2.rkt") (lib "aoc-racket/2017/d20/test2.rkt") (lib "aoc-racket/2019/23.rkt") (lib "aoc-racket/2016/day12/test.rkt") (lib "aoc-racket/2016/day04/lang.rkt") (lib "aoc-racket/2017/d02/test2.rkt") (lib "aoc-racket/2019/14test.rkt") (lib "aoc-racket/2016/day05/input.rkt") (lib "aoc-racket/2016/day23/lang.rkt") (lib "aoc-racket/2016/day25/lang.rkt") (lib "aoc-racket/2016/day19/lang.rkt") (lib "aoc-racket/2017/d04/test2.rkt") (lib "aoc-racket/2016/day06/input.rkt") (lib "aoc-racket/day20.rkt") (lib "aoc-racket/2016/day07/lang.rkt") (lib "aoc-racket/2017/d04/star1.rkt") (lib "aoc-racket/2019/01.rkt") (lib "aoc-racket/2021/08.rkt") (lib "aoc-racket/day18.rkt") (lib "aoc-racket/2017/d01/test1.rkt") (lib "aoc-racket/2017/d22/star1.rkt") (lib "aoc-racket/2021/04.rkt") (lib "aoc-racket/2017/d18/star1.rkt") (lib "aoc-racket/2016/day22/input.rkt") (lib "aoc-racket/2017/d03/test1.rkt") (lib "aoc-racket/day16.rkt") (lib "aoc-racket/2017/d12/main.rkt") (lib "aoc-racket/2017/d08/main.rkt") (lib "aoc-racket/2017/d19/test2.rkt") (lib "aoc-racket/2016/day03/test-b.rkt") (lib "aoc-racket/2016/day02/test-b.rkt") (lib "aoc-racket/2017/d06/star2.rkt") (lib "aoc-racket/2017/d25/test1.rkt") (lib "aoc-racket/2016/day01/test.rkt") (lib "aoc-racket/2016/day06/lang.rkt") (lib "aoc-racket/2016/day02/lang.rkt") (lib "aoc-racket/2017/d04/star2.rkt") (lib "aoc-racket/2017/d10/test1.rkt") (lib "aoc-racket/2017/d18/star2.rkt") (lib "aoc-racket/day25.rkt") (lib "aoc-racket/2017/d19/star1.rkt") (lib "aoc-racket/day04.rkt") (lib "aoc-racket/2017/d01/star2.rkt") (lib "aoc-racket/2021/15.rkt") (lib "aoc-racket/2016/day09/test.rkt") (lib "aoc-racket/2017/d25/main.rkt") (lib "aoc-racket/2017/d05/test1.rkt") (lib "aoc-racket/2016/day13/lang.rkt") (lib "aoc-racket/2016/day07/test.rkt") (lib "aoc-racket/2017/d21/star2.rkt") (lib "aoc-racket/day23.rkt") (lib "aoc-racket/day06.rkt") (lib "aoc-racket/day03.rkt") (lib "aoc-racket/2017/d05/star1.rkt") (lib "aoc-racket/2017/d21/test1.rkt") (lib "aoc-racket/2020/17.rkt") (lib "aoc-racket/day24.rkt") (lib "aoc-racket/2021/07.rkt") (lib "aoc-racket/2016/day19/input.rkt") (lib "aoc-racket/2017/d02/test1.rkt") (lib "aoc-racket/2017/d15/star1.rkt") (lib "aoc-racket/2016/day03/test.rkt") (lib "aoc-racket/2017/d22/star2.rkt") (lib "aoc-racket/2019/14.rkt") (lib "aoc-racket/day02.rkt") (lib "aoc-racket/2017/d16/test2.rkt") (lib "aoc-racket/2017/d24/main.rkt") (lib "aoc-racket/day21.rkt") (lib "aoc-racket/2019/20.rkt") (lib "aoc-racket/2020/12.rkt") (lib "aoc-racket/2017/d16/star1.rkt") (lib "aoc-racket/2017/d16/star2.rkt") (lib "aoc-racket/2016/day12/lang.rkt") (lib "aoc-racket/2017/d09/star1.rkt") (lib "aoc-racket/2021/10.rkt") (lib "aoc-racket/2020/09.rkt") (lib "aoc-racket/2020/10.rkt") (lib "aoc-racket/2021/06.rkt") (lib "aoc-racket/2021/05.rkt") (lib "aoc-racket/2017/d06/test2.rkt") (lib "aoc-racket/2017/d05/test2.rkt") (lib "aoc-racket/2019/11.rkt") (lib "aoc-racket/2017/d07/star2.rkt") (lib "aoc-racket/2019/14input.rkt") (lib "aoc-racket/2017/d15/star2.rkt") (lib "aoc-racket/2017/d20/main.rkt") (lib "aoc-racket/2016/day20/lang.rkt") (lib "aoc-racket/2017/d07/test2.rkt") (lib "aoc-racket/day05.rkt"))) (name . "aoc-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (puzzles . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/aoc-racket.git") (tags . ("puzzles")) (versions . #hash((default . #hasheq((checksum . "14cae851fe7506b8552066fb746fa5589a6cc258") (source . "https://git.matthewbutterick.com/mbutterick/aoc-racket.git") (source_url . "https://git.matthewbutterick.com/mbutterick/aoc-racket.git"))))))) ("aosd" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aosd.txt") (test-failure-log . "server/built/test-fail/aosd.txt") (test-success-log . #f))) (checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "x11")) (description . "FFI bindings to the Atheme Project's libaosd") (implies . ()) (modules . ((lib "aosd/aosd-dc.rkt") (lib "aosd/aosd.rkt") (lib "aosd/main.rkt"))) (name . "aosd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-aosd/tree/master") (tags . ("ffi" "graphics")) (versions . #hash((default . #hasheq((checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (source . "github://github.com/takikawa/racket-aosd/master") (source_url . "http://github.com/takikawa/racket-aosd/tree/master"))))))) ("apply" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/apply.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apply.txt"))) (checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (checksum-error . #f) (collection . "apply") (conflicts . ()) (dependencies . ("racket")) (description . "應用序語言") (implies . ()) (modules . ((lib "apply/lang/reader.rkt") (lib "apply/main.rkt"))) (name . "apply") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zaomir@outlook.com . #t) (chinese . #t) (compiler . #t) (lang . #t) (language . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/zaoqil/apply.git?path=apply") (tags . ("chinese" "compiler" "lang" "language" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (source . "https://github.com/zaoqil/apply.git?path=apply") (source_url . "https://github.com/zaoqil/apply.git?path=apply"))))))) ("appveyor-racket" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "appveyor-racket" "doc/appveyor-racket@appveyor-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/appveyor-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/appveyor-racket.txt"))) (checksum . "21f21d99160a0edefd7ceeb001210c88a8af1099") (checksum-error . #f) (collection . "appveyor-racket") (conflicts . ()) (dependencies . ("base" "scribble-lib" "rackunit-lib")) (description . "Help for using AppVeyor with Racket projects") (implies . ()) (modules . ((lib "appveyor-racket/main.rkt") (lib "appveyor-racket/scribblings/appveyor-racket.scrbl"))) (name . "appveyor-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/liberalartist/appveyor-racket.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "21f21d99160a0edefd7ceeb001210c88a8af1099") (source . "https://github.com/liberalartist/appveyor-racket.git") (source_url . "https://github.com/liberalartist/appveyor-racket.git"))))))) ("apse" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apse.txt"))) (checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (checksum-error . #f) (collection . "apse") (conflicts . ()) (dependencies . ("base" "lux" "mode-lambda")) (description . "a pixel-based sprite editor (good with mode-lambda)") (implies . ()) (modules . ((lib "apse/main.rkt") (lib "apse/core.rkt") (lib "apse/tool.rkt"))) (name . "apse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/apse/tree/master") (tags . ("app" "games" "graphics")) (versions . #hash((default . #hasheq((checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (source . "git://github.com/jeapostrophe/apse") (source_url . "http://github.com/jeapostrophe/apse/tree/master"))))))) ("argo" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "argo" "doc/argo@argo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/argo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/argo.txt"))) (checksum . "ee49d60a8d73b32e8323a1324503f1d9c1022e5f") (checksum-error . #f) (collection . "argo") (conflicts . ()) (date-added . 1607664613) (dependencies . ("base" "rackunit-lib" "http" "sugar" "beautiful-racket-lib" "web-server-lib" "json-pointer" "uri-template" "ejs" "brag" "scribble-lib" "racket-doc" "rackunit-lib" "beautiful-racket-lib")) (description . "Validate JSON data using JSON Schema.") (implies . ()) (modules . ((lib "argo/pp.rkt") (lib "argo/oneline.rkt") (lib "argo/scribblings/command-point.scrbl") (lib "argo/reader.rkt") (lib "argo/format.rkt") (lib "argo/scribblings/command-schema.scrbl") (lib "argo/parameters.rkt") (lib "argo/test.rkt") (lib "argo/util.rkt") (lib "argo/scribblings/running.scrbl") (lib "argo/tests/schema/negative/test.rkt") (lib "argo/tokenizer.rkt") (lib "argo/evaluator.rkt") (lib "argo/equal.rkt") (lib "argo/parse.rkt") (lib "argo/scribblings/command-oneline.scrbl") (lib "argo/main.rkt") (lib "argo/ip.rkt") (lib "argo/scribblings/command-equal.scrbl") (lib "argo/schema.rkt") (lib "argo/scribblings/command-validate.scrbl") (lib "argo/scribblings/command-pp.scrbl") (lib "argo/resolve.rkt") (lib "argo/command.rkt") (lib "argo/scribblings/references.scrbl") (lib "argo/validate.rkt") (lib "argo/scribblings/technical.scrbl") (lib "argo/json.rkt") (lib "argo/scribblings/interface.scrbl") (lib "argo/expander.rkt") (lib "argo/grammar.rkt") (lib "argo/scribblings/argo.scrbl") (lib "argo/scribblings/limitations.scrbl") (lib "argo/scribblings/installation.scrbl") (lib "argo/regexp.rkt"))) (name . "argo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (data . #t) (json . #t) (ring:1 . #t) (validation . #t))) (source . "https://github.com/jessealama/argo.git") (tags . ("data" "json" "validation")) (versions . #hash((default . #hasheq((checksum . "ee49d60a8d73b32e8323a1324503f1d9c1022e5f") (source . "https://github.com/jessealama/argo.git") (source_url . "https://github.com/jessealama/argo.git"))))))) ("arguments" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "arguments" "doc/arguments@arguments/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arguments.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arguments.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "arguments") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A simple data structure for a group of function arguments. Used by the mock package.") (implies . ()) (modules . ((lib "arguments/main.scrbl") (lib "arguments/main.rkt") (lib "arguments/tests/syntax.rkt"))) (name . "arguments") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (reflection . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/racket-mock/tree/master?path=arguments") (tags . ("data" "reflection")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=arguments") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=arguments"))))))) ("arroy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arroy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arroy.txt"))) (checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "web-server-lib")) (description . "A little library for modeling labeled transition systems with a collaborative Web stepper.") (implies . ()) (modules . ((lib "arroy/games/guess.rkt") (lib "arroy/lts.rkt") (lib "arroy/games/ghost.rkt") (lib "arroy/main.rkt") (lib "arroy/games/ttt.rkt"))) (name . "arroy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/jeapostrophe/arroy/tree/master") (tags . ("app" "games" "web")) (versions . #hash((default . #hasheq((checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (source . "github://github.com/jeapostrophe/arroy/master") (source_url . "http://github.com/jeapostrophe/arroy/tree/master"))))))) ("asi64" . #hasheq((author . "pezi_pink@pinksquirrellabs.com") (authors . ("pezi_pink@pinksquirrellabs.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asi64" "doc/asi64@asi64/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asi64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asi64.txt"))) (checksum . "81e61a25a6f35e137df6326353b9c54f50f2d829") (checksum-error . #f) (collection . "asi64") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "The Racket based 6502 assembler") (implies . ()) (modules . ((lib "asi64/expander.rkt") (lib "asi64/lang/language-info.rkt") (lib "asi64/samples/starfield.rkt") (lib "asi64/lang/reader.rkt") (lib "asi64/main.rkt") (lib "asi64/reader.rkt") (lib "asi64/lang/runtime-config.rkt") (lib "asi64/scribblings/asi64.scrbl"))) (name . "asi64") (ring . 1) (search-terms . #hasheq((|6502| . #t) (:build-success: . #t) (:docs: . #t) (C64 . #t) (author:pezi_pink@pinksquirrellabs.com . #t) (ring:1 . #t))) (source . "https://github.com/pezipink/asi64.git") (tags . ("6502" "C64")) (versions . #hash((default . #hasheq((checksum . "81e61a25a6f35e137df6326353b9c54f50f2d829") (source . "https://github.com/pezipink/asi64.git") (source_url . "https://github.com/pezipink/asi64.git"))))))) ("asm" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asm" "doc/asm@asm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asm.txt") (test-failure-log . "server/built/test-fail/asm.txt") (test-success-log . #f))) (checksum . "57abd235fcb8c7505990f8e9731c01c716324ee5") (checksum-error . #f) (collection . "asm") (conflicts . ()) (dependencies . ("base" "binutils" "data-lib" "racklog" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A multi-platform assembler for Racket (supports x64 and generic instruction sets)") (implies . ()) (modules . ((lib "asm/example/ifib.rkt") (lib "asm/x86/private/mode.rkt") (lib "asm/generic/generic-x86-unit.rkt") (lib "asm/example/incr.rkt") (lib "asm/x86.rkt") (lib "asm/x86/private/decode.rkt") (lib "asm/example/hello.rkt") (lib "asm/scribblings/ffi.scrbl") (lib "asm/scribblings/generic.scrbl") (lib "asm/example/rpn.rkt") (lib "asm/x86/private/x86.rkt") (lib "asm/x86/kernel.rkt") (lib "asm/x86/register.rkt") (lib "asm/x86/disasm.rkt") (lib "asm/x86/private/opcode-map.rkt") (lib "asm/x86/private/instruction.rkt") (lib "asm/example/fibonacci.rkt") (lib "asm/main.rkt") (lib "asm/private/assembler.rkt") (lib "asm/x86/private/racklog-lib.rkt") (lib "asm/ffi.rkt") (lib "asm/x86/private/encode.rkt") (lib "asm/x86/private/operand.rkt") (lib "asm/scribblings/asm.scrbl") (lib "asm/x86/ndisasm.rkt") (lib "asm/x86/private/register.rkt") (lib "asm/x86/op.rkt") (lib "asm/generic/generic-asm-sig.rkt") (lib "asm/scribblings/assembler.scrbl") (lib "asm/scribblings/x86.scrbl") (lib "asm/x86/test.rkt") (lib "asm/base.rkt") (lib "asm/example/rfib.rkt") (lib "asm/generic.rkt"))) (name . "asm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (assembler . #t) (author:leo@lwh.jp . #t) (ffi . #t) (ring:1 . #t) (unstable . #t))) (source . "http://github.com/lwhjp/racket-asm/tree/master") (tags . ("assembler" "ffi" "unstable")) (versions . #hash((default . #hasheq((checksum . "57abd235fcb8c7505990f8e9731c01c716324ee5") (source . "git://github.com/lwhjp/racket-asm") (source_url . "http://github.com/lwhjp/racket-asm/tree/master"))))))) ("asn1" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1.txt"))) (checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "asn1-lib" "asn1-doc")) (description . "ASN.1 library") (implies . ("asn1-lib" "asn1-doc")) (modules . ()) (name . "asn1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1"))))))) ("asn1-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asn1" "doc/asn1@asn1-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-doc.txt"))) (checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (modules . ((lib "asn1/scribblings/asn1.scrbl") (lib "asn1/scribblings/codec.scrbl") (lib "asn1/scribblings/misc.scrbl") (lib "asn1/scribblings/types.scrbl") (lib "asn1/scribblings/intro.scrbl") (lib "asn1/scribblings/translating.scrbl"))) (name . "asn1-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-doc"))))))) ("asn1-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-lib.txt"))) (checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "binaryio-lib")) (description . "ASN.1 library") (implies . ()) (modules . ((lib "asn1/private/types.rkt") (lib "asn1/private/base256.rkt") (lib "asn1/main.rkt") (lib "asn1/util/bit-string.rkt") (lib "asn1/util/time.rkt") (lib "asn1/private/ber.rkt") (lib "asn1/ber.rkt") (lib "asn1/private/base.rkt") (lib "asn1/private/ber-frame.rkt") (lib "asn1/util/names.rkt"))) (name . "asn1-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-lib"))))))) ("asn1-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-test.txt"))) (checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (modules . ((lib "asn1/fuzz.rkt") (lib "asn1/examples/crypto.rkt") (lib "asn1/examples/pkcs1.rkt") (lib "asn1/write-benchmark.rkt") (lib "asn1/examples/crypto-test.rkt") (lib "asn1/read-benchmark.rkt") (lib "asn1/examples/sec1.rkt") (lib "asn1/basic.rkt"))) (name . "asn1-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "3cd32b61a68b40ec03bed98cd0c4d4d4f72cacf2") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-test"))))))) ("asyncunit" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asyncunit" "doc/asyncunit@asyncunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asyncunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asyncunit.txt"))) (checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib")) (description . "RackUnit helper functions for asynchronous channels") (implies . ()) (modules . ((lib "asyncunit/asyncunit.scrbl") (lib "asyncunit/main.rkt") (lib "asyncunit/tests.rkt"))) (name . "asyncunit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/schuster/asyncunit/tree/master") (tags . ("concurrency" "testing")) (versions . #hash((default . #hasheq((checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (source . "git://github.com/schuster/asyncunit") (source_url . "http://github.com/schuster/asyncunit/tree/master"))))))) ("atomichron" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "atomichron" "doc/atomichron@atomichron/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/atomichron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/atomichron.txt"))) (checksum . "77dddb12241a8d7ca8f1520a1862a79cad91a6c6") (checksum-error . #f) (collection . "atomichron") (conflicts . ()) (date-added . 1576126101) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A microbenchmarking library") (implies . ()) (modules . ((lib "atomichron/main.scrbl") (lib "atomichron/private/scribble-evaluator-factory.rkt") (lib "atomichron/main.rkt"))) (name . "atomichron") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (benchmarking . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/atomichron.git") (tags . ("benchmarking")) (versions . #hash((default . #hasheq((checksum . "77dddb12241a8d7ca8f1520a1862a79cad91a6c6") (source . "https://github.com/jackfirth/atomichron.git") (source_url . "https://github.com/jackfirth/atomichron.git"))))))) ("aurie" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aurie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aurie.txt"))) (checksum . "8f253de0c353f693f6fdb9578c497089acec470a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1636472020) (dependencies . ("base" "goblins" "syrup" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "Spritely Aurie (https://gitlab.com/spritely/aurie) provides a system to safely serialize and deserialize a running Goblins (https://gitlab.com/spritely/goblins) process.") (implies . ()) (modules . ((lib "aurie/core.rkt") (lib "aurie/main.rkt"))) (name . "aurie") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cwebber@dustycloud.org . #t) (ring:1 . #t) (serialization . #t) (spritely . #t))) (source . "https://gitlab.com/spritely/aurie.git?path=aurie#v0.0.1") (tags . ("serialization" "spritely")) (versions . #hash((default . #hasheq((checksum . "8f253de0c353f693f6fdb9578c497089acec470a") (source . "https://gitlab.com/spritely/aurie.git?path=aurie#v0.0.1") (source_url . "https://gitlab.com/spritely/aurie.git?path=aurie#v0.0.1"))))))) ("auto-syntax-e" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "auto-syntax-e" "doc/auto-syntax-e@auto-syntax-e/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auto-syntax-e.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auto-syntax-e.txt"))) (checksum . "5488c6902ec6189f69f950ab4d5616e9d6718d34") (checksum-error . #f) (collection . "auto-syntax-e") (conflicts . ()) (date-added . 1614799361) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "For syntax pattern variables: instead of raising an error, x is roughly equivalent to (syntax->datum #'x).") (implies . ()) (modules . ((lib "auto-syntax-e/utils.rkt") (lib "auto-syntax-e/scribblings/auto-syntax-e.scrbl") (lib "auto-syntax-e/test/test-meta.rkt") (lib "auto-syntax-e/test/test-auto-syntax-e.rkt") (lib "auto-syntax-e/main.rkt"))) (name . "auto-syntax-e") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/auto-syntax-e.git#main") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "5488c6902ec6189f69f950ab4d5616e9d6718d34") (source . "https://github.com/jsmaniac/auto-syntax-e.git#main") (source_url . "https://github.com/jsmaniac/auto-syntax-e.git#main"))))))) ("automata" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("automata-lib" "automata-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ("automata-lib" "automata-doc")) (modules . ()) (name . "automata") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata/?path=automata") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata/?path=automata") (source_url . "git://github.com/jeapostrophe/automata/?path=automata"))))))) ("automata-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "automata" "doc/automata@automata-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-doc.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . ("base" "automata-lib" "scribble-lib" "racket-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (modules . ((lib "automata/scribblings/re.scrbl") (lib "automata/scribblings/automata.scrbl"))) (name . "automata-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/automata/tree/master?path=automata-doc") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-doc") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-doc"))))))) ("automata-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-lib.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . ("base")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (modules . ((lib "automata/dfa.rkt") (lib "automata/re-ext.rkt") (lib "automata/nfa.rkt") (lib "automata/re.rkt") (lib "automata/re-compile.rkt") (lib "automata/nfa-ep.rkt") (lib "automata/machine.rkt") (lib "automata/nfa-star.rkt") (lib "automata/re-help.rkt"))) (name . "automata-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/automata/tree/master?path=automata-lib") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-lib") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-lib"))))))) ("automata-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-test.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . ("base" "automata-lib" "eli-tester")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (modules . ((lib "automata/tests/nfa-ep-test.rkt") (lib "automata/tests/dfa-test.rkt") (lib "automata/tests/nfa-star-test.rkt") (lib "automata/tests/nfa-test.rkt") (lib "automata/tests/re-test.rkt") (lib "automata/tests/explain.rkt"))) (name . "automata-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/automata/tree/master?path=automata-test") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-test") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-test"))))))) ("auxiliary-macro-context" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auxiliary-macro-context.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auxiliary-macro-context.txt"))) (checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Match-expander-style syntactic extensibility outside expressions.") (implies . ()) (modules . ((lib "auxiliary-macro-context/test/test-auxiliary-macro-context2.rkt") (lib "auxiliary-macro-context/test/test-auxiliary-macro-context.rkt") (lib "auxiliary-macro-context/main.rkt"))) (name . "auxiliary-macro-context") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-auxiliary-macro-context/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (source . "git://github.com/tonyg/racket-auxiliary-macro-context") (source_url . "http://github.com/tonyg/racket-auxiliary-macro-context/tree/master"))))))) ("avl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "avl" "doc/avl@avl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/avl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/avl.txt"))) (checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "AVL Trees for Racket") (implies . ()) (modules . ((lib "avl/main.rkt") (lib "avl/avl.scrbl"))) (name . "avl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-avl/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (source . "github://github.com/mordae/racket-avl/master") (source_url . "http://github.com/mordae/racket-avl/tree/master"))))))) ("aws" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aws" "doc/aws@aws/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aws.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aws.txt"))) (checksum . "94a16a6875ac585a10fc488b1bf48052172d5668") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "http" "sha" "at-exp-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Amazon Web Services including S3, SDB, SES, SNS, SQS, CloudWatch, Glacier, Dynamo, and Route 53.") (implies . ()) (modules . ((lib "aws/main.rkt") (lib "aws/s3.rkt") (lib "aws/glacier.rkt") (lib "aws/post.rkt") (lib "aws/sigv4.rkt") (lib "aws/dynamo.rkt") (lib "aws/xml-path.rkt") (lib "aws/util.rkt") (lib "examples/backup.rkt") (lib "aws/aws.scrbl") (lib "aws/sqs.rkt") (lib "aws/take.rkt") (lib "aws/r53.rkt") (lib "aws/exn.rkt") (lib "aws/tests/data.rkt") (lib "aws/pool.rkt") (lib "aws/keys.rkt") (lib "examples/examples.rkt") (lib "aws/sdb.rkt") (lib "aws/cw.rkt") (lib "aws/ses.rkt") (lib "aws/sns.rkt"))) (name . "aws") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:racket@greghendershott.com . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/greghendershott/aws/tree/master") (tags . ("AWS" "web")) (versions . #hash((default . #hasheq((checksum . "94a16a6875ac585a10fc488b1bf48052172d5668") (source . "github://github.com/greghendershott/aws/master") (source_url . "http://github.com/greghendershott/aws/tree/master"))))))) ("aws-cloudformation-deploy" . #hasheq((author . "michaelaarnold@gmail.com") (authors . ("michaelaarnold@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-deploy.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "core AWS Cloudformation deployment scripting library") (implies . ()) (modules . ((lib "aws-cloudformation-deploy/test/test-core.rkt") (lib "aws-cloudformation-deploy/src/core.rkt") (lib "aws-cloudformation-deploy/main.rkt"))) (name . "aws-cloudformation-deploy") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:michaelaarnold@gmail.com . #t) (aws . #t) (cloudformation . #t) (deploy . #t) (ring:1 . #t) (script . #t))) (source . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master") (tags . ("aws" "cloudformation" "deploy" "script")) (versions . #hash((default . #hasheq((checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (source . "git://github.com/cjdev/aws-cloudformation-deploy") (source_url . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master"))))))) ("aws-cloudformation-template" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (description . "statically typed DSL for writing AWS CloudFormation templates") (implies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (modules . ()) (name . "aws-cloudformation-template") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template"))))))) ("aws-cloudformation-template-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "aws-cloudformation-template"))) (failure-log . "server/built/fail/aws-cloudformation-template-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws-cloudformation-template-lib" "base" "racket-doc" "scribble-lib" "threading-lib" "turnstile")) (description . "documentation (no implementation) for “aws-cloudformation-template”") (implies . ()) (modules . ((lib "scribblings/aws/cloudformation/template.scrbl"))) (name . "aws-cloudformation-template-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-doc") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-doc"))))))) ("aws-cloudformation-template-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "syntax-classes-lib" "threading-lib" "turnstile")) (description . "implementation (no documentation) for “aws-cloudformation-template”") (implies . ()) (modules . ((lib "aws/cloudformation/template/base.rkt") (lib "aws/cloudformation/template.rkt") (lib "aws/cloudformation/template/resources.rkt"))) (name . "aws-cloudformation-template-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-lib") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-lib"))))))) ("axe" . #hasheq((author . "lotabout@gmail.com") (authors . ("lotabout@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "axe" "doc/axe@axe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/axe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/axe.txt"))) (checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (checksum-error . #f) (collection . "axe") (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-code-examples" "scribble-doc")) (description . "Handy utilities(macros/functions) for racket") (implies . ()) (modules . ((lib "axe/threading.rkt") (lib "axe/base/lang/reader-no-wrap.rkt") (lib "axe/base.rkt") (lib "axe/scribblings/axe.scrbl") (lib "axe/base/lang/runtime-config.rkt") (lib "axe/escape.rkt") (lib "axe/test.rkt") (lib "axe/dict.rkt") (lib "axe/base/lang/reader.rkt") (lib "axe/main.rkt") (lib "axe/base/axe-reader.rkt") (lib "axe/lang/reader-no-wrap.rkt") (lib "axe/base/lang/language-info.rkt") (lib "axe/conditionals.rkt") (lib "axe/app.rkt") (lib "axe/lang/reader.rkt"))) (name . "axe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lotabout@gmail.com . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/lotabout/axe/tree/master") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (source . "git://github.com/lotabout/axe") (source_url . "http://github.com/lotabout/axe/tree/master"))))))) ("azelf" . #hasheq((author . "kalxd@126.com") (authors . ("kalxd@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "azelf" "doc/azelf@azelf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/azelf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/azelf.txt"))) (checksum . "5757c67b88467b66a4658aed84e858b9d7830c92") (checksum-error . #f) (collection . "azelf") (conflicts . ()) (date-added . 1611808486) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "超能力工具箱") (implies . ()) (modules . ((lib "azelf/scribblings/syntax/intro.scrbl") (lib "azelf/syntax/curry.rkt") (lib "azelf/data/maybe.rkt") (lib "azelf/test/data.rkt") (lib "azelf/lang/reader.rkt") (lib "azelf/scribblings/data/intro.scrbl") (lib "azelf/type/json.rkt") (lib "azelf/scribblings/intro.scrbl") (lib "azelf/scribblings/run.rkt") (lib "azelf/test/data/list.rkt") (lib "azelf/data/list.rkt") (lib "azelf/scribblings/syntax/match.scrbl") (lib "azelf/scribblings/azelf.scrbl") (lib "azelf/scribblings/data/json.scrbl") (lib "azelf/internal/error.rkt") (lib "azelf/scribblings/syntax/maybe-do.scrbl") (lib "azelf/scribblings/data/function.scrbl") (lib "azelf/test/data/function.rkt") (lib "azelf/scribblings/syntax/keyword.scrbl") (lib "azelf/scribblings/std/intro.scrbl") (lib "azelf/scribblings/std/config.scrbl") (lib "azelf/syntax/match.rkt") (lib "azelf/scribblings/data/list.scrbl") (lib "azelf/data/maybe-syntax.rkt") (lib "azelf/internal/list.rkt") (lib "azelf/scribblings/syntax/curry.scrbl") (lib "azelf/syntax/mod.rkt") (lib "azelf/scribblings/data/maybe.scrbl") (lib "azelf/scribblings/syntax/mod.scrbl") (lib "azelf/scribblings/syntax/pipeline.scrbl") (lib "azelf/main.rkt") (lib "azelf/internal/keyword.rkt") (lib "azelf/test/internal/reader.rkt") (lib "azelf/std/config.rkt") (lib "azelf/data/function.rkt") (lib "azelf/syntax/pipeline.rkt") (lib "azelf/test/syntax.rkt"))) (name . "azelf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalxd@126.com . #t) (functional . #t) (monad . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/kalxd/azelf.git") (tags . ("functional" "monad" "tools")) (versions . #hash((default . #hasheq((checksum . "5757c67b88467b66a4658aed84e858b9d7830c92") (source . "https://github.com/kalxd/azelf.git") (source_url . "https://github.com/kalxd/azelf.git"))))))) ("backport-template-pr1514" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "backport-template-pr1514" "doc/backport-template-pr1514@backport-template-pr1514/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/backport-template-pr1514.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/backport-template-pr1514.txt"))) (checksum . "a6c3611fcddb8d8a67531694c9b8c2c4f89bbb0f") (checksum-error . #f) (collection . "backport-template-pr1514") (conflicts . ()) (date-added . 1614799367) (dependencies . ("base" "rackunit-lib" "version-case" "scribble-lib" "racket-doc")) (description . "Backports syntax-local-template-metafunction-introduce as a package, so that it can be used in older versions. Require backport-template-pr1514/experimental/template instead of syntax/parse/experimental/template to use it.") (implies . ()) (modules . ((lib "backport-template-pr1514/scribblings/backport-template-pr1514.scrbl") (lib "backport-template-pr1514/experimental/template.rkt") (lib "backport-template-pr1514/main.rkt") (lib "backport-template-pr1514/experimental/private/substitute.rkt") (lib "backport-template-pr1514/experimental/dset.rkt"))) (name . "backport-template-pr1514") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (backport . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/backport-template-pr1514.git#main") (tags . ("backport" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "a6c3611fcddb8d8a67531694c9b8c2c4f89bbb0f") (source . "https://github.com/jsmaniac/backport-template-pr1514.git#main") (source_url . "https://github.com/jsmaniac/backport-template-pr1514.git#main"))))))) ("barrel" . #hasheq((author . "vatisprocurator@gmail.com") (authors . ("vatisprocurator@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "barrel" "doc/barrel@barrel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/barrel.txt") (test-failure-log . "server/built/test-fail/barrel.txt") (test-success-log . #f))) (checksum . "0f8f683eea4c738f534cc4425b6abd7ea303999d") (checksum-error . #f) (collection . "barrel") (conflicts . ()) (date-added . 1648045759) (dependencies . ("base" "beautiful-racket" "brag-lib" "threading-lib" "br-parser-tools" "control" "racket-doc" "scribble-lib")) (description . "An esoteric golfing lang") (implies . ()) (modules . ((lib "barrel/tokenizer.rkt") (lib "barrel/scribblings/barrel.scrbl") (lib "barrel/util.rkt") (lib "barrel/core.rkt") (lib "barrel/barrel.rkt") (lib "barrel/main.rkt") (lib "barrel/parser-test.rkt") (lib "barrel/reader.rkt") (lib "barrel/expander.rkt") (lib "barrel/parser.rkt"))) (name . "barrel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:vatisprocurator@gmail.com . #t) (lang . #t) (language . #t) (racket-language . #t) (ring:1 . #t))) (source . "https://github.com/the-cellar/barrel.git?path=barrel#main") (tags . ("lang" "language" "racket-language")) (versions . #hash((default . #hasheq((checksum . "0f8f683eea4c738f534cc4425b6abd7ea303999d") (source . "https://github.com/the-cellar/barrel.git?path=barrel#main") (source_url . "https://github.com/the-cellar/barrel.git?path=barrel#main"))))))) ("base32" . #hasheq((author . "alex@fldcr.com") (authors . ("alex@fldcr.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base32-manual" "doc/base32-manual@base32/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base32.txt"))) (checksum . "ea130f84dbac547d40f5bd27d1be53df811b4fd7") (checksum-error . #f) (collection . "base32") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit" "sandbox-lib" "scribble-lib")) (description . "Provides encoding to and from Crockford's Base32 encoding.") (implies . ()) (modules . ((lib "base32/main.rkt") (lib "base32/base32-manual.scrbl"))) (name . "base32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alex@fldcr.com . #t) (codec . #t) (ring:1 . #t))) (source . "https://github.com/afldcr/racket-base32.git") (tags . ("codec")) (versions . #hash((default . #hasheq((checksum . "ea130f84dbac547d40f5bd27d1be53df811b4fd7") (source . "https://github.com/afldcr/racket-base32.git") (source_url . "https://github.com/afldcr/racket-base32.git"))))))) ("base58" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base58" "doc/base58@base58/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base58.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base58.txt"))) (checksum . "125186f659f29a9f7275540c6211885784a68edd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597688325) (dependencies . ("base" "binaryio" "sha" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "rackunit-typed")) (description . "Provides Base58Check encoding and decoding functions.") (implies . ()) (modules . ((lib "base58/base58.scrbl") (lib "base58/main.rkt"))) (name . "base58") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (bitcoin . #t) (format . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/marckn0x/base58.git") (tags . ("bitcoin" "format" "text")) (versions . #hash((default . #hasheq((checksum . "125186f659f29a9f7275540c6211885784a68edd") (source . "https://github.com/marckn0x/base58.git") (source_url . "https://github.com/marckn0x/base58.git"))))))) ("base64" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base64" "doc/base64@base64/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base64.txt"))) (checksum . "8d6b6340d99f81ba2742ed36b359586f15562338") (checksum-error . #f) (collection . "base64") (conflicts . ()) (date-added . 1609701893) (dependencies . ("base" "net-lib" "rackunit-lib" "base64-lib" "racket-doc" "scribble-lib" "net-doc")) (description . "") (implies . ()) (modules . ((lib "base64/base64.scrbl") (lib "base64/tests/base64.rkt"))) (name . "base64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-base64.git?path=base64") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d6b6340d99f81ba2742ed36b359586f15562338") (source . "https://github.com/rmculpepper/racket-base64.git?path=base64") (source_url . "https://github.com/rmculpepper/racket-base64.git?path=base64"))))))) ("base64-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base64-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base64-lib.txt"))) (checksum . "8d6b6340d99f81ba2742ed36b359586f15562338") (checksum-error . #f) (collection . "base64") (conflicts . ()) (date-added . 1609701824) (dependencies . ("base")) (description . "") (implies . ()) (modules . ((lib "base64/main.rkt"))) (name . "base64-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d6b6340d99f81ba2742ed36b359586f15562338") (source . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib") (source_url . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib"))))))) ("basedir" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "basedir" "doc/basedir@basedir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/basedir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/basedir.txt"))) (checksum . "ef95b1eeb9b4e0df491680e5caa98eeadf64dfa1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151734) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XDG Basedir Spec library") (implies . ()) (modules . ((lib "basedir/basedir.scrbl") (lib "basedir/main.rkt"))) (name . "basedir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (configuration . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-basedir.git") (tags . ("configuration")) (versions . #hash((default . #hasheq((checksum . "ef95b1eeb9b4e0df491680e5caa98eeadf64dfa1") (source . "https://github.com/willghatch/racket-basedir.git") (source_url . "https://github.com/willghatch/racket-basedir.git"))))))) ("basm" . #hasheq((author . "me@gisch.dev") (authors . ("me@gisch.dev")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "basm" "doc/basm@basm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/basm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/basm.txt"))) (checksum . "02b7d75eaddda765729820f79a13b54da6e1db14") (checksum-error . #f) (collection . "basm") (conflicts . ()) (date-added . 1618872381) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "basm/main.rkt") (lib "basm/codegen.rkt") (lib "basm/parser.rkt") (lib "basm/error.rkt") (lib "basm/scribblings/basm.scrbl"))) (name . "basm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:me@gisch.dev . #t) (ring:1 . #t))) (source . "https://gitlab.com/pythondude325/basm.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "02b7d75eaddda765729820f79a13b54da6e1db14") (source . "https://gitlab.com/pythondude325/basm.git") (source_url . "https://gitlab.com/pythondude325/basm.git"))))))) ("bazaar" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bazaar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bazaar.txt"))) (checksum . "d1254eae19cde725f5632e7c6df82cbd06f7a8b7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "define2" "draw-lib" "gui-lib" "images" "math-lib" "net-lib" "plot-gui-lib" "plot-lib" "racket-index" "rackunit-lib" "scribble-lib" "slideshow-lib" "srfi-lite-lib")) (description . "A personal collection of useful definitions. Quite unstable.") (implies . ()) (modules . ((lib "bazaar/dict-list.rkt") (lib "bazaar/comparison.rkt") (lib "bazaar/getter-setter.rkt") (lib "bazaar/slideshow/slideshow-toc.rkt") (lib "bazaar/with-it.rkt") (lib "bazaar/values.rkt") (lib "bazaar/define.rkt") (lib "bazaar/roll-stack.rkt") (lib "bazaar/gui/board.rkt") (lib "bazaar/struct.rkt") (lib "bazaar/plot-param.rkt") (lib "bazaar/time.rkt") (lib "bazaar/gui/utils.rkt") (lib "bazaar/scribble/compiler.rkt") (lib "bazaar/keyword.rkt") (lib "bazaar/rvector.rkt") (lib "bazaar/net.rkt") (lib "bazaar/gui/examples/board-paint.rkt") (lib "bazaar/read.rkt") (lib "bazaar/tree.rkt") (lib "bazaar/convert.rkt") (lib "bazaar/cond-let.rkt") (lib "bazaar/slideshow/slideshow-tree.rkt") (lib "bazaar/net/smtp.rkt") (lib "bazaar/gui/rapid-gui.rkt") (lib "bazaar/loop.rkt") (lib "bazaar/memoize.rkt") (lib "bazaar/gui/list-box-sort.rkt") (lib "bazaar/version.rkt") (lib "bazaar/slideshow/slideshow-utils.rkt") (lib "bazaar/vector.rkt") (lib "bazaar/list.rkt") (lib "bazaar/rackunit.rkt") (lib "bazaar/cond-else.rkt") (lib "bazaar/dict.rkt") (lib "bazaar/order.rkt") (lib "bazaar/base.rkt") (lib "bazaar/matrix.rkt") (lib "bazaar/find-mode.rkt") (lib "bazaar/preferences.rkt") (lib "bazaar/clipboard.rkt") (lib "bazaar/repl.rkt") (lib "bazaar/plot.rkt") (lib "bazaar/debug.rkt") (lib "bazaar/draw/color.rkt") (lib "bazaar/slideshow/examples/slideshow-tree.rkt") (lib "bazaar/slideshow/slideshow-table.rkt") (lib "bazaar/information-theory.rkt") (lib "bazaar/regexp.rkt") (lib "bazaar/gui/bitmaps.rkt") (lib "bazaar/system.rkt") (lib "bazaar/slideshow/examples/slideshow-table.rkt") (lib "bazaar/math.rkt") (lib "bazaar/gui/float-box.rkt") (lib "bazaar/text-table.rkt") (lib "bazaar/numeric-kind.rkt") (lib "bazaar/slideshow/examples/slideshow-toc.rkt") (lib "bazaar/mutation.rkt") (lib "bazaar/slideshow/warsaw.rkt") (lib "bazaar/file.rkt") (lib "bazaar/bin-heap.rkt") (lib "bazaar/gui/msg-error.rkt") (lib "bazaar/slideshow/interactive-style-maker.rkt") (lib "bazaar/string.rkt") (lib "bazaar/date.rkt"))) (name . "bazaar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/Metaxal/bazaar/tree/master") (tags . ("dev" "utility")) (versions . #hash((default . #hasheq((checksum . "d1254eae19cde725f5632e7c6df82cbd06f7a8b7") (source . "github://github.com/Metaxal/bazaar/master") (source_url . "http://github.com/Metaxal/bazaar/tree/master"))))))) ("bcrypt" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/bcrypt.txt") (success-log . "server/built/install/bcrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bcrypt.txt"))) (checksum . "aefe2dd22eaf1617cada1995288af390475f3e0f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib" "rackunit-lib")) (description . "A Racket interface to the bcrypt key derivation function.") (implies . ()) (modules . ((lib "bcrypt/main.rkt") (lib "bcrypt/private/install.rkt"))) (name . "bcrypt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (crypto . #t) (ring:1 . #t))) (source . "http://github.com/samth/bcrypt.rkt/tree/master/") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "aefe2dd22eaf1617cada1995288af390475f3e0f") (source . "github://github.com/samth/bcrypt.rkt/master/") (source_url . "http://github.com/samth/bcrypt.rkt/tree/master/"))))))) ("beautiful-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br" "doc/br@beautiful-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661333) (dependencies . ("base" "beautiful-racket-lib" "beautiful-racket-demo" "gui-doc" "gui-lib" "at-exp-lib" "br-parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Resources for the “Beautiful Racket” book") (implies . ("beautiful-racket-lib" "beautiful-racket-demo")) (modules . ((lib "br/scribblings/br.scrbl"))) (name . "beautiful-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/beautiful-racket.git?path=beautiful-racket") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://git.matthewbutterick.com/mbutterick/beautiful-racket.git?path=beautiful-racket") (source_url . "https://git.matthewbutterick.com/mbutterick/beautiful-racket.git?path=beautiful-racket"))))))) ("beautiful-racket-demo" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-demo.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661341) (dependencies . ("base" "sugar" "beautiful-racket-lib" "rackunit-lib" "brag" "srfi-lib" "draw-lib" "syntax-color-lib" "gui-lib" "math-lib" "at-exp-lib")) (description . "Sample projects for “Beautiful Racket”") (implies . ()) (modules . ((lib "mirror-demo/test.rkt") (lib "basic-demo-3/setup.rkt") (lib "tacopocalypse-prep/main.rkt") (lib "basic-demo-2/parse-stx.rkt") (lib "tacopocalypse-demo/main.rkt") (lib "hdl-demo/Xor.tst.rkt") (lib "basic-demo-2/line.rkt") (lib "scriptish-demo/test.rkt") (lib "basic-demo-3/sample-shell.rkt") (lib "hdl-demo/Fanout.hdl.rkt") (lib "basic-demo-2/struct.rkt") (lib "basic-demo-2/sample-math.rkt") (lib "wires-demo/test-sources.rkt") (lib "atomic-taco-demo/test.rkt") (lib "quantum-taco-demo/test.rkt") (lib "javascriptlike-demo/rackety.rkt") (lib "jsonic-demo-3/parser.rkt") (lib "basic-demo-nth/main.rkt") (lib "regexcellent-demo/main.rkt") (lib "txtadv-demo/reader.rkt") (lib "atomic-taco-demo/main.rkt") (lib "basic-demo-3/sample.rkt") (lib "tacogram-demo/main.rkt") (lib "basic-demo-3/elements.rkt") (lib "basic-demo-2/run.rkt") (lib "hdl-demo/And.tst.rkt") (lib "basic-demo-2a/tokenizer.rkt") (lib "basic-demo-2/expr.rkt") (lib "txtadv-demo/demo-short.rkt") (lib "txtadv-demo/world-sexp.rkt") (lib "bf-demo/reader.rkt") (lib "txtadv-demo/5-lang/txtadv.rkt") (lib "basic-demo-3/report-args.rkt") (lib "basic-demo-2a/run.rkt") (lib "hdl-demo/expander.rkt") (lib "basic-demo-3/test-sources.rkt") (lib "conjunction-demo/test.rkt") (lib "jsonic-demo-2/expander.rkt") (lib "bf-demo/test-sources.rkt") (lib "txtadv-demo/4-type/txtadv.rkt") (lib "injunction-demo/main.rkt") (lib "taco-victory-demo/main.rkt") (lib "pythonesque-demo/test.rkt") (lib "funstacker-demo/funstacker-test.rkt") (lib "hdl-demo/Nand.tst.rkt") (lib "jsonic-demo-2/indenter.rkt") (lib "basic-demo/expander.rkt") (lib "jsonic-demo-2/buttons.rkt") (lib "xmlish-demo/grammar.rkt") (lib "basic-demo-3/args.rkt") (lib "jsonic-demo/parser.rkt") (lib "stackerizer-demo/stackerizer.rkt") (lib "basic-demo-2a/go.rkt") (lib "jsonic-demo-3/jsonic-test.rkt") (lib "jsonic-demo/jsonic-test.rkt") (lib "quantum-taco-demo/main.rkt") (lib "txtadv-demo/3-module-lang/txtadv.rkt") (lib "basic-demo-3/main.rkt") (lib "pl-checklist-demo/test.rkt") (lib "taco-compiler-demo/main.rkt") (lib "numberstring-demo/main.rkt") (lib "txtadv-demo/2-modules/world.rkt") (lib "basic-demo-2/main.rkt") (lib "scriptish-demo/expander.rkt") (lib "txtadv-demo/3-module-lang/world.rkt") (lib "basic-demo-2a/sample.rkt") (lib "hdl-demo/Nand2.hdl.rkt") (lib "jsonic-demo-2/test-sources.rkt") (lib "basic-demo-2/elements.rkt") (lib "txtadv-demo/tokenizer.rkt") (lib "stacker-demo/stacker-test.rkt") (lib "basic-demo-3/sample-for.rkt") (lib "basic-demo-2a/test-sources.rkt") (lib "jsonic-demo/test-sources.rkt") (lib "basic-demo-nth/tokenizer.rkt") (lib "basic-demo/parse-stx.rkt") (lib "txtadv-demo/parser.rkt") (lib "stacker-demo/stacker.rkt") (lib "txtadv-demo/main.rkt") (lib "scriptish-demo/grammar.rkt") (lib "jsonic-demo-3/main.rkt") (lib "txtadv-demo/5-lang/txtadv-reader.rkt") (lib "basic-demo-2a/elements.rkt") (lib "basic-demo-3/line.rkt") (lib "basic-demo-3/colorer.rkt") (lib "basic-demo-2/cond.rkt") (lib "basic-demo-2a/parser.rkt") (lib "jsonic-demo/main.rkt") (lib "basic-demo-3/misc.rkt") (lib "algebra-demo/grammar.rkt") (lib "pl-checklist-demo/main.rkt") (lib "taco-victory-demo/grammar.rkt") (lib "basic-demo/test-parser.rkt") (lib "hdl-demo/Dmux.tst.rkt") (lib "basic-demo-3/sample-exporter.rkt") (lib "bf-demo/expander-slow.rkt") (lib "hdl-demo/Not.tst.rkt") (lib "hdl-demo/DMux4Way.tst.rkt") (lib "txtadv-demo/expander.rkt") (lib "chip8-demo/chip8.rkt") (lib "read-only-demo/main.rkt") (lib "basic-demo-nth/parser.rkt") (lib "basic-demo-2/private/sample-pseudocode.rkt") (lib "basic-demo-3/tokenize-only.rkt") (lib "taco-decompiler-demo/run.rkt") (lib "bf-demo/test-tokenizer.rkt") (lib "basic-demo-2/lexer.rkt") (lib "basic-demo-2/expander.rkt") (lib "basic-demo-3/sample-math.rkt") (lib "wires-demo/test.rkt") (lib "hdl-demo/grammar.rkt") (lib "bf-demo/atsign.rkt") (lib "javascriptlike-demo/main.rkt") (lib "jsonic-demo-3/scribblings/jsonic.scrbl") (lib "hdl-demo/Mux.tst.rkt") (lib "jsonic-demo-3/parser-test.rkt") (lib "hdl-tst-demo/main.rkt") (lib "tacopocalypse-demo/test.rkt") (lib "javascriptlike-demo/test.rkt") (lib "wires-demo/puzzle.rkt") (lib "jsonic-demo-3/reader.rkt") (lib "hdl-demo/Nand.hdl.rkt") (lib "jsonic-demo-2/colorer.rkt") (lib "wires-demo/main.rkt") (lib "jsonic-demo-2/tokenizer.rkt") (lib "conjunction-demo/main.rkt") (lib "basic-demo-2a/main.rkt") (lib "basic-demo-3/parser.rkt") (lib "tacogram-demo/test.rkt") (lib "basic-demo-3/tokenizer.rkt") (lib "jsonic-demo-3/colorer.rkt") (lib "regexcellent-demo/test.rkt") (lib "basic-demo-2/sample-var.rkt") (lib "basic-demo-2/sample-cond.rkt") (lib "jsonic-demo-2/main.rkt") (lib "bf-demo/main.rkt") (lib "txtadv-demo/5-lang/world.rkt") (lib "precalc-demo/main.rkt") (lib "bf-demo/expander.rkt") (lib "basic-demo-3/structs.rkt") (lib "basic-demo-3/sample-importer.rkt") (lib "basic-demo/lexer-test.rkt") (lib "basic-demo-2a/misc.rkt") (lib "basic-demo-2/tokenizer.rkt") (lib "hdl-tst-demo/grammar.rkt") (lib "jsonic-demo/reader.rkt") (lib "basic-demo-2/go.rkt") (lib "mirror-demo/main.rkt") (lib "jsonic-demo-3/buttons.rkt") (lib "dyadic-demo/source.rkt") (lib "hdl-demo/DMux4Way-test.rkt") (lib "basic-demo-nth/basic-test.rkt") (lib "basic-demo-3/sample-provide.rkt") (lib "hdl-demo/Dmux-test.rkt") (lib "txtadv-demo/6-color/world.rkt") (lib "xmlish-demo/main.rkt") (lib "basic-demo-2a/lexer.rkt") (lib "jsonic-demo-3/tokenizer.rkt") (lib "precalc-demo/test.rkt") (lib "basic-demo-3/expr.rkt") (lib "jsonic-demo-2/parser-test.rkt") (lib "txtadv-demo/0-longhand/txtadv+world.rkt") (lib "jsonic-demo-2/parser.rkt") (lib "bf-demo/test-reader.rkt") (lib "dyadic-demo/main.rkt") (lib "basic-demo-2a/line.rkt") (lib "passthrough-demo/test.rkt") (lib "expand-only-demo/main.rkt") (lib "taco-compiler-demo/test.rkt") (lib "hdl-demo/Toffoli.hdl.rkt") (lib "basic-demo/private/sample-pseudocode.rkt") (lib "stackerizer-demo/stackerizer-test.rkt") (lib "scriptish-demo/subtest.rkt") (lib "basic-demo/sample.rkt") (lib "basic-demo-3/lexer.rkt") (lib "wires-demo/with-promises.rkt") (lib "basic-demo-nth/colorer.rkt") (lib "algebra-demo/main.rkt") (lib "basic-demo-2/parser.rkt") (lib "bf-demo/factorial.rkt") (lib "basic-demo/tokenizer.rkt") (lib "bf-demo/parser-tester.rkt") (lib "hdl-demo/main.rkt") (lib "pythonesque-demo/grammar.rkt") (lib "basic-demo-2a/expander.rkt") (lib "basic-demo-2/sample-for.rkt") (lib "basic-demo-3/sample-input.rkt") (lib "jsonic-demo-2/jsonic-test.rkt") (lib "txtadv-demo/6-color/color.rkt") (lib "javascriptlike-demo/sexped.rkt") (lib "injunction-demo/test.rkt") (lib "xmlish-demo/test.rkt") (lib "basic-demo-2a/expr.rkt") (lib "hdl-demo/Dmux4Way.hdl.rkt") (lib "basic-demo-3/expander.rkt") (lib "tacogram-demo/grammar.rkt") (lib "taco-victory-demo/test.rkt") (lib "hdl-demo/bus-properties.rkt") (lib "bf-demo/test-parser.rkt") (lib "basic-demo-2/test-sources.rkt") (lib "basic-demo/tokenize-only.rkt") (lib "jsonic-demo/expander.rkt") (lib "basic-demo-3/cond.rkt") (lib "basic-demo-2/parse-only.rkt") (lib "txtadv-demo/world-test.rkt") (lib "pl-checklist-lang-maker/main.rkt") (lib "precalc-demo/grammar.rkt") (lib "jsonic-demo/tokenizer.rkt") (lib "hdl-demo/DMux.hdl.rkt") (lib "basic-demo/test-sources.rkt") (lib "basic-demo/main.rkt") (lib "javascriptlike-demo/less-rackety.rkt") (lib "txtadv-demo/2-modules/txtadv.rkt") (lib "funstacker-demo/funstacker-h2.rkt") (lib "txtadv-demo/4-type/world.rkt") (lib "basic-demo-3/sample-cond.rkt") (lib "basic-demo-2/sample-gosub.rkt") (lib "basic-demo-2/colorer.rkt") (lib "basic-demo-nth/importest.rkt") (lib "taco-decompiler-demo/main.rkt") (lib "bf-demo/atsign-sexp.rkt") (lib "basic-demo-nth/expander.rkt") (lib "basic-demo-3/run.rkt") (lib "basic-demo-3/struct.rkt") (lib "basic-demo-3/parse-stx.rkt") (lib "basic-demo-2/misc.rkt") (lib "basic-demo-3/private/sample-pseudocode.rkt") (lib "regexcellent-demo/grammar.rkt") (lib "hdl-demo/Mux.hdl.rkt") (lib "stacker-demo/test-sources.rkt") (lib "bf-demo/hello.rkt") (lib "basic-demo-2/sample.rkt") (lib "pythonesque-demo/main.rkt") (lib "funstacker-demo/test-sources.rkt") (lib "scriptish-demo/main.rkt") (lib "hdl-tst-demo/expander.rkt") (lib "basic-demo-3/sample-import.rkt") (lib "basic-demo-3/parse-only.rkt") (lib "numberstring-demo/source.rkt") (lib "basic-demo-2/sample-input.rkt") (lib "hdl-demo/HalfAdder.tst.rkt") (lib "basic-demo-3/sample-gosub.rkt") (lib "bf-demo/parser.rkt") (lib "hdl-demo/Or.tst.rkt") (lib "hdl-demo/Mux-test.rkt") (lib "tacopocalypse-prep/test.rkt") (lib "basic-demo/parse-only.rkt") (lib "hdl-demo/Not.hdl.rkt") (lib "jsonic-demo-3/indenter.rkt") (lib "bf-demo/expander-imperative.rkt") (lib "jsonic-demo-2/reader.rkt") (lib "funstacker-demo/funstacker.rkt") (lib "basic-demo-3/go.rkt") (lib "txtadv-demo/6-color/txtadv.rkt") (lib "javascriptlike-demo/grammar.rkt") (lib "hdl-demo/And.hdl.rkt") (lib "basic-demo/lexer.rkt") (lib "stackerizer-demo/test-sources.rkt") (lib "txtadv-demo/world.rkt") (lib "hdl-demo/HalfAdder.hdl.rkt") (lib "txtadv-demo/1-monolith/txtadv+world.rkt") (lib "passthrough-demo/main.rkt") (lib "basic-demo-2a/struct.rkt") (lib "basic-demo/parser.rkt") (lib "taco-decompiler-demo/test.rkt") (lib "algebra-demo/test.rkt") (lib "jsonic-demo-3/test-sources.rkt") (lib "hdl-demo/Or.hdl.rkt") (lib "read-only-demo/test.rkt") (lib "hdl-demo/bus.rkt") (lib "txtadv-demo/6-color/reader.rkt") (lib "basic-demo-3/sample-def.rkt") (lib "jsonic-demo-3/expander.rkt") (lib "hdl-demo/Xor.hdl.rkt") (lib "expand-only-demo/test.rkt") (lib "javascriptlike-demo/expander.rkt"))) (name . "beautiful-racket-demo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo"))))))) ("beautiful-racket-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-lib.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661348) (dependencies . ("base" "beautiful-racket-macro" "at-exp-lib" "sugar" "debug" "rackunit-lib" "gui-lib" "draw-lib")) (description . "support library for `beautiful-racket`") (implies . ()) (modules . ((lib "br/get-info.rkt") (lib "br/reader-utils.rkt") (lib "br/cond.rkt") (lib "br/indent.rkt") (lib "br/module.rkt") (lib "br/define.rkt") (lib "br/list.rkt") (lib "br/debug.rkt") (lib "br/test.rkt") (lib "br/quicklang.rkt") (lib "br/datum.rkt") (lib "br/main.rkt") (lib "br/verbose-app.rkt"))) (name . "beautiful-racket-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib"))))))) ("beautiful-racket-macro" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-macro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-macro.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588618090) (dependencies . ("base" "rackunit-lib")) (description . "Subpackage with just the br/macro and br/syntax modules") (implies . ()) (modules . ((lib "br/macro.rkt") (lib "br/syntax.rkt") (lib "br/private/syntax-flatten.rkt") (lib "br/private/generate-literals.rkt"))) (name . "beautiful-racket-macro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro"))))))) ("beeswax" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "beeswax" "doc/beeswax@beeswax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beeswax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beeswax.txt"))) (checksum . "ad702b5a1c3024c6c7a2d19fa7b0c3c2586aa22b") (checksum-error . #f) (collection . "beeswax") (conflicts . ()) (date-added . 1622433816) (dependencies . ("at-exp-lib" "pollen" "sugar" "base" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A Pollen-friendly template language") (implies . ()) (modules . ((lib "beeswax/expander.rkt") (lib "beeswax/private/command.rkt") (lib "beeswax/scribblings/tutorial.scrbl") (lib "beeswax/for-pollen.rkt") (lib "beeswax/scribblings/ack.scrbl") (lib "beeswax/test/data/pollen.rkt") (lib "beeswax/scribblings/sample-proj/template.html.rkt") (lib "beeswax/private/files.rkt") (lib "beeswax/template.rkt") (lib "beeswax/reader.rkt") (lib "beeswax/scribblings/sandbox.rkt") (lib "beeswax/render.rkt") (lib "beeswax/test/data/template.html.rkt") (lib "beeswax/scribblings/beeswax.scrbl") (lib "beeswax/private/constants.rkt") (lib "beeswax/test/test-output.rkt") (lib "beeswax/scribblings/reference.scrbl") (lib "beeswax/scribblings/raco.scrbl"))) (name . "beeswax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:joel@jdueck.net . #t) (pollen . #t) (ring:1 . #t) (templates . #t))) (source . "https://github.com/otherjoel/beeswax.git#main") (tags . ("pollen" "templates")) (versions . #hash((default . #hasheq((checksum . "ad702b5a1c3024c6c7a2d19fa7b0c3c2586aa22b") (source . "https://github.com/otherjoel/beeswax.git#main") (source_url . "https://github.com/otherjoel/beeswax.git#main"))))))) ("begin-with-local" . #hasheq((author . "crystal@panix.com") (authors . ("crystal@panix.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/begin-with-local.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/begin-with-local.txt"))) (checksum . "a90607de9f34cd9400df00b437e3b97b1412cc6c") (checksum-error . #f) (collection . "begin-with-local") (conflicts . ()) (date-added . 1640963199) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Syntactic sugar around `splicing-let`") (implies . ()) (modules . ((lib "begin-with-local/private/syntax-classes.rkt") (lib "begin-with-local/main.rkt") (lib "begin-with-local/test/test-begin-local.rkt"))) (name . "begin-with-local") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:crystal@panix.com . #t) (ring:1 . #t))) (source . "https://github.com/plane/begin-with-local.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a90607de9f34cd9400df00b437e3b97b1412cc6c") (source . "https://github.com/plane/begin-with-local.git#main") (source_url . "https://github.com/plane/begin-with-local.git#main"))))))) ("behavior" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "behavior" "doc/behavior@behavior/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/behavior.txt") (test-failure-log . "server/built/test-fail/behavior.txt") (test-success-log . #f))) (checksum . "6585145db8ba7304c09248835c518ff9245385e3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "scribble-lib" "scribble-math" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "This package introduces a set of modeling techniques for exploring behavior in software systems.\r\nModels such as state machines and Petri nets can be used to model the behavior of a system, and\r\nMarkov chains are used to generate events to help in the simulation of systems.") (implies . ()) (modules . ((lib "behavior/scribblings/behavior.scrbl") (lib "behavior/reporter.rkt") (lib "behavior/petri-net.rkt") (lib "behavior/fsm.rkt") (lib "behavior/test/petri-net.rkt") (lib "behavior/test/scribblings.rkt") (lib "behavior/test/utilities.rkt") (lib "behavior/markov-chain.rkt") (lib "behavior/test/markov-chain.rkt") (lib "behavior/test/fsm.rkt"))) (name . "behavior") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (markov-chain . #t) (petri-net . #t) (ring:1 . #t) (state-machine . #t))) (source . "https://github.com/johnstonskj/behavior.git") (tags . ("markov-chain" "petri-net" "state-machine")) (versions . #hash((default . #hasheq((checksum . "6585145db8ba7304c09248835c518ff9245385e3") (source . "https://github.com/johnstonskj/behavior.git") (source_url . "https://github.com/johnstonskj/behavior.git"))))))) ("benchmark" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "benchmark" "doc/benchmark@benchmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark.txt") (test-failure-log . "server/built/test-fail/benchmark.txt") (test-success-log . #f))) (checksum . "de7e84539de23834508dba42e07859cf13bde20c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "typed-racket-lib" "plot-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Benchmarking library") (implies . ()) (modules . ((lib "benchmark/examples/scribble-example2.rkt") (lib "benchmark/examples/external/collatz1000.rkt") (lib "benchmark/plot.rkt") (lib "benchmark/examples/scribble-example1.rkt") (lib "benchmark/scribblings/benchmark.scrbl") (lib "benchmark/examples/macro-examples/fib.rkt") (lib "benchmark/examples/sleep-racket-time.rkt") (lib "benchmark/examples/sleep-delta.rkt") (lib "benchmark/results.rkt") (lib "benchmark/bootstrap-ci.rkt") (lib "benchmark/types.rkt") (lib "benchmark/main.rkt") (lib "benchmark/examples/external/fib5.rkt") (lib "benchmark/examples/external/fib20.rkt") (lib "benchmark/macro.rkt") (lib "benchmark/examples/sleep.rkt") (lib "benchmark/examples/incremental-record.rkt") (lib "benchmark/examples/macro-examples/collatz.rkt"))) (name . "benchmark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/stamourv/racket-benchmark/tree/master#master") (tags . ("performance")) (versions . #hash((default . #hasheq((checksum . "de7e84539de23834508dba42e07859cf13bde20c") (source . "git://github.com/stamourv/racket-benchmark#master") (source_url . "http://github.com/stamourv/racket-benchmark/tree/master#master"))))))) ("benchmark-ips" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/benchmark-ips.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark-ips.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/benchmark-ips.txt"))) (checksum . "264e756c409f52020462901ee1f5059c9fe674eb") (checksum-error . #f) (collection . "benchmark-ips") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "This is my port of @evanphx's benchmark-ips for ruby to racket. Provides a very simple and clean way to do performance comparisons.") (implies . ()) (modules . ((lib "benchmark-ips/main.rkt") (lib "benchmark-ips/benchmark-ips.rkt"))) (name . "benchmark-ips") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zenspider@gmail.com . #t) (benchmarking . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/zenspider/benchmark-ips-racket/tree/master") (tags . ("benchmarking" "performance")) (versions . #hash((default . #hasheq((checksum . "264e756c409f52020462901ee1f5059c9fe674eb") (source . "git://github.com/zenspider/benchmark-ips-racket") (source_url . "http://github.com/zenspider/benchmark-ips-racket/tree/master"))))))) ("bencode-codec" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bencode-codec" "doc/bencode-codec@bencode-codec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode-codec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode-codec.txt"))) (checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Library for reading and writing Bencoded data.") (implies . ()) (modules . ((lib "bencode-codec/bencode-codec.scrbl") (lib "bencode-codec/test-bencode.rkt") (lib "bencode-codec/dump.rkt") (lib "bencode-codec/bencode.rkt") (lib "bencode-codec/main.rkt"))) (name . "bencode-codec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-bencode/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (source . "git://github.com/tonyg/racket-bencode") (source_url . "http://github.com/tonyg/racket-bencode/tree/master"))))))) ("biginterval" . #hasheq((author . "oflatt@gmail.com") (authors . ("oflatt@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/biginterval.txt") (test-failure-log . "server/built/test-fail/biginterval.txt") (test-success-log . #f))) (checksum . "5a0311dc12a7d63b9598d7ddc7aad048ce3df165") (checksum-error . #f) (collection . "biginterval") (conflicts . ()) (date-added . 1606759655) (dependencies . ("base" "math-lib")) (description . "A racket interface to MPFI, the interval library based on MPFR. http://perso.ens-lyon.fr/nathalie.revol/software.html.\r\nYou should use the package `rival` instead of this.") (implies . ()) (modules . ((lib "biginterval/main.rkt"))) (name . "biginterval") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:oflatt@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/oflatt/biginterval.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5a0311dc12a7d63b9598d7ddc7aad048ce3df165") (source . "https://github.com/oflatt/biginterval.git") (source_url . "https://github.com/oflatt/biginterval.git"))))))) ("binary-class" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class" "doc/binary-class@binary-class/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class.txt"))) (checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Classes for writing and reading binary data") (implies . ()) (modules . ((lib "binary-class/syntax.rkt") (lib "binary-class/string.rkt") (lib "binary-class/base.rkt") (lib "binary-class/contract.rkt") (lib "binary-class/manual.scrbl") (lib "binary-class/common.rkt") (lib "binary-class/private/base.rkt") (lib "binary-class/main.rkt"))) (name . "binary-class") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/binary-class/tree/master") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (source . "git://github.com/Kalimehtar/binary-class") (source_url . "http://github.com/Kalimehtar/binary-class/tree/master"))))))) ("binary-class-dbf" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-dbf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-dbf.txt"))) (checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base" "fast-convert")) (description . "Interface to *.dbf files (dBase, Foxpro, ...)") (implies . ()) (modules . ((lib "binary-class/dbf.rkt") (lib "binary-class/dbf.scrbl"))) (name . "binary-class-dbf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (db . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/binary-class-dbf/tree/master") (tags . ("db" "io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (source . "git://github.com/Kalimehtar/binary-class-dbf") (source_url . "http://github.com/Kalimehtar/binary-class-dbf/tree/master"))))))) ("binary-class-exif" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-exif.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-exif.txt"))) (checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base")) (description . "Class for reading and writing Exif in JPEG or TIFF") (implies . ()) (modules . ((lib "binary-class/exif.rkt"))) (name . "binary-class-exif") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/binary-class-exif/tree/master") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (source . "git://github.com/Kalimehtar/binary-class-exif") (source_url . "http://github.com/Kalimehtar/binary-class-exif/tree/master"))))))) ("binary-class-mp3" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-mp3" "doc/binary-class-mp3@binary-class-mp3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-mp3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-mp3.txt"))) (checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base" "scribble-lib" "racket-doc")) (description . "MP3 ID3v2.1 and ID3v2.2 tags parser") (implies . ()) (modules . ((lib "binary-class/mp3.rkt") (lib "binary-class/manual-mp3.scrbl"))) (name . "binary-class-mp3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/binary-class-mp3/tree/master") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (source . "git://github.com/Kalimehtar/binary-class-mp3") (source_url . "http://github.com/Kalimehtar/binary-class-mp3/tree/master"))))))) ("binary-class-riff" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-riff" "doc/binary-class-riff@binary-class-riff/index.html") ("main" "binary-class-wave" "doc/binary-class-wave@binary-class-riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-riff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-riff.txt"))) (checksum . "ddad0c7fa1e1f7a3b990809bcccbd521204e2fd0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Classes for reading and writing RIFF files") (implies . ()) (modules . ((lib "binary-class/wave.rkt") (lib "binary-class/scribblings/wave.scrbl") (lib "binary-class/scribblings/riff.scrbl") (lib "binary-class/riff.rkt"))) (name . "binary-class-riff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary-class . #t) (io . #t) (riff . #t) (ring:1 . #t) (wav . #t))) (source . "http://github.com/lwhjp/binary-class-riff/tree/master") (tags . ("binary-class" "io" "riff" "wav")) (versions . #hash((default . #hasheq((checksum . "ddad0c7fa1e1f7a3b990809bcccbd521204e2fd0") (source . "git://github.com/lwhjp/binary-class-riff") (source_url . "http://github.com/lwhjp/binary-class-riff/tree/master"))))))) ("binaryio" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binaryio" "doc/binaryio@binaryio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio.txt"))) (checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (checksum-error . #f) (collection . "binaryio") (conflicts . ()) (dependencies . ("base" "binaryio-lib" "rackunit-lib" "math-lib" "racket-doc" "scribble-lib")) (description . "functions for reading and writing binary data") (implies . ("binaryio-lib")) (modules . ((lib "binaryio/test/bytes.rkt") (lib "binaryio/binaryio.scrbl") (lib "binaryio/examples/hpack.rkt") (lib "binaryio/test/fixup.rkt") (lib "binaryio/test/float.rkt") (lib "binaryio/test/integer.rkt"))) (name . "binaryio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (source . "git://github.com/rmculpepper/binaryio?path=binaryio") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio"))))))) ("binaryio-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio-lib.txt"))) (checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (checksum-error . #f) (collection . "binaryio") (conflicts . ()) (dependencies . ("base")) (description . "functions for reading and writing binary data") (implies . ()) (modules . ((lib "binaryio/reader.rkt") (lib "binaryio/integer.rkt") (lib "binaryio/bytes.rkt") (lib "binaryio/main.rkt") (lib "binaryio/float.rkt") (lib "binaryio/bitport.rkt") (lib "binaryio/unchecked/bitport.rkt") (lib "binaryio/prefixcode.rkt") (lib "binaryio/private/bytes.rkt") (lib "binaryio/fixup-port.rkt") (lib "binaryio/unchecked/integer.rkt") (lib "binaryio/private/float.rkt") (lib "binaryio/unchecked/reader.rkt") (lib "binaryio/unchecked/prefixcode.rkt") (lib "binaryio/unchecked/fixup-port.rkt") (lib "binaryio/unchecked/bitvector.rkt") (lib "binaryio/bitvector.rkt"))) (name . "binaryio-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio-lib") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (source . "git://github.com/rmculpepper/binaryio?path=binaryio-lib") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio-lib"))))))) ("binfmt" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binfmt-manual" "doc/binfmt-manual@binfmt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binfmt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binfmt.txt"))) (checksum . "d8abdc93a1fafb47bca0b5bcc13cce22dfcced52") (checksum-error . #f) (collection . "binfmt") (conflicts . ()) (date-added . 1642661458) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A binary format parser generator DSL with support for limited context-sensitivity. (docs & implementation)") (implies . ()) (modules . ((lib "binfmt/runtime/name.rkt") (lib "binfmt/main.rkt") (lib "binfmt/runtime/res.rkt") (lib "binfmt/runtime/parser.rkt") (lib "binfmt/binfmt-manual.scrbl") (lib "binfmt/private/compiler.rkt") (lib "binfmt/runtime/unparser.rkt") (lib "binfmt/runtime.rkt") (lib "binfmt/private/parser.rkt") (lib "binfmt/private/error.rkt") (lib "binfmt/private/lexer.rkt"))) (name . "binfmt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (binary . #t) (bnf . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt") (tags . ("binary" "bnf" "parser")) (versions . #hash((default . #hasheq((checksum . "d8abdc93a1fafb47bca0b5bcc13cce22dfcced52") (source . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt") (source_url . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt"))))))) ("binfmt-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binfmt-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binfmt-test.txt"))) (checksum . "d8abdc93a1fafb47bca0b5bcc13cce22dfcced52") (checksum-error . #f) (collection . "test") (conflicts . ()) (date-added . 1642661494) (dependencies . ("base" "binfmt" "rackcheck" "rackunit")) (description . "A binary format parser generator DSL with support for limited context-sensitivity. (tests)") (implies . ()) (modules . ((lib "test/binfmt/foreign-parsers.rkt") (lib "test/binfmt/wave-test.rkt") (lib "test/binfmt/example-test.rkt") (lib "test/binfmt/unparse-key-mismatch-test.rkt") (lib "test/binfmt/foreign-test.rkt") (lib "test/binfmt/kafka-test.rkt") (lib "test/binfmt/basic-test.rkt") (lib "test/binfmt/cstrings-test.rkt") (lib "test/binfmt/id3v1-test.rkt") (lib "test/binfmt/varint.rkt") (lib "test/binfmt/common.rkt"))) (name . "binfmt-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (binary . #t) (bnf . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt-test") (tags . ("binary" "bnf" "parser")) (versions . #hash((default . #hasheq((checksum . "d8abdc93a1fafb47bca0b5bcc13cce22dfcced52") (source . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt-test") (source_url . "https://github.com/Bogdanp/racket-binfmt.git?path=binfmt-test"))))))) ("binutils" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binutils" "doc/binutils@binutils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binutils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binutils.txt"))) (checksum . "a72ef077e2d00ec776f12c0e497c6517f66dfe16") (checksum-error . #f) (collection . "binutils") (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Utilities for manipulating machine code object files") (implies . ()) (modules . ((lib "binutils/elf/private/system.rkt") (lib "binutils/private/object.rkt") (lib "binutils/elf/private/params.rkt") (lib "binutils/elf/private/types.rkt") (lib "binutils/elf/private/elf.rkt") (lib "binutils/elf/main.rkt") (lib "binutils/elf.rkt") (lib "binutils/link.rkt") (lib "binutils/elf/private/convert.rkt") (lib "binutils/dynamic.rkt") (lib "binutils/main.rkt") (lib "binutils/base.rkt") (lib "binutils/scribblings/binutils.scrbl"))) (name . "binutils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (executable . #t) (ring:1 . #t) (unstable . #t))) (source . "http://github.com/lwhjp/racket-binutils/tree/master") (tags . ("binary" "executable" "unstable")) (versions . #hash((default . #hasheq((checksum . "a72ef077e2d00ec776f12c0e497c6517f66dfe16") (source . "git://github.com/lwhjp/racket-binutils") (source_url . "http://github.com/lwhjp/racket-binutils/tree/master"))))))) ("bip32" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bip32" "doc/bip32@bip32/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bip32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bip32.txt"))) (checksum . "19f4460abd1f5fdacaa651064c4d8353401294f0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597691798) (dependencies . ("base" "binaryio" "sha" "crypto" "base58" "ec" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "rackunit-typed")) (description . "Racket implementation of Bitcoin Improvement Proposal 32.") (implies . ()) (modules . ((lib "bip32/bip32.scrbl") (lib "bip32/data.rkt") (lib "bip32/test.rkt") (lib "bip32/path.rkt") (lib "bip32/serialize.rkt") (lib "bip32/typed-binaryio.rkt") (lib "bip32/main.rkt") (lib "bip32/ripemd160.rkt") (lib "bip32/derive.rkt"))) (name . "bip32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (bitcoin . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/marckn0x/bip32.git") (tags . ("bitcoin" "crypto")) (versions . #hash((default . #hasheq((checksum . "19f4460abd1f5fdacaa651064c4d8353401294f0") (source . "https://github.com/marckn0x/bip32.git") (source_url . "https://github.com/marckn0x/bip32.git"))))))) ("bitsyntax" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bitsyntax" "doc/bitsyntax@bitsyntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bitsyntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bitsyntax.txt"))) (checksum . "fffe0d44e6183d19b5e2b22bf07be4192994243b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Erlang-like binary pattern-matching and bit string manipulation for Racket.") (implies . ()) (modules . ((lib "bitsyntax/test-typed.rkt") (lib "bitsyntax/scribblings/bitsyntax.scrbl") (lib "bitsyntax/bitmatch.rkt") (lib "bitsyntax/bitstx.rkt") (lib "bitsyntax/test-bitmatch-bitstitch.rkt") (lib "bitsyntax/main.rkt") (lib "bitsyntax/bitstring.rkt") (lib "bitsyntax/bitstitch.rkt"))) (name . "bitsyntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-bitsyntax/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "fffe0d44e6183d19b5e2b22bf07be4192994243b") (source . "git://github.com/tonyg/racket-bitsyntax") (source_url . "http://github.com/tonyg/racket-bitsyntax/tree/master"))))))) ("bleir-sandbox" . #hasheq((author . "bc.beckman@gmail.com") (authors . ("bc.beckman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bleir-sandbox" "doc/bleir-sandbox@bleir-sandbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bleir-sandbox.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bleir-sandbox.txt"))) (checksum . "f447a68836248573a828acc04f11a8669040e126") (checksum-error . #f) (collection . "bleir-sandbox") (conflicts . ()) (date-added . 1634651004) (dependencies . ("wxme-lib" "beautiful-racket-lib" "base" "wxme-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "bleir-sandbox/parameters.rkt") (lib "bleir-sandbox/scribblings/bleir-sandbox.scrbl") (lib "bleir-sandbox/file-utils.rkt") (lib "bleir-sandbox/main.rkt") (lib "bleir-sandbox/tartan-py--tartan-or-equals.rkt"))) (name . "bleir-sandbox") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:bc.beckman@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/rebcabin/bleir-sandbox.git#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f447a68836248573a828acc04f11a8669040e126") (source . "https://github.com/rebcabin/bleir-sandbox.git#master") (source_url . "https://github.com/rebcabin/bleir-sandbox.git#master"))))))) ("bloggy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bloggy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bloggy.txt"))) (checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A very simple Racket blog system") (implies . ()) (modules . ((lib "bloggy/main.rkt"))) (name . "bloggy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (blog . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/jeapostrophe/bloggy/tree/master") (tags . ("app" "blog" "web")) (versions . #hash((default . #hasheq((checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (source . "github://github.com/jeapostrophe/bloggy/master") (source_url . "http://github.com/jeapostrophe/bloggy/tree/master"))))))) ("bluetooth-socket" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bluetooth-socket" "doc/bluetooth-socket@bluetooth-socket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bluetooth-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bluetooth-socket.txt"))) (checksum . "bd48368028d2b0e69ba96399d2771d163d40cf46") (checksum-error . #f) (collection . "bluetooth-socket") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket impl of FFI RAW, AF_BLUETOOTH BTPROTO_HCI socket for Linux.\r\nAllows for communicating to a Bluetooth Controller (hciX) via HCI\r\npackets per the Bluetooth Specification.") (implies . ()) (modules . ((lib "bluetooth-socket/socket/bt-socket-ffi.rkt") (lib "bluetooth-socket/socket/hci-socket.rkt") (lib "bluetooth-socket/main.rkt") (lib "bluetooth-socket/socket/stats.rkt") (lib "bluetooth-socket/scribblings/bluetooth-socket.scrbl"))) (name . "bluetooth-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (bluetooth . #t) (ring:1 . #t) (socket . #t))) (source . "https://gitlab.com/RayRacine/bluetooth-socket.git") (tags . ("bluetooth" "socket")) (versions . #hash((default . #hasheq((checksum . "bd48368028d2b0e69ba96399d2771d163d40cf46") (source . "https://gitlab.com/RayRacine/bluetooth-socket.git") (source_url . "https://gitlab.com/RayRacine/bluetooth-socket.git"))))))) ("bnf" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bnf.txt"))) (checksum . "8b1e995e41cdaf87163c9697b35eea81111d9c35") (checksum-error . #f) (collection . "bnf") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "typed-struct-props")) (description . "Concise Typed Racket syntax for declaring recursive data in BNF") (implies . ()) (modules . ((lib "bnf/tests.rkt") (lib "bnf/main.rkt"))) (name . "bnf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (bnf . #t) (data . #t) (grammar . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/philnguyen/bnf/tree/master?path=bnf") (tags . ("bnf" "data" "grammar" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "8b1e995e41cdaf87163c9697b35eea81111d9c35") (source . "git://github.com/philnguyen/bnf?path=bnf") (source_url . "http://github.com/philnguyen/bnf/tree/master?path=bnf"))))))) ("boincrpc" . #hasheq((author . "parnikkapore+rktp@disroot.org") (authors . ("parnikkapore+rktp@disroot.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "boincrpc" "doc/boincrpc@boincrpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/boincrpc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/boincrpc.txt"))) (checksum . "f05dc275c2dac7196b65058f26af9ca9e074aef6") (checksum-error . #f) (collection . "boincrpc") (conflicts . ()) (date-added . 1624433235) (dependencies . ("base" "libquiche" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Thin (but maybe soon to be thicker) abstraction layer for using BOINC’s RPC on Racket") (implies . ()) (modules . ((lib "boincrpc/main.rkt") (lib "boincrpc/scribblings/boincrpc.scrbl"))) (name . "boincrpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:parnikkapore+rktp@disroot.org . #t) (boinc . #t) (ring:1 . #t))) (source . "https://github.com/parnikkapore/rkt-boincrpc.git") (tags . ("boinc")) (versions . #hash((default . #hasheq((checksum . "f05dc275c2dac7196b65058f26af9ca9e074aef6") (source . "https://github.com/parnikkapore/rkt-boincrpc.git") (source_url . "https://github.com/parnikkapore/rkt-boincrpc.git"))))))) ("bookcover" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bookcover" "doc/bookcover@bookcover/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bookcover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bookcover.txt"))) (checksum . "824cdc44d35cc2c418074e4eaf12bbb0e516342f") (checksum-error . #f) (collection . "bookcover") (conflicts . ()) (dependencies . ("base" "beautiful-racket-lib" "draw-lib" "pict-lib" "draw-doc" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib" "slideshow-doc")) (description . "A language/library for creating PDF files suitable for use as printed book covers.") (implies . ()) (modules . ((lib "bookcover/scribblings/bookcover.scrbl") (lib "bookcover/main.rkt") (lib "bookcover/scribblings/module-reference.scrbl") (lib "bookcover/scribblings/overview.scrbl") (lib "bookcover/scribblings/example-cover.rkt") (lib "bookcover/scribblings/appendix.scrbl") (lib "bookcover/draw.rkt"))) (name . "bookcover") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:joel@jdueck.net . #t) (books . #t) (pdf . #t) (ring:1 . #t) (self-publishing . #t))) (source . "https://github.com/otherjoel/bookcover.git") (tags . ("books" "pdf" "self-publishing")) (versions . #hash((default . #hasheq((checksum . "824cdc44d35cc2c418074e4eaf12bbb0e516342f") (source . "https://github.com/otherjoel/bookcover.git") (source_url . "https://github.com/otherjoel/bookcover.git"))))))) ("box-extra" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "box-extra" "doc/box-extra@box-extra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/box-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/box-extra.txt"))) (checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1627209265) (dependencies . ("base" "racket-doc" "box-extra-lib" "rackunit-lib" "scribble-lib")) (description . "Extra utilities for working with boxes in Racket.") (implies . ()) (modules . ((lib "box-extra/scribblings/box-extra.scrbl") (lib "tests/box-extra/main.rkt"))) (name . "box-extra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (boxes . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra") (tags . ("boxes")) (versions . #hash((default . #hasheq((checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra") (source_url . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra"))))))) ("box-extra-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/box-extra-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/box-extra-lib.txt"))) (checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (checksum-error . #f) (collection . "box-extra") (conflicts . ()) (date-added . 1627209237) (dependencies . ("base")) (description . "Extra utilities for working with boxes. (implementation)") (implies . ()) (modules . ((lib "box-extra/main.rkt") (lib "box-extra/unsafe.rkt"))) (name . "box-extra-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (boxes . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib") (tags . ("boxes")) (versions . #hash((default . #hasheq((checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib") (source_url . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib"))))))) ("br-parser-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools.txt"))) (checksum . "95b7c69cf9d660a51abf4742378b9adb7100d25a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1658531959) (dependencies . ("br-parser-tools-lib" "br-parser-tools-doc")) (description . "fork of `parser-tools` with some modernizations & improvements. Backward compatible with `parser-tools`.") (implies . ("br-parser-tools-lib" "br-parser-tools-doc")) (modules . ()) (name . "br-parser-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/br-parser-tools.git?path=br-parser-tools") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "95b7c69cf9d660a51abf4742378b9adb7100d25a") (source . "https://git.matthewbutterick.com/mbutterick/br-parser-tools.git?path=br-parser-tools") (source_url . "https://git.matthewbutterick.com/mbutterick/br-parser-tools.git?path=br-parser-tools"))))))) ("br-parser-tools-doc" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br-parser-tools" "doc/br-parser-tools@br-parser-tools-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-doc.txt"))) (checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661355) (dependencies . ("base" "scheme-lib" "racket-doc" "syntax-color-doc" "br-parser-tools-lib" "scribble-lib")) (description . "fork of `parser-tools-doc` for Beautiful Racket") (implies . ()) (modules . ((lib "br-parser-tools/br-parser-tools.scrbl"))) (name . "br-parser-tools-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc") (source_url . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc"))))))) ("br-parser-tools-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-lib.txt"))) (checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661362) (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib")) (description . "fork of `parser-tools-lib` for Beautiful Racket") (implies . ()) (modules . ((lib "br-parser-tools/private-yacc/parser-builder.rkt") (lib "br-parser-tools/yacc.rkt") (lib "br-parser-tools/private-lex/front.rkt") (lib "br-parser-tools/private-yacc/lalr.rkt") (lib "br-parser-tools/private-lex/util.rkt") (lib "br-parser-tools/private-yacc/parser-actions.rkt") (lib "br-parser-tools/private-lex/actions.rkt") (lib "br-parser-tools/private-yacc/table.rkt") (lib "br-parser-tools/cfg-parser.rkt") (lib "br-parser-tools/private-lex/token.rkt") (lib "br-parser-tools/private-lex/token-syntax.rkt") (lib "br-parser-tools/private-yacc/graph.rkt") (lib "br-parser-tools/private-lex/error-tests.rkt") (lib "br-parser-tools/private-lex/stx.rkt") (lib "br-parser-tools/private-yacc/grammar.rkt") (lib "br-parser-tools/lex-sre.rkt") (lib "br-parser-tools/private-lex/deriv.rkt") (lib "br-parser-tools/private-yacc/lr0.rkt") (lib "br-parser-tools/private-lex/re.rkt") (lib "br-parser-tools/lex.rkt") (lib "br-parser-tools/private-yacc/yacc-helper.rkt") (lib "br-parser-tools/private-yacc/input-file-parser.rkt") (lib "br-parser-tools/yacc-to-scheme.rkt") (lib "br-parser-tools/examples/calc.rkt") (lib "br-parser-tools/examples/read.rkt") (lib "br-parser-tools/lex-plt-v200.rkt") (lib "br-parser-tools/private-lex/unicode-chars.rkt"))) (name . "br-parser-tools-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib") (source_url . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib"))))))) ("brag" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brag" "doc/brag@brag/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag.txt"))) (checksum . "f52c2a80c9cb6840b96532c2ca1371d12aea61e7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556829038) (dependencies . ("base" "brag-lib" "at-exp-lib" "br-parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Modernized & improved version of `ragg` language that generates a parser from a BNF grammar") (implies . ("brag-lib")) (modules . ((lib "brag/brag.scrbl"))) (name . "brag") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/brag.git?path=brag") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "f52c2a80c9cb6840b96532c2ca1371d12aea61e7") (source . "https://git.matthewbutterick.com/mbutterick/brag.git?path=brag") (source_url . "https://git.matthewbutterick.com/mbutterick/brag.git?path=brag"))))))) ("brag-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag-lib.txt"))) (checksum . "f52c2a80c9cb6840b96532c2ca1371d12aea61e7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556803657) (dependencies . ("base" "br-parser-tools-lib" "rackunit-lib" "syntax-color-lib")) (description . "") (implies . ("br-parser-tools-lib")) (modules . ((lib "brag/examples/codepoints.rkt") (lib "brag/test/test-baby-json-hider.rkt") (lib "brag/examples/simple-line-drawing/lexer.rkt") (lib "brag/rules/stx.rkt") (lib "brag/examples/nested-repeats.rkt") (lib "brag/private/indenter.rkt") (lib "brag/examples/top-level-cut-3.rkt") (lib "brag/examples/simple-arithmetic-grammar.rkt") (lib "brag/test/test-lexer.rkt") (lib "brag/test/test-cutter.rkt") (lib "brag/examples/bnf.rkt") (lib "brag/examples/quotation-marks-and-backslashes.rkt") (lib "brag/test/test-whitespace.rkt") (lib "brag/examples/curly-quantifier.rkt") (lib "brag/test/test-empty-symbol.rkt") (lib "brag/examples/baby-json-alt.rkt") (lib "brag/codegen/expander.rkt") (lib "brag/examples/top-level-cut-2.rkt") (lib "brag/rules/parser.rkt") (lib "brag/test/test-01-equal.rkt") (lib "brag/examples/simple-line-drawing/semantics.rkt") (lib "brag/test/test-old-token.rkt") (lib "brag/test/test-hide-and-splice.rkt") (lib "brag/examples/01-equal.rkt") (lib "brag/codegen/reader.rkt") (lib "brag/main.rkt") (lib "brag/test/test-quotation-marks-and-backslashes.rkt") (lib "brag/test/test-simple-line-drawing.rkt") (lib "brag/test/test-curly-quantifier.rkt") (lib "brag/examples/add-mult.rkt") (lib "brag/examples/wordy.rkt") (lib "brag/examples/simple-line-drawing/interpret.rkt") (lib "brag/test/test-simple-arithmetic-grammar.rkt") (lib "brag/test/test-codepoints.rkt") (lib "brag/codegen/flatten.rkt") (lib "brag/rules/stx-types.rkt") (lib "brag/examples/lua-parser.rkt") (lib "brag/test/test-0n1.rkt") (lib "brag/codegen/codegen.rkt") (lib "brag/test/test-start-and-atok.rkt") (lib "brag/test/test-make-rule-parser.rkt") (lib "brag/examples/empty-symbol.rkt") (lib "brag/examples/baby-json-hider.rkt") (lib "brag/examples/simple-line-drawing/lang/reader.rkt") (lib "brag/test/test-cutter-another.rkt") (lib "brag/codegen/runtime.rkt") (lib "brag/examples/start-and-atok.rkt") (lib "brag/test/test-errors.rkt") (lib "brag/rules/rule-structs.rkt") (lib "brag/test/test-top-level-cut.rkt") (lib "brag/private/colorer.rkt") (lib "brag/test/test-wordy.rkt") (lib "brag/test/weird-grammar.rkt") (lib "brag/examples/baby-json.rkt") (lib "brag/examples/whitespace.rkt") (lib "brag/test/test-flatten.rkt") (lib "brag/examples/simple-line-drawing/examples/letter-i.rkt") (lib "brag/test/test-0n1n.rkt") (lib "brag/codegen/satisfaction.rkt") (lib "brag/test/test-weird-grammar.rkt") (lib "brag/test/test-baby-json.rkt") (lib "brag/examples/statlist-grammar.rkt") (lib "brag/test/test-parser.rkt") (lib "brag/examples/cutter-another.rkt") (lib "brag/private/internal-support.rkt") (lib "brag/test/test-all.rkt") (lib "brag/examples/cutter.rkt") (lib "brag/test/test-nested-repeats.rkt") (lib "brag/examples/subrule.rkt") (lib "brag/examples/0n1n.rkt") (lib "brag/support.rkt") (lib "brag/examples/top-level-cut-1.rkt") (lib "brag/rules/lexer.rkt") (lib "brag/examples/nested-word-list.rkt") (lib "brag/examples/simple-line-drawing/grammar.rkt") (lib "brag/examples/simple-line-drawing.rkt") (lib "brag/examples/hide-and-splice.rkt") (lib "brag/examples/0n1.rkt") (lib "brag/examples/baby-json-alt2.rkt"))) (name . "brag-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:mb@mbtype.com . #t) (lib . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/brag.git?path=brag-lib") (tags . ("lib")) (versions . #hash((default . #hasheq((checksum . "f52c2a80c9cb6840b96532c2ca1371d12aea61e7") (source . "https://github.com/mbutterick/brag.git?path=brag-lib") (source_url . "https://github.com/mbutterick/brag.git?path=brag-lib"))))))) ("brazilian-law" . #hasheq((author . "bcclaro+racket@gmail.com") (authors . ("bcclaro+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brazilian-law-parser" "doc/brazilian-law-parser@brazilian-law/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brazilian-law.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brazilian-law.txt"))) (checksum . "912433fd9755e309d7e681fa2c74cff5e692a6d8") (checksum-error . #f) (collection . "brazilian-law-parser") (conflicts . ()) (dependencies . ("base" "megaparsack" "txexpr" "curly-fn-lib" "functional-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "definitions for Brazilian laws; also parses them if in suitable plaintext format.") (implies . ()) (modules . ((lib "brazilian-law-parser/parser.rkt") (lib "brazilian-law-parser/scribblings/brazilian-law-parser.scrbl") (lib "brazilian-law-parser/main.rkt") (lib "brazilian-law-parser/brazilian-law.rkt") (lib "brazilian-law-parser/print.rkt"))) (name . "brazilian-law") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:bcclaro+racket@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/OAB-exams/brazilian-law-parser.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "912433fd9755e309d7e681fa2c74cff5e692a6d8") (source . "https://github.com/OAB-exams/brazilian-law-parser.git") (source_url . "https://github.com/OAB-exams/brazilian-law-parser.git"))))))) ("brush" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brush" "doc/brush@brush/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brush.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brush.txt"))) (checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (checksum-error . #f) (collection . "brush") (conflicts . ()) (dependencies . ("base" "scribble" "at-exp-lib" "scribble-lib" "racket-doc")) (description . "A semi-literate programming package for Scribble") (implies . ()) (modules . ((lib "brush/lp/lang/common.rkt") (lib "brush/main.rkt") (lib "brush/scribblings/brush.scrbl") (lib "brush/lp/lang/lang2.rkt") (lib "brush/private/lp.rkt"))) (name . "brush") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/david-christiansen/brush.git") (tags . ("literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (source . "https://github.com/david-christiansen/brush.git") (source_url . "https://github.com/david-christiansen/brush.git"))))))) ("bs" . #hasheq((author . "oldsin@live.com") (authors . ("oldsin@live.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/bs.txt") (docs . (("main" "bs" "doc/bs@bs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bs.txt"))) (checksum . "0a88ed7217076a6286fdaef0183bea596149991b") (checksum-error . #f) (collection . "bs") (conflicts . ()) (date-added . 1552568058) (dependencies . ("base" "brag" "crypto-lib" "parser-tools-lib" "rackunit-lib" "scribble-lib")) (description . "A Bitcoin Script Implementation for testing Script riddles.") (implies . ()) (modules . ((lib "bs/main.rkt") (lib "bs/parser.rkt") (lib "bs/color-lexer.rkt") (lib "bs/display.rkt") (lib "bs/scribblings/bs.scrbl") (lib "bs/lexer.rkt") (lib "bs/utils.rkt") (lib "bs/expander.rkt") (lib "bs/parser-test.rkt") (lib "bs/setup.rkt") (lib "bs/reader.rkt") (lib "bs/colorer.rkt") (lib "bs/opcodes.rkt") (lib "bs/tokenizer.rkt") (lib "bs/bin.rkt") (lib "bs/structs.rkt"))) (name . "bs") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:oldsin@live.com . #t) (bitcoin . #t) (ring:1 . #t) (script . #t) (scripting . #t))) (source . "https://github.com/oldsin/bs.git") (tags . ("bitcoin" "script" "scripting")) (versions . #hash((default . #hasheq((checksum . "0a88ed7217076a6286fdaef0183bea596149991b") (source . "https://github.com/oldsin/bs.git") (source_url . "https://github.com/oldsin/bs.git"))))))) ("bsd-sysv-checksum" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "bsd-sysv-checksum" "doc/bsd-sysv-checksum@bsd-sysv-checksum/index.html"))) (failure-log . "server/built/fail/bsd-sysv-checksum.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b4c5dcf2c24d56bcd5eef2e3885458eaf6f164d4") (checksum-error . #f) (collection . "bsd-sysv-checksum") (conflicts . ()) (date-added . 1601848967) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Allows for calculation of BSD and System V checksums of files. Uses code from GNU Coreutils and gnulib.") (implies . ()) (modules . ((lib "bsd-sysv-checksum/scribblings/bsd-sysv-checksum.scrbl") (lib "bsd-sysv-checksum/main.rkt") (lib "bsd-sysv-checksum/private/install.rkt"))) (name . "bsd-sysv-checksum") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (checksum . #t) (gnu . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/bsd-sysv-checksum.git") (tags . ("checksum" "gnu")) (versions . #hash((default . #hasheq((checksum . "b4c5dcf2c24d56bcd5eef2e3885458eaf6f164d4") (source . "https://github.com/jeroanan/bsd-sysv-checksum.git") (source_url . "https://github.com/jeroanan/bsd-sysv-checksum.git"))))))) ("buid" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "buid" "doc/buid@buid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/buid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/buid.txt"))) (checksum . "91002917ebbe4e5d6ed06233a3fcadc5d396de15") (checksum-error . #f) (collection . "buid") (conflicts . ()) (date-added . 1586085986) (dependencies . ("base" "racket-doc" "rackcheck" "rackunit-lib" "scribble-lib")) (description . "Universally unique, lexicographically-sortable flake ids for Racket.") (implies . ()) (modules . ((lib "buid/private/base62.rkt") (lib "buid/main.rkt") (lib "buid/buid.scrbl"))) (name . "buid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (flake-id . #t) (ring:1 . #t) (uuid . #t))) (source . "https://github.com/Bogdanp/racket-buid.git") (tags . ("flake-id" "uuid")) (versions . #hash((default . #hasheq((checksum . "91002917ebbe4e5d6ed06233a3fcadc5d396de15") (source . "https://github.com/Bogdanp/racket-buid.git") (source_url . "https://github.com/Bogdanp/racket-buid.git"))))))) ("bv" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bv" "doc/bv@bv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bv.txt"))) (checksum . "9c4291e9eefb55db388fe7381e8852bac6a925f7") (checksum-error . #f) (collection . "bv") (conflicts . ()) (date-added . 1578585000) (dependencies . ("base" "mischief" "math-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "quickcheck" "rosette")) (description . "Bitvectors for Racket a-la Rosette") (implies . ()) (modules . ((lib "bv/private/bv.rkt") (lib "bv/main.rkt") (lib "bv/private/bv-utils.rkt") (lib "bv/scribblings/bv.scrbl"))) (name . "bv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (bitvector . #t) (ring:1 . #t) (rosette . #t))) (source . "https://github.com/pmatos/racket-bv.git") (tags . ("bitvector" "rosette")) (versions . #hash((default . #hasheq((checksum . "9c4291e9eefb55db388fe7381e8852bac6a925f7") (source . "https://github.com/pmatos/racket-bv.git") (source_url . "https://github.com/pmatos/racket-bv.git"))))))) ("bystroTeX" . #hasheq((author . "amkhlv@gmail.com") (authors . ("amkhlv@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@bystroTeX/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bystroTeX.txt") (test-failure-log . "server/built/test-fail/bystroTeX.txt") (test-success-log . #f))) (checksum . "05d79ecab5b2ee7a79d048b5a35e951876afcad4") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "db-lib" "scheme-lib" "scribble-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "at-exp-lib")) (description . "A tool for preparing HTML slides with LaTeX formulas, based on Scribble") (implies . ()) (modules . ((lib "bystroTeX/biblib/bibtex.rkt") (lib "bystroTeX/utils.rkt") (lib "bystroTeX/bibtex.rkt") (lib "bystroTeX/slides.rkt") (lib "bystroTeX/common.rkt") (lib "bystroTeX/xmlconf.rkt") (lib "bystroTeX/slides_for-syntax.rkt") (lib "bystroTeX/biblib/autobib.rkt") (lib "bystroTeX/bystrotex.rkt") (lib "bystroTeX/manual.scrbl"))) (name . "bystroTeX") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (LaTeX . #t) (academic . #t) (author:amkhlv@gmail.com . #t) (ring:1 . #t) (slides . #t))) (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (tags . ("academic" "LaTeX" "slides")) (versions . #hash((default . #hasheq((checksum . "05d79ecab5b2ee7a79d048b5a35e951876afcad4") (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (source_url . "git://github.com/amkhlv/amkhlv/?path=bystroTeX"))))))) ("bzip2" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bzip2" "doc/bzip2@bzip2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bzip2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bzip2.txt"))) (checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "bzip2 compression and decompression") (implies . ()) (modules . ((lib "file/bzip2/private/compress.rkt") (lib "file/bzip2.rkt") (lib "file/bzip2/private/decompress.rkt") (lib "file/bzip2/private/sort.rkt") (lib "file/bzip2/private/structs.rkt") (lib "file/scribblings/bzip2.scrbl") (lib "file/bzip2/private/util.rkt") (lib "file/bzip2/private/io.rkt") (lib "file/bzip2/private/crc.rkt") (lib "file/bzip2/private/huffman.rkt"))) (name . "bzip2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (bzip2 . #t) (compression . #t) (decompression . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/racket-bzip2/tree/master") (tags . ("bzip2" "compression" "decompression")) (versions . #hash((default . #hasheq((checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (source . "git://github.com/97jaz/racket-bzip2") (source_url . "http://github.com/97jaz/racket-bzip2/tree/master"))))))) ("c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c" "doc/c@c/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c.txt"))) (checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "parser-tools-doc" "racket-doc" "scribble-doc")) (description . "A language level for writing C code in DrRacket.") (implies . ()) (modules . ((lib "c/lang/read.rkt") (lib "c/lang/c.scrbl") (lib "c/lang/main.rkt") (lib "c/lang/runtime.rkt") (lib "c/lang/reader.rkt") (lib "tests/c/lang/order.rkt"))) (name . "c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/c/tree/master") (tags . ("c" "language")) (versions . #hash((default . #hasheq((checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (source . "github://github.com/jeapostrophe/c/master") (source_url . "http://github.com/jeapostrophe/c/tree/master"))))))) ("c-defs" . #hasheq((author . "peblairman@gmail.com") (authors . ("peblairman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-defs" "doc/c-defs@c-defs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-defs.txt") (test-failure-log . "server/built/test-fail/c-defs.txt") (test-success-log . #f))) (checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (checksum-error . #f) (collection . "c-defs") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib")) (description . "Simple C value access") (implies . ()) (modules . ((lib "c-defs/docs/c-defs.scrbl") (lib "c-defs/examples/python-types.rkt") (lib "c-defs/ffi.rkt") (lib "c-defs/main.rkt"))) (name . "c-defs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:peblairman@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/belph/c-defs/tree/master") (tags . ("C" "ffi")) (versions . #hash((default . #hasheq((checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (source . "git://github.com/belph/c-defs") (source_url . "http://github.com/belph/c-defs/tree/master"))))))) ("c-utils" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-utils" "doc/c-utils@c-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c-utils.txt"))) (checksum . "a7087828d18fee7268c51104783279d285076560") (checksum-error . #f) (collection . (multi)) (conflicts . ("clang")) (dependencies . ("abnf" "base" "parser-tools-lib" "at-exp-lib" "parser-tools-doc" "planet-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-lib" "srfi-lite-lib")) (description . "Utilities for manipulating C source code.") (implies . ()) (modules . ((lib "c/header.rkt") (lib "c/private/tests/parser.rkt") (lib "c/private/unobtrusive-quote.rkt") (lib "c/scribblings/eval.scrbl") (lib "c/private/syntactic-context.rkt") (lib "c/scribblings/pc.scrbl") (lib "c/private/parser.rkt") (lib "c/scribblings/parse.scrbl") (lib "c/scribblings/syntax.scrbl") (lib "c/ast.rkt") (lib "c/scribblings/intro.scrbl") (lib "c/eval.rkt") (lib "c/scribblings/internals.scrbl") (lib "c/private/tests/header.rkt") (lib "c/pc.rkt") (lib "c/scribblings/header.scrbl") (lib "c/scribblings/history.scrbl") (lib "c/scribblings/utils.rkt") (lib "c/main.rkt") (lib "c/parse.rkt") (lib "c/private/lexer.rkt") (lib "c/scribblings/c-utils.scrbl"))) (name . "c-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (:docs: . #t) (C . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/samth/c.rkt/tree/master") (tags . ("C" "language")) (versions . #hash((default . #hasheq((checksum . "a7087828d18fee7268c51104783279d285076560") (source . "github://github.com/samth/c.rkt/master") (source_url . "http://github.com/samth/c.rkt/tree/master"))))))) ("cKanren" . #hasheq((author . "claire.alvis@gmail.com") (authors . ("claire.alvis@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cKanren.txt") (test-failure-log . "server/built/test-fail/cKanren.txt") (test-success-log . #f))) (checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Constraint programming language") (implies . ()) (modules . ((lib "cKanren/tests/quines.rkt") (lib "cKanren/src/base.rkt") (lib "cKanren/src/framework.rkt") (lib "cKanren/src/mk-structs.rkt") (lib "cKanren/tests/interp.rkt") (lib "cKanren/src/infs.rkt") (lib "cKanren/main.rkt") (lib "cKanren/ck.rkt") (lib "cKanren/src/running.rkt") (lib "cKanren/tests/lazy-appendo.rkt") (lib "cKanren/testall.rkt") (lib "cKanren/tests/nominal/nnf.rkt") (lib "cKanren/tests/symbolo-numbero.rkt") (lib "cKanren/src/variables.rkt") (lib "cKanren/tests/nominal/alphaleantap.rkt") (lib "cKanren/src/constraint-store.rkt") (lib "cKanren/tests/absento.rkt") (lib "cKanren/tests/mk-struct.rkt") (lib "cKanren/src/errors.rkt") (lib "cKanren/src/package.rkt") (lib "cKanren/unstable/interval-domain.rkt") (lib "cKanren/src/operators.rkt") (lib "cKanren/matche.rkt") (lib "cKanren/src/lex.rkt") (lib "cKanren/src/macros.rkt") (lib "cKanren/tests/neq.rkt") (lib "cKanren/lang/reader.rkt") (lib "cKanren/tests/infer.rkt") (lib "cKanren/src/queue.rkt") (lib "cKanren/src/events.rkt") (lib "cKanren/tests/numbero.rkt") (lib "cKanren/unstable/doc/manual.scrbl") (lib "cKanren/tests/symbolo.rkt") (lib "cKanren/tests/sets.rkt") (lib "cKanren/tests/tree-unify.rkt") (lib "cKanren/src/triggers.rkt") (lib "cKanren/tests/framework.rkt") (lib "cKanren/miniKanren.rkt") (lib "cKanren/unstable/sets.rkt") (lib "cKanren/src/helpers.rkt") (lib "cKanren/src/syntax-classes.rkt") (lib "cKanren/tests/no-closure.rkt") (lib "cKanren/neq.rkt") (lib "cKanren/attributes.rkt") (lib "cKanren/unstable/ak.rkt") (lib "cKanren/copy.rkt") (lib "cKanren/tests/fd.rkt") (lib "cKanren/tree-unify.rkt") (lib "cKanren/src/constraints.rkt") (lib "cKanren/src/substitution.rkt") (lib "cKanren/eigen.rkt") (lib "cKanren/unstable/finite-domain.rkt") (lib "cKanren/tests/mk.rkt") (lib "cKanren/tester.rkt") (lib "cKanren/tests/ak.rkt") (lib "cKanren/src/debugging.rkt") (lib "cKanren/tests/comp.rkt") (lib "cKanren/absento.rkt") (lib "cKanren/unstable/fd.rkt"))) (name . "cKanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:claire.alvis@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/calvis/cKanren/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (source . "github://github.com/calvis/cKanren/master") (source_url . "http://github.com/calvis/cKanren/tree/master"))))))) ("cairo" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cairo.txt"))) (checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622495031) (dependencies . ("cairo-lib" "cairo-test")) (description . "Racket bindings for Cairo (a 2d graphics library implemented in C).\r\nThe bindings match the C API closely.") (implies . ("cairo-lib" "cairo-test")) (modules . ()) (name . "cairo") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo#main") (tags . ("2d" "cairo" "graphics")) (versions . #hash((default . #hasheq((checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (source . "https://github.com/soegaard/cairo.git?path=cairo#main") (source_url . "https://github.com/soegaard/cairo.git?path=cairo#main"))))))) ("cairo-lib" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cairo-lib.txt"))) (checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622532736) (dependencies . ("base" "draw-lib")) (description . "Racket bindings for Cairo (a 2d graphics library).\r\nThe bindings match the C API closely.") (implies . ()) (modules . ((lib "cairo/bindings.rkt") (lib "cairo/main.rkt"))) (name . "cairo-lib") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo-lib") (tags . ("2d" "cairo" "graphics")) (versions . #hash((default . #hasheq((checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (source . "https://github.com/soegaard/cairo.git?path=cairo-lib") (source_url . "https://github.com/soegaard/cairo.git?path=cairo-lib"))))))) ("cairo-test" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo-test.txt") (test-failure-log . "server/built/test-fail/cairo-test.txt") (test-success-log . #f))) (checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (checksum-error . #f) (collection . "cairo-test") (conflicts . ()) (date-added . 1622532789) (dependencies . ("base" "cairo-lib" "draw-lib")) (description . "Racket bindings for Cairo (a 2d graphics library).\r\nThe bindings match the C API closely.\r\nThis package contains tests.") (implies . ()) (modules . ((lib "cairo-test/dot-method.rkt") (lib "cairo-test/test3.rkt") (lib "cairo-test/test2.rkt") (lib "cairo-test/test.rkt"))) (name . "cairo-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo-test") (tags . ("cairo")) (versions . #hash((default . #hasheq((checksum . "c31a089e749b4854ab4f63e427881f79bca615d2") (source . "https://github.com/soegaard/cairo.git?path=cairo-test") (source_url . "https://github.com/soegaard/cairo.git?path=cairo-test"))))))) ("calendar" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "calendar" "doc/calendar@calendar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/calendar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/calendar.txt"))) (checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (checksum-error . #f) (collection . "calendar") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gregor-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "calendar/lang.rkt") (lib "calendar/lang/reader.rkt") (lib "calendar/scribblings/calendar.scrbl") (lib "calendar/main.rkt") (lib "calendar/private/event.rkt"))) (name . "calendar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/LeifAndersen/racket-calendar.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (source . "git://github.com/LeifAndersen/racket-calendar.git") (source_url . "http://github.com/LeifAndersen/racket-calendar.git/tree/master"))))))) ("canvas-list" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "canvas-list" "doc/canvas-list@canvas-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/canvas-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/canvas-list.txt"))) (checksum . "8d101e6ede48be4c77673dddc32442f55a42f5c2") (checksum-error . #f) (collection . "canvas-list") (conflicts . ()) (date-added . 1624133882) (dependencies . ("base" "draw-lib" "gui-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib")) (description . "Fast-rendering, single-selection, canvas control allowing custom drawing for a list of items.") (implies . ()) (modules . ((lib "canvas-list/scribblings/canvas-list.scrbl") (lib "canvas-list/main.rkt"))) (name . "canvas-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:massung@gmail.com . #t) (canvas . #t) (control . #t) (custom . #t) (gui . #t) (list . #t) (ring:1 . #t))) (source . "https://github.com/massung/racket-canvas-list.git") (tags . ("canvas" "control" "custom" "gui" "list")) (versions . #hash((default . #hasheq((checksum . "8d101e6ede48be4c77673dddc32442f55a42f5c2") (source . "https://github.com/massung/racket-canvas-list.git") (source_url . "https://github.com/massung/racket-canvas-list.git"))))))) ("carl-lib" . #hasheq((author . "moe@kayali.io") (authors . ("moe@kayali.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "carl-lib" "doc/carl-lib@carl-lib/index.html"))) (failure-log . "server/built/fail/carl-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "195c155ccf9306acd29adaf2ab7d536d7686f849") (checksum-error . #f) (collection . "carl-lib") (conflicts . ()) (date-added . 1587590245) (dependencies . ("base" "brag-lib" "db" "graph" "math-lib" "rackunit-lib" "scribble-lib" "csv-writing" "racket-graphviz" "scribble-lib" "racket-doc" "rackunit-lib" "math-doc")) (description . "Backend for Causal Relational Learning implementation") (implies . ()) (modules . ((lib "carl-lib/scribblings/carl-lib.scrbl") (lib "carl-lib/unit-table.rkt") (lib "carl-lib/embed.rkt") (lib "carl-lib/test/embed.rkt") (lib "carl-lib/estimate/estimate.rkt") (lib "carl-lib/main.rkt") (lib "carl-lib/estimate/misc.rkt") (lib "carl-lib/test/lang.rkt") (lib "carl-lib/ground/load.rkt") (lib "carl-lib/detect.rkt") (lib "carl-lib/unit-table/construct.rkt") (lib "carl-lib/test/ground.rkt") (lib "carl-lib/test/detect.rkt") (lib "carl-lib/embed/summary.rkt") (lib "carl-lib/ground.rkt") (lib "carl-lib/lang/expander.rkt") (lib "carl-lib/test/integration.rkt") (lib "carl-lib/detect/backdoor.rkt") (lib "carl-lib/lang/parser.rkt") (lib "carl-lib/estimate.rkt") (lib "carl-lib/lang/reader.rkt") (lib "carl-lib/lang.rkt"))) (name . "carl-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (academic . #t) (author:moe@kayali.io . #t) (causal-inference . #t) (ring:1 . #t) (statistics . #t))) (source . "https://github.com/mkyl/carl-lib.git") (tags . ("academic" "causal-inference" "statistics")) (versions . #hash((default . #hasheq((checksum . "195c155ccf9306acd29adaf2ab7d536d7686f849") (source . "https://github.com/mkyl/carl-lib.git") (source_url . "https://github.com/mkyl/carl-lib.git"))))))) ("casemate" . #hasheq((author . "johan@2130.se") (authors . ("johan@2130.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "casemate" "doc/casemate@casemate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/casemate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/casemate.txt"))) (checksum . "8a2a3801300b538f3152cd3829c2a19c996fd57e") (checksum-error . #f) (collection . "casemate") (conflicts . ()) (date-added . 1574376039) (dependencies . ("base" "srfi-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Case converter in the style of camel-snake-kebab") (implies . ()) (modules . ((lib "casemate/main.rkt") (lib "casemate/casemate.scrbl"))) (name . "casemate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johan@2130.se . #t) (byte-string . #t) (camel . #t) (kebab . #t) (pascal . #t) (ring:1 . #t) (snake . #t) (string . #t) (symbol . #t))) (source . "https://github.com/jozip/casemate.git") (tags . ("byte-string" "camel" "kebab" "pascal" "snake" "string" "symbol")) (versions . #hash((default . #hasheq((checksum . "8a2a3801300b538f3152cd3829c2a19c996fd57e") (source . "https://github.com/jozip/casemate.git") (source_url . "https://github.com/jozip/casemate.git"))))))) ("cbor" . #hasheq((author . "williewillus@vincent-lee.net") (authors . ("williewillus@vincent-lee.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@cbor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cbor.txt") (test-failure-log . "server/built/test-fail/cbor.txt") (test-success-log . #f))) (checksum . "fa0335296db25aa137da79d653b6cb9759c507c0") (checksum-error . #f) (collection . "cbor") (conflicts . ()) (date-added . 1618537410) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of Concise Binary Object Representation (RFC 8949) for Racket.") (implies . ()) (modules . ((lib "cbor/private/util.rkt") (lib "cbor/private/test_data.rkt") (lib "cbor/common.rkt") (lib "cbor/encode.rkt") (lib "cbor/decode.rkt") (lib "cbor/scribblings/manual.scrbl") (lib "cbor/main.rkt"))) (name . "cbor") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:williewillus@vincent-lee.net . #t) (cbor . #t) (rfc-8949 . #t) (rfc8949 . #t) (ring:1 . #t))) (source . "git+https://git.sr.ht/~williewillus/racket-rfc8949") (tags . ("cbor" "rfc-8949" "rfc8949")) (versions . #hash((default . #hasheq((checksum . "fa0335296db25aa137da79d653b6cb9759c507c0") (source . "git+https://git.sr.ht/~williewillus/racket-rfc8949") (source_url . "git+https://git.sr.ht/~williewillus/racket-rfc8949"))))))) ("cc4101-handin" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cc4101-handin.txt") (test-failure-log . "server/built/test-fail/cc4101-handin.txt") (test-success-log . #f))) (checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin client for the CC4101 - Programming Languages course at University of Chile") (implies . ()) (modules . ((lib "cc4101-handin/client.rkt") (lib "cc4101-handin/this-collection.rkt") (lib "cc4101-handin/handin-multi.rkt") (lib "cc4101-handin/updater.rkt") (lib "cc4101-handin/client-gui.rkt"))) (name . "cc4101-handin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/pleiad/cc4101-handin-client/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (source . "github://github.com/pleiad/cc4101-handin-client/master") (source_url . "http://github.com/pleiad/cc4101-handin-client/tree/master"))))))) ("chain-module-begin" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chain-module-begin" "doc/chain-module-begin@chain-module-begin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chain-module-begin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chain-module-begin.txt"))) (checksum . "77fca59322b93cb83a2d57c25546dd7a7313bc56") (checksum-error . #f) (collection . "chain-module-begin") (conflicts . ()) (date-added . 1614799371) (dependencies . ("base" "rackunit-lib" "debug-scopes" "scribble-lib" "racket-doc")) (description . "Helper to define meta-languages which can chain-call other languages. Status: Experimental (no backwards compatibility).") (implies . ()) (modules . ((lib "chain-module-begin/main.rkt") (lib "chain-module-begin/scribblings/chain-module-begin.scrbl"))) (name . "chain-module-begin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/chain-module-begin.git#main") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "77fca59322b93cb83a2d57c25546dd7a7313bc56") (source . "https://github.com/jsmaniac/chain-module-begin.git#main") (source_url . "https://github.com/jsmaniac/chain-module-begin.git#main"))))))) ("check-sexp-equal" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/check-sexp-equal.txt") (docs . (("main" "check-sexp-equal" "doc/check-sexp-equal@check-sexp-equal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/check-sexp-equal.txt") (test-failure-log . "server/built/test-fail/check-sexp-equal.txt") (test-success-log . #f))) (checksum . "59d1d837e8d7d6d0d4a8d4dc23497a9589f234fc") (checksum-error . #f) (collection . "check-sexp-equal") (conflicts . ()) (dependencies . ("sexp-diff" "base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "A simple extension for rackunit that provides s-expression diffs on failure.") (implies . ()) (modules . ((lib "check-sexp-equal/main.rkt") (lib "check-sexp-equal/check-sexp-equal.scrbl") (lib "check-sexp-equal/check-doco.rkt"))) (name . "check-sexp-equal") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:zenspider@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/zenspider/check-sexp-equal/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "59d1d837e8d7d6d0d4a8d4dc23497a9589f234fc") (source . "git://github.com/zenspider/check-sexp-equal") (source_url . "http://github.com/zenspider/check-sexp-equal/tree/master"))))))) ("chess" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chess" "doc/chess@chess/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chess.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chess.txt"))) (checksum . "cd7aaa015ddaa87026b11dfe8dbe6778409b5286") (checksum-error . #f) (collection . "chess") (conflicts . ()) (date-added . 1566844917) (dependencies . ("base" "pict-lib" "rebellion" "reprovide-lang" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for modeling games of chess") (implies . ()) (modules . ((lib "chess/private/slot.rkt") (lib "chess/piece.scrbl") (lib "chess/square.scrbl") (lib "chess/main.rkt") (lib "chess/main.scrbl") (lib "chess/private/pict-combiner.rkt") (lib "chess/piece.rkt") (lib "chess/board.scrbl") (lib "chess/private/index-of.rkt") (lib "chess/square.rkt") (lib "chess/private/scribble-defthingstogether.rkt") (lib "chess/pict.rkt") (lib "chess/patch.rkt") (lib "chess/pict.scrbl") (lib "chess/patch.scrbl") (lib "chess/private/scribble-evaluator-factory.rkt") (lib "chess/board.rkt"))) (name . "chess") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (chess . #t) (data-structures . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/chess.git") (tags . ("chess" "data-structures" "games")) (versions . #hash((default . #hasheq((checksum . "cd7aaa015ddaa87026b11dfe8dbe6778409b5286") (source . "https://github.com/jackfirth/chess.git") (source_url . "https://github.com/jackfirth/chess.git"))))))) ("chez-runner" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chez-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chez-runner.txt"))) (checksum . "a999587b41ff7c1da3a3fe2bb95fd8483ef77905") (checksum-error . #f) (collection . "chez-runner") (conflicts . ()) (dependencies . ("base" "gui-lib" "drracket" "rackunit-lib" "scribble-lib" "pict-lib")) (description . "run chez scheme programs in drracket") (implies . ()) (modules . ((lib "chez-runner/tool.rkt"))) (name . "chez-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (chez-scheme . #t) (drracket . #t) (plugin . #t) (ring:1 . #t) (scheme . #t))) (source . "https://github.com/Syntacticlosure/chez-runner.git") (tags . ("chez-scheme" "drracket" "plugin" "scheme")) (versions . #hash((default . #hasheq((checksum . "a999587b41ff7c1da3a3fe2bb95fd8483ef77905") (source . "https://github.com/Syntacticlosure/chez-runner.git") (source_url . "https://github.com/Syntacticlosure/chez-runner.git"))))))) ("chido-parse" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chido-parse" "doc/chido-parse@chido-parse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chido-parse.txt") (test-failure-log . "server/built/test-fail/chido-parse.txt") (test-success-log . #f))) (checksum . "2c0ff3616c696a17b4c0761f44ef1331b4dc4595") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1589338385) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "data-lib" "kw-make-struct" "quickcheck" "web-server-lib" "at-exp-lib" "linea" "profile-lib")) (description . "Parsing with delimited continuations.") (implies . ()) (modules . ((lib "chido-parse/private/core-simplified.rkt") (lib "chido-parse/private/bnf-parse.rkt") (lib "chido-parse/private/benchmark3.rkt") (lib "chido-parse/private/parameters.rkt") (lib "chido-parse/scribblings/guide.scrbl") (lib "chido-parse/scribblings/chido-parse.scrbl") (lib "chido-parse/private/test-util-1.rkt") (lib "chido-parse/private/wrap-at-reader.rkt") (lib "chido-parse/private/ephemeron-cache.rkt") (lib "chido-parse/demo/xml-macros.rkt") (lib "chido-parse/demo/parenhp.rkt") (lib "chido-parse/main.rkt") (lib "chido-parse/demo/dynamic.rkt") (lib "chido-parse/private/parse-stream.rkt") (lib "chido-parse/demo/xml-macros-use.rkt") (lib "chido-parse/demo/unary.rkt") (lib "chido-parse/private/parse-failure.rkt") (lib "chido-parse/private/readtable-parser.rkt") (lib "chido-parse/private/core-direct-jumps-rewrite.rkt") (lib "chido-parse/demo/use-parenhp.rkt") (lib "chido-parse/private/bnf-s-exp.rkt") (lib "chido-parse/private/trie.rkt") (lib "chido-parse/private/stream-flatten.rkt") (lib "chido-parse/demo/linea-wrap.rkt") (lib "chido-parse/private/binding-sequence.rkt") (lib "chido-parse/private/bnf-macro.rkt") (lib "chido-parse/private/test-bnf-syntactic-lang.rkt") (lib "chido-parse/private/port-broker.rkt") (lib "chido-parse/scribblings/reference.scrbl") (lib "chido-parse/demo/xml.rkt") (lib "chido-parse/private/benchmark1.rkt") (lib "chido-parse/private/parse-direct-tests.rkt") (lib "chido-parse/private/core-use.rkt") (lib "chido-parse/private/test-util-2.rkt") (lib "chido-parse/private/procedural-combinators.rkt") (lib "chido-parse/bnf-syntactic.rkt") (lib "chido-parse/private/core.rkt") (lib "chido-parse/private/test-util-3.rkt"))) (name . "chido-parse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-chido-parse.git") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "2c0ff3616c696a17b4c0761f44ef1331b4dc4595") (source . "https://github.com/willghatch/racket-chido-parse.git") (source_url . "https://github.com/willghatch/racket-chido-parse.git"))))))) ("chief" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chief.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chief.txt"))) (checksum . "29db53fee2ec98976b75844ec7e1bef41f0694fb") (checksum-error . #f) (collection . "chief") (conflicts . ()) (date-added . 1568996716) (dependencies . ("base" "gregor-lib" "at-exp-lib" "rackunit-lib")) (description . "Chief runs Procfile-based applications. Like foreman, but written in Racket. ") (implies . ()) (modules . ((lib "chief/private/procfile.rkt") (lib "chief/private/env.rkt") (lib "chief/private/formation.rkt") (lib "chief/private/term.rkt") (lib "chief/cli.rkt"))) (name . "chief") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (process . #t) (ring:1 . #t) (shell . #t))) (source . "https://github.com/Bogdanp/racket-chief.git?path=chief") (tags . ("process" "shell")) (versions . #hash((default . #hasheq((checksum . "29db53fee2ec98976b75844ec7e1bef41f0694fb") (source . "https://github.com/Bogdanp/racket-chief.git?path=chief") (source_url . "https://github.com/Bogdanp/racket-chief.git?path=chief"))))))) ("chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("chk-lib" "chk-doc")) (description . "a minimal tester") (implies . ("chk-lib" "chk-doc")) (modules . ()) (name . "chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jeapostrophe/chk/tree/master?path=chk") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk"))))))) ("chk-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chk" "doc/chk@chk-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-doc.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "chk-lib")) (description . "a minimal tester") (implies . ()) (modules . ((lib "chk/chk.scrbl"))) (name . "chk-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jeapostrophe/chk/tree/master?path=chk-doc") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-doc") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-doc"))))))) ("chk-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-lib.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("testing-util-lib" "base")) (description . "a minimal tester") (implies . ()) (modules . ((lib "chk/main.rkt"))) (name . "chk-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jeapostrophe/chk/tree/master?path=chk-lib") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-lib") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-lib"))))))) ("chk-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-test.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "chk-lib" "testing-util-lib")) (description . "a minimal tester") (implies . ()) (modules . ((lib "chk/test.rkt") (lib "chk/test-args.rkt"))) (name . "chk-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jeapostrophe/chk/tree/master?path=chk-test") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-test") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-test"))))))) ("choose-lang" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "choose-lang" "doc/choose-lang@choose-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/choose-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/choose-lang.txt"))) (checksum . "fdf777d8e82df64a69df1d09fc7f92c216f3bc68") (checksum-error . #f) (collection . "choose-lang") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-abbrevs" "typed-racket-doc")) (description . "Pick #lang at read-time") (implies . ()) (modules . ((lib "choose-lang/lang/reader.rkt") (lib "choose-lang/scribblings/choose-lang.scrbl") (lib "choose-lang/main.rkt"))) (name . "choose-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://gitlab.com/bengreenman/choose-lang.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "fdf777d8e82df64a69df1d09fc7f92c216f3bc68") (source . "https://gitlab.com/bengreenman/choose-lang.git") (source_url . "https://gitlab.com/bengreenman/choose-lang.git"))))))) ("choose-out" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "choose-out" "doc/choose-out@choose-out/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/choose-out.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/choose-out.txt"))) (checksum . "55d3e0349408733337381a307ada0e89b88ae699") (checksum-error . #f) (collection . "choose-out") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-abbrevs" "typed-racket-doc")) (description . "Conditional provide (choose during expansion of importing module)") (implies . ()) (modules . ((lib "choose-out/test/trustme/server.rkt") (lib "choose-out/private/choose-out.rkt") (lib "choose-out/test/trustme/client-untrust.rkt") (lib "choose-out/private/renaming.rkt") (lib "choose-out/test/trustme/client-trustme.rkt") (lib "choose-out/scribblings/choose-out.scrbl") (lib "choose-out/renaming.rkt") (lib "choose-out/main.rkt"))) (name . "choose-out") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (provide . #t) (ring:1 . #t))) (source . "https://gitlab.com/bengreenman/choose-out.git") (tags . ("provide")) (versions . #hash((default . #hasheq((checksum . "55d3e0349408733337381a307ada0e89b88ae699") (source . "https://gitlab.com/bengreenman/choose-out.git") (source_url . "https://gitlab.com/bengreenman/choose-out.git"))))))) ("circuit-playground" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "circuit-playground" "doc/circuit-playground@circuit-playground/index.html"))) (failure-log . "server/built/fail/circuit-playground.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Language for coding the Circuit Playground Express in Racket.  Compiles Racket code to Python, which runs on a custom version of the Circuit Python firmware.  We use this for educational purposes at ThoughtSTEM.  It may or may not work on your operating system.  I've tested it only on Mac and Linux.   ") (implies . ()) (modules . ((lib "circuit-playground/api/circuit-python-base.rkt") (lib "circuit-playground/api/ir.rkt") (lib "circuit-playground/racket-demos/blaster.rkt") (lib "circuit-playground/racket-demos/loudness-necklace.rkt") (lib "circuit-playground/installer.rkt") (lib "circuit-playground/api/sound.rkt") (lib "circuit-playground/racket-demos/droids.rkt") (lib "circuit-playground/api/input.rkt") (lib "circuit-playground/racket-demos/clap-light.rkt") (lib "circuit-playground/api/lights.rkt") (lib "circuit-playground/api/rgb_helper.rkt") (lib "circuit-playground/racket-demos/lightsaber.rkt") (lib "circuit-playground/main.rkt") (lib "circuit-playground/api/servo.rkt") (lib "circuit-playground/circuit-playground.scrbl") (lib "circuit-playground/racket-demos/magic-wand.rkt") (lib "circuit-playground/api/accel.rkt") (lib "circuit-playground/racket-demos/night-light.rkt") (lib "circuit-playground/api/circuit-python.rkt") (lib "circuit-playground/racket-demos/hot-potato.rkt") (lib "circuit-playground/racket-demos/hello-led.rkt") (lib "circuit-playground/api/python.rkt") (lib "circuit-playground/racket-demos/servo-hello.rkt") (lib "circuit-playground/racket-demos/hello-world.rkt") (lib "circuit-playground/racket-demos/hello-button-down.rkt") (lib "circuit-playground/racket-demos/hello-touch-pad.rkt") (lib "circuit-playground/racket-demos/siren-demo.rkt") (lib "circuit-playground/api/output.rkt") (lib "circuit-playground/racket-demos/hello-ir.rkt") (lib "circuit-playground/circuit-playground-module.rkt") (lib "circuit-playground/racket-demos/death-star.rkt") (lib "circuit-playground/racket-demos/jingles.rkt"))) (name . "circuit-playground") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/circuit-playground.git") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (source . "https://github.com/thoughtstem/circuit-playground.git") (source_url . "https://github.com/thoughtstem/circuit-playground.git"))))))) ("cksum" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cksum" "doc/cksum@cksum/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/cksum.txt") (success-log . "server/built/install/cksum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cksum.txt"))) (checksum . "ea390924866cb53df44f4d812c1f187e2e88b8a7") (checksum-error . #f) (collection . "cksum") (conflicts . ()) (date-added . 1603746998) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Allows for calculation of CRC checksums of files in the style of the cksum utility from GNU Coreutils. Uses code from GNU Coreutils and gnulib.") (implies . ()) (modules . ((lib "cksum/private/install.rkt") (lib "cksum/main.rkt") (lib "cksum/scribblings/cksum.scrbl"))) (name . "cksum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (checksum . #t) (gnu . #t) (gnulib . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/cksum.git") (tags . ("checksum" "gnu" "gnulib")) (versions . #hash((default . #hasheq((checksum . "ea390924866cb53df44f4d812c1f187e2e88b8a7") (source . "https://github.com/jeroanan/cksum.git") (source_url . "https://github.com/jeroanan/cksum.git"))))))) ("clang" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "stdc"))) (failure-log . "server/built/fail/clang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f4f8c808ec458725e5fd5396e83582aeb0361194") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550759669) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Toolbox for C family in Typed Racket") (implies . ()) (modules . ((lib "stdc/digitama/syntax/stdin.rkt") (lib "stdc/village/clang/reader.rkt") (lib "stdc/digitama/syntax/tokenizer/keyword.rkt") (lib "stdc/tamer/stdc.scrbl") (lib "stdc/digitama/syntax/translation.rkt") (lib "stdc/digitama/syntax/tokenizer.rkt") (lib "stdc/header.rkt") (lib "stdc/tamer/spec/tokenizer.rkt") (lib "stdc/cpp.rkt") (lib "stdc/c.rkt") (lib "stdc/digitama/syntax/digicore.rkt") (lib "stdc/village/clang/lexer.rkt"))) (name . "clang") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (C . #t) (author:juzhenliang@gmail.com . #t) (ffi . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t) (unsafe . #t) (unstable . #t))) (source . "https://github.com/wargrey/clang.git") (tags . ("C" "ffi" "parser" "typed-racket" "unsafe" "unstable")) (versions . #hash((default . #hasheq((checksum . "f4f8c808ec458725e5fd5396e83582aeb0361194") (source . "https://github.com/wargrey/clang.git") (source_url . "https://github.com/wargrey/clang.git"))))))) ("classicthesis-scribble" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/classicthesis-scribble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/classicthesis-scribble.txt"))) (checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (checksum-error . #f) (collection . "classicthesis") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Scribble wrapper for the classicthesis LaTeX style.") (implies . ()) (modules . ((lib "classicthesis/test-bib.rkt") (lib "classicthesis/include/lang/reader.rkt") (lib "classicthesis/test-part.scrbl") (lib "classicthesis/test-chapter.scrbl") (lib "classicthesis/lang.rkt") (lib "classicthesis/test-acknowledgements.scrbl") (lib "classicthesis/test.scrbl") (lib "classicthesis/test-section.scrbl") (lib "classicthesis/test-abstract.scrbl") (lib "classicthesis/include.rkt") (lib "classicthesis/lang/reader.rkt"))) (name . "classicthesis-scribble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/stamourv/classicthesis-scribble/tree/master") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (source . "git://github.com/stamourv/classicthesis-scribble") (source_url . "http://github.com/stamourv/classicthesis-scribble/tree/master"))))))) ("cldr-bcp47" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-bcp47-timezone" "doc/cldr-bcp47-timezone@cldr-bcp47/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-bcp47.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-bcp47.txt"))) (checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for BCP47 extensions to CLDR") (implies . ()) (modules . ((lib "cldr/bcp47/timezone.rkt") (lib "cldr/bcp47/scribblings/cldr-bcp47-timezone.scrbl"))) (name . "cldr-bcp47") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/cldr-bcp47/tree/master") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (source . "git://github.com/97jaz/cldr-bcp47") (source_url . "http://github.com/97jaz/cldr-bcp47/tree/master"))))))) ("cldr-core" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-core" "doc/cldr-core@cldr-core/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-core.txt"))) (checksum . "c9b80777c422c3b104bb85052d74a2dc1535a3c3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "memoize-lib" "racket-doc" "scribble-lib")) (description . "API for cldr-core data set") (implies . ()) (modules . ((lib "cldr/scribblings/cldr-core.scrbl") (lib "cldr/likely-subtags.rkt") (lib "cldr/core.rkt") (lib "cldr/file.rkt"))) (name . "cldr-core") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/cldr-core/tree/master") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "c9b80777c422c3b104bb85052d74a2dc1535a3c3") (source . "git://github.com/97jaz/cldr-core") (source_url . "http://github.com/97jaz/cldr-core/tree/master"))))))) ("cldr-dates-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-dates-modern" "doc/cldr-dates-modern@cldr-dates-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-dates-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-dates-modern.txt"))) (checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-dates-modern data set") (implies . ()) (modules . ((lib "cldr/dates-modern.rkt") (lib "cldr/scribblings/cldr-dates-modern.scrbl"))) (name . "cldr-dates-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/cldr-dates-modern/tree/master") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (source . "git://github.com/97jaz/cldr-dates-modern") (source_url . "http://github.com/97jaz/cldr-dates-modern/tree/master"))))))) ("cldr-localenames-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-localenames-modern" "doc/cldr-localenames-modern@cldr-localenames-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-localenames-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-localenames-modern.txt"))) (checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-localenames-modern data set") (implies . ()) (modules . ((lib "cldr/localenames-modern.rkt") (lib "cldr/scribblings/cldr-localenames-modern.scrbl"))) (name . "cldr-localenames-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/cldr-localenames-modern/tree/master") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (source . "git://github.com/97jaz/cldr-localenames-modern") (source_url . "http://github.com/97jaz/cldr-localenames-modern/tree/master"))))))) ("cldr-numbers-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-numbers-modern" "doc/cldr-numbers-modern@cldr-numbers-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-numbers-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-numbers-modern.txt"))) (checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-numbers-modern data set") (implies . ()) (modules . ((lib "cldr/numbers-modern.rkt") (lib "cldr/scribblings/cldr-numbers-modern.scrbl"))) (name . "cldr-numbers-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/cldr-numbers-modern/tree/master") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (source . "git://github.com/97jaz/cldr-numbers-modern") (source_url . "http://github.com/97jaz/cldr-numbers-modern/tree/master"))))))) ("cli" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cli" "doc/cli@cli/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cli.txt"))) (checksum . "26c930e8f8bc4cb9396561f2678d74179473085d") (checksum-error . #f) (collection . "cli") (conflicts . ()) (date-added . 1627003429) (dependencies . ("base" "mischief" "version-case" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "cover" "cover-coveralls" "sandbox-lib")) (description . "Simple and expressive command line interfaces.") (implies . ()) (modules . ((lib "cli/expander.rkt") (lib "cli/tests/test-scripts.rkt") (lib "cli/private/util.rkt") (lib "cli/tests/cli.rkt") (lib "cli/tests/scripts/flag-w-args.rkt") (lib "cli/main.rkt") (lib "cli/scribblings/cli.scrbl") (lib "cli/tests/scripts/flag-w-multiple-args.rkt") (lib "cli/tests/scripts/constraints.rkt") (lib "cli/reader.rkt") (lib "cli/tests/scripts/flag.rkt") (lib "cli/tests/scripts/doc.rkt") (lib "cli/tests/scripts/no-args.rkt") (lib "cli/tests/scripts/args.rkt"))) (name . "cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (cli . #t) (command-line . #t) (ring:1 . #t) (scripting . #t))) (source . "https://github.com/countvajhula/cli.git#main") (tags . ("cli" "command-line" "scripting")) (versions . #hash((default . #hasheq((checksum . "26c930e8f8bc4cb9396561f2678d74179473085d") (source . "https://github.com/countvajhula/cli.git#main") (source_url . "https://github.com/countvajhula/cli.git#main"))))))) ("clicker-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/clicker-assets.txt") (docs . (("main" "clicker-assets" "doc/clicker-assets@clicker-assets/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clicker-assets.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/clicker-assets.txt"))) (checksum . "a377ae67172c3174a094c4794ea98c9f50b1dedd") (checksum-error . #f) (collection . "clicker-assets") (conflicts . ()) (date-added . 1569611658) (dependencies . ("base" "define-assets-from" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Assets for clicker games") (implies . ()) (modules . ((lib "clicker-assets/main.rkt") (lib "clicker-assets/scribblings/clicker-assets.scrbl"))) (name . "clicker-assets") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/clicker-assets.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a377ae67172c3174a094c4794ea98c9f50b1dedd") (source . "https://github.com/thoughtstem/clicker-assets.git") (source_url . "https://github.com/thoughtstem/clicker-assets.git"))))))) ("client-cookies" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/client-cookies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/client-cookies.txt"))) (checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556510505) (dependencies . ("base")) (description . "Client cookies jar for net/url and similar libs.\r\nDeprecated: use net/cookies.") (implies . ()) (modules . ((lib "client-cookies/dev.rkt") (lib "client-cookies/main.rkt"))) (name . "client-cookies") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (deprecated . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Kalimehtar/client-cookies.git") (tags . ("deprecated" "net" "web")) (versions . #hash((default . #hasheq((checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (source . "https://github.com/Kalimehtar/client-cookies.git") (source_url . "https://github.com/Kalimehtar/client-cookies.git"))))))) ("clotho" . #hasheq((author . "william@hatch.uno eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "clotho" "doc/clotho@clotho/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clotho.txt") (test-failure-log . "server/built/test-fail/clotho.txt") (test-success-log . #f))) (checksum . "7cc309787f07286e3b1411346f4e85e4bec09098") (checksum-error . #f) (collection . "clotho") (conflicts . ()) (date-added . 1596395710) (dependencies . ("base" "version-string-with-git-hash" "rackunit-lib" "math-lib" "scribble-lib" "racket-doc")) (description . "A library for enabling parametric randomness in Racket applications.") (implies . ()) (modules . ((lib "clotho/scribblings/api.scrbl") (lib "clotho/scribblings/acknowledgments.scrbl") (lib "clotho/examples/guide/manipulate.rkt") (lib "clotho/examples/guide/external-multiple.rkt") (lib "clotho/lib/common.rkt") (lib "clotho/lib/macros.rkt") (lib "clotho/examples/guide/success.rkt") (lib "clotho/lib/clean-prg.rkt") (lib "clotho/scribblings/code-and-license.scrbl") (lib "clotho/lib/random-source-struct.rkt") (lib "clotho/scribblings/guide.scrbl") (lib "clotho/base.rkt") (lib "clotho/stateful.rkt") (lib "clotho/examples/guide/error.rkt") (lib "clotho/examples/guide/replay.rkt") (lib "clotho/examples/guide/racket-abstract.rkt") (lib "clotho/math/distributions.rkt") (lib "clotho/examples/guide/byte-string.rkt") (lib "clotho/examples/guide/external.rkt") (lib "clotho/examples/guide/abstract.rkt") (lib "clotho/examples/guide/math-distributions.rkt") (lib "clotho/examples/minesweeper-multiple.rkt") (lib "clotho/lib/random.rkt") (lib "clotho/lib/random-source.rkt") (lib "clotho/racket/base.rkt") (lib "clotho/lib/convenience-functions.rkt") (lib "clotho/scribblings/clotho.scrbl") (lib "clotho/main.rkt") (lib "clotho/examples/cards.rkt") (lib "clotho/examples/minesweeper.rkt"))) (name . "clotho") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (lang . #t) (random . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release") (tags . ("fuzzing" "lang" "random")) (versions . #hash((default . #hasheq((checksum . "7cc309787f07286e3b1411346f4e85e4bec09098") (source . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release"))))))) ("cobalt2-theme" . #hasheq((author . "dexterlagan@gmail.com") (authors . ("dexterlagan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cobalt2-theme.txt") (test-failure-log . "server/built/test-fail/cobalt2-theme.txt") (test-success-log . #f))) (checksum . "8b23d3fd7053f06b11d4012bf3b982a3fdcac51e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1618758552) (dependencies . ("base")) (description . "The Cobalt 2 color theme for DrRacket.") (implies . ()) (modules . ((lib "cobalt2-theme/scribblings/cobalt-theme.scrbl"))) (name . "cobalt2-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:dexterlagan@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/DexterLagan/cobalt2-theme.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b23d3fd7053f06b11d4012bf3b982a3fdcac51e") (source . "https://github.com/DexterLagan/cobalt2-theme.git") (source_url . "https://github.com/DexterLagan/cobalt2-theme.git"))))))) ("code-sync" . #hasheq((author . "jung.ry@northeastern.edu") (authors . ("jung.ry@northeastern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "code-sync"))) (failure-log . "server/built/fail/code-sync.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d6eb869cac7cf97407e276144ae6f2cac2180377") (checksum-error . #f) (collection . "code-sync") (conflicts . ()) (date-added . 1595633470) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib" "rfc6455" "net" "web-server-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Fast Code Sharing for DrRacket") (implies . ()) (modules . ((lib "code-sync/websocket-test.rkt") (lib "code-sync/tool.rkt") (lib "code-sync/scribblings/code-sync.scrbl"))) (name . "code-sync") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:jung.ry@northeastern.edu . #t) (code . #t) (live . #t) (ring:1 . #t) (share . #t) (sync . #t))) (source . "https://github.com/rymaju/code-sync.git") (tags . ("code" "live" "share" "sync")) (versions . #hash((default . #hasheq((checksum . "d6eb869cac7cf97407e276144ae6f2cac2180377") (source . "https://github.com/rymaju/code-sync.git") (source_url . "https://github.com/rymaju/code-sync.git"))))))) ("codepoint" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "codepoint" "doc/codepoint@codepoint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/codepoint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/codepoint.txt"))) (checksum . "f114a142f08bee5ca26b17d37ed698ebc7e63176") (checksum-error . #f) (collection . "codepoint") (conflicts . ()) (date-added . 1632445820) (dependencies . ("base" "srfi-lite-lib" "scribble-lib" "racket-doc" "sandbox-lib" "rackunit-lib")) (description . "Library for operations on Unicode codepoints, and UCD properties.") (implies . ()) (modules . ((lib "codepoint/scribblings/codepoint-fold.scrbl") (lib "codepoint/private/generator.rkt") (lib "codepoint/tests/properties.rkt") (lib "codepoint/scribblings/generator.scrbl") (lib "codepoint/tests/fold.rkt") (lib "codepoint/range.rkt") (lib "codepoint/fold.rkt") (lib "codepoint/properties.rkt") (lib "codepoint/private/ucd.rkt") (lib "codepoint/range-dict.rkt") (lib "codepoint/tests/codepoint-range-dict.rkt") (lib "codepoint/tests/codepoint-range.rkt") (lib "codepoint/enums.rkt") (lib "codepoint/scribblings/codepoint.scrbl") (lib "codepoint/main.rkt") (lib "codepoint/scribblings/codepoint-types.scrbl") (lib "codepoint/tests/codepoint.rkt") (lib "codepoint/scribblings/codepoint-properties.scrbl"))) (name . "codepoint") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ring:1 . #t) (unicode . #t))) (source . "https://github.com/johnstonskj/racket-codepoint.git#main") (tags . ("unicode")) (versions . #hash((default . #hasheq((checksum . "f114a142f08bee5ca26b17d37ed698ebc7e63176") (source . "https://github.com/johnstonskj/racket-codepoint.git#main") (source_url . "https://github.com/johnstonskj/racket-codepoint.git#main"))))))) ("codespells-live" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "codespells-live"))) (failure-log . "server/built/fail/codespells-live.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ff1d635bc711b21d6814a5626167dd340f843545") (checksum-error . #f) (collection . "codespells-live") (conflicts . ()) (date-added . 1617735599) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "@(tt \"codespells-live/chat\") is the language for interacting\r\nwith our Twitch stream\r\n@(link \"https://www.twitch.tv/codespells\" \"here\"). Any of\r\ncommands below can be run inside the Twitch chat preceded by a\r\n@tt{!!} and minus the outer set of parentheses. (E.g. @tt{!!mini})") (implies . ()) (modules . ((lib "codespells-live/chat.rkt") (lib "codespells-live/main.rkt") (lib "codespells-live/scribblings/codespells-live.scrbl"))) (name . "codespells-live") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/ldhandley/codespells-live.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff1d635bc711b21d6814a5626167dd340f843545") (source . "https://github.com/ldhandley/codespells-live.git#main") (source_url . "https://github.com/ldhandley/codespells-live.git#main"))))))) ("collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("collections-lib" "collections-doc")) (description . "A generic interface for collections") (implies . ("collections-lib" "collections-doc")) (modules . ()) (name . "collections") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections"))))))) ("collections-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "collections" "doc/collections@collections-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-doc.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "functional-doc" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "scribblings/data/collection/private/utils.rkt") (lib "scribblings/data/collection/collection/examples.scrbl") (lib "scribblings/data/collection/collection/introduction.scrbl") (lib "scribblings/data/collection/collections.scrbl") (lib "scribblings/data/collection/collection/reference.scrbl") (lib "scribblings/data/collection/collection/experimental.scrbl"))) (name . "collections-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-doc") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-doc"))))))) ("collections-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/collections-lens.txt") (docs . (("main" "collections-lens" "doc/collections-lens@collections-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lens.txt"))) (checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (checksum-error . #f) (collection . "data") (conflicts . ()) (dependencies . ("base" "collections" "curly-fn" "lens-common" "scribble-lib" "at-exp-lib" "racket-doc" "lens-doc" "rackunit-lib")) (description . "Lenses for generic collections") (implies . ()) (modules . ((lib "data/collection/lens/private/sandbox.rkt") (lib "data/scribblings/main.scrbl") (lib "data/collection/lens.rkt"))) (name . "collections-lens") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/collections-lens/tree/master") (tags . ("lens")) (versions . #hash((default . #hasheq((checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (source . "git://github.com/lexi-lambda/collections-lens") (source_url . "http://github.com/lexi-lambda/collections-lens/tree/master"))))))) ("collections-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lib.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "functional-lib" "match-plus" "static-rename" "unstable-list-lib")) (description . "") (implies . ()) (modules . ((lib "data/collection/collection.rkt") (lib "data/collection/indexable.rkt") (lib "data/collection/match.rkt") (lib "data/collection/sequence.rkt") (lib "data/collection/private/random-access.rkt") (lib "data/collection/countable.rkt") (lib "data/collection/private/util.rkt") (lib "data/collection/contract.rkt") (lib "data/collection/experimental/quasi.rkt") (lib "data/collection.rkt"))) (name . "collections-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-lib") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-lib"))))))) ("collections-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-test.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "match-plus" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "tests/data/collection/dict.rkt") (lib "tests/data/collection/contract.rkt") (lib "tests/data/collection/experimental/quasi.rkt") (lib "tests/data/collection/sequence.rkt") (lib "tests/data/collection/match.rkt") (lib "tests/data/collection/collection.rkt") (lib "tests/data/collection/sequence-lib.rkt"))) (name . "collections-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-test") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-test"))))))) ("collector2" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collector2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collector2.txt"))) (checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633150447) (dependencies . ("base" "collector2-doc" "collector2-lib" "collector2-test")) (description . "Parse Racket packages catalog and generate ebuild scripts. Metapackage.") (implies . ()) (modules . ()) (name . "collector2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2") (tags . ("ebuild" "gentoo")) (versions . #hash((default . #hasheq((checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2") (source_url . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2"))))))) ("collector2-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "collector2" "doc/collector2@collector2-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collector2-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collector2-doc.txt"))) (checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657509396) (dependencies . ("base" "racket-doc" "scribble-lib" "collector2-lib")) (description . "Parse Racket packages catalog and generate ebuild scripts. Documentation.") (implies . ()) (modules . ((lib "collector2/scribblings/main.scrbl"))) (name . "collector2-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-doc") (tags . ("ebuild" "gentoo")) (versions . #hash((default . #hasheq((checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-doc") (source_url . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-doc"))))))) ("collector2-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collector2-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collector2-lib.txt"))) (checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657509260) (dependencies . ("base" "counter" "ebuild-lib" "ebuild-templates" "threading-lib" "upi-lib" "uuid")) (description . "Parse Racket packages catalog and generate ebuild scripts. Core.") (implies . ()) (modules . ((lib "collector2/temp-dir.rkt") (lib "collector2/generator/generator.rkt") (lib "collector2/generator/license/identify.rkt") (lib "collector2/pkgs/catalogs.rkt") (lib "collector2/pkgs/separator.rkt") (lib "collector2/pkgs/hash.rkt") (lib "collector2/main.rkt") (lib "collector2/generator/license/lookup.rkt") (lib "collector2/epoch.rkt") (lib "collector2/pkgs/bin-all-data.rkt") (lib "collector2/pkgs/pkgs.rkt") (lib "collector2/pkgs/all.rkt") (lib "collector2/repo.rkt") (lib "collector2/generator/name.rkt") (lib "collector2/pkgs/filter.rkt") (lib "collector2/generator/classes.rkt") (lib "collector2/generator/make.rkt") (lib "collector2/generator/license/download.rkt") (lib "collector2/pkgs/bin-all-names.rkt") (lib "collector2/version.rkt"))) (name . "collector2-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-lib") (tags . ("ebuild" "gentoo")) (versions . #hash((default . #hasheq((checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-lib") (source_url . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-lib"))))))) ("collector2-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collector2-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collector2-test.txt"))) (checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657509458) (dependencies . ("base" "rackunit-lib" "collector2-lib")) (description . "Parse Racket packages catalog and generate ebuild scripts. Tests.") (implies . ()) (modules . ((lib "collector2/tests/integration/filter+hash-test.rkt") (lib "collector2/tests/unit/separator-test.rkt") (lib "collector2/tests/unit/license-identify-test.rkt") (lib "collector2/tests/unit/repo-test.rkt") (lib "collector2/tests/unit/epoch-test.rkt"))) (name . "collector2-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-test") (tags . ("ebuild" "gentoo")) (versions . #hash((default . #hasheq((checksum . "34986247bb8102aac4b322f8ada7272bcce8fcfd") (source . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-test") (source_url . "https://gitlab.com/gentoo-racket/racket-collector2.git?path=src%2Fcollector2-test"))))))) ("colon-kw" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-kw" "doc/colon-kw@colon-kw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-kw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-kw.txt"))) (checksum . "dcde5d8a5ec5820bbb86ae5f5430236835b92d8a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "a lang-extension for writing :kw for #:kw") (implies . ()) (modules . ((lib "colon-kw/lang/lexer.rkt") (lib "colon-kw/scribblings/colon-kw.scrbl") (lib "colon-kw/tests/test.rkt") (lib "kw-colon/lang/reader.rkt") (lib "colon-kw/tests/both.rkt") (lib "colon-kw/lang/reader.rkt") (lib "kw-colon/tests/test.rkt") (lib "kw-colon/reader.rkt") (lib "colon-kw/reader.rkt"))) (name . "colon-kw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/AlexKnauth/colon-kw/tree/master") (tags . ("keywords" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "dcde5d8a5ec5820bbb86ae5f5430236835b92d8a") (source . "git://github.com/AlexKnauth/colon-kw") (source_url . "http://github.com/AlexKnauth/colon-kw/tree/master"))))))) ("colon-match" . #hasheq((author . "alexander@knauth.org jensaxel@soegaard.net") (authors . ("alexander@knauth.org" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-match" "doc/colon-match@colon-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-match.txt"))) (checksum . "e5799f8e6f523cd252ca64beb01e1ae9e673dc34") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "match with colon notation, based on discussion with Jens Axel Søgaard on users list ") (implies . ()) (modules . ((lib "colon-match/main.rkt") (lib "colon-match/docs/colon-match.scrbl"))) (name . "colon-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jensaxel@soegaard.net . #t) (match . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/colon-match/tree/master") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "e5799f8e6f523cd252ca64beb01e1ae9e673dc34") (source . "git://github.com/AlexKnauth/colon-match") (source_url . "http://github.com/AlexKnauth/colon-match/tree/master"))))))) ("colophon" . #hasheq((author . "shr@basus.me") (authors . ("shr@basus.me")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/colophon.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colophon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colophon.txt"))) (checksum . "4698d502d0a0257db4a3694deaf5dba3da56548d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591233765) (dependencies . ("base" "pollen" "scribble-doc" "racket-doc" "scribble-lib")) (description . "An experimental static site generator") (implies . ()) (modules . ((lib "pollen/html5.rkt") (lib "colophon/private/command.rkt") (lib "website/posts/pollen.rkt") (lib "colophon/tags.rkt") (lib "colophon/common.rkt") (lib "colophon/link.rkt") (lib "colophon/components.rkt") (lib "colophon/predicates.rkt") (lib "website/pollen.rkt") (lib "pollen/bootstrap.rkt"))) (name . "colophon") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:shr@basus.me . #t) (documents . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/basus/colophon.git") (tags . ("documents" "pollen")) (versions . #hash((default . #hasheq((checksum . "4698d502d0a0257db4a3694deaf5dba3da56548d") (source . "https://github.com/basus/colophon.git") (source_url . "https://github.com/basus/colophon.git"))))))) ("color-flood" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-flood.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/color-flood.txt"))) (checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1645288104) (dependencies . ("base" "bazaar" "gui-lib" "rackunit-lib")) (description . "A game where the player must fill the board with colors before its opponent") (implies . ()) (modules . ((lib "color-flood/main.rkt") (lib "color-flood/color-flood.rkt"))) (name . "color-flood") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (game . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/color-flood.git#master") (tags . ("game" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (source . "https://github.com/Metaxal/color-flood.git#master") (source_url . "https://github.com/Metaxal/color-flood.git#master"))))))) ("color-strings" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/color-strings.txt") (docs . (("main" "color-strings" "doc/color-strings@color-strings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-strings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/color-strings.txt"))) (checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (checksum-error . #f) (collection . "colors-as-strings") (conflicts . ()) (date-added . 1569966162) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Makes identifiers for common colors.  Prevents silly mispellings.") (implies . ()) (modules . ((lib "colors-as-strings/main.rkt") (lib "colors-as-strings/scribblings/color-strings.scrbl"))) (name . "color-strings") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/color-strings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (source . "https://github.com/thoughtstem/color-strings.git") (source_url . "https://github.com/thoughtstem/color-strings.git"))))))) ("colorize" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colorize" "doc/colorize@colorize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colorize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colorize.txt"))) (checksum . "751b26af9fc46626414fd480196c8546335ed5da") (checksum-error . #f) (collection . "colorize") (conflicts . ()) (date-added . 1566386269) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "colorize your console") (implies . ()) (modules . ((lib "colorize/main.rkt") (lib "colorize/scribblings/colorize.scrbl"))) (name . "colorize") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (author:yanyingwang1@gmail.com . #t) (color . #t) (console . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/colorize.git") (tags . ("ansi" "color" "console")) (versions . #hash((default . #hasheq((checksum . "751b26af9fc46626414fd480196c8546335ed5da") (source . "https://github.com/yanyingwang/colorize.git") (source_url . "https://github.com/yanyingwang/colorize.git"))))))) ("colormaps" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colormaps" "doc/colormaps@colormaps/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colormaps.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colormaps.txt"))) (checksum . "f0dc88be58bae0d0331bfa778987460d7d71a08a") (checksum-error . #f) (collection . "colormaps") (conflicts . ()) (date-added . 1581125209) (dependencies . ("base" "plot-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc" "plot-doc" "plot-gui-lib")) (description . "Additional colormaps for the Racket plot package") (implies . ()) (modules . ((lib "colormaps/utils.rkt") (lib "colormaps/tol.rkt") (lib "colormaps/cb.rkt") (lib "colormaps/main.rkt") (lib "colormaps/scribblings/colormaps.scrbl"))) (name . "colormaps") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/colormaps.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "f0dc88be58bae0d0331bfa778987460d7d71a08a") (source . "https://github.com/alex-hhh/colormaps.git") (source_url . "https://github.com/alex-hhh/colormaps.git"))))))) ("colors" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colors" "doc/colors@colors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colors.txt"))) (checksum . "103aa2aa71310b0c7a83b33714593f01ce24beab") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551898548) (dependencies . ("base" "draw-lib" "gui-lib" "racket-doc" "scribble-lib" "debug" "rackunit-lib")) (description . "A library for HSB colors.") (implies . ()) (modules . ((lib "colors/private/shared.rkt") (lib "colors/main.rkt") (lib "colors/scribblings/colors.scrbl") (lib "colors/hsi.rkt") (lib "colors/hsl.rkt") (lib "colors/hsv.rkt"))) (name . "colors") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (colorspace . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/florence/colors.git") (tags . ("colorspace" "graphics")) (versions . #hash((default . #hasheq((checksum . "103aa2aa71310b0c7a83b33714593f01ce24beab") (source . "https://github.com/florence/colors.git") (source_url . "https://github.com/florence/colors.git"))))))) ("colors-as-strings" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/colors-as-strings.txt") (docs . (("extract" "color-strings" "doc/color-strings@colors-as-strings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colors-as-strings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colors-as-strings.txt"))) (checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (checksum-error . #f) (collection . "colors-as-strings") (conflicts . ("color-strings")) (date-added . 1570065338) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides common color strings as identifiers.") (implies . ()) (modules . ((lib "colors-as-strings/main.rkt") (lib "colors-as-strings/scribblings/color-strings.scrbl"))) (name . "colors-as-strings") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/colors-as-strings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (source . "https://github.com/thoughtstem/colors-as-strings.git") (source_url . "https://github.com/thoughtstem/colors-as-strings.git"))))))) ("combinator-parser" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "combinator-parser" "doc/combinator-parser@combinator-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/combinator-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/combinator-parser.txt"))) (checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "compatibility-lib" "scribble-lib" "parser-tools-doc" "racket-doc" "at-exp-lib" "lazy" "scheme-lib")) (description . "A combinator parser library retained for backwards compatibility. Using parser-tools/yacc or ragg instead is recommended.") (implies . ()) (modules . ((lib "combinator-parser/private-combinator/parser-sigs.rkt") (lib "combinator-parser/main.rkt") (lib "combinator-parser/private-combinator/combinator.rkt") (lib "combinator-parser/combinator-unit.rkt") (lib "combinator-parser/private-combinator/errors.rkt") (lib "combinator-parser/private-combinator/combinator-parser.rkt") (lib "combinator-parser/scribblings/combinator-parser.scrbl") (lib "combinator-parser/private-combinator/structs.rkt") (lib "combinator-parser/examples/combinator-example.rkt"))) (name . "combinator-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (legacy . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/combinator-parser/tree/master") (tags . ("legacy" "parsing")) (versions . #hash((default . #hasheq((checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (source . "github://github.com/takikawa/combinator-parser/master") (source_url . "http://github.com/takikawa/combinator-parser/tree/master"))))))) ("comm-panel" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/comm-panel.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/comm-panel.txt") (test-failure-log . "server/built/test-fail/comm-panel.txt") (test-success-log . #f))) (checksum . "44225da9b3cd1f883beef9c03f20431f80239530") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("happy-names" "aws")) (description . "Racket GUI widget for sending, receiving, listening, and broadcasting strings over  AWS SQS.") (implies . ()) (modules . ((lib "comm-panel/main.rkt") (lib "comm-panel/computer-queues.rkt") (lib "comm-panel/string-sending.rkt") (lib "comm-panel/ui.rkt") (lib "comm-panel/broadcast-listen.rkt"))) (name . "comm-panel") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (aws . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/comm-panel.git") (tags . ("aws" "gui")) (versions . #hash((default . #hasheq((checksum . "44225da9b3cd1f883beef9c03f20431f80239530") (source . "https://github.com/thoughtstem/comm-panel.git") (source_url . "https://github.com/thoughtstem/comm-panel.git"))))))) ("command-line-ext" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "command-line-ext" "doc/command-line-ext@command-line-ext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-line-ext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-line-ext.txt"))) (checksum . "e980b3b31d7a0cb6e0339335bde860f35a0fe471") (checksum-error . #f) (collection . "command-line-ext") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "generic-syntax-expanders" "reprovide-lang" "lens" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Extensible form of command-line with command-line-flag-expanders") (implies . ()) (modules . ((lib "command-line-ext/private/core-form.scrbl") (lib "command-line-ext/main.scrbl") (lib "command-line-ext/private/doc-util.rkt") (lib "command-line-ext/private/library-expanders.rkt") (lib "command-line-ext/private/example-script.rkt") (lib "command-line-ext/main.rkt") (lib "command-line-ext/private/extensible-command-line-ext-syntax.rkt") (lib "command-line-ext/private/core-command-line-ext-syntax.rkt"))) (name . "command-line-ext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (generic-syntax-expanders . #t) (ring:1 . #t) (terminal . #t))) (source . "http://github.com/jackfirth/command-line-ext/tree/master") (tags . ("experimental" "generic-syntax-expanders" "terminal")) (versions . #hash((default . #hasheq((checksum . "e980b3b31d7a0cb6e0339335bde860f35a0fe471") (source . "git://github.com/jackfirth/command-line-ext") (source_url . "http://github.com/jackfirth/command-line-ext/tree/master"))))))) ("command-tree" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-tree.txt"))) (checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (checksum-error . #f) (collection . "command-tree") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Handle tree-style (à la git) command line arguments ") (implies . ()) (modules . ((lib "command-tree/main.rkt"))) (name . "command-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arguments . #t) (author:jerome.martin.dev@gmail.com . #t) (cli . #t) (parameters . #t) (ring:1 . #t) (terminal . #t) (tree . #t))) (source . "https://github.com/euhmeuh/command-tree.git") (tags . ("arguments" "cli" "parameters" "terminal" "tree")) (versions . #hash((default . #hasheq((checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (source . "https://github.com/euhmeuh/command-tree.git") (source_url . "https://github.com/euhmeuh/command-tree.git"))))))) ("commatize-number" . #hasheq((author . "odonnell_johnny@yahoo.com") (authors . ("odonnell_johnny@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/commatize-number.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/commatize-number.txt"))) (checksum . "c03e657a9b85baab345663ddf1691ef1709cc45f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1649035732) (dependencies . ("base")) (description . "Commatize a number") (implies . ()) (modules . ((lib "commatize-number/main.rkt"))) (name . "commatize-number") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:odonnell_johnny@yahoo.com . #t) (commatize . #t) (ring:1 . #t))) (source . "https://github.com/johnnyodonnell/commatize-number.git#master") (tags . ("commatize")) (versions . #hash((default . #hasheq((checksum . "c03e657a9b85baab345663ddf1691ef1709cc45f") (source . "https://github.com/johnnyodonnell/commatize-number.git#master") (source_url . "https://github.com/johnnyodonnell/commatize-number.git#master"))))))) ("commonmark" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/commonmark.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/commonmark.txt"))) (checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1637398329) (dependencies . ("base" "commonmark-doc" "commonmark-lib")) (description . "Fast, CommonMark-compliant Markdown parser") (implies . ("commonmark-doc" "commonmark-lib")) (modules . ()) (name . "commonmark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (markdown . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark#master") (tags . ("markdown" "parsing")) (versions . #hash((default . #hasheq((checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark#master") (source_url . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark#master"))))))) ("commonmark-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "commonmark" "doc/commonmark@commonmark-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/commonmark-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/commonmark-doc.txt"))) (checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1637398253) (dependencies . ("base" "commonmark-lib" "racket-doc" "scribble-lib" "threading-lib")) (description . "documentation (no implementation) for “commonmark”") (implies . ()) (modules . ((lib "scribblings/commonmark/private/scribble-render.rkt") (lib "scribblings/commonmark.scrbl"))) (name . "commonmark-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (markdown . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-doc#master") (tags . ("markdown" "parser")) (versions . #hash((default . #hasheq((checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-doc#master") (source_url . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-doc#master"))))))) ("commonmark-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/commonmark-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/commonmark-lib.txt"))) (checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1637398152) (dependencies . ("base" "data-lib" "threading-lib")) (description . "implementation (no documentation) for “commonmark”") (implies . ()) (modules . ((lib "commonmark/struct.rkt") (lib "commonmark/private/struct.rkt") (lib "commonmark/private/parse/inline.rkt") (lib "commonmark/private/regexp.rkt") (lib "commonmark/private/render.rkt") (lib "commonmark/private/parse/entity.rkt") (lib "commonmark/main.rkt") (lib "commonmark/private/parse/common.rkt") (lib "commonmark/private/parse/block.rkt") (lib "commonmark/parse.rkt") (lib "commonmark/render/html.rkt"))) (name . "commonmark-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (markdown . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-lib#master") (tags . ("markdown" "parser")) (versions . #hash((default . #hasheq((checksum . "d40156bce42088aea1a742d6cce4c8697318db70") (source . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-lib#master") (source_url . "https://github.com/lexi-lambda/racket-commonmark.git?path=commonmark-lib#master"))))))) ("compact-annotations" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compact-annotations" "doc/compact-annotations@compact-annotations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compact-annotations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compact-annotations.txt"))) (checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "cover" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Function type annotation syntax for Typed Racket similar to Haskell") (implies . ()) (modules . ((lib "compact-annotations/compact-annotations.scrbl") (lib "compact-annotations/examples.rkt") (lib "compact-annotations/main.rkt"))) (name . "compact-annotations") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (sugar . #t) (typed-racket . #t) (types . #t))) (source . "http://github.com/jackfirth/compact-annotations/tree/master") (tags . ("experimental" "sugar" "typed-racket" "types")) (versions . #hash((default . #hasheq((checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (source . "git://github.com/jackfirth/compact-annotations") (source_url . "http://github.com/jackfirth/compact-annotations/tree/master"))))))) ("compiler-goodies" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compiler-goodies" "doc/compiler-goodies@compiler-goodies/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compiler-goodies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compiler-goodies.txt"))) (checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (checksum-error . #f) (collection . "compiler-goodies") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compiler-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "compiler-goodies/main.rkt") (lib "compiler-goodies/scribblings/compiler-goodies.scrbl"))) (name . "compiler-goodies") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/LeifAndersen/racket-compiler-goodies/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (source . "git://github.com/LeifAndersen/racket-compiler-goodies") (source_url . "http://github.com/LeifAndersen/racket-compiler-goodies/tree/master"))))))) ("component" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component.txt"))) (checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("component-doc" "component-lib")) (description . "Simple dependency injection (docs and implementation).") (implies . ("component-doc" "component-lib")) (modules . ()) (name . "component") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (source . "https://github.com/Bogdanp/racket-component.git?path=component") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component"))))))) ("component-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "component" "doc/component@component-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-doc.txt"))) (checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (checksum-error . #f) (collection . "component") (conflicts . ()) (dependencies . ("base" "component-lib" "db-doc" "db-lib" "scribble-lib" "racket-doc" "rackunit-doc" "rackunit-lib")) (description . "Simple dependency injection (docs).") (implies . ()) (modules . ((lib "component/component.scrbl"))) (name . "component-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-doc") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (source . "https://github.com/Bogdanp/racket-component.git?path=component-doc") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-doc"))))))) ("component-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-lib.txt"))) (checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Simple dependency injection (implementation only).") (implies . ()) (modules . ((lib "component/private/graph.rkt") (lib "component/private/system.rkt") (lib "component/testing.rkt") (lib "component/private/component.rkt") (lib "component/main.rkt") (lib "component/private/dependency.rkt"))) (name . "component-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-lib") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (source . "https://github.com/Bogdanp/racket-component.git?path=component-lib") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-lib"))))))) ("component-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-test.txt"))) (checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "component-lib" "rackunit-lib")) (description . "Tests for component-lib.") (implies . ()) (modules . ((lib "tests/component/testing-tests.rkt") (lib "tests/component/graph-tests.rkt") (lib "tests/component/system-tests.rkt") (lib "tests/component/run-all-tests.rkt"))) (name . "component-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-test") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "1c2a0ec582caaa15c7bfeab0dd25bd2f58c99c7f") (source . "https://github.com/Bogdanp/racket-component.git?path=component-test") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-test"))))))) ("compose-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compose-app" "doc/compose-app@compose-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compose-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compose-app.txt"))) (checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (checksum-error . #f) (collection . "compose-app") (conflicts . ()) (dependencies . ("base" "fancy-app" "racket-doc" "scribble-lib" "scribble-text-lib" "rackunit-lib")) (description . "#%app syntax for function composition, (a .. b .. c) => (lambda (v) (a (b (c v))))") (implies . ()) (modules . ((lib "compose-app/main.rkt") (lib "compose-app/main.scrbl") (lib "compose-app/fancy-app.rkt") (lib "compose-app/test.rkt"))) (name . "compose-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t) (sugar . #t))) (source . "http://github.com/jackfirth/compose-app/tree/master") (tags . ("app-syntax" "functional" "sugar")) (versions . #hash((default . #hasheq((checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (source . "git://github.com/jackfirth/compose-app") (source_url . "http://github.com/jackfirth/compose-app/tree/master"))))))) ("cond-contract" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cond-contract" "doc/cond-contract@cond-contract/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cond-contract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cond-contract.txt"))) (checksum . "8f8f1605d91a15fe653c407076a6fc64f69cbebe") (checksum-error . #f) (collection . "cond-contract") (conflicts . ()) (date-added . 1578584948) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Conditional contracts for Racket") (implies . ()) (modules . ((lib "cond-contract/scribblings/cond-contract.scrbl") (lib "cond-contract/main.rkt"))) (name . "cond-contract") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/cond-contract.git") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "8f8f1605d91a15fe653c407076a6fc64f69cbebe") (source . "https://github.com/pmatos/cond-contract.git") (source_url . "https://github.com/pmatos/cond-contract.git"))))))) ("cond-strict" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cond-strict" "doc/cond-strict@cond-strict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cond-strict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cond-strict.txt"))) (checksum . "4fac4eeb13fe560981ad8b467ec2147ec60c7c7b") (checksum-error . #f) (collection . "cond-strict") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "cond: what it should have been") (implies . ()) (modules . ((lib "cond-strict/scribblings/cond-strict.scrbl") (lib "cond-strict/main.rkt"))) (name . "cond-strict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/cond-strict/tree/master") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "4fac4eeb13fe560981ad8b467ec2147ec60c7c7b") (source . "git://github.com/AlexKnauth/cond-strict") (source_url . "http://github.com/AlexKnauth/cond-strict/tree/master"))))))) ("continued-fractions" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cf-manual" "doc/cf-manual@continued-fractions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/continued-fractions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/continued-fractions.txt"))) (checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Exact computer arithmetic and base conversion via continued fractions.") (implies . ()) (modules . ((lib "continued-fractions/bases.rkt") (lib "continued-fractions/private/general-continued-fractions.rkt") (lib "continued-fractions/cf-manual.scrbl") (lib "continued-fractions/cf-create.scrbl") (lib "continued-fractions/create.rkt") (lib "continued-fractions/private/simple-matrix.rkt") (lib "continued-fractions/private/sequence-utils.rkt") (lib "continued-fractions/private/arithmetic.rkt") (lib "continued-fractions/main.rkt") (lib "continued-fractions/cf-bases.scrbl") (lib "continued-fractions/private/continued-fractions.rkt") (lib "continued-fractions/private/consumer-emitters.rkt"))) (name . "continued-fractions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (exact-arithmetic . #t) (ring:1 . #t))) (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (tags . ("exact-arithmetic")) (versions . #hash((default . #hasheq((checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (source_url . "https://derend@bitbucket.org/derend/continued-fractions.git"))))))) ("contract-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "contract-etc" "doc/contract-etc@contract-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-etc.txt"))) (checksum . "3758ad23c407f72b160df4969623576d661301b8") (checksum-error . #f) (collection . "contract-etc") (conflicts . ()) (date-added . 1613458878) (dependencies . ("rackunit-lib" "option-contract-lib" "base" "option-contract-doc" "sandbox-lib" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Miscellaneous contracts.") (implies . ()) (modules . ((lib "contract-etc/scribblings/contract-etc.scrbl") (lib "contract-etc/examples/atomic.rkt") (lib "contract-etc/main.rkt") (lib "contract-etc/tests/no-env.rkt") (lib "contract-etc/tests/provide-forms.rkt") (lib "contract-etc/annotate.rkt") (lib "contract-etc/tests/exercise-env.rkt") (lib "contract-etc/tests/test-env.rkt"))) (name . "contract-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/camoy/contract-etc.git#main") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "3758ad23c407f72b160df4969623576d661301b8") (source . "https://github.com/camoy/contract-etc.git#main") (source_url . "https://github.com/camoy/contract-etc.git#main"))))))) ("contract-parameter" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "contract-parameter" "doc/contract-parameter@contract-parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-parameter.txt"))) (checksum . "0d1f6148ed07826ab4b2b2a52d07f92aad2c9420") (checksum-error . #f) (collection . "contract-parameter") (conflicts . ()) (date-added . 1613458770) (dependencies . ("contract-etc" "base" "chk-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Dynamically bound contracts.") (implies . ()) (modules . ((lib "contract-parameter/examples/mutable-hash.rkt") (lib "contract-parameter/private/util.rkt") (lib "contract-parameter/examples/map.rkt") (lib "contract-parameter/private/contract-parameter.rkt") (lib "contract-parameter/examples/generator.rkt") (lib "contract-parameter/main.rkt") (lib "contract-parameter/examples/sort.rkt") (lib "contract-parameter/examples/iterator.rkt") (lib "contract-parameter/private/binding.rkt") (lib "contract-parameter/examples/delay.rkt") (lib "contract-parameter/scribblings/contract-parameter.scrbl") (lib "contract-parameter/private/parameterize-contract-macro.rkt") (lib "contract-parameter/private/parameterize-contract.rkt"))) (name . "contract-parameter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/camoy/contract-parameter.git#main") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "0d1f6148ed07826ab4b2b2a52d07f92aad2c9420") (source . "https://github.com/camoy/contract-parameter.git#main") (source_url . "https://github.com/camoy/contract-parameter.git#main"))))))) ("contract-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-repl.txt"))) (checksum . "5eadd5d87b04178d5574804313238934f3544692") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A REPL that prints contracts on values") (implies . ()) (modules . ((lib "contract-repl/main.rkt"))) (name . "contract-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (contracts . #t) (repl . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/contract-repl/tree/master") (tags . ("contracts" "repl")) (versions . #hash((default . #hasheq((checksum . "5eadd5d87b04178d5574804313238934f3544692") (source . "github://github.com/takikawa/contract-repl/master") (source_url . "http://github.com/takikawa/contract-repl/tree/master"))))))) ("control" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "control-manual" "doc/control-manual@control/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/control.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/control.txt"))) (checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Control structures") (implies . ()) (modules . ((lib "control/tagged-begin.rkt") (lib "control/until.rkt") (lib "control/main.rkt") (lib "control/while.rkt") (lib "control/begin-with-goto.rkt") (lib "control/scribblings/control-manual.scrbl") (lib "control/dotimes.rkt"))) (name . "control") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (goto . #t) (ring:1 . #t) (tagbody . #t) (until . #t) (while . #t))) (source . "http://github.com/soegaard/control/tree/master") (tags . ("goto" "tagbody" "until" "while")) (versions . #hash((default . #hasheq((checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (source . "git://github.com/soegaard/control") (source_url . "http://github.com/soegaard/control/tree/master"))))))) ("counter" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "counter" "doc/counter@counter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/counter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/counter.txt"))) (checksum . "8807bdb03b6c8ff08edcf0570c937c243ff66343") (checksum-error . #f) (collection . "counter") (conflicts . ()) (date-added . 1623594514) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Small counter library to use for console output, logging, etc.") (implies . ()) (modules . ((lib "counter/scribblings/counter.scrbl") (lib "counter/main.rkt") (lib "counter/tests.rkt"))) (name . "counter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (counter . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/scheme-counter.git") (tags . ("counter" "library")) (versions . #hash((default . #hasheq((checksum . "8807bdb03b6c8ff08edcf0570c937c243ff66343") (source . "https://gitlab.com/xgqt/scheme-counter.git") (source_url . "https://gitlab.com/xgqt/scheme-counter.git"))))))) ("country" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "country" "doc/country@country/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/country.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/country.txt"))) (checksum . "b3694f8a0dee227342506de305b04c8123be5099") (checksum-error . #f) (collection . "country") (conflicts . ()) (date-added . 1563981828) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Facilities for working with country data.") (implies . ()) (modules . ((lib "country/country.scrbl") (lib "country/region.rkt") (lib "country/main.rkt") (lib "country/country.rkt") (lib "country/subdivision.rkt"))) (name . "country") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (countries . #t) (db . #t) (iso . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-country.git?path=country") (tags . ("countries" "db" "iso")) (versions . #hash((default . #hasheq((checksum . "b3694f8a0dee227342506de305b04c8123be5099") (source . "https://github.com/Bogdanp/racket-country.git?path=country") (source_url . "https://github.com/Bogdanp/racket-country.git?path=country"))))))) ("cover" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582753654) (dependencies . ("cover-lib" "cover-doc")) (description . "A code coverage tool") (implies . ()) (modules . ()) (name . "cover") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover#release") (source_url . "https://github.com/florence/cover.git?path=cover#release"))))))) ("cover-badge" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-badge.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-badge.txt"))) (checksum . "b7d0543bd67bfc80e618cbd5f192b83ad705af8f") (checksum-error . #f) (collection . "cover-badge") (conflicts . ()) (date-added . 1656802558) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A badge generator for coverage") (implies . ()) (modules . ((lib "cover-badge/main.rkt"))) (name . "cover-badge") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dannypsnl@gmail.com . #t) (coverage . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/cover-badge.git#develop") (tags . ("coverage")) (versions . #hash((default . #hasheq((checksum . "b7d0543bd67bfc80e618cbd5f192b83ad705af8f") (source . "https://github.com/racket-tw/cover-badge.git#develop") (source_url . "https://github.com/racket-tw/cover-badge.git#develop"))))))) ("cover-benchmarks" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/cover-benchmarks.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-benchmarks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-benchmarks.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582826512) (dependencies . ("draw-lib" "plot-lib" "cover-lib" "base" "custom-load" "pict-lib" "pict-test" "racket-benchmarks")) (description . "benchmarks for cover") (implies . ()) (modules . ((lib "cover/benchmarks/report.rkt") (lib "cover/benchmarks/run-test-benchmark.rkt") (lib "cover/benchmarks/collect-data.rkt"))) (name . "cover-benchmarks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:spencer@florence.io . #t) (benchmarking . #t) (cover . #t) (ring:1 . #t))) (source . "https://github.com/florence/cover.git?path=cover-benchmarks#release") (tags . ("benchmarking" "cover")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-benchmarks#release") (source_url . "https://github.com/florence/cover.git?path=cover-benchmarks#release"))))))) ("cover-cobertura" . #hasheq((author . "efanzh@gmail.com") (authors . ("efanzh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-cobertura.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-cobertura.txt"))) (checksum . "2a63c5ef4544b3c6ca928c596ae81e4490f14c14") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573901496) (dependencies . ("base" "cover")) (description . "") (implies . ()) (modules . ((lib "cover/cobertura.rkt"))) (name . "cover-cobertura") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:efanzh@gmail.com . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/EFanZh/cover-cobertura.git") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "2a63c5ef4544b3c6ca928c596ae81e4490f14c14") (source . "https://github.com/EFanZh/cover-cobertura.git") (source_url . "https://github.com/EFanZh/cover-cobertura.git"))))))) ("cover-codecov" . #hasheq((author . "plessner.ryan@gmail.com spencer@florence.io") (authors . ("plessner.ryan@gmail.com" "spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-codecov.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-codecov.txt"))) (checksum . "b1a9de60da3c33894ddd6fcc3e26e8e6b614f708") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556548151) (dependencies . ("cover-lib" "base" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "cover/private/travis-service.rkt") (lib "cover/private/gitlab-service.rkt") (lib "cover/codecov.rkt") (lib "cover/private/codecov.rkt") (lib "cover/private/ci-service.rkt") (lib "cover/private/tests/test-not-run.rkt"))) (name . "cover-codecov") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover-codecov.git#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "b1a9de60da3c33894ddd6fcc3e26e8e6b614f708") (source . "https://github.com/florence/cover-codecov.git#release") (source_url . "https://github.com/florence/cover-codecov.git#release"))))))) ("cover-coveralls" . #hasheq((author . "spencer@florence.io plessner.ryan@gmail.com") (authors . ("spencer@florence.io" "plessner.ryan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-coveralls.txt") (test-failure-log . "server/built/test-fail/cover-coveralls.txt") (test-success-log . #f))) (checksum . "a5bb101d934e72f49b3f583707c58b921d61c07c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cover-lib" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "cover/private/tests/not-run.rkt") (lib "cover/coveralls.rkt") (lib "cover/private/tests/prog.rkt") (lib "cover/private/coveralls.rkt"))) (name . "cover-coveralls") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "http://github.com/rpless/cover-coveralls/tree/master#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "a5bb101d934e72f49b3f583707c58b921d61c07c") (source . "git://github.com/rpless/cover-coveralls#release") (source_url . "http://github.com/rpless/cover-coveralls/tree/master#release"))))))) ("cover-doc" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cover" "doc/cover@cover-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-doc.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684128) (dependencies . ("base" "cover-lib" "racket-doc" "base" "scribble-lib")) (description . "A code coverage tool, documentation") (implies . ()) (modules . ((lib "cover/scribblings/cover.scrbl") (lib "cover/scribblings/basics.scrbl") (lib "cover/scribblings/api.scrbl") (lib "cover/scribblings/base.rkt") (lib "cover/scribblings/plugins.scrbl"))) (name . "cover-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-doc#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-doc#release") (source_url . "https://github.com/florence/cover.git?path=cover-doc#release"))))))) ("cover-lib" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-lib.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684086) (dependencies . ("base" "compiler-lib" "custom-load" "data-lib" "errortrace-lib" "syntax-color-lib" "testing-util-lib")) (description . "A code coverage tool, implementation part") (implies . ()) (modules . ((lib "cover/strace.rkt") (lib "cover/cover.rkt") (lib "cover/private/raw.rkt") (lib "cover/private/format-utils.rkt") (lib "cover/private/file-utils.rkt") (lib "cover/format.rkt") (lib "cover/private/contracts.rkt") (lib "cover/main.rkt") (lib "cover/raco.rkt") (lib "cover/private/shared.rkt") (lib "cover/private/html/html.rkt"))) (name . "cover-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-lib#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-lib#release") (source_url . "https://github.com/florence/cover.git?path=cover-lib#release"))))))) ("cover-test" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-test.txt") (test-failure-log . "server/built/test-fail/cover-test.txt") (test-success-log . #f))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684155) (dependencies . ("base" "cover-lib" "data-lib" "syntax-color-lib" "compiler-lib" "custom-load" "at-exp-lib" "base" "htdp-lib" "macro-debugger" "rackunit-lib" "typed-racket-lib")) (description . "A code coverage tool, test part") (implies . ()) (modules . ((lib "cover/tests/html.rkt") (lib "cover/tests/bfs+module-nolex.rkt") (lib "cover/tests/basic/empty-id.rkt") (lib "cover/tests/simple-multi/2.rkt") (lib "cover/tests/syntax/syntax.rkt") (lib "cover/tests/submods/prog.rkt") (lib "cover/tests/bfs+module.rkt") (lib "cover/tests/file-utils.rkt") (lib "cover/tests/reader.rkt") (lib "cover/tests/eval/eval-call.rkt") (lib "cover/tests/error.rkt") (lib "cover/tests/basic/no-expressions.rkt") (lib "cover/tests/at-exp/at-exp.rkt") (lib "cover/tests/basic/empty-ISL.rkt") (lib "cover/tests/test-cross-phase-persist.rkt") (lib "cover/tests/syntax.rkt") (lib "cover/tests/nested.rkt") (lib "cover/tests/multibyte-coverage/submod.rkt") (lib "cover/tests/error-file.rkt") (lib "cover/tests/new-logger.rkt") (lib "cover/tests/basic/not-run.rkt") (lib "cover/tests/cross-phase-persist.rkt") (lib "cover/tests/main.rkt") (lib "cover/tests/basic/prog.rkt") (lib "cover/tests/prog.rkt") (lib "cover/tests/lazy-require.rkt") (lib "cover/tests/multiple-modules.rkt") (lib "cover/tests/format-utils.rkt") (lib "cover/tests/eval/do-eval.rkt") (lib "cover/tests/module.rkt") (lib "cover/tests/do-dont-run.rkt") (lib "cover/tests/provide.rkt") (lib "cover/tests/do-bfs+module.rkt") (lib "cover/tests/raco.rkt") (lib "cover/tests/cover-internal.rkt") (lib "cover/tests/bfs+define-syntax.rkt") (lib "cover/tests/dont-run.rkt") (lib "cover/tests/exit.rkt") (lib "cover/tests/eval/eval.rkt") (lib "cover/tests/do-eval.rkt") (lib "cover/tests/bfs.rkt") (lib "cover/tests/provide-define-syntax/prog.rkt") (lib "cover/tests/use-provide.rkt") (lib "cover/tests/do-multiple-modules.rkt") (lib "cover/tests/basic/raise.rkt") (lib "cover/tests/do-arg.rkt") (lib "cover/tests/do-syntax.rkt") (lib "cover/tests/simple-multi/1.rkt") (lib "cover/tests/arg.rkt") (lib "cover/tests/multibyte-coverage/arrow.rkt") (lib "cover/tests/eval.rkt") (lib "cover/tests/do-exit.rkt") (lib "cover/tests/do-reader.rkt"))) (name . "cover-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-test#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-test#release") (source_url . "https://github.com/florence/cover.git?path=cover-test#release"))))))) ("cow-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cow-repl.txt"))) (checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Cowsay in your REPL") (implies . ()) (modules . ((lib "cow-repl/main.rkt"))) (name . "cow-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-cow-repl/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (source . "github://github.com/takikawa/racket-cow-repl/master") (source_url . "http://github.com/takikawa/racket-cow-repl/tree/master"))))))) ("cpu-affinity" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cpu-affinity" "doc/cpu-affinity@cpu-affinity/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpu-affinity.txt") (test-failure-log . "server/built/test-fail/cpu-affinity.txt") (test-success-log . #f))) (checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "compatibility-lib" "racket-doc" "compatibility-doc")) (description . "A library for getting/setting CPU affinity") (implies . ()) (modules . ((lib "cpu-affinity/error.rkt") (lib "cpu-affinity/test.rkt") (lib "cpu-affinity/unix.rkt") (lib "cpu-affinity/windows.rkt") (lib "cpu-affinity/cpu-affinity.scrbl") (lib "cpu-affinity/main.rkt"))) (name . "cpu-affinity") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (os . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-cpu-affinity/tree/master") (tags . ("ffi" "os")) (versions . #hash((default . #hasheq((checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (source . "git://github.com/takikawa/racket-cpu-affinity") (source_url . "http://github.com/takikawa/racket-cpu-affinity/tree/master"))))))) ("crc32c" . #hasheq((author . "tetsumi@protonmail.com") (authors . ("tetsumi@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crc32c" "doc/crc32c@crc32c/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crc32c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crc32c.txt"))) (checksum . "20cd115689582b0899147148a59f02fb92cd29e6") (checksum-error . #f) (collection . "crc32c") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Implementation of CRC32-C") (implies . ()) (modules . ((lib "crc32c/main.rkt") (lib "crc32c/scribblings/crc32c.scrbl"))) (name . "crc32c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tetsumi@protonmail.com . #t) (checksum . #t) (crc . #t) (hash . #t) (ring:1 . #t))) (source . "https://bitbucket.org/Tetsumi/crc32c.git") (tags . ("checksum" "crc" "hash")) (versions . #hash((default . #hasheq((checksum . "20cd115689582b0899147148a59f02fb92cd29e6") (source . "https://bitbucket.org/Tetsumi/crc32c.git") (source_url . "https://bitbucket.org/Tetsumi/crc32c.git"))))))) ("crontab" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crontab-manual" "doc/crontab-manual@crontab/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crontab.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crontab.txt"))) (checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (checksum-error . #f) (collection . "crontab") (conflicts . ()) (date-added . 1660842436) (dependencies . ("base" "crontab-lib" "base" "racket-doc" "scribble-lib")) (description . "Cron-like scheduling for Racket. (docs & implementation)") (implies . ("crontab-lib")) (modules . ((lib "crontab/crontab-manual.scrbl"))) (name . "crontab") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (cron . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab") (tags . ("cron")) (versions . #hash((default . #hasheq((checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab") (source_url . "https://github.com/Bogdanp/racket-crontab.git?path=crontab"))))))) ("crontab-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crontab-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crontab-lib.txt"))) (checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (checksum-error . #f) (collection . "crontab") (conflicts . ()) (date-added . 1660842390) (dependencies . ("base")) (description . "Cron-like scheduling for Racket. (implementation only)") (implies . ()) (modules . ((lib "crontab/schedule.rkt") (lib "crontab/crontab.rkt") (lib "crontab/private/date.rkt") (lib "crontab/main.rkt"))) (name . "crontab-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (cron . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-lib") (tags . ("cron")) (versions . #hash((default . #hasheq((checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-lib") (source_url . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-lib"))))))) ("crontab-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crontab-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crontab-test.txt"))) (checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1660842411) (dependencies . ("base" "crontab-lib" "base" "crontab-lib" "rackcheck-lib" "rackunit-lib")) (description . "Cron-like scheduling for Racket. (tests only)") (implies . ("crontab-lib")) (modules . ((lib "tests/crontab/schedule.rkt"))) (name . "crontab-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (cron . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-test") (tags . ("cron")) (versions . #hash((default . #hasheq((checksum . "b9baecf79af914ffbadf6205aefee24aabd54fda") (source . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-test") (source_url . "https://github.com/Bogdanp/racket-crontab.git?path=crontab-test"))))))) ("crypto" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "crypto-lib" "crypto-doc")) (description . "Cryptography library") (implies . ("crypto-lib" "crypto-doc")) (modules . ()) (name . "crypto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto"))))))) ("crypto-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crypto" "doc/crypto@crypto-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-doc.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "scramble-lib" "scramble" "racket-doc" "scribble-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (modules . ((lib "crypto/scribblings/misc.scrbl") (lib "crypto/scribblings/kdf.scrbl") (lib "crypto/examples/key-agreement-dh.rkt") (lib "crypto/examples/signing-ec.rkt") (lib "crypto/scribblings/factory.scrbl") (lib "crypto/examples/key-agreement-ec.rkt") (lib "crypto/scribblings/cipher.scrbl") (lib "crypto/scribblings/digest.scrbl") (lib "crypto/scribblings/crypto.scrbl") (lib "crypto/scribblings/intro.scrbl") (lib "crypto/scribblings/util.scrbl") (lib "crypto/examples/encryption-x25519.rkt") (lib "crypto/examples/signing-ed25519.rkt") (lib "crypto/scribblings/pkey.scrbl") (lib "crypto/examples/key-agreement-x25519.rkt"))) (name . "crypto-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-doc"))))))) ("crypto-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-lib.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "asn1-lib" "base64-lib" "binaryio-lib" "gmp-lib" "scramble-lib")) (description . "Cryptography library") (implies . ()) (modules . ((lib "crypto/private/common/pk-common.rkt") (lib "crypto/private/argon2/ffi.rkt") (lib "crypto/private/rkt/poly1305.rkt") (lib "crypto/private/decaf/ffi.rkt") (lib "crypto/private/common/base256.rkt") (lib "crypto/private/libcrypto/ffi.rkt") (lib "crypto/nettle.rkt") (lib "crypto/main.rkt") (lib "crypto/all.rkt") (lib "crypto/private/b2/factory.rkt") (lib "crypto/pkcs8.rkt") (lib "crypto/private/b2/ffi.rkt") (lib "crypto/private/gcrypt/pkey.rkt") (lib "crypto/argon2.rkt") (lib "crypto/private/sodium/factory.rkt") (lib "crypto/private/b2/digest.rkt") (lib "crypto/private/gcrypt/ffi.rkt") (lib "crypto/private/libcrypto/factory.rkt") (lib "crypto/private/libcrypto/kdf.rkt") (lib "crypto/private/rkt/kdf.rkt") (lib "crypto/private/libcrypto/cipher.rkt") (lib "crypto/gcrypt.rkt") (lib "crypto/private/libcrypto/pkey.rkt") (lib "crypto/private/nettle/kdf.rkt") (lib "crypto/private/nettle/factory.rkt") (lib "crypto/private/gcrypt/kdf.rkt") (lib "crypto/private/common/error.rkt") (lib "crypto/private/nettle/pkey.rkt") (lib "crypto/private/sodium/pkey.rkt") (lib "crypto/private/decaf/digest.rkt") (lib "crypto/private/rkt/pbkdf2.rkt") (lib "crypto/pem.rkt") (lib "crypto/private/decaf/factory.rkt") (lib "crypto/private/nettle/cipher.rkt") (lib "crypto/sodium.rkt") (lib "crypto/util/bech32.rkt") (lib "crypto/private/decaf/pkey.rkt") (lib "crypto/private/common/catalog.rkt") (lib "crypto/private/sodium/ffi.rkt") (lib "crypto/private/common/util.rkt") (lib "crypto/private/common/ffi.rkt") (lib "crypto/libcrypto.rkt") (lib "crypto/private/rkt/chacha.rkt") (lib "crypto/private/common/kdf.rkt") (lib "crypto/private/common/cipher.rkt") (lib "crypto/private/nettle/digest.rkt") (lib "crypto/private/common/digest.rkt") (lib "crypto/private/rkt/salsa.rkt") (lib "crypto/decaf.rkt") (lib "crypto/private/sodium/kdf.rkt") (lib "crypto/private/libcrypto/digest.rkt") (lib "crypto/util/age.rkt") (lib "crypto/private/common/factory.rkt") (lib "crypto/private/common/common.rkt") (lib "crypto/private/sodium/digest.rkt") (lib "crypto/private/gcrypt/cipher.rkt") (lib "crypto/private/common/interfaces.rkt") (lib "crypto/private/sodium/cipher.rkt") (lib "crypto/private/nettle/ffi.rkt") (lib "crypto/private/gcrypt/factory.rkt") (lib "crypto/b2.rkt") (lib "crypto/private/common/asn1.rkt") (lib "crypto/private/argon2/factory.rkt") (lib "crypto/private/gcrypt/digest.rkt"))) (name . "crypto-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-lib"))))))) ("crypto-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-test.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (modules . ((lib "crypto/tests/padding.rkt") (lib "crypto/tests/kdf.rkt") (lib "crypto/tests/pwhash.rkt") (lib "crypto/tests/libcrypto/d2i.rkt") (lib "crypto/tests/age.rkt") (lib "crypto/tests/util.rkt") (lib "crypto/tests/test.rkt") (lib "crypto/tests/errors.rkt") (lib "crypto/tests/pkey.rkt") (lib "crypto/tests/misc.rkt") (lib "crypto/tests/rkt-kdf.rkt") (lib "crypto/tests/cipher.rkt") (lib "crypto/tests/pkcs8/test-pkcs8.rkt") (lib "crypto/tests/digest.rkt"))) (name . "crypto-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-test"))))))) ("cs-bootstrap" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs-bootstrap.txt") (test-failure-log . "server/built/test-fail/cs-bootstrap.txt") (test-success-log . #f))) (checksum . "8d134111b5a12ff9d0fecfcdb65e1a7ca64ad5e2") (checksum-error . #f) (collection . "cs-bootstrap") (conflicts . ()) (date-added . 1595712500) (dependencies . ("base")) (description . "Creates Chez Scheme boot files from source") (implies . ()) (modules . ((lib "cs-bootstrap/parse-makefile.rkt") (lib "cs-bootstrap/define-datatype.rkt") (lib "cs-bootstrap/scheme-readtable.rkt") (lib "cs-bootstrap/constant.rkt") (lib "cs-bootstrap/syntax-mode.rkt") (lib "cs-bootstrap/r6rs-readtable.rkt") (lib "cs-bootstrap/config.rkt") (lib "cs-bootstrap/record.rkt") (lib "cs-bootstrap/scheme-lang.rkt") (lib "cs-bootstrap/r6rs-lang.rkt") (lib "cs-bootstrap/hand-coded.rkt") (lib "cs-bootstrap/nanopass-patch.rkt") (lib "cs-bootstrap/make-boot.rkt") (lib "cs-bootstrap/scheme-struct.rkt") (lib "cs-bootstrap/symbol.rkt") (lib "cs-bootstrap/main.rkt") (lib "cs-bootstrap/gensym.rkt") (lib "cs-bootstrap/rcd.rkt") (lib "cs-bootstrap/strip.rkt") (lib "cs-bootstrap/format.rkt") (lib "cs-bootstrap/primdata.rkt") (lib "cs-bootstrap/machine-def.rkt") (lib "cs-bootstrap/immediate.rkt"))) (name . "cs-bootstrap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/ChezScheme.git?path=rktboot") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d134111b5a12ff9d0fecfcdb65e1a7ca64ad5e2") (source . "https://github.com/racket/ChezScheme.git?path=rktboot") (source_url . "https://github.com/racket/ChezScheme.git?path=rktboot"))))))) ("cs135-drtools" . #hasheq((author . "racket@raymond.li kaustubh3973@gmail.com") (authors . ("racket@raymond.li" "kaustubh3973@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs135-drtools" "doc/cs135-drtools@cs135-drtools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs135-drtools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs135-drtools.txt"))) (checksum . "f7895018e28894a09f363cc55fa118cb2a02076b") (checksum-error . #f) (collection . "cs135-drtools") (conflicts . ()) (date-added . 1602526501) (dependencies . ("drracket-plugin-lib" "gui-lib" "quickscript" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "DrRacket Tools for CS 135 course at UWaterloo.") (implies . ()) (modules . ((lib "cs135-drtools/keybindings.rkt") (lib "cs135-drtools/scripts/autocomplete.rkt") (lib "cs135-drtools/scribblings/cs135-drtools.scrbl") (lib "cs135-drtools/register.rkt") (lib "cs135-drtools/main.rkt") (lib "cs135-drtools/tool.rkt"))) (name . "cs135-drtools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kaustubh3973@gmail.com . #t) (author:racket@raymond.li . #t) (autocomplete . #t) (cs135 . #t) (cs135-tools . #t) (drracket . #t) (drracket-customization . #t) (drracket-dark-mode . #t) (drracket-preferences . #t) (drracket-theme . #t) (htdp . #t) (keybindings . #t) (keyboard-shortcuts . #t) (racket . #t) (racket-lang . #t) (racket-language . #t) (racket-teachpack . #t) (raco . #t) (ring:1 . #t) (shortcut . #t) (shortcuts . #t) (tools . #t) (uwaterloo . #t))) (source . "https://github.com/Raymo111/cs135-drtools.git") (tags . ("autocomplete" "cs135" "cs135-tools" "drracket" "drracket-customization" "drracket-dark-mode" "drracket-preferences" "drracket-theme" "htdp" "keybindings" "keyboard-shortcuts" "racket" "racket-lang" "racket-language" "racket-teachpack" "raco" "shortcut" "shortcuts" "tools" "uwaterloo")) (versions . #hash((default . #hasheq((checksum . "f7895018e28894a09f363cc55fa118cb2a02076b") (source . "https://github.com/Raymo111/cs135-drtools.git") (source_url . "https://github.com/Raymo111/cs135-drtools.git"))))))) ("cs2500f16-jsonlab" . #hasheq((author . "mackenzie.r@husky.neu.edu") (authors . ("mackenzie.r@husky.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs2500f16-jsonlab" "doc/cs2500f16-jsonlab@cs2500f16-jsonlab/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs2500f16-jsonlab.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs2500f16-jsonlab.txt"))) (checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (checksum-error . #f) (collection . "cs2500f16-jsonlab") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Teachpack for CS2500 JSON lab") (implies . ()) (modules . ((lib "cs2500f16-jsonlab/scribblings/cs2500f16-jsonlab.scrbl") (lib "cs2500f16-jsonlab/main.rkt"))) (name . "cs2500f16-jsonlab") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mackenzie.r@husky.neu.edu . #t) (cs2500 . #t) (ring:1 . #t))) (source . "http://github.com/rmacnz/cs2500jsonlab/tree/master") (tags . ("cs2500")) (versions . #hash((default . #hasheq((checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (source . "git://github.com/rmacnz/cs2500jsonlab") (source_url . "http://github.com/rmacnz/cs2500jsonlab/tree/master"))))))) ("csexp" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/csexp.txt") (docs . (("main" "csexp" "doc/csexp@csexp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csexp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csexp.txt"))) (checksum . "a5b054836db26c6568d88d4e6c7706ff270f83f4") (checksum-error . #f) (collection . "csexp") (conflicts . ()) (date-added . 1550417543) (dependencies . ("base" "rackunit-lib")) (description . "Canonical s-expressions for Racket.") (implies . ()) (modules . ((lib "csexp/main.rkt") (lib "csexp/scribblings/csexp.scrbl") (lib "csexp/private/csexp.rkt"))) (name . "csexp") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:cwebber@dustycloud.org . #t) (csexp . #t) (ring:1 . #t) (serialization . #t))) (source . "https://gitlab.com/spritely/racket-csexp.git?path=csexp") (tags . ("csexp" "serialization")) (versions . #hash((default . #hasheq((checksum . "a5b054836db26c6568d88d4e6c7706ff270f83f4") (source . "https://gitlab.com/spritely/racket-csexp.git?path=csexp") (source_url . "https://gitlab.com/spritely/racket-csexp.git?path=csexp"))))))) ("csfml" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csfml.txt") (test-failure-log . "server/built/test-fail/csfml.txt") (test-success-log . #f))) (checksum . "5f8a1146b659c6cf66f31b35dafb77054c8be501") (checksum-error . #f) (collection . "csfml") (conflicts . ()) (date-added . 1578849636) (dependencies . ("base")) (description . "Bindings for CSFML 2.5 (https://www.sfml-dev.org/download/csfml/)") (implies . ()) (modules . ((lib "csfml/window.rkt") (lib "csfml/graphics.rkt") (lib "csfml/examples/ex_3.rkt") (lib "csfml/audio.rkt") (lib "csfml/types.rkt") (lib "csfml/enums.rkt") (lib "csfml/system.rkt") (lib "csfml/examples/ex_2.rkt") (lib "csfml/main.rkt") (lib "csfml/examples/ex_1.rkt") (lib "csfml/network.rkt"))) (name . "csfml") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:massung@gmail.com . #t) (csfml . #t) (opengl . #t) (ring:1 . #t) (sfml . #t))) (source . "https://github.com/massung/racket-csfml.git") (tags . ("2d" "csfml" "opengl" "sfml")) (versions . #hash((default . #hasheq((checksum . "5f8a1146b659c6cf66f31b35dafb77054c8be501") (source . "https://github.com/massung/racket-csfml.git") (source_url . "https://github.com/massung/racket-csfml.git"))))))) ("csp" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csp" "doc/csp@csp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csp.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661372) (dependencies . ("beautiful-racket-lib" "htdp-lib" "math-lib" "base" "sugar" "rackunit-lib" "debug" "graph" "at-exp-lib" "math-doc" "racket-doc" "scribble-lib")) (description . "solve constraint-satisfaction problems") (implies . ()) (modules . ((lib "csp/hacs-test.rkt") (lib "csp/hacs-test-queens.rkt") (lib "csp/hacs.rkt") (lib "csp/aima-queens.rkt") (lib "csp/hacs-test-workbench.rkt") (lib "csp/hacs-demo-triples.rkt") (lib "csp/aima-sum.rkt") (lib "csp/sudoku-jm.rkt") (lib "csp/aima-smm.rkt") (lib "csp/hacs-map.rkt") (lib "csp/hacs-cryptarithmetic.rkt") (lib "csp/csp-test.rkt") (lib "csp/main.rkt") (lib "csp/hacs-test-sudoku.rkt") (lib "csp/scribblings/csp.scrbl") (lib "csp/csp-test-etc.rkt") (lib "csp/expander.rkt") (lib "csp/aima.rkt") (lib "csp/csp-test-problems.rkt") (lib "csp/test-lang.rkt") (lib "csp/csp.rkt"))) (name . "csp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (constraint . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=csp#main") (tags . ("constraint")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=csp#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=csp#main"))))))) ("csrmesh" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csrmesh" "doc/csrmesh@csrmesh/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csrmesh.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csrmesh.txt"))) (checksum . "d7cc04b2bbfd45c71bf086bf5075de9ccd81415f") (checksum-error . #f) (collection . "csrmesh") (conflicts . ()) (dependencies . ("crypto" "bitsyntax" "word" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "typed-racket-doc" "racket-doc" "rackunit-lib")) (description . "Implementation of the Bluetooth CSR Mesh protocol.") (implies . ()) (modules . ((lib "csrmesh/main.rkt") (lib "csrmesh/csrmesh/pinhack.rkt") (lib "csrmesh/csrmesh/packet.rkt") (lib "csrmesh/scribblings/csrmesh.scrbl"))) (name . "csrmesh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (bluetooth . #t) (csr . #t) (csrmesh . #t) (mesh . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/csrmesh.git") (tags . ("bluetooth" "csr" "csrmesh" "mesh")) (versions . #hash((default . #hasheq((checksum . "d7cc04b2bbfd45c71bf086bf5075de9ccd81415f") (source . "https://gitlab.com/RayRacine/csrmesh.git") (source_url . "https://gitlab.com/RayRacine/csrmesh.git"))))))) ("css-expr" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-expr" "doc/css-expr@css-expr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-expr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-expr.txt"))) (checksum . "d060b2a76d08013c91318890dc5d9f6cc6c81138") (checksum-error . #f) (collection . "css-expr") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "nanopass" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "S-expression-based CSS") (implies . ()) (modules . ((lib "css-expr/typed.rkt") (lib "css-expr/css-expr.scrbl") (lib "css-expr/main.rkt"))) (name . "css-expr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (css . #t) (dsl . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/leafac/css-expr.git") (tags . ("css" "dsl" "pollen")) (versions . #hash((default . #hasheq((checksum . "d060b2a76d08013c91318890dc5d9f6cc6c81138") (source . "https://github.com/leafac/css-expr.git") (source_url . "https://github.com/leafac/css-expr.git"))))))) ("css-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-tools" "doc/css-tools@css-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-tools.txt"))) (checksum . "90c8f8f1068e5d03e0c4793712a5cb48af9aef48") (checksum-error . #f) (collection . "css-tools") (conflicts . ()) (date-added . 1556661379) (dependencies . ("base" "sugar" "scribble-lib" "rackunit-lib")) (description . "Tools for generating & manipulating CSS (unstable)") (implies . ()) (modules . ((lib "css-tools/named-colors.rkt") (lib "css-tools/colors.rkt") (lib "css-tools/typography.rkt") (lib "css-tools/html.rkt") (lib "css-tools/main.rkt") (lib "css-tools/column.rkt") (lib "css-tools/transition.rkt") (lib "css-tools/core.rkt") (lib "css-tools/math.rkt") (lib "css-tools/scribblings/css-tools.scrbl") (lib "css-tools/misc.rkt") (lib "css-tools/font-face.rkt"))) (name . "css-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (css . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/css-tools.git") (tags . ("css")) (versions . #hash((default . #hasheq((checksum . "90c8f8f1068e5d03e0c4793712a5cb48af9aef48") (source . "https://git.matthewbutterick.com/mbutterick/css-tools.git") (source_url . "https://git.matthewbutterick.com/mbutterick/css-tools.git"))))))) ("csv" . #hasheq((author . "linjunhalida@gmail.com") (authors . ("linjunhalida@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/csv.txt") (docs . (("main" "csv" "doc/csv@csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv.txt"))) (checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (checksum-error . #f) (collection . "csv") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "csv file reader and writer") (implies . ()) (modules . ((lib "csv/test.rkt") (lib "csv/scribblings/csv.scrbl") (lib "csv/main.rkt"))) (name . "csv") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:linjunhalida@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/halida/csv/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (source . "git://github.com/halida/csv") (source_url . "http://github.com/halida/csv/tree/master"))))))) ("csv-writing" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csv-writing" "doc/csv-writing@csv-writing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv-writing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv-writing.txt"))) (checksum . "a656ce4ee8ee9ef618e257a9def8f673f3ec6122") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552763509) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "simple functions to write CSV files (and TSV files)") (implies . ()) (modules . ((lib "csv-writing/main.rkt") (lib "csv-writing/tests.rkt") (lib "csv-writing/csv-writing.scrbl"))) (name . "csv-writing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (csv . #t) (ring:1 . #t) (tabular . #t) (tsv . #t))) (source . "https://github.com/jbclements/csv-writing.git") (tags . ("csv" "tabular" "tsv")) (versions . #hash((default . #hasheq((checksum . "a656ce4ee8ee9ef618e257a9def8f673f3ec6122") (source . "https://github.com/jbclements/csv-writing.git") (source_url . "https://github.com/jbclements/csv-writing.git"))))))) ("cuecore" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cuecore" "doc/cuecore@cuecore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cuecore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cuecore.txt"))) (checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "CueCore Lighting Control") (implies . ()) (modules . ((lib "cuecore/cuecore.scrbl") (lib "cuecore/main.rkt"))) (name . "cuecore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-cuecore/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (source . "git://github.com/mordae/racket-cuecore") (source_url . "http://github.com/mordae/racket-cuecore/tree/master"))))))) ("cur" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur.txt"))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513284) (dependencies . ("cur-lib" "cur-doc" "cur-test")) (description . "Dependent types and meta-programming") (implies . ("cur-lib" "cur-doc" "cur-test")) (modules . ()) (name . "cur") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (proofs . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur#main") (tags . ("proofs" "types")) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur#main"))))))) ("cur-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cur" "doc/cur@cur-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-doc.txt"))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513301) (dependencies . ("base" "base" "scribble-lib" "racket-doc" "sandbox-lib" "cur-lib" "data-doc")) (description . "") (implies . ()) (modules . ((lib "cur/scribblings/stdlib/sugar.scrbl") (lib "cur/scribblings/stdlib/datum.scrbl") (lib "cur/scribblings/olly.scrbl") (lib "cur/scribblings/stdlib/typeclass.scrbl") (lib "cur/scribblings/stdlib/bool.scrbl") (lib "cur/scribblings/ntac.scrbl") (lib "cur/scribblings/stdlib/equality.scrbl") (lib "cur/scribblings/stdlib/list.scrbl") (lib "cur/scribblings/reflection.scrbl") (lib "cur/cur.scrbl") (lib "cur/scribblings/stdlib/racket-ascii.scrbl") (lib "cur/scribblings/defs.rkt") (lib "cur/scribblings/stdlib/nat.scrbl") (lib "cur/scribblings/stdlib/maybe.scrbl") (lib "cur/scribblings/stdlib/ascii.scrbl") (lib "cur/scribblings/stdlib/sigma.scrbl") (lib "cur/scribblings/stdlib.scrbl") (lib "cur/scribblings/curnel.scrbl"))) (name . "cur-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-doc#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-doc#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-doc#main"))))))) ("cur-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-lib.txt") (test-failure-log . "server/built/test-fail/cur-lib.txt") (test-success-log . #f))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513265) (dependencies . ("base" "turnstile-lib" "macrotypes-lib" "reprovide-lang-lib")) (description . "") (implies . ()) (modules . ((lib "cur/ntac/ctx.rkt") (lib "cur/ntac/auto.rkt") (lib "cur/curnel/coc.rkt") (lib "cur/lang/reader.rkt") (lib "cur/stdlib/axiom.rkt") (lib "cur/ntac/base.rkt") (lib "cur/stdlib/totality.rkt") (lib "cur/stdlib/racket-ascii.rkt") (lib "cur/stdlib/pair.rkt") (lib "cur/ntac/metantac.rkt") (lib "cur/ntac/ML-rewrite.rkt") (lib "cur/stdlib/typeclass.rkt") (lib "cur/stdlib/sugar.rkt") (lib "cur/stdlib/maybe.rkt") (lib "cur/stdlib/nat.rkt") (lib "cur/ntac/standard.rkt") (lib "cur/ntac/rewrite.rkt") (lib "cur/curnel/lang.rkt") (lib "cur/metantac/lang/reader.rkt") (lib "cur/stdlib/equality.rkt") (lib "cur/stdlib/bool.rkt") (lib "cur/main.rkt") (lib "cur/stdlib/sigma.rkt") (lib "cur/stdlib/datum.rkt") (lib "cur/curnel/cic-saccharata.rkt") (lib "cur/metantac/main.rkt") (lib "cur/stdlib/pattern-tree.rkt") (lib "cur/ntac/prove-unify.rkt") (lib "cur/curnel/coc-saccharata.rkt") (lib "cur/debug/syntax-trace.rkt") (lib "cur/curnel/stxutils.rkt") (lib "cur/stdlib/ascii.rkt") (lib "cur/curnel/reflection.rkt") (lib "cur/ntac/inversion.rkt") (lib "cur/stdlib/sized.rkt") (lib "cur/stdlib/list.rkt") (lib "cur/stdlib/prop.rkt") (lib "cur/olly.rkt") (lib "cur/ntac/utils.rkt"))) (name . "cur-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-lib#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-lib#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-lib#main"))))))) ("cur-test" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-test.txt") (test-failure-log . "server/built/test-fail/cur-test.txt") (test-success-log . #f))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513332) (dependencies . ("base" "rackunit-lib" "cur-lib" "sweet-exp-lib" "chk-lib" "rackunit-macrotypes-lib")) (description . "") (implies . ()) (modules . ((lib "cur/tests/ntac/software-foundations/Poly-church.rkt") (lib "cur/tests/ntac/admit.rkt") (lib "cur/tests/stdlib/sized.rkt") (lib "cur/tests/ntac/assert.rkt") (lib "cur/tests/ntac/inversion.rkt") (lib "cur/tests/ntac/rewrite-forall.rkt") (lib "cur/tests/stdlib/sugar.rkt") (lib "cur/tests/stdlib/deppat.rkt") (lib "cur/tests/ntac/ML-rewrite-2.rkt") (lib "cur/tests/stdlib/typeclass.rkt") (lib "cur/tests/ntac/software-foundations/Regex.rkt") (lib "cur/tests/vector-append.rkt") (lib "cur/tests/issue67.rkt") (lib "cur/tests/stdlib/prop.rkt") (lib "cur/tests/stdlib/curunit.rkt") (lib "cur/tests/wilbowma.rkt") (lib "cur/tests/ntac/ML-rewrite.rkt") (lib "cur/tests/ntac/rewrite-in.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-destruct.rkt") (lib "cur/tests/stdlib/ascii.rkt") (lib "cur/tests/issue-60.rkt") (lib "cur/tests/stdlib/pattern-tree.rkt") (lib "cur/tests/ntac/software-foundations/IndProp.rkt") (lib "cur/tests/ntac/simpl.rkt") (lib "cur/tests/stdlib/sigma.rkt") (lib "cur/tests/issue-71.rkt") (lib "cur/tests/ntac/destruct-exist.rkt") (lib "cur/tests/stdlib/list.rkt") (lib "cur/tests/plus.rkt") (lib "cur/tests/ntac/generalize.rkt") (lib "cur/tests/stdlib/axiom.rkt") (lib "cur/tests/ntac/rewrite-with-previous.rkt") (lib "cur/tests/ntac/software-foundations/Imp-var.rkt") (lib "cur/tests/stdlib/datum.rkt") (lib "cur/tests/ntac/induction.rkt") (lib "cur/tests/ntac/software-foundations/Maps.rkt") (lib "cur/tests/ntac/implicit.rkt") (lib "cur/tests/ntac/software-foundations/Poly.rkt") (lib "cur/tests/ntac.rkt") (lib "cur/tests/sweet-exp.rkt") (lib "cur/tests/stdlib/pat.rkt") (lib "cur/tests/issue-134.rkt") (lib "cur/tests/stdlib/termination.rkt") (lib "cur/tests/ntac/software-foundations/Poly-abbrv.rkt") (lib "cur/tests/stlc.rkt") (lib "cur/tests/stdlib/rackunit-size.rkt") (lib "cur/tests/ntac/software-foundations/Imp.rkt") (lib "cur/tests/ntac/issue104.rkt") (lib "cur/tests/fact.rkt") (lib "cur/tests/stdlib/racket-ascii.rkt") (lib "cur/tests/curnel/datatypes.rkt") (lib "cur/tests/issue-95.rkt") (lib "cur/tests/stdlib/maybe.rkt") (lib "cur/tests/ntac/interactive.rkt") (lib "cur/tests/ntac/software-foundations/Logic.rkt") (lib "cur/tests/ntac/rewrite.rkt") (lib "cur/tests/ntac/software-foundations/Induction.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-unfolding.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-inversion.rkt") (lib "cur/tests/ntac/leb.rkt") (lib "cur/tests/ntac/Induction-no-Basics.rkt") (lib "cur/tests/curnel/cic-saccharata.rkt") (lib "cur/tests/stdlib/nat.rkt") (lib "cur/tests/ntac/reflexivity-poly.rkt") (lib "cur/tests/stdlib/equality.rkt") (lib "cur/tests/ntac/destruct.rkt") (lib "cur/tests/curnel/reflection.rkt") (lib "cur/tests/ntac/software-foundations/Induction-ML.rkt") (lib "cur/tests/ntac/software-foundations/Tactics3.rkt") (lib "cur/tests/ntac/auto.rkt") (lib "cur/tests/ntac/software-foundations/Basics-ML.rkt") (lib "cur/tests/stdlib/bool.rkt") (lib "cur/tests/ntac/rackunit-ntac.rkt") (lib "cur/tests/ntac/software-foundations/Poly-pairs.rkt") (lib "cur/tests/ntac/software-foundations/Basics.rkt") (lib "cur/tests/ntac/software-foundations/Tactics.rkt") (lib "cur/tests/ntac/ML-reflexivity.rkt") (lib "cur/tests/stdlib/pattern-tree-matcher.rkt") (lib "cur/tests/ntac/software-foundations/Lists.rkt") (lib "cur/tests/stlc-olly.rkt") (lib "cur/tests/stdlib/totality.rkt") (lib "cur/tests/ntac/software-foundations/Regex2.rkt") (lib "cur/tests/olly.rkt") (lib "cur/tests/curnel/equality.rkt") (lib "cur/tests/ntac/ctx.rkt"))) (name . "cur-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-test#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-test#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-test#main"))))))) ("curly-fn" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("curly-fn-doc" "curly-fn-lib")) (description . "") (implies . ("curly-fn-doc" "curly-fn-lib")) (modules . ()) (name . "curly-fn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lambda . #t) (lang-extension . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn") (tags . ("lambda" "lang-extension" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn"))))))) ("curly-fn-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "curly-fn" "doc/curly-fn@curly-fn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-doc.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "namespaced-transformer-doc" "namespaced-transformer-lib" "racket-doc" "scribble-code-examples" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "scribblings/curly-fn.scrbl"))) (name . "curly-fn-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-doc") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-doc"))))))) ("curly-fn-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-lib.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "namespaced-transformer-lib")) (description . "") (implies . ()) (modules . ((lib "curly-fn/lang/language-info.rkt") (lib "curly-fn/lang/runtime-config.rkt") (lib "curly-fn/private/make-extension-reader.rkt") (lib "curly-fn/main.rkt") (lib "curly-fn/private/curly-fn-transformer.rkt") (lib "curly-fn/lang/reader.rkt"))) (name . "curly-fn-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-lib") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-lib"))))))) ("curly-fn-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-test.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "tests/curly-fn.rkt"))) (name . "curly-fn-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-test") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-test"))))))) ("curved-text" . #hasheq((author . "klibert.piotr@gmail.com") (authors . ("klibert.piotr@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/curved-text.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (checksum-error . #f) (collection . "curved-text") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "curved-text/demo/canvas.rkt") (lib "curved-text/bezier/math.rkt") (lib "curved-text/bezier/binary-search.rkt") (lib "curved-text/demo/main.rkt") (lib "curved-text/main.rkt") (lib "curved-text/demo/drawing.rkt") (lib "curved-text/bezier/point.rkt") (lib "curved-text/bezier/tables.rkt") (lib "curved-text/bezier/utils.rkt") (lib "curved-text/bezier/curved-text.rkt") (lib "curved-text/bezier/curve.rkt"))) (name . "curved-text") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:klibert.piotr@gmail.com . #t) (curve . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/piotrklibert/curved-text/tree/master") (tags . ("curve" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (source . "git://github.com/piotrklibert/curved-text") (source_url . "http://github.com/piotrklibert/curved-text/tree/master"))))))) ("custom-load" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "custom-load" "doc/custom-load@custom-load/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/custom-load.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/custom-load.txt"))) (checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (checksum-error . #f) (collection . "custom-load") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A load handler that avoids stale zo files.") (implies . ()) (modules . ((lib "custom-load/test/a.rkt") (lib "custom-load/test/c.rkt") (lib "custom-load/main.rkt") (lib "custom-load/private/loader.rkt") (lib "custom-load/custom-load.scrbl") (lib "custom-load/top.rkt") (lib "custom-load/test/b.rkt"))) (name . "custom-load") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/custom-load/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (source . "git://github.com/rmculpepper/custom-load") (source_url . "http://github.com/rmculpepper/custom-load/tree/master"))))))) ("dali" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dali" "doc/dali@dali/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dali.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dali.txt"))) (checksum . "d69925424559447fbd3bba7d4d66dcb2a745b9c2") (checksum-error . #f) (collection . "dali") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Simple text templating (mustache/handlebars style) for Racket.") (implies . ()) (modules . ((lib "dali/tests/test-doc-complete.rkt") (lib "dali/tests/dali.rkt") (lib "dali/scribblings/dali.scrbl") (lib "dali/main.rkt"))) (name . "dali") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/johnstonskj/dali.git") (tags . ("template")) (versions . #hash((default . #hasheq((checksum . "d69925424559447fbd3bba7d4d66dcb2a745b9c2") (source . "https://github.com/johnstonskj/dali.git") (source_url . "https://github.com/johnstonskj/dali.git"))))))) ("dallas" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dallas.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dallas.txt"))) (checksum . "8cc132551326f28efc4536081b947a466429937b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625078980) (dependencies . ("dallas-lib" "dallas-doc")) (description . "Experimental RDBMS based on the Darwen & Date's D language") (implies . ("dallas-lib" "dallas-doc")) (modules . ()) (name . "dallas") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git?path=dallas") (tags . ("database" "db" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "8cc132551326f28efc4536081b947a466429937b") (source . "https://github.com/jessealama/dallas.git?path=dallas") (source_url . "https://github.com/jessealama/dallas.git?path=dallas"))))))) ("dallas-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dallas" "doc/dallas@dallas-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dallas-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dallas-doc.txt"))) (checksum . "8cc132551326f28efc4536081b947a466429937b") (checksum-error . #f) (collection . "dallas") (conflicts . ()) (date-added . 1625079138) (dependencies . ("base" "scribble-lib" "dallas-lib" "racket-doc")) (description . "Documentation for Dallas") (implies . ()) (modules . ((lib "dallas/dallas.scrbl"))) (name . "dallas-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (docs . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git?path=dallas-doc") (tags . ("database" "db" "docs" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "8cc132551326f28efc4536081b947a466429937b") (source . "https://github.com/jessealama/dallas.git?path=dallas-doc") (source_url . "https://github.com/jessealama/dallas.git?path=dallas-doc"))))))) ("dallas-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dallas-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dallas-lib.txt"))) (checksum . "8cc132551326f28efc4536081b947a466429937b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625079093) (dependencies . ("base")) (description . "Dallas (implementation)") (implies . ()) (modules . ((lib "dallas/main.rkt"))) (name . "dallas-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git?path=dallas-lib") (tags . ("database" "db" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "8cc132551326f28efc4536081b947a466429937b") (source . "https://github.com/jessealama/dallas.git?path=dallas-lib") (source_url . "https://github.com/jessealama/dallas.git?path=dallas-lib"))))))) ("dallas-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dallas-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dallas-test.txt"))) (checksum . "8cc132551326f28efc4536081b947a466429937b") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1625079192) (dependencies . ("dallas-lib" "base")) (description . "Tests for Dallas") (implies . ()) (modules . ()) (name . "dallas-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jessealama/dallas.git?path=dallas-test") (tags . ("database" "db" "experimental" "relational" "tests")) (versions . #hash((default . #hasheq((checksum . "8cc132551326f28efc4536081b947a466429937b") (source . "https://github.com/jessealama/dallas.git?path=dallas-test") (source_url . "https://github.com/jessealama/dallas.git?path=dallas-test"))))))) ("dan-scheme" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dan-scheme" "doc/dan-scheme@dan-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dan-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dan-scheme.txt"))) (checksum . "289e8cb903a24b2e1939a8556c164589a0e293e5") (checksum-error . #f) (collection . "dan-scheme") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A very little language for situations where simplicity is desired over convenience") (implies . ()) (modules . ((lib "dan-scheme/test.rkt") (lib "dan-scheme/scribblings/dan-scheme.scrbl") (lib "dan-scheme/main.rkt"))) (name . "dan-scheme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "http://github.com/david-christiansen/dan-scheme/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "289e8cb903a24b2e1939a8556c164589a0e293e5") (source . "git://github.com/david-christiansen/dan-scheme") (source_url . "http://github.com/david-christiansen/dan-scheme/tree/master"))))))) ("darwin" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "darwin" "doc/darwin@darwin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/darwin.txt") (test-failure-log . "server/built/test-fail/darwin.txt") (test-success-log . #f))) (checksum . "311df33cc83f67859ed9db8b236d227dec83d895") (checksum-error . #f) (collection . (multi)) (conflicts . ("frog")) (date-added . 1569610192) (dependencies . ("base" "find-parent-dir" "html-lib" "markdown-ng" "txexpr" "racket-index" "rackjure" "reprovide-lang" "scribble-lib" "scribble-text-lib" "srfi-lite-lib" "web-server-lib" "at-exp-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-text-lib" "web-server-doc")) (description . "Static blog generator application. Supports Twitter Bootstrap, Pygments, more.") (implies . ()) (modules . ((lib "darwin/private/posts.rkt") (lib "darwin/verbosity.rkt") (lib "darwin/private/enhance-body/add-doc-links/doc-uri.rkt") (lib "darwin/darwin.scrbl") (lib "darwin/private/author.rkt") (lib "darwin/private/params.rkt") (lib "darwin/params.rkt") (lib "example/_src/posts/2013-06-19-a-scribble-post.scrbl") (lib "darwin/private/new-post.rkt") (lib "darwin/private/tags.rkt") (lib "darwin/private/main.rkt") (lib "darwin/config/lang/reader.rkt") (lib "example/darwin.rkt") (lib "darwin/private/enhance-body/syntax-highlight/pygments.rkt") (lib "darwin/config/main.rkt") (lib "darwin/config/private/load.rkt") (lib "darwin/private/stale.rkt") (lib "darwin/private/watch-dir.rkt") (lib "darwin/main.rkt") (lib "darwin/private/serialize-posts.rkt") (lib "darwin/enhance-body.rkt") (lib "darwin/private/feeds.rkt") (lib "darwin/private/bodies-page.rkt") (lib "darwin/config/private/test.rkt") (lib "darwin/private/post-struct.rkt") (lib "darwin/scribble.rkt") (lib "darwin/private/verbosity.rkt") (lib "darwin/private/define-doc.rkt") (lib "darwin/private/paths.rkt") (lib "darwin/private/non-posts.rkt") (lib "darwin/private/read-scribble.rkt") (lib "darwin/private/html.rkt") (lib "darwin/widgets.rkt") (lib "darwin/private/xexpr2text.rkt") (lib "darwin/private/xexpr-map.rkt") (lib "darwin/private/util.rkt") (lib "darwin/paths.rkt") (lib "darwin/private/template.rkt") (lib "example/_src/A-Non-Post-Scribble-Page.scrbl"))) (name . "darwin") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (app . #t) (author:pmatos@linki.tools . #t) (blog . #t) (markdown . #t) (ring:2 . #t) (scribble . #t) (web . #t))) (source . "https://github.com/pmatos/darwin.git") (tags . ("app" "blog" "markdown" "scribble" "web")) (versions . #hash((default . #hasheq((checksum . "311df33cc83f67859ed9db8b236d227dec83d895") (source . "https://github.com/pmatos/darwin.git") (source_url . "https://github.com/pmatos/darwin.git"))))))) ("data-frame" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-frame" "doc/data-frame@data-frame/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-frame.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-frame.txt"))) (checksum . "6a5b2fa6f67db9a36761c23fab8b5e730dfe7b6a") (checksum-error . #f) (collection . "data-frame") (conflicts . ()) (date-added . 1552739191) (dependencies . ("db-lib" "draw-lib" "math-lib" "plot-gui-lib" "plot-lib" "srfi-lite-lib" "typed-racket-lib" "rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib" "db-doc" "math-doc" "plot-doc" "al2-test-runner")) (description . "A data frame implementation for Racket") (implies . ()) (modules . ((lib "data-frame/private/exn.rkt") (lib "data-frame/private/tcx.rkt") (lib "data-frame/private/annealing.rkt") (lib "data-frame/private/slr.rkt") (lib "data-frame/private/csv.rkt") (lib "data-frame/private/rdp-simplify.rkt") (lib "data-frame/tcx.rkt") (lib "data-frame/private/spline.rkt") (lib "data-frame/private/gpx.rkt") (lib "data-frame/private/describe.rkt") (lib "data-frame/private/bsearch.rkt") (lib "data-frame/gpx.rkt") (lib "data-frame/private/least-squares-fit.rkt") (lib "data-frame/private/meanmax.rkt") (lib "data-frame/private/histogram.rkt") (lib "data-frame/private/xml-common.rkt") (lib "data-frame/private/df.rkt") (lib "data-frame/private/test/df-generate.rkt") (lib "data-frame/private/sql.rkt") (lib "data-frame/scribblings/data-frame.scrbl") (lib "data-frame/private/colors.rkt") (lib "data-frame/private/test/df-lsq-plots.rkt") (lib "data-frame/private/for-df.rkt") (lib "data-frame/private/series.rkt") (lib "data-frame/private/statistics.rkt") (lib "data-frame/private/scatter.rkt") (lib "data-frame/main.rkt") (lib "data-frame/private/test/df-test.rkt"))) (name . "data-frame") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (data-frame . #t) (ring:1 . #t) (tabular . #t))) (source . "https://github.com/alex-hhh/data-frame.git") (tags . ("data-frame" "tabular")) (versions . #hash((default . #hasheq((checksum . "6a5b2fa6f67db9a36761c23fab8b5e730dfe7b6a") (source . "https://github.com/alex-hhh/data-frame.git") (source_url . "https://github.com/alex-hhh/data-frame.git"))))))) ("data-red-black" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-red-black" "doc/data-red-black@data-red-black/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-red-black.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-red-black.txt"))) (checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-lib" "data-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "red-black trees.  Includes implementations of augmented red-black trees, positional red-black trees, and an ordered set backed by a rb-tree.") (implies . ()) (modules . ((lib "data/red-black/ordered-set.rkt") (lib "data/red-black/augmented.scrbl") (lib "data/red-black/augmented.rkt") (lib "data/red-black/data-red-black.scrbl") (lib "data/red-black/positional.rkt") (lib "data/red-black/positional.scrbl") (lib "data/red-black/ordered-set.scrbl") (lib "data/red-black/biblio.scrbl") (lib "data/red-black/rb-token-tree.rkt"))) (name . "data-red-black") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/dyoo/data-red-black/tree/master/") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (source . "github://github.com/dyoo/data-red-black/master/") (source_url . "http://github.com/dyoo/data-red-black/tree/master/"))))))) ("data-type" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-type" "doc/data-type@data-type/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-type.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-type.txt"))) (checksum . "ec362892da95a829463355da2e2f4a060df640e7") (checksum-error . #f) (collection . "data-type") (conflicts . ()) (date-added . 1629348872) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-typed")) (description . "data type syntax for typed/racket") (implies . ()) (modules . ((lib "data-type/scribblings/data-type.scrbl") (lib "data-type/main.rkt"))) (name . "data-type") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/dannypsnl/data-type.git#develop") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "ec362892da95a829463355da2e2f4a060df640e7") (source . "https://github.com/dannypsnl/data-type.git#develop") (source_url . "https://github.com/dannypsnl/data-type.git#develop"))))))) ("database-url" . #hasheq((author . "lassi@lassi.io") (authors . ("lassi@lassi.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "database-url" "doc/database-url@database-url/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/database-url.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/database-url.txt"))) (checksum . "1bc45817ab41171da41d39c0027367eda698c463") (checksum-error . #f) (collection . "database-url") (conflicts . ()) (date-added . 1555074431) (dependencies . ("db-lib" "rackunit-lib" "base" "db-doc" "racket-doc" "scribble-lib")) (description . "Parse DATABASE_URL for use with the Racket db module") (implies . ()) (modules . ((lib "database-url/database-url.rkt") (lib "database-url/database-url-test.rkt") (lib "database-url/database-url.scrbl") (lib "database-url/main.rkt"))) (name . "database-url") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lassi@lassi.io . #t) (db . #t) (ring:1 . #t) (uri . #t) (url . #t) (web . #t))) (source . "https://github.com/lassik/racket-database-url.git") (tags . ("db" "uri" "url" "web")) (versions . #hash((default . #hasheq((checksum . "1bc45817ab41171da41d39c0027367eda698c463") (source . "https://github.com/lassik/racket-database-url.git") (source_url . "https://github.com/lassik/racket-database-url.git"))))))) ("datacell" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "datacell" "doc/datacell@datacell/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datacell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datacell.txt"))) (checksum . "fe91d9251542df5f9edb41fb457fb6c7f548d425") (checksum-error . #f) (collection . "datacell") (conflicts . ()) (date-added . 1551898611) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple embedded dataflow language") (implies . ()) (modules . ((lib "datacell/scribblings/datacell.scrbl") (lib "datacell/private/cell.rkt") (lib "datacell/main.rkt"))) (name . "datacell") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (dataflow . #t) (ring:1 . #t))) (source . "https://github.com/florence/datacell.git") (tags . ("dataflow")) (versions . #hash((default . #hasheq((checksum . "fe91d9251542df5f9edb41fb457fb6c7f548d425") (source . "https://github.com/florence/datacell.git") (source_url . "https://github.com/florence/datacell.git"))))))) ("datadef" . #hasheq((author . "zaiter.adam7@gmail.com") (authors . ("zaiter.adam7@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "datadef" "doc/datadef@datadef/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datadef.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datadef.txt"))) (checksum . "127f2573a0eb117dc7c816566ea547a5568d0d34") (checksum-error . #f) (collection . "datadef") (conflicts . ()) (date-added . 1653578084) (dependencies . ("db-lib" "web-server-lib" "base" "scribble-lib" "db-doc" "at-exp-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Racket library for database data retrieval and database mocking.") (implies . ()) (modules . ((lib "datadef/lib/key-utils.rkt") (lib "datadef/dd.rkt") (lib "datadef/scribblings/datadef.scrbl") (lib "datadef/lib/utils.rkt") (lib "datadef/dtb.rkt") (lib "datadef/main.rkt") (lib "datadef/lib/json-utils.rkt") (lib "datadef/lib/test-utils.rkt"))) (name . "datadef") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zaiter.adam7@gmail.com . #t) (data-structures . #t) (database . #t) (json . #t) (ring:1 . #t) (test . #t) (testing . #t) (tests . #t) (web . #t) (web-framework . #t))) (source . "https://github.com/adzai/datadef.git#main") (tags . ("data-structures" "database" "json" "test" "testing" "tests" "web" "web-framework")) (versions . #hash((default . #hasheq((checksum . "127f2573a0eb117dc7c816566ea547a5568d0d34") (source . "https://github.com/adzai/datadef.git#main") (source_url . "https://github.com/adzai/datadef.git#main"))))))) ("datatype" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datatype.txt"))) (checksum . "5d865929dfcab856ebb85924ef16a74b13362662") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib")) (description . "Algebraic(-like) Data Types") (implies . ()) (modules . ((lib "datatype/private/type-case.rkt") (lib "datatype/private/example-type.rkt") (lib "datatype/main.rkt") (lib "datatype/private/example.rkt") (lib "datatype/private/parse-type.rkt") (lib "datatype/experimental/example.rkt") (lib "datatype/experimental/datatype.rkt") (lib "datatype/private/example-usage.rkt"))) (name . "datatype") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:sgtamk@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/pnwamk/datatype/tree/master#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5d865929dfcab856ebb85924ef16a74b13362662") (source . "git://github.com/pnwamk/datatype#master") (source_url . "http://github.com/pnwamk/datatype/tree/master#master"))))))) ("date" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "date" "doc/date@date/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/date.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/date.txt"))) (checksum . "57d7adbbc09dffc26337bff1b1a3597c872be8ea") (checksum-error . #f) (collection . "date") (conflicts . ()) (dependencies . ("srfi-lite-lib" "typed-racket-lib" "base" "srfi-lite-lib" "typed-racket-more" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Simple Date/Time support for formats commonly used on the Web in Typed Racket.\r\nNote there are better collection options unless you just need a RFC/ISO date for some HTTP API or similar.") (implies . ()) (modules . ((lib "date/scribblings/date.scrbl") (lib "date/main.rkt"))) (name . "date") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ISO-8601 . #t) (RFC-2822 . #t) (author:ray.racine@gmail.com . #t) (date . #t) (datetime . #t) (ring:1 . #t) (time . #t))) (source . "https://gitlab.com/RayRacine/date.git") (tags . ("date" "datetime" "ISO-8601" "RFC-2822" "time")) (versions . #hash((default . #hasheq((checksum . "57d7adbbc09dffc26337bff1b1a3597c872be8ea") (source . "https://gitlab.com/RayRacine/date.git") (source_url . "https://gitlab.com/RayRacine/date.git"))))))) ("dbg" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbg.txt"))) (checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (checksum-error . #f) (collection . "debugging") (conflicts . ()) (date-added . 1632546265) (dependencies . ("base" "profile-lib")) (description . "Remote debugging client and server implementation.") (implies . ()) (modules . ((lib "debugging/private/memory-cs.rkt") (lib "debugging/private/memory.rkt") (lib "debugging/private/common.rkt") (lib "debugging/private/server.rkt") (lib "debugging/private/memory-bc.rkt") (lib "debugging/private/client.rkt") (lib "debugging/server.rkt") (lib "debugging/client.rkt") (lib "debugging/private/error.rkt"))) (name . "dbg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (debugging . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg") (source_url . "https://github.com/Bogdanp/racket-dbg.git?path=dbg"))))))) ("dbg-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbg-manual" "doc/dbg-manual@dbg-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbg-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbg-doc.txt"))) (checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (checksum-error . #f) (collection . "debugging") (conflicts . ()) (date-added . 1653377651) (dependencies . ("base" "dbg" "racket-doc" "scribble-lib")) (description . "Documentation for the dbg and dbg-ui packages.") (implies . ()) (modules . ((lib "debugging/dbg-manual.scrbl"))) (name . "dbg-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (debugging . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-doc") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-doc") (source_url . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-doc"))))))) ("dbg-ui" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbg-ui.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbg-ui.txt"))) (checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (checksum-error . #f) (collection . "debugging") (conflicts . ()) (date-added . 1632546304) (dependencies . ("base" "canvas-list" "dbg" "gui-easy-lib" "gui-lib" "pict-lib" "plot-gui-lib" "plot-lib" "profile-lib" "rackunit-lib")) (description . "Remote debugging GUI client for the dbg package.") (implies . ()) (modules . ((lib "debugging/ui/common.rkt") (lib "debugging/ui/profile.rkt") (lib "debugging/ui/tree-map.rkt") (lib "debugging/ui/tree-list.rkt") (lib "debugging/ui/backreference.rkt") (lib "debugging/ui/reference-graph.rkt") (lib "debugging/ui/canvas-list.rkt") (lib "debugging/ui/dot.rkt") (lib "debugging/ui/resource.rkt") (lib "debugging/ui.rkt") (lib "debugging/ui/main.rkt"))) (name . "dbg-ui") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (debugging . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui") (tags . ("debugging" "gui")) (versions . #hash((default . #hasheq((checksum . "8de8bf6c3ddd5e77924bb6341322153d000d5c5f") (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui") (source_url . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui"))))))) ("dbm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbm" "doc/dbm@dbm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbm.txt") (test-failure-log . "server/built/test-fail/dbm.txt") (test-success-log . #f))) (checksum . "a5bf5a400457f49e3e8f5b2009f97e6c4494d1c6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "An interface to UNIX dbm files using a libdbm FFI") (implies . ()) (modules . ((lib "file/dbm/test.rkt") (lib "file/dbm.rkt") (lib "file/dbm/dbm.rkt") (lib "file/dbm/dbm-ffi.rkt") (lib "file/dbm/dbm.scrbl"))) (name . "dbm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/dbm/tree/master") (tags . ("db" "ffi")) (versions . #hash((default . #hasheq((checksum . "a5bf5a400457f49e3e8f5b2009f97e6c4494d1c6") (source . "github://github.com/jeapostrophe/dbm/master") (source_url . "http://github.com/jeapostrophe/dbm/tree/master"))))))) ("dbus" . #hasheq((author . "tonygarnockjones@gmail.com mordae@anilinux.org") (authors . ("tonygarnockjones@gmail.com" "mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbus" "doc/dbus@dbus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbus.txt"))) (checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("xexpr-path" "misc1" "base" "parser-tools-lib" "unstable-lib" "racket-doc" "scribble-lib")) (description . "Native D-Bus for Racket") (implies . ()) (modules . ((lib "dbus/main.rkt") (lib "dbus/private/util.rkt") (lib "dbus/private/signature.rkt") (lib "dbus/dbus.scrbl") (lib "dbus/private/ffi.rkt") (lib "dbus/private/common.rkt") (lib "dbus/examples/network-manager.rkt") (lib "dbus/interface.rkt") (lib "dbus/examples/hello.rkt") (lib "dbus/interface.scrbl") (lib "dbus/examples/notification.rkt") (lib "dbus/private/message.rkt") (lib "dbus/private/rpc.rkt"))) (name . "dbus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (author:tonygarnockjones@gmail.com . #t) (gnome . #t) (linux . #t) (ring:1 . #t) (rpc . #t))) (source . "http://github.com/tonyg/racket-dbus/tree/master") (tags . ("gnome" "linux" "rpc")) (versions . #hash((default . #hasheq((checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (source . "git://github.com/tonyg/racket-dbus") (source_url . "http://github.com/tonyg/racket-dbus/tree/master"))))))) ("ddict" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ddict" "doc/ddict@ddict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ddict.txt") (test-failure-log . "server/built/test-fail/ddict.txt") (test-success-log . #f))) (checksum . "a322d6a38c203d946d48d3ae5892e9ad4f11bdf2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Dictionaries") (implies . ()) (modules . ((lib "data/ddict/ddict.scrbl") (lib "tests/data/ddict.rkt") (lib "data/private/id-ddict.rkt") (lib "data/private/ddict.rkt") (lib "tests/data/ddict-perf.rkt") (lib "data/id-ddict.rkt") (lib "tests/data/id-ddict.rkt") (lib "data/ddict.rkt"))) (name . "ddict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/pnwamk/ddict.git/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "a322d6a38c203d946d48d3ae5892e9ad4f11bdf2") (source . "git://github.com/pnwamk/ddict.git") (source_url . "http://github.com/pnwamk/ddict.git/tree/master"))))))) ("debug" . #hasheq((author . "alexander@knauth.org mb@mbtype.com") (authors . ("alexander@knauth.org" "mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug" "doc/debug@debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/debug.txt"))) (checksum . "db0b1f41f5e338bfb01d1e2193bbb778e8fc4977") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "pretty-format" "rackunit-lib" "rackunit-typed" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for debugging, and a macro for inserting a debug-repl") (implies . ()) (modules . ((lib "debug/test/debug-repl-macros.rkt") (lib "debug/test/debug-repl.rkt") (lib "typed/debug/report/helpers.rkt") (lib "typed/debug/test/typed-racket.rkt") (lib "debug/lang/reader.rkt") (lib "debug/report/helpers.rkt") (lib "debug/test/test-util.rkt") (lib "debug/report.rkt") (lib "typed/debug/test/typed-with-reader.rkt") (lib "debug/lang/language-info.rkt") (lib "debug/scribblings/debug.scrbl") (lib "debug/private/make-variable-like-transformer.rkt") (lib "debug/reader.rkt") (lib "typed/debug/report.rkt") (lib "debug/lang/runtime-config.rkt") (lib "debug/no-output/lang/reader.rkt") (lib "debug/repl.rkt") (lib "debug/test/test.rkt"))) (name . "debug") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:mb@mbtype.com . #t) (debug . #t) (debugging . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/debug/tree/master") (tags . ("debug" "debugging" "lang-extension" "repl")) (versions . #hash((default . #hasheq((checksum . "db0b1f41f5e338bfb01d1e2193bbb778e8fc4977") (source . "git://github.com/AlexKnauth/debug") (source_url . "http://github.com/AlexKnauth/debug/tree/master"))))))) ("debug-scopes" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug-scopes" "doc/debug-scopes@debug-scopes/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug-scopes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/debug-scopes.txt"))) (checksum . "8d8f13976b634113f717ddbaf76e9de85203557c") (checksum-error . #f) (collection . "debug-scopes") (conflicts . ()) (date-added . 1614799376) (dependencies . ("base" "pretty-format" "rackunit-lib" "reprovide-lang" "scribble-lib" "racket-doc" "scribble-enhanced")) (description . "Some utilities which help debugging scope-related issues for unhygienic macros") (implies . ()) (modules . ((lib "debug-scopes/main.rkt") (lib "debug-scopes/test/named-scopes-test-def.rkt") (lib "debug-scopes/named-scopes/override.rkt") (lib "debug-scopes/named-scopes/dummy-lang.rkt") (lib "debug-scopes/scribblings/debug-scopes.scrbl") (lib "debug-scopes/named-scopes.rkt") (lib "debug-scopes/test/named-scopes-test-use.rkt") (lib "debug-scopes/superscripts.rkt") (lib "debug-scopes/named-scopes/exptime.rkt") (lib "debug-scopes/named-scopes-sli-parameter.rkt"))) (name . "debug-scopes") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (debug . #t) (debugging . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/debug-scopes.git#main") (tags . ("debug" "debugging" "scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "8d8f13976b634113f717ddbaf76e9de85203557c") (source . "https://github.com/jsmaniac/debug-scopes.git#main") (source_url . "https://github.com/jsmaniac/debug-scopes.git#main"))))))) ("decentralized-internet" . #hasheq((author . "andrew@etherstone.org") (authors . ("andrew@etherstone.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "decentralized-internet" "doc/decentralized-internet@decentralized-internet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/decentralized-internet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/decentralized-internet.txt"))) (checksum . "eddb5d86b52901fb612c27621f2f7ebb71136195") (checksum-error . #f) (collection . "decentralized-internet") (conflicts . ()) (date-added . 1586326102) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A package for building distributed computing projects") (implies . ()) (modules . ((lib "decentralized-internet/main.rkt") (lib "decentralized-internet/scribblings/decentralized-internet.scrbl"))) (name . "decentralized-internet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:andrew@etherstone.org . #t) (blockchain . #t) (computing . #t) (connectivity . #t) (decentralized . #t) (grid . #t) (grid-computing . #t) (p2p . #t) (ring:1 . #t))) (source . "https://github.com/Lonero-Team/Racket-Package.git") (tags . ("blockchain" "computing" "connectivity" "decentralized" "grid" "grid-computing" "p2p")) (versions . #hash((default . #hasheq((checksum . "eddb5d86b52901fb612c27621f2f7ebb71136195") (source . "https://github.com/Lonero-Team/Racket-Package.git") (source_url . "https://github.com/Lonero-Team/Racket-Package.git"))))))) ("defensive-to-contracts" . #hasheq((author . "peterzhong2023@u.northwestern.edu") (authors . ("peterzhong2023@u.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "defensive-to-contracts" "doc/defensive-to-contracts@defensive-to-contracts/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/defensive-to-contracts.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/defensive-to-contracts.txt"))) (checksum . "f64d8cb80a17fb981eb8269ef15f1fdb2f4d190b") (checksum-error . #f) (collection . "defensive-to-contracts") (conflicts . ()) (date-added . 1602836695) (dependencies . ("base" "plai" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "This package presents a tool that converts defensive programming \r\ninto equivalent contracts. Currently, the tool is still at its infancy \r\nand have not been tested on many code bases. The sample folder contains\r\nsome example files to get you started. So far I have exposed two functions\r\nthat allows you to input a path and either returns the raw result or load up\r\na GUI that allows you to change a file.") (implies . ()) (modules . ((lib "defensive-to-contracts/sample-defensive/realworld1.rkt") (lib "defensive-to-contracts/scribblings/defensive-to-contracts.scrbl") (lib "defensive-to-contracts/syntax-to-contract.rkt") (lib "defensive-to-contracts/textedit.rkt") (lib "defensive-to-contracts/sample-defensive/simple-dependent.rkt") (lib "defensive-to-contracts/sample-defensive/racketcon_.rkt") (lib "defensive-to-contracts/main.rkt") (lib "defensive-to-contracts/related-fact.rkt") (lib "defensive-to-contracts/simplify-fact.rkt") (lib "defensive-to-contracts/fact-to-contract.rkt") (lib "defensive-to-contracts/sample-defensive/unless-one-arg.rkt") (lib "defensive-to-contracts/definitions.rkt") (lib "defensive-to-contracts/structure-deletions.rkt") (lib "defensive-to-contracts/sample-defensive/realworld3.rkt") (lib "defensive-to-contracts/sample-defensive/pcond-onearg.rkt") (lib "defensive-to-contracts/sample-defensive/helloworld.rkt") (lib "defensive-to-contracts/sample-defensive/racketcon.rkt") (lib "defensive-to-contracts/pcond.rkt") (lib "defensive-to-contracts/complex-pred-to-facts.rkt") (lib "defensive-to-contracts/sample-defensive/simple-defensive-two-arg-with-begin.rkt") (lib "defensive-to-contracts/chspans.rkt") (lib "defensive-to-contracts/program-fact.rkt") (lib "defensive-to-contracts/sample-defensive/realworld2.rkt") (lib "defensive-to-contracts/sample-defensive/simple-defensive-two-arg.rkt"))) (name . "defensive-to-contracts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:peterzhong2023@u.northwestern.edu . #t) (contracts . #t) (conversion . #t) (defensive . #t) (ring:1 . #t))) (source . "https://github.com/jiujiu1123/defensive-to-contracts.git#main") (tags . ("contracts" "conversion" "defensive")) (versions . #hash((default . #hasheq((checksum . "f64d8cb80a17fb981eb8269ef15f1fdb2f4d190b") (source . "https://github.com/jiujiu1123/defensive-to-contracts.git#main") (source_url . "https://github.com/jiujiu1123/defensive-to-contracts.git#main"))))))) ("deferred" . #hasheq((author . "cjfuller@gmail.com") (authors . ("cjfuller@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deferred" "doc/deferred@deferred/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deferred.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deferred.txt"))) (checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (checksum-error . #f) (collection . "deferred") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A simple library for deferring asynchronous tasks until a specified time") (implies . ()) (modules . ((lib "deferred/main.rkt") (lib "deferred/main-test.rkt") (lib "deferred/deferred.scrbl"))) (name . "deferred") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:cjfuller@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/cjfuller/deferred/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (source . "git://github.com/cjfuller/deferred") (source_url . "http://github.com/cjfuller/deferred/tree/master"))))))) ("define-assets-from" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/define-assets-from.txt") (docs . (("main" "define-assets-from" "doc/define-assets-from@define-assets-from/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-assets-from.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-assets-from.txt"))) (checksum . "f41954f7d955fdabbd697976d73344a5aa733d31") (checksum-error . #f) (collection . "define-assets-from") (conflicts . ()) (date-added . 1568916490) (dependencies . ("base" "htdp-lib" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "makes it easy to provide 2htdp/image identifiers from a directory full of PNGs.  Just put files in directories, get provides out from your Racket modules. ") (implies . ()) (modules . ((lib "define-assets-from/main.rkt") (lib "define-assets-from/demo/assets.rkt") (lib "define-assets-from/scribblings/define-assets-from.scrbl") (lib "define-assets-from/demo2/assets.rkt") (lib "define-assets-from/demo/assets2.rkt"))) (name . "define-assets-from") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/define-assets-from.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f41954f7d955fdabbd697976d73344a5aa733d31") (source . "https://github.com/thoughtstem/define-assets-from.git") (source_url . "https://github.com/thoughtstem/define-assets-from.git"))))))) ("define-attributes" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-attributes" "doc/define-attributes@define-attributes/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-attributes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-attributes.txt"))) (checksum . "57bffa14f11a604a7bf34a7dbc16f56f5ebf638c") (checksum-error . #f) (collection . "define-attributes") (conflicts . ()) (date-added . 1644882505) (dependencies . ("base" "define-attributes-lib" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "This macro makes certain repetitive access patterns easier to write.") (implies . ("define-attributes-lib")) (modules . ((lib "define-attributes/test.rkt") (lib "define-attributes/scribblings/define-attributes.scrbl"))) (name . "define-attributes") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schlee.simon@gmail.com . #t) (define . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes#main") (tags . ("define" "utility")) (versions . #hash((default . #hasheq((checksum . "57bffa14f11a604a7bf34a7dbc16f56f5ebf638c") (source . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes#main") (source_url . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes#main"))))))) ("define-attributes-lib" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-attributes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-attributes-lib.txt"))) (checksum . "57bffa14f11a604a7bf34a7dbc16f56f5ebf638c") (checksum-error . #f) (collection . "define-attributes") (conflicts . ()) (date-added . 1644985144) (dependencies . ("base")) (description . "This macro makes certain repetitive access patterns easier to write.") (implies . ()) (modules . ((lib "define-attributes/main.rkt"))) (name . "define-attributes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schlee.simon@gmail.com . #t) (define . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes-lib#main") (tags . ("define" "utility")) (versions . #hash((default . #hasheq((checksum . "57bffa14f11a604a7bf34a7dbc16f56f5ebf638c") (source . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes-lib#main") (source_url . "https://github.com/SimonLSchlee/define-attributes.git?path=define-attributes-lib#main"))))))) ("define-match-spread-out" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-match-spread-out" "doc/define-match-spread-out@define-match-spread-out/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-match-spread-out.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-match-spread-out.txt"))) (checksum . "9cba18f354fc03a84e2c26d5ae6cdcdc36d4d960") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "defpat" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define that allows definitions to be spread across a file") (implies . ()) (modules . ((lib "define-match-spread-out/tests/test.rkt") (lib "define-match-spread-out/main.rkt") (lib "define-match-spread-out/scribblings/define-match-spread-out.scrbl") (lib "define-match-spread-out/tests/require-test.rkt"))) (name . "define-match-spread-out") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/define-match-spread-out/tree/master") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "9cba18f354fc03a84e2c26d5ae6cdcdc36d4d960") (source . "git://github.com/AlexKnauth/define-match-spread-out") (source_url . "http://github.com/AlexKnauth/define-match-spread-out/tree/master"))))))) ("define-sobj" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-sobj" "doc/define-sobj@define-sobj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-sobj.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-sobj.txt"))) (checksum . "ba833cfcff497acb49c78d51cf3477b8e5a84ffd") (checksum-error . #f) (collection . "define-sobj") (conflicts . ()) (date-added . 1653080452) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An anaphoric macro that binds sobj to call syntax object") (implies . ()) (modules . ((lib "define-sobj/scribblings/define-sobj.scrbl") (lib "define-sobj/main.rkt"))) (name . "define-sobj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/define-sobj.git") (tags . ("macro")) (versions . #hash((default . #hasheq((checksum . "ba833cfcff497acb49c78d51cf3477b8e5a84ffd") (source . "https://github.com/sorawee/define-sobj.git") (source_url . "https://github.com/sorawee/define-sobj.git"))))))) ("define-who" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-who" "doc/define-who@define-who/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-who.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-who.txt"))) (checksum . "85f342a1bb238139675a94bcda646ea38d54ceaf") (checksum-error . #f) (collection . "define-who") (conflicts . ()) (date-added . 1595178382) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An anaphoric macro that binds who to function name") (implies . ()) (modules . ((lib "define-who/main.rkt") (lib "define-who/scribblings/define-who.scrbl"))) (name . "define-who") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/define-who.git") (tags . ("macro")) (versions . #hash((default . #hasheq((checksum . "85f342a1bb238139675a94bcda646ea38d54ceaf") (source . "https://github.com/sorawee/define-who.git") (source_url . "https://github.com/sorawee/define-who.git"))))))) ("define-with-spec" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-with-spec" "doc/define-with-spec@define-with-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-with-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-with-spec.txt"))) (checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (checksum-error . #f) (collection . "define-with-spec") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Allows for function definitions with simple specifications that are enforced by checks at each call site. Functionality pales in comparison to racket/contract, but error messages w/ source info are provided for same-module violations of specifications.") (implies . ()) (modules . ((lib "define-with-spec/tests/tests.rkt") (lib "define-with-spec/main.rkt") (lib "define-with-spec/scribblings/define-with-spec.scrbl"))) (name . "define-with-spec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:pnwamk@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/pnwamk/define-with-spec.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (source . "https://github.com/pnwamk/define-with-spec.git") (source_url . "https://github.com/pnwamk/define-with-spec.git"))))))) ("define2" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define2" "doc/define2@define2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define2.txt"))) (checksum . "c9760f29b27e45c6fa9edee37d6275214745e8f8") (checksum-error . #f) (collection . "define2") (conflicts . ()) (date-added . 1609683120) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides new but backward-compatible definitions of `lambda` and `define` that simplify keyword arguments and designing wrapper functions.") (implies . ()) (modules . ((lib "define2/define-wrapper.rkt") (lib "define2/define.rkt") (lib "define2/scribblings/define2.scrbl") (lib "define2/main.rkt") (lib "define2/formals.rkt") (lib "define2/tests/define.rkt"))) (name . "define2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (define . #t) (keywords . #t) (lambda . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/Metaxal/define2.git") (tags . ("define" "keywords" "lambda" "syntax")) (versions . #hash((default . #hasheq((checksum . "c9760f29b27e45c6fa9edee37d6275214745e8f8") (source . "https://github.com/Metaxal/define2.git") (source_url . "https://github.com/Metaxal/define2.git"))))))) ("defpat" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "defpat-main" "doc/defpat-main@defpat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/defpat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/defpat.txt"))) (checksum . "40db819f1a3eaa230561c0b40b254a4de52f2b1e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622133475) (dependencies . ("base" "generic-bind" "sweet-exp" "reprovide-lang" "unstable-lib" "unstable-list-lib" "rackunit" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define for defining functions with match-patterns as arguments") (implies . ()) (modules . ((lib "defpat/opt-case-lambda.rkt") (lib "defpat/docs/match-case-lambda.scrbl") (lib "defpat/main.rkt") (lib "defpat/docs/opt-case-lambda.scrbl") (lib "defpat/docs/defpat-main.scrbl") (lib "defpat/docs/opt-match-case-lambda.scrbl") (lib "defpat/docs/defpat.scrbl") (lib "defpat/opt-match-case-lambda.rkt") (lib "defpat/defpat.rkt") (lib "defpat/match-case-lambda.rkt"))) (name . "defpat") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/defpat.git#master") (tags . ("match" "sugar")) (versions . #hash((default . #hasheq((checksum . "40db819f1a3eaa230561c0b40b254a4de52f2b1e") (source . "https://github.com/AlexKnauth/defpat.git#master") (source_url . "https://github.com/AlexKnauth/defpat.git#master"))))))) ("delay-pure" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delay-pure" "doc/delay-pure@delay-pure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delay-pure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delay-pure.txt"))) (checksum . "919a52ef1897db51eb2c0c1307d7149db40ccfd6") (checksum-error . #f) (collection . "delay-pure") (conflicts . ()) (date-added . 1614475957) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "phc-toolkit" "version-case" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Non-cached promises for Typed/Racket, like delay/name. Should be sound for occurrence typing (unlike delay/name) because only pure functions are allowed.") (implies . ()) (modules . ((lib "delay-pure/private/pure-safe.rkt") (lib "delay-pure/test/test-unsafe.rkt") (lib "delay-pure/test/test-external-mutation.rkt") (lib "delay-pure/test/test-pure-function.rkt") (lib "delay-pure/test/test-immutable-struct-constructor.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod2.rkt") (lib "delay-pure/private/pure-function.rkt") (lib "delay-pure/private/fully-expanded-grammar-no-set.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod.rkt") (lib "delay-pure/scribblings/delay-pure.scrbl") (lib "delay-pure/test/test-pure-safe.rkt") (lib "delay-pure/main.rkt") (lib "delay-pure/private/immutable-struct-constructor.rkt") (lib "delay-pure/test/test-pure-lifted.rkt") (lib "delay-pure/private/pure-exception.rkt") (lib "delay-pure/private/pure-unsafe.rkt"))) (name . "delay-pure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/delay-pure.git#main") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "919a52ef1897db51eb2c0c1307d7149db40ccfd6") (source . "https://github.com/jsmaniac/delay-pure.git#main") (source_url . "https://github.com/jsmaniac/delay-pure.git#main"))))))) ("delimit-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delimit-app" "doc/delimit-app@delimit-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delimit-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delimit-app.txt"))) (checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (checksum-error . #f) (collection . "delimit-app") (conflicts . ()) (dependencies . ("base" "fancy-app" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "An #%app macro that changes meaning based on paren shape") (implies . ()) (modules . ((lib "delimit-app/main.scrbl") (lib "delimit-app/fancy-app.rkt") (lib "delimit-app/main.rkt"))) (name . "delimit-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (sugar . #t))) (source . "http://github.com/jackfirth/delimit-app/tree/master") (tags . ("app-syntax" "sugar")) (versions . #hash((default . #hasheq((checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (source . "git://github.com/jackfirth/delimit-app") (source_url . "http://github.com/jackfirth/delimit-app/tree/master"))))))) ("denxi" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "denxi-guide" "doc/denxi-guide@denxi/index.html") ("main" "denxi-index" "doc/denxi-index@denxi/index.html") ("main" "denxi-white-paper" "doc/denxi-white-paper@denxi/index.html") ("main" "denxi-journal" "doc/denxi-journal@denxi/index.html") ("main" "denxi-reference" "doc/denxi-reference@denxi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/denxi.txt") (test-failure-log . "server/built/test-fail/denxi.txt") (test-success-log . #f))) (checksum . "a9006d4b4a1dc3d2b6a41ce151a435c614522924") (checksum-error . #f) (collection . "denxi") (conflicts . ()) (date-added . 1607553038) (dependencies . ("base" "compatibility-lib" "db-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "A programming model for software distribution. Use to produce package managers, CI/CD systems, or operating systems.") (implies . ()) (modules . ((lib "denxi/output.rkt") (lib "denxi/notary.rkt") (lib "denxi/examples/determinism/launcher.rkt") (lib "denxi/integrity/ffi.rkt") (lib "denxi/security.rkt") (lib "denxi/docs/reference/modules/integrity/base.scrbl") (lib "denxi/docs/reference/background.scrbl") (lib "denxi/cli.rkt") (lib "denxi/docs/white-paper/denxi-white-paper.scrbl") (lib "denxi/docs/reference/modules/message.scrbl") (lib "denxi/examples/locks/launch.rkt") (lib "denxi/examples/input-overriding/launcher.rkt") (lib "denxi/docs/guide/setup.scrbl") (lib "denxi/examples/package-dependencies/program.rkt") (lib "denxi/docs/reference/modules/signature/base.scrbl") (lib "denxi/docs/reference/modules/version.scrbl") (lib "denxi/docs/reference/modules/subprogram.scrbl") (lib "denxi/examples/determinism/defn.rkt") (lib "denxi/examples/abstract-outputs/install-first.rkt") (lib "denxi/launcher.rkt") (lib "denxi/docs/reference/modules/setting.scrbl") (lib "denxi/examples/output-conflicts/lub.rkt") (lib "denxi/examples/output-conflicts/dub.rkt") (lib "denxi/printer.rkt") (lib "denxi/docs/reference/maintenance.scrbl") (lib "denxi/docs/reference/modules/pkgdef.scrbl") (lib "denxi/dig.rkt") (lib "denxi/docs/reference/modules/security.scrbl") (lib "denxi/examples/workspaces/launcher.rkt") (lib "denxi/examples/maximum-trust/dangerous.rkt") (lib "denxi/examples/signature-checking/sign.rkt") (lib "denxi/docs/reference/modules/crypto.scrbl") (lib "denxi/examples/output-conflicts/launcher.rkt") (lib "denxi/dig/http.rkt") (lib "denxi/examples/generated-racket-bindings/defn.rkt") (lib "denxi/docs/reference/modules/launcher.scrbl") (lib "denxi/docs/reference/modules/package.scrbl") (lib "denxi/docs/reference/denxi-reference.scrbl") (lib "denxi/examples/workspaces/definition.rkt") (lib "denxi/examples/abstract-inputs/defn.rkt") (lib "denxi/archive.rkt") (lib "denxi/docs/reference/modules/notary.scrbl") (lib "denxi/examples/generated-racket-bindings/sources/symlinked.rkt") (lib "denxi/package.rkt") (lib "denxi/docs/guide/introduction.scrbl") (lib "denxi/docs/reference/modules/signature/ffi.scrbl") (lib "denxi/docs/reference/modules/output.scrbl") (lib "denxi/docs/reference/maintenance/affirmations.scrbl") (lib "denxi/signature/snake-oil.rkt") (lib "denxi/examples/racket-modules/defn.rkt") (lib "denxi/signature/ffi.rkt") (lib "denxi/artifact.rkt") (lib "denxi/examples/integrity-checking/defn.rkt") (lib "denxi/examples/package-dependencies/other.rkt") (lib "denxi/examples/allow-racket-versions/launcher.rkt") (lib "denxi/examples/from-guide/my-denxi.rkt") (lib "denxi/docs/guide/denxi-guide.scrbl") (lib "denxi/dig/memory.rkt") (lib "denxi/docs/reference/modules/dig/filesystem.scrbl") (lib "denxi/docs/guide/creating-packages.scrbl") (lib "denxi/examples/package-dependencies/launch.rkt") (lib "denxi/examples/generated-racket-bindings/sources/v1.rkt") (lib "denxi/dig/filesystem.rkt") (lib "denxi/pkgdef/static.rkt") (lib "denxi/docs/reference/modules/port.scrbl") (lib "denxi/docs/reference/modules/source.scrbl") (lib "denxi/examples/racket-modules/program.rkt") (lib "denxi/docs/reference/modules/query.scrbl") (lib "denxi/main.rkt") (lib "denxi/examples/self-hosting/launch.rkt") (lib "denxi/docs/reference/modules/format.scrbl") (lib "denxi/examples/from-guide/definition.rkt") (lib "denxi/examples/abstract-outputs/launcher.rkt") (lib "denxi/examples/input-checking/launch.rkt") (lib "denxi/file.rkt") (lib "denxi/docs/reference/modules/pkgdef/static.scrbl") (lib "denxi/docs/reference/modules/main.scrbl") (lib "denxi/docs/reference/modules/monad.scrbl") (lib "denxi/state.rkt") (lib "denxi/examples/signature-checking/launcher.rkt") (lib "denxi/integrity.rkt") (lib "denxi/docs/guide/outroduction.scrbl") (lib "denxi/source.rkt") (lib "denxi/docs/reference/modules/dig.scrbl") (lib "denxi/setting.rkt") (lib "denxi/docs/reference/modules/file.scrbl") (lib "denxi/docs/reference/modules/codec.scrbl") (lib "denxi/racket-module.rkt") (lib "denxi/docs/reference/modules/printer.scrbl") (lib "denxi/examples/workspaces/launcher2.rkt") (lib "denxi/docs/reference/modules/signature.scrbl") (lib "denxi/crypto.rkt") (lib "denxi/docs/reference/modules/archive.scrbl") (lib "denxi/examples/self-hosting/defn.rkt") (lib "denxi/examples/racket-modules/launch.rkt") (lib "denxi/docs/reference/modules/cli-flag.scrbl") (lib "denxi/docs/reference/maintenance/basics.scrbl") (lib "denxi/transaction.rkt") (lib "denxi/docs/reference/modules/state.scrbl") (lib "denxi/examples/abstract-outputs/install-second.rkt") (lib "denxi/examples/input-output-selection/launch.rkt") (lib "denxi/examples/package-dependencies/defn.rkt") (lib "denxi/examples/input-overriding/defn.rkt") (lib "denxi/docs/reference/modules/integrity.scrbl") (lib "denxi/examples/generated-racket-bindings/sources/v2.rkt") (lib "denxi/examples/versioning/quiet0.rkt") (lib "denxi/codec.rkt") (lib "denxi/docs/journal/10-jan-2021.scrbl") (lib "denxi/docs/reference/modules/cli.scrbl") (lib "denxi/examples/input-checking/defn.rkt") (lib "denxi/racket-version.rkt") (lib "denxi/monad.rkt") (lib "denxi/examples/locks/defn.rkt") (lib "denxi/cmdline.rkt") (lib "denxi/examples/versioning/loud0.rkt") (lib "denxi/examples/input-proliferation/defn.rkt") (lib "denxi/examples/cryptography-backends/openssl-subprocess-backend.rkt") (lib "denxi/system.rkt") (lib "denxi/l10n/en-us.rkt") (lib "denxi/port.rkt") (lib "denxi/l10n.rkt") (lib "denxi/string.rkt") (lib "denxi/subprogram.rkt") (lib "denxi/query.rkt") (lib "denxi/input.rkt") (lib "denxi/docs/reference/modules/system.scrbl") (lib "denxi/cli-flag.rkt") (lib "denxi/examples/versioning/launcher.rkt") (lib "denxi/rfc4648.rkt") (lib "denxi/examples/generated-racket-bindings/program.rkt") (lib "denxi/examples/determinism/server.rkt") (lib "denxi/examples/generated-racket-bindings/launch.rkt") (lib "denxi/examples/abstract-inputs/launcher.rkt") (lib "denxi/docs/index/denxi-index.scrbl") (lib "denxi/pkgdef.rkt") (lib "denxi/examples/integrity-checking/launcher.rkt") (lib "denxi/docs/reference/modules/url.scrbl") (lib "denxi/docs/guide/launchers.scrbl") (lib "denxi/docs/reference/modules/dig/http.scrbl") (lib "denxi/url.rkt") (lib "denxi/examples/signature-checking/defn.rkt") (lib "denxi/docs/reference/modules/cmdline.scrbl") (lib "denxi/message.rkt") (lib "denxi/docs/reference/modules/l10n.scrbl") (lib "denxi/docs/reference/modules/integrity/ffi.scrbl") (lib "denxi/examples/allow-racket-versions/defn.rkt") (lib "denxi/docs/reference/modules/racket-module.scrbl") (lib "denxi/format.rkt") (lib "denxi/docs/reference/modules/string.scrbl") (lib "denxi/docs/reference/modules/dig/memory.scrbl") (lib "denxi/path.rkt") (lib "denxi/examples/input-proliferation/launcher.rkt") (lib "denxi/docs/shared.rkt") (lib "denxi/signature/base.rkt") (lib "denxi/signature.rkt") (lib "denxi/docs/reference/modules/signature/snake-oil.scrbl") (lib "denxi/docs/reference/modules/input.scrbl") (lib "denxi/integrity/base.rkt") (lib "denxi/examples/input-output-selection/defn.rkt") (lib "denxi/version.rkt") (lib "denxi/docs/reference/modules/artifact.scrbl") (lib "denxi/docs/guide/project.scrbl") (lib "denxi/docs/journal/denxi-journal.scrbl") (lib "denxi/examples/determinism/lock.rkt") (lib "denxi/examples/versioning/loud1.rkt") (lib "denxi/l10n/shared.rkt"))) (name . "denxi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (dependency-management . #t) (guix . #t) (package . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/denxi.git#default") (tags . ("dependency-management" "guix" "package")) (versions . #hash((default . #hasheq((checksum . "a9006d4b4a1dc3d2b6a41ce151a435c614522924") (source . "https://github.com/zyrolasting/denxi.git#default") (source_url . "https://github.com/zyrolasting/denxi.git#default"))))))) ("derp-3" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derp-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/derp-3.txt"))) (checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "srfi-lib")) (description . "The Derp 3 parser, based on \"Parsing with Derivatives,\" code written by Michael D. Adams (www.michaeldadams.org)") (implies . ()) (modules . ((lib "derp-3/derp.rkt") (lib "derp-3/pyparse.rkt") (lib "derp-3/util/define-case.rkt") (lib "derp-3/util/fast-for.rkt") (lib "derp-3/util/benchmark.rkt") (lib "derp-3/util/unsafe-struct.rkt"))) (name . "derp-3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://bitbucket.org/jbclements/derp-3.git") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (source . "https://bitbucket.org/jbclements/derp-3.git") (source_url . "https://bitbucket.org/jbclements/derp-3.git"))))))) ("derpy" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "derpy" "doc/derpy@derpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derpy.txt") (test-failure-log . "server/built/test-fail/derpy.txt") (test-success-log . #f))) (checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "zmq" "tesira" "libserialport" "esc-vp21" "pex" "cuecore" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Presentation Room Control") (implies . ()) (modules . ((lib "derpy/tesira-driver.scrbl") (lib "derpy/atlona-driver.scrbl") (lib "derpy/bin/tesira-driver.rkt") (lib "derpy/bin/lighting-driver.rkt") (lib "derpy/bin/atlona-ir-driver.rkt") (lib "derpy/bin/epson-driver.rkt") (lib "derpy/util/zmq.rkt") (lib "derpy/util/reply.rkt") (lib "derpy/pex-driver.scrbl") (lib "derpy/bin/atlona-driver.rkt") (lib "derpy/util/error.rkt") (lib "derpy/derpy.scrbl") (lib "derpy/epson-driver.scrbl") (lib "derpy/bin/pex-driver.rkt"))) (name . "derpy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-derpy/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (source . "git://github.com/mordae/racket-derpy") (source_url . "http://github.com/mordae/racket-derpy/tree/master"))))))) ("describe" . #hasheq((author . "doug@cognidrome.org mb@mbtype.com") (authors . ("doug@cognidrome.org" "mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "describe" "doc/describe@describe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/describe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/describe.txt"))) (checksum . "6489f1b499cbfcda74ced18555c5c2ca255921e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661246) (dependencies . ("base" "compatibility-lib" "scribble-lib" "racket-doc")) (description . "Doug Williams's 'describe' package from PLaneT") (implies . ()) (modules . ((lib "describe/scribblings/describe.scrbl") (lib "describe/describe-test.rkt") (lib "describe/float-test-single.rkt") (lib "describe/main.rkt") (lib "describe/float-test-double.rkt"))) (name . "describe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:doug@cognidrome.org . #t) (author:mb@mbtype.com . #t) (information . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/describe.git") (tags . ("information")) (versions . #hash((default . #hasheq((checksum . "6489f1b499cbfcda74ced18555c5c2ca255921e5") (source . "https://git.matthewbutterick.com/mbutterick/describe.git") (source_url . "https://git.matthewbutterick.com/mbutterick/describe.git"))))))) ("design-by-numbers" . #hasheq((author . "jedgingt@cs.du.edu chrisg@cs.du.edu") (authors . ("jedgingt@cs.du.edu" "chrisg@cs.du.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "dbn-manual"))) (failure-log . "server/built/fail/design-by-numbers.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "dc6e30cce44918090094f9c876746f98faea0cd0") (checksum-error . #f) (collection . "dbn") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "parser-tools-lib" "gui-lib" "syntax-color-lib" "wxme-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An implementation of John Maeda's Design by Numbers language in Racket as a #lang. ") (implies . ()) (modules . ((lib "dbn/dbnc/lexer.rkt") (lib "dbn/dbnc/indent-utils.rkt") (lib "dbn/dbnc/colorer.rkt") (lib "dbn/dbn-eval.rkt") (lib "dbn/configure-runtime.rkt") (lib "dbn/dbnc/indenter.rkt") (lib "dbn/scribblings/dbn-manual.scrbl") (lib "dbn/dbnc/parser.rkt") (lib "dbn/dbnc/annotations.rkt") (lib "dbn/dbnc/env.rkt") (lib "dbn/dbnc/ast.rkt") (lib "dbn/dbnc/errors.rkt") (lib "dbn/lang-info.rkt") (lib "dbn/dbnc/papersim.rkt") (lib "dbn/main.rkt") (lib "dbn/dbnc/ast-nodes.rkt") (lib "dbn/lang/dbn-reader.rkt") (lib "dbn/lang/dbn-expander.rkt"))) (name . "design-by-numbers") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (art . #t) (author:chrisg@cs.du.edu . #t) (author:jedgingt@cs.du.edu . #t) (design . #t) (graphics . #t) (pictures . #t) (ring:1 . #t))) (source . "https://github.com/chrisgd/design-by-numbers.git?path=dbn") (tags . ("art" "design" "graphics" "pictures")) (versions . #hash((default . #hasheq((checksum . "dc6e30cce44918090094f9c876746f98faea0cd0") (source . "https://github.com/chrisgd/design-by-numbers.git?path=dbn") (source_url . "https://github.com/chrisgd/design-by-numbers.git?path=dbn"))))))) ("destruct" . #hasheq((author . "michaelburge@pobox.com") (authors . ("michaelburge@pobox.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "destruct" "doc/destruct@destruct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/destruct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/destruct.txt"))) (checksum . "5ecd7cbb6848b38f68e5152ac09164b6eeb3e6d8") (checksum-error . #f) (collection . "destruct") (conflicts . ()) (date-added . 1651473955) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Macro that introduces local variables for every field in a struct.") (implies . ()) (modules . ((lib "destruct/main.rkt") (lib "destruct/destruct.scrbl"))) (name . "destruct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:michaelburge@pobox.com . #t) (ring:1 . #t))) (source . "git+https://github.com/MichaelBurge/destruct") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5ecd7cbb6848b38f68e5152ac09164b6eeb3e6d8") (source . "git+https://github.com/MichaelBurge/destruct") (source_url . "git+https://github.com/MichaelBurge/destruct"))))))) ("deta" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta.txt"))) (checksum . "625f41caa30722966c76cb48921a6197645f46cf") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563095334) (dependencies . ("deta-doc" "deta-lib")) (description . "A functional database mapper. (docs and implementation)") (implies . ("deta-doc" "deta-lib")) (modules . ()) (name . "deta") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "625f41caa30722966c76cb48921a6197645f46cf") (source . "https://github.com/Bogdanp/deta.git?path=deta") (source_url . "https://github.com/Bogdanp/deta.git?path=deta"))))))) ("deta-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deta" "doc/deta@deta-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta-doc.txt"))) (checksum . "625f41caa30722966c76cb48921a6197645f46cf") (checksum-error . #f) (collection . "deta") (conflicts . ()) (date-added . 1563095278) (dependencies . ("base" "db-doc" "db-lib" "deta-lib" "gregor-doc" "gregor-lib" "racket-doc" "sandbox-lib" "scribble-lib" "threading-doc" "threading-lib")) (description . "A functional database mapper. (docs only)") (implies . ()) (modules . ((lib "deta/deta.scrbl"))) (name . "deta-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta-doc") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "625f41caa30722966c76cb48921a6197645f46cf") (source . "https://github.com/Bogdanp/deta.git?path=deta-doc") (source_url . "https://github.com/Bogdanp/deta.git?path=deta-doc"))))))) ("deta-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta-lib.txt"))) (checksum . "625f41caa30722966c76cb48921a6197645f46cf") (checksum-error . #f) (collection . "deta") (conflicts . ()) (date-added . 1563031996) (dependencies . ("base" "db-lib" "gregor-lib" "at-exp-lib")) (description . "A functional database mapper. (implementation only)") (implies . ()) (modules . ((lib "deta/type.rkt") (lib "deta/private/dialect/sqlite3.rkt") (lib "deta/private/type.rkt") (lib "deta/main.rkt") (lib "deta/schema.rkt") (lib "deta/private/schema.rkt") (lib "deta/private/dialect/operator.rkt") (lib "deta/private/query.rkt") (lib "deta/private/field.rkt") (lib "deta/private/connection.rkt") (lib "deta/private/dialect/postgresql.rkt") (lib "deta/reflect.rkt") (lib "deta/query.rkt") (lib "deta/private/meta.rkt") (lib "deta/private/ast.rkt") (lib "deta/private/entity.rkt") (lib "deta/private/dialect/standard.rkt") (lib "deta/private/dialect/dialect.rkt"))) (name . "deta-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta-lib") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "625f41caa30722966c76cb48921a6197645f46cf") (source . "https://github.com/Bogdanp/deta.git?path=deta-lib") (source_url . "https://github.com/Bogdanp/deta.git?path=deta-lib"))))))) ("detail" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "detail" "doc/detail@detail/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/detail.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/detail.txt"))) (checksum . "5d4d2b765bfdfb0335c1a13a897a8bb3e65d85f9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1585116755) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "draw-lib")) (description . "detail used to reveal the details of the function") (implies . ()) (modules . ((lib "detail/effect/test-basic.rkt") (lib "detail/effect/test-width.rkt") (lib "detail/effect/test-bignormalsmall.rkt") (lib "detail/effect/test-simple-list.rkt") (lib "detail/example/tiger.rkt") (lib "detail/effect/test-div.rkt") (lib "detail/effect/test-page-split.rkt") (lib "detail/src/report/console-txt.rkt") (lib "detail/effect/test-list.rkt") (lib "detail/effect/test-h2.rkt") (lib "detail/src/define.rkt") (lib "detail/main.rkt") (lib "detail/effect/test-h3.rkt") (lib "detail/effect/test-img.rkt") (lib "detail/scribble/detail.scrbl") (lib "detail/src/lib.rkt") (lib "detail/src/detail.rkt") (lib "detail/src/report/pdf.rkt") (lib "detail/effect/test-empty.rkt") (lib "detail/effect/test-small-font.rkt") (lib "detail/effect/test-big-font.rkt") (lib "detail/test/detail-test.rkt") (lib "detail/effect/test-h1.rkt") (lib "detail/effect/test-normal-font.rkt") (lib "detail/effect/test-h1h2h3.rkt") (lib "detail/test/lib-test.rkt") (lib "detail/src/report/raw.rkt") (lib "detail/src/report/report.rkt") (lib "detail/effect/test-lines.rkt"))) (name . "detail") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (debug . #t) (log . #t) (report . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-detail.git") (tags . ("debug" "log" "report")) (versions . #hash((default . #hasheq((checksum . "5d4d2b765bfdfb0335c1a13a897a8bb3e65d85f9") (source . "https://github.com/simmone/racket-detail.git") (source_url . "https://github.com/simmone/racket-detail.git"))))))) ("dexter-quickscripts" . #hasheq((author . "dexterlagan@gmail.com") (authors . ("dexterlagan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dexter-quickscripts" "doc/dexter-quickscripts@dexter-quickscripts/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dexter-quickscripts.txt") (test-failure-log . "server/built/test-fail/dexter-quickscripts.txt") (test-success-log . #f))) (checksum . "506b38fd98e47f5254c24c93b49c2a9a4ede9c4c") (checksum-error . #f) (collection . "dexter-quickscripts") (conflicts . ()) (date-added . 1643295565) (dependencies . ("gui-lib" "quickscript" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A collection of scripts for Racket's QuickScript") (implies . ()) (modules . ((lib "dexter-quickscripts/scribblings/dexter-quickscripts.scrbl") (lib "dexter-quickscripts/scripts/generate-skeleton.rkt") (lib "dexter-quickscripts/scripts/compile-to-standalone.rkt") (lib "dexter-quickscripts/scripts/escape-double-quotes.rkt") (lib "dexter-quickscripts/scripts/generate-provide.rkt"))) (name . "dexter-quickscripts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dexterlagan@gmail.com . #t) (quickscript . #t) (ring:1 . #t))) (source . "https://github.com/DexterLagan/dexter-quickscripts.git") (tags . ("quickscript")) (versions . #hash((default . #hasheq((checksum . "506b38fd98e47f5254c24c93b49c2a9a4ede9c4c") (source . "https://github.com/DexterLagan/dexter-quickscripts.git") (source_url . "https://github.com/DexterLagan/dexter-quickscripts.git"))))))) ("dherman-struct" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dherman-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dherman-struct.txt"))) (checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scheme-lib" "rackunit-lib" "srfi-lite-lib")) (description . "A port of David Herman's struct.plt planet package") (implies . ()) (modules . ((lib "dherman-struct/datatype.rkt") (lib "dherman-struct/private/tests/datatype.rkt") (lib "dherman-struct/private/datatype-registry.rkt") (lib "dherman-struct/private/tests/tests.rkt") (lib "dherman-struct/hierarchy.rkt") (lib "dherman-struct/struct.rkt") (lib "dherman-struct/private/datatype-registry-data.rkt") (lib "dherman-struct/private/struct-info-compat.rkt") (lib "dherman-struct/private/tests/class.rkt") (lib "dherman-struct/private/tests/hierarchy.rkt") (lib "dherman-struct/private/tests/struct.rkt") (lib "dherman-struct/class.rkt"))) (name . "dherman-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/dherman-struct/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (source . "git://github.com/jbclements/dherman-struct") (source_url . "http://github.com/jbclements/dherman-struct/tree/master"))))))) ("diagrama" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763186) (dependencies . ("base" "diagrama-lib" "diagrama-doc")) (description . "A diagram drawing library, implementation") (implies . ()) (modules . ()) (name . "diagrama") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama") (source_url . "https://github.com/florence/diagrama.git?path=diagrama"))))))) ("diagrama-doc" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "diagrama" "doc/diagrama@diagrama-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama-doc.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763090) (dependencies . ("base" "diagrama-lib" "pict-lib" "draw-doc" "draw-lib" "pict-doc" "racket-doc" "scribble-lib")) (description . "A diagram drawing library, documentation") (implies . ()) (modules . ((lib "diagrama/scribblings/base.rkt") (lib "diagrama/scribblings/reference.scrbl") (lib "diagrama/scribblings/diagrama.scrbl"))) (name . "diagrama-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama-doc") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama-doc") (source_url . "https://github.com/florence/diagrama.git?path=diagrama-doc"))))))) ("diagrama-lib" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama-lib.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763054) (dependencies . ("draw-lib" "base" "pict-lib")) (description . "A diagram drawing library, implementation") (implies . ()) (modules . ((lib "diagrama/private/shared.rkt") (lib "diagrama/circuit.rkt") (lib "diagrama/main.rkt"))) (name . "diagrama-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama-lib") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama-lib") (source_url . "https://github.com/florence/diagrama.git?path=diagrama-lib"))))))) ("diagrams" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrams.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrams.txt"))) (checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Draw technical diagrams") (implies . ()) (modules . ()) (name . "diagrams") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dedbox@gmail.com . #t) (drawing . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-diagrams.git") (tags . ("drawing" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (source . "https://github.com/dedbox/racket-diagrams.git") (source_url . "https://github.com/dedbox/racket-diagrams.git"))))))) ("dice-parser" . #hasheq((author . "car.margiotta@icloud.com") (authors . ("car.margiotta@icloud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dice-parser" "doc/dice-parser@dice-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dice-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dice-parser.txt"))) (checksum . "99f06659f3f7659dc577df4fef1d2b6f6eb12baa") (checksum-error . #f) (collection . "dice-parser") (conflicts . ()) (date-added . 1587464672) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A parser for dice expressions like \"1d6-1d4+5\".") (implies . ()) (modules . ((lib "dice-parser/docs/dice-parser.scrbl") (lib "dice-parser/main.rkt"))) (name . "dice-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:car.margiotta@icloud.com . #t) (dice . #t) (game . #t) (random . #t) (ring:1 . #t) (rpg . #t))) (source . "https://github.com/cmargiotta/dice-parser.git#master") (tags . ("dice" "game" "random" "rpg")) (versions . #hash((default . #hasheq((checksum . "99f06659f3f7659dc577df4fef1d2b6f6eb12baa") (source . "https://github.com/cmargiotta/dice-parser.git#master") (source_url . "https://github.com/cmargiotta/dice-parser.git#master"))))))) ("diff-merge" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diff-merge.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diff-merge.txt"))) (checksum . "13a367d6f254ac184f017b37f5e204ac6c95dabe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "profile-lib")) (description . "\"Myers-Ukkonen\" diff and diff3-based merge for sequences") (implies . ()) (modules . ((lib "diff-merge/sequence.rkt") (lib "diff-merge/main.rkt") (lib "diff-merge/diff.rkt") (lib "diff-merge/merge.rkt"))) (name . "diff-merge") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (diff . #t) (merge . #t) (ring:1 . #t) (sequence . #t) (text . #t))) (source . "https://github.com/tonyg/racket-diff-merge.git") (tags . ("diff" "merge" "sequence" "text")) (versions . #hash((default . #hasheq((checksum . "13a367d6f254ac184f017b37f5e204ac6c95dabe") (source . "https://github.com/tonyg/racket-diff-merge.git") (source_url . "https://github.com/tonyg/racket-diff-merge.git"))))))) ("digimon" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "digimon"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/digimon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/digimon.txt"))) (checksum . "e60908a10af138f4d5c681e4005d0c47c94175ff") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "gui-lib" "typed-racket-lib" "typed-racket-more" "racket-index" "sandbox-lib" "scribble-lib" "math-lib" "scribble-lib" "racket-doc")) (description . "The (typed) core to construct the digital world") (implies . ()) (modules . ((lib "digimon/tamer.rkt") (lib "digimon/digitama/typeset/renderer.rkt") (lib "digimon/digivice/wisemon/phony/all.rkt") (lib "digimon/ffi.rkt") (lib "digimon/digitama/gui/timer.rkt") (lib "digimon/digitama/spec/issue.rkt") (lib "digimon/digitama/spec/behavior.rkt") (lib "digimon/tamer/archive/zip.rkt") (lib "digimon/tamer/zip/spec/pkzip.rkt") (lib "digimon/tamer/zip/zipinfo.rkt") (lib "digimon/character.rkt") (lib "digimon/tamer/bplist/cycular.rkt") (lib "digimon/digitama/ffi.rkt") (lib "digimon/digivice/wisemon/path.rkt") (lib "digimon/digitama/plist/bplist.rkt") (lib "digimon/stdio.rkt") (lib "digimon/digitama/collection.rkt") (lib "digimon/digitama/bintext/zipinfo.rkt") (lib "digimon/digivice/wisemon/spec.rkt") (lib "digimon/digivice/wisemon/parameter.rkt") (lib "digimon/tamer/zip/zip.rkt") (lib "digimon/digitama/bitstream.rkt") (lib "digimon/digitama/spec/dsl.rkt") (lib "digimon/digitama/unsafe/debug/ops.rkt") (lib "digimon/digitama/typeset/tex.rkt") (lib "digimon/checksum.rkt") (lib "digimon/digitama/dtrace.rkt") (lib "digimon/timer.rkt") (lib "digimon/thread.rkt") (lib "digimon/digitama/bintext/archive/zip.rkt") (lib "digimon/uuid.rkt") (lib "digimon/digitama/tamer/citation.rkt") (lib "digimon/digitama/spec/prompt.rkt") (lib "digimon/spec.rkt") (lib "digimon/predicate.rkt") (lib "digimon/tamer/zip/pkunzip.rkt") (lib "digimon/digitama/spec/expectation.rkt") (lib "digimon/digitama/ioexn.rkt") (lib "digimon/number.rkt") (lib "digimon/tamer/zip/deflate.rkt") (lib "digimon/tongue.rkt") (lib "digimon/digitama/number.rkt") (lib "digimon/echo.rkt") (lib "digimon/iana.rkt") (lib "digimon/digitama/toolchain/cc/linker.rkt") (lib "digimon/tamer/cc/ffi/filter.rkt") (lib "digimon/tamer/bplist/constants.rkt") (lib "digimon/digitama/spec/seed.rkt") (lib "digimon/tamer/zip/lz77.rkt") (lib "digimon/digitama/unsafe/number.rkt") (lib "digimon/digitama/unsafe/ops.rkt") (lib "digimon/digitama/latex.rkt") (lib "digimon/filesystem.rkt") (lib "digimon/enumeration.rkt") (lib "digimon/tamer/bplist/empty.rkt") (lib "digimon/string.rkt") (lib "digimon/digitama/spec/misc.rkt") (lib "digimon/digivice/nanomon/shell/colorize.rkt") (lib "digimon/format.rkt") (lib "digimon/digitama/bintext/huffman.rkt") (lib "digimon/digitama/unsafe/release/ops.rkt") (lib "digimon/digitama/plural.rkt") (lib "digimon/emoji.rkt") (lib "digimon/gui.rkt") (lib "digimon/digitama/system.rkt") (lib "digimon/syntax.rkt") (lib "digimon/digitama/stdio.rkt") (lib "digimon/tamer/spec.rkt") (lib "digimon/exception.rkt") (lib "digimon/digitama/wisemon.rkt") (lib "digimon/digitama/toolchain/bin/gcc.rkt") (lib "digimon/digitama/plist.rkt") (lib "digimon/tamer/zip/winzip.rkt") (lib "digimon/digitama/bintext/deflation.rkt") (lib "digimon/dimension.rkt") (lib "digimon/digitama/bintext/crc.rkt") (lib "digimon/digitama/bintext/archive/progress.rkt") (lib "digimon/tamer/cmdopt/ev.rkt") (lib "digimon/tamer/cursor.rkt") (lib "digimon/digitama/typeset/exec.rkt") (lib "digimon/location.rkt") (lib "digimon/digivice/nanomon/parameter.rkt") (lib "digimon/symbol.rkt") (lib "digimon/collection.rkt") (lib "digimon/digivice/wisemon/native.rkt") (lib "digimon/tamer/zip/codelen-cases.rkt") (lib "digimon/bitstream.rkt") (lib "digimon/wisemon.rkt") (lib "digimon/digitama/typeset/bin/luahbtex.rkt") (lib "digimon/digivice/wisemon/phony/typeset.rkt") (lib "digimon/digivice/wisemon/phony/clean.rkt") (lib "digimon/network.rkt") (lib "digimon/tamer/cc/ffi/seed.rkt") (lib "digimon/tamer/digimon.scrbl") (lib "digimon/port.rkt") (lib "digimon/digivice/nanomon/unsafe/colorize.rkt") (lib "digimon/tamer/bplist/date.rkt") (lib "digimon/token.rkt") (lib "digimon/digivice/wisemon/racket.rkt") (lib "digimon/digitama/toolchain/cc/cc.rkt") (lib "digimon/tamer/archive.rkt") (lib "digimon/tamer/bplist/xcbuild.rkt") (lib "digimon/digitama/bintext/zipconfig.rkt") (lib "digimon/continuation.rkt") (lib "digimon/cc.rkt") (lib "digimon/function.rkt") (lib "digimon/cmdopt.rkt") (lib "digimon/digitama/toolchain/cc/configuration.rkt") (lib "digimon/digitama/exec.rkt") (lib "digimon/tamer/tex/pdftex.scrbl") (lib "digimon/tamer/echo.rkt") (lib "digimon/binscii.rkt") (lib "digimon/debug.rkt") (lib "digimon/digivice/wisemon/phony/dist.rkt") (lib "digimon/tamer/cc/spec.rkt") (lib "digimon/digivice/nanomon.rkt") (lib "digimon/class.rkt") (lib "digimon/tamer/zip/spec/codelen.rkt") (lib "digimon/digivice/nanomon/shell.rkt") (lib "digimon/tamer/cmdopt/vim.rkt") (lib "digimon/tamer/zip/zipcopy.rkt") (lib "digimon/digitama/tamer.rkt") (lib "digimon/digitama/bintext/zip.rkt") (lib "digimon/digitama/plist/Info.plist.rkt") (lib "digimon/digitama/toolchain/bin/msvc.rkt") (lib "digimon/tamer/zip/spec/deflate.rkt") (lib "digimon/digitama/toolchain/toolchain.rkt") (lib "digimon/digitama/typeset/bin/xetex.rkt") (lib "digimon/digitama/cmdopt.rkt") (lib "digimon/digitama/typeset/bin/euptex.rkt") (lib "digimon/tamer/uuid.rkt") (lib "digimon/plist.rkt") (lib "digimon/digitama/bintext/archive.rkt") (lib "digimon/digitama/evt.rkt") (lib "digimon/struct.rkt") (lib "digimon/tamer/plist.rkt") (lib "digimon/foreign.rkt") (lib "digimon/digitama/bintext/table/bits.rkt") (lib "digimon/digitama/bintext/table/huffman.rkt") (lib "digimon/digivice/wisemon/phony.rkt") (lib "digimon/digitama/typeset/bin/pdftex.rkt") (lib "digimon/digitama/toolchain/cc/compiler.rkt") (lib "digimon/tamer/zip/unzip.rkt") (lib "digimon/date.rkt") (lib "digimon/tamer/cmdopt/scp.rkt") (lib "digimon/archive.rkt") (lib "digimon/digitama/tamer/texbook.rkt") (lib "digimon/digivice/nanomon/shell/exec.rkt") (lib "digimon/digitama/toolchain/bin/clang.rkt") (lib "digimon/digitama/tamer/block.rkt") (lib "digimon/tamer/zip/huftree.rkt") (lib "digimon/digitama/path.rkt") (lib "digimon/digitama/bintext/base64.rkt") (lib "digimon/digitama/bytes.rkt") (lib "digimon/digitama/tamer/manual.rkt") (lib "digimon/digivice/wisemon/phony/prove.rkt") (lib "digimon/tamer/stdio.rkt") (lib "digimon/digivice/wisemon.rkt") (lib "digimon/dtrace.rkt") (lib "digimon/system.rkt") (lib "digimon/tamer/bplist/infotab.rkt") (lib "digimon/digivice/wisemon/phony/cc.rkt") (lib "digimon/digitama/bintext/lz77.rkt"))) (name . "digimon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t) (utility . #t))) (source . "http://github.com/wargrey/digimon.git/tree/master") (tags . ("typed-racket" "unstable" "utility")) (versions . #hash((default . #hasheq((checksum . "e60908a10af138f4d5c681e4005d0c47c94175ff") (source . "git://github.com/wargrey/digimon.git") (source_url . "http://github.com/wargrey/digimon.git/tree/master"))))))) ("dirname" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dirname" "doc/dirname@dirname/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dirname.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dirname.txt"))) (checksum . "93f96544f47910889168272c75a48c3e9a617921") (checksum-error . #f) (collection . "dirname") (conflicts . ()) (date-added . 1627490570) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Basename and dirname functions") (implies . ()) (modules . ((lib "dirname/scribblings/dirname.scrbl") (lib "dirname/main.rkt"))) (name . "dirname") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (filesystem . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-dirname.git") (tags . ("filesystem" "system")) (versions . #hash((default . #hasheq((checksum . "93f96544f47910889168272c75a48c3e9a617921") (source . "https://gitlab.com/xgqt/racket-dirname.git") (source_url . "https://gitlab.com/xgqt/racket-dirname.git"))))))) ("disassemble" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disassemble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disassemble.txt"))) (checksum . "c4f80cd7994d2d4f9ad4aae0734c454d33390017") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "srfi-lib" "srfi-lite-lib")) (description . "Disassembler for JIT-compiled functions.") (implies . ()) (modules . ((lib "machine-code/disassembler.rkt") (lib "machine-code/disassembler/x86-opcodes.rkt") (lib "disassemble/test.rkt") (lib "disassemble/fcdisasm.rkt") (lib "machine-code/disassembler/private.rkt") (lib "disassemble/nasm.rkt") (lib "disassemble/test2.rkt") (lib "disassemble/vm.rkt") (lib "disassemble/main.rkt") (lib "machine-code/disassembler/x86.rkt"))) (name . "disassemble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/samth/disassemble/tree/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "c4f80cd7994d2d4f9ad4aae0734c454d33390017") (source . "github://github.com/samth/disassemble/master") (source_url . "http://github.com/samth/disassemble/tree/master"))))))) ("disposable" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "disposable" "doc/disposable@disposable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (collection . "disposable") (conflicts . ()) (dependencies . ("arguments" "base" "reprovide-lang" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-text-lib")) (description . "Provides an abstraction for values associated with external resources that allows automatic resource pooling, per-thread virtual construction, and monadic composition") (implies . ()) (modules . ((lib "disposable/unsafe.rkt") (lib "disposable/private/syntax.rkt") (lib "disposable/example.rkt") (lib "disposable/scribblings/main.scrbl") (lib "disposable/private/atomic-box.rkt") (lib "disposable/scribblings/base.rkt") (lib "disposable/scribblings/lite.scrbl") (lib "disposable/scribblings/util.rkt") (lib "disposable/scribblings/transient.scrbl") (lib "disposable/private/pool.rkt") (lib "disposable/scribblings/misc.scrbl") (lib "disposable/scribblings/pool.scrbl") (lib "disposable/testing.rkt") (lib "disposable/file.rkt") (lib "disposable/main.rkt"))) (name . "disposable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable") (tags . ("concurrency" "experimental" "io")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable"))))))) ("disposable-test" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable-test.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (collection . "disposable") (conflicts . ()) (dependencies . ("base" "disposable" "doc-coverage" "fixture" "rackunit-lib")) (description . "Tests for the \"disposable\" package") (implies . ("disposable")) (modules . ((lib "disposable/tests/pool.rkt") (lib "disposable/tests/transient.rkt") (lib "disposable/tests/main.rkt") (lib "disposable/tests/util.rkt") (lib "disposable/tests/file.rkt") (lib "disposable/tests/testing.rkt"))) (name . "disposable-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (disposable . #t) (experimental . #t) (io . #t) (ring:1 . #t) (tests . #t))) (source . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable-test") (tags . ("concurrency" "disposable" "experimental" "io" "tests")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable-test") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable-test"))))))) ("distro-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("distro-build-lib" "distro-build-doc")) (description . "Tools for constructing a distribution of Racket") (implies . ("distro-build-lib" "distro-build-doc")) (modules . ()) (name . "distro-build") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build") (source_url . "git://github.com/racket/distro-build/?path=distro-build"))))))) ("distro-build-client" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-client.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . ("base" "ds-store-lib" "at-exp-lib")) (description . "client-side part of \"distro-build\"") (implies . ()) (modules . ((lib "distro-build/unpack-collects.rkt") (lib "distro-build/installer-exe.rkt") (lib "distro-build/installer-tgz.rkt") (lib "distro-build/installer-dmg.rkt") (lib "distro-build/display-time.rkt") (lib "distro-build/set-config.rkt") (lib "distro-build/installer.rkt") (lib "distro-build/installer-pkg.rkt") (lib "distro-build/notarize.rkt") (lib "distro-build/installer-sh.rkt"))) (name . "distro-build-client") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-client") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build-client") (source_url . "git://github.com/racket/distro-build/?path=distro-build-client"))))))) ("distro-build-doc" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "distro-build" "doc/distro-build@distro-build-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-doc.txt"))) (checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . ("base" "distro-build-server" "distro-build-client" "web-server-lib" "at-exp-lib" "racket-doc" "scribble-lib")) (description . "documentation part of \"distro-build\"") (implies . ()) (modules . ((lib "distro-build/distro-build.scrbl"))) (name . "distro-build-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (source_url . "git://github.com/racket/distro-build/?path=distro-build-doc"))))))) ("distro-build-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("distro-build-client" "distro-build-server")) (description . "implementation (no documentation) part of \"distro-build\"") (implies . ("distro-build-client" "distro-build-server")) (modules . ()) (name . "distro-build-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build-lib") (source_url . "git://github.com/racket/distro-build/?path=distro-build-lib"))))))) ("distro-build-server" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-server.txt") (test-failure-log . "server/built/test-fail/distro-build-server.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . ("base" "distro-build-client" "web-server-lib" "ds-store-lib" "net-lib" "scribble-html-lib" "plt-web-lib" "remote-shell-lib" "at-exp-lib" "rackunit-lib")) (description . "server-side part of \"distro-build\"") (implies . ()) (modules . ((lib "distro-build/config.rkt") (lib "distro-build/drive-clients.rkt") (lib "distro-build/download-page.rkt") (lib "distro-build/private/find-desired-snapshots.rkt") (lib "distro-build/url-options.rkt") (lib "distro-build/email.rkt") (lib "distro-build/set-server-config.rkt") (lib "distro-build/install-for-docs.rkt") (lib "distro-build/record-installer.rkt") (lib "distro-build/install-pkgs.rkt") (lib "distro-build/readme.rkt") (lib "distro-build/manage-snapshots.rkt") (lib "distro-build/serve-catalog.rkt") (lib "distro-build/indexes.rkt") (lib "distro-build/pack-collects.rkt") (lib "distro-build/assemble-site.rkt") (lib "distro-build/pack-built.rkt") (lib "distro-build/private/target-machine.rkt") (lib "distro-build/pkg-info.rkt"))) (name . "distro-build-server") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-server") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build-server") (source_url . "git://github.com/racket/distro-build/?path=distro-build-server"))))))) ("distro-build-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-test.txt"))) (checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . ("base" "remote-shell-lib" "web-server-lib")) (description . "Tests for \"distro-build\"") (implies . ()) (modules . ((lib "distro-build/tests/unix-installer.rkt"))) (name . "distro-build-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38949bfc39a1fbb090a52dc161b906be561529f7") (source . "git://github.com/racket/distro-build/?path=distro-build-test") (source_url . "git://github.com/racket/distro-build/?path=distro-build-test"))))))) ("dm" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dm" "doc/dm@dm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dm.txt") (test-failure-log . "server/built/test-fail/dm.txt") (test-success-log . #f))) (checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "Linux Device Mapper bindings for Racket.") (implies . ()) (modules . ((lib "dm/private/ffi.rkt") (lib "dm/main.rkt") (lib "dm/parse.rkt") (lib "dm/dm.scrbl"))) (name . "dm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-dm/tree/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (source . "github://github.com/mordae/racket-dm/master") (source_url . "http://github.com/mordae/racket-dm/tree/master"))))))) ("doc-coverage" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doc-coverage" "doc/doc-coverage@doc-coverage/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doc-coverage.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doc-coverage.txt"))) (checksum . "b1c0e9f3fd3a25e260f8905e6c8211dacf532b25") (checksum-error . #f) (collection . "doc-coverage") (conflicts . ()) (dependencies . ("base" "racket-index" "rackunit-lib" "reprovide-lang-lib" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package for inspecting and testing a module's documentation of its provided bindings") (implies . ()) (modules . ((lib "doc-coverage/private/export-tests.rkt") (lib "doc-coverage/scribblings/main.scrbl") (lib "doc-coverage/main.rkt") (lib "doc-coverage/tests/main.rkt") (lib "doc-coverage/private/export-lists.rkt") (lib "doc-coverage/private/raco.rkt") (lib "doc-coverage/private/export-count.rkt") (lib "doc-coverage/private/main.rkt"))) (name . "doc-coverage") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (reflection . #t) (ring:1 . #t) (scribble . #t) (testing . #t))) (source . "http://github.com/jackfirth/doc-coverage/tree/master?path=doc-coverage") (tags . ("reflection" "scribble" "testing")) (versions . #hash((default . #hasheq((checksum . "b1c0e9f3fd3a25e260f8905e6c8211dacf532b25") (source . "git://github.com/jackfirth/doc-coverage?path=doc-coverage") (source_url . "http://github.com/jackfirth/doc-coverage/tree/master?path=doc-coverage"))))))) ("dollar" . #hasheq((author . "racket@rogerkeays.com") (authors . ("racket@rogerkeays.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dollar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dollar.txt"))) (checksum . "16fa7aec4e1cef43a7b678dc798b1a9c20a87bb6") (checksum-error . #f) (collection . "dollar") (conflicts . ()) (date-added . 1613838080) (dependencies . ("base" "rackunit")) (description . "An example #lang extension which uses $ instead of , for unquote.") (implies . ()) (modules . ((lib "dollar/lang/reader.rkt") (lib "dollar/tests/racket.rkt") (lib "dollar/tests/racket-base.rkt"))) (name . "dollar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@rogerkeays.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/rogerkeays/racket-dollar.git#main") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "16fa7aec4e1cef43a7b678dc798b1a9c20a87bb6") (source . "https://github.com/rogerkeays/racket-dollar.git#main") (source_url . "https://github.com/rogerkeays/racket-dollar.git#main"))))))) ("domain-coloring" . #hasheq((author . "cassrudig@protonmail.com") (authors . ("cassrudig@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/domain-coloring.txt") (test-failure-log . "server/built/test-fail/domain-coloring.txt") (test-success-log . #f))) (checksum . "05ff78874ebb5fa86c9c663b3f97ffe89384a4e2") (checksum-error . #f) (collection . "domain-coloring") (conflicts . ()) (date-added . 1649781452) (dependencies . ("base" "gui-lib" "colors")) (description . "A domain coloring tool for complex analysis") (implies . ()) (modules . ((lib "domain-coloring/scribblings/domain-coloring.scrbl") (lib "domain-coloring/complex-grapher-test.rkt") (lib "domain-coloring/complex-grapher.rkt") (lib "domain-coloring/main.rkt"))) (name . "domain-coloring") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (art . #t) (author:cassrudig@protonmail.com . #t) (color . #t) (drawing . #t) (gui . #t) (math . #t) (numerical . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/TrueQueenBee/domain-coloring.git") (tags . ("art" "color" "drawing" "gui" "math" "numerical" "utility")) (versions . #hash((default . #hasheq((checksum . "05ff78874ebb5fa86c9c663b3f97ffe89384a4e2") (source . "https://github.com/TrueQueenBee/domain-coloring.git") (source_url . "https://github.com/TrueQueenBee/domain-coloring.git"))))))) ("doodle" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doodle" "doc/doodle@doodle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doodle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doodle.txt"))) (checksum . "a6840bb97bb384b92c612960aca676e31662453c") (checksum-error . #f) (collection . "doodle") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "doodle/scribblings/doodle.scrbl") (lib "doodle/private/template/paper.scrbl") (lib "doodle/private/template/utils.rkt") (lib "doodle/main.rkt"))) (name . "doodle") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/LeifAndersen/doodle/tree/master") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "a6840bb97bb384b92c612960aca676e31662453c") (source . "git://github.com/LeifAndersen/doodle") (source_url . "http://github.com/LeifAndersen/doodle/tree/master"))))))) ("dos" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dos" "doc/dos@dos/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dos.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dos.txt"))) (checksum . "e39826f5f65f7d0b849e5286859e70a62a985be1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "htdp-lib" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "rackunit-lib")) (description . "Delimited-continuation-based Operating-system Simulator") (implies . ()) (modules . ((lib "dos/main.rkt") (lib "dos/examples/win.rkt") (lib "dos/examples/os2.rkt") (lib "dos/os2.rkt") (lib "dos/win/big-bang.rkt") (lib "dos/dos.scrbl") (lib "dos/examples/dos.rkt") (lib "dos/examples/win-long.rkt") (lib "dos/win.rkt"))) (name . "dos") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation . #t) (games . #t) (os . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/dos/tree/master") (tags . ("continuation" "games" "os")) (versions . #hash((default . #hasheq((checksum . "e39826f5f65f7d0b849e5286859e70a62a985be1") (source . "git://github.com/jeapostrophe/dos") (source_url . "http://github.com/jeapostrophe/dos/tree/master"))))))) ("dotenv" . #hasheq((author . "royall@royall.us") (authors . ("royall@royall.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotenv" "doc/dotenv@dotenv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotenv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotenv.txt"))) (checksum . "86b9a0718f2dfdae1b08d7f6f859875a06817de4") (checksum-error . #f) (collection . "dotenv") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Override environment variables by loading .env files.") (implies . ()) (modules . ((lib "dotenv/scribblings/dotenv.scrbl") (lib "dotenv/main.rkt") (lib "dotenv/private/dotenv.rkt"))) (name . "dotenv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:royall@royall.us . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/royallthefourth/dotenv/tree/master") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "86b9a0718f2dfdae1b08d7f6f859875a06817de4") (source . "git://github.com/royallthefourth/dotenv") (source_url . "http://github.com/royallthefourth/dotenv/tree/master"))))))) ("dotlambda" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotlambda" "doc/dotlambda@dotlambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotlambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotlambda.txt"))) (checksum . "96cfe93ab611db377a4a68f4b0a7e483ebf506a6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799385) (dependencies . ("base" "rackunit-lib" "typed-map-lib" "typed-racket-lib" "typed-racket-more" "chain-module-begin" "debug-scopes" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Splits dotted identifiers like a.b.c, also supports λ<arg>.(code) syntax. Experimental (i.e. there may be small breaking changes in later versions).") (implies . ()) (modules . ((lib "dotlambda/test/typed-dotlambda-phase1.rkt") (lib "dotlambda/scribblings/typed-dotlambda.scrbl") (lib "dotlambda/unhygienic-implementation.rkt") (lib "typed/dotlambda.rkt") (lib "typed/dotlambda/main.rkt") (lib "dotlambda/unhygienic/lang/reader.rkt") (lib "dotlambda/unhygienic.rkt") (lib "dotlambda/test/test-typed-racket-chain.rkt") (lib "dotlambda/private/fold.rkt") (lib "dotlambda/implementation.rkt") (lib "dotlambda/main.rkt") (lib "dotlambda/test/test-typed-dotlambda.rkt") (lib "dotlambda/test/test-dotlambda.rkt") (lib "dotlambda/scribblings/dotlambda.scrbl") (lib "dotlambda/lang/reader.rkt") (lib "dotlambda/literals.rkt") (lib "typed/dotlambda/lang/reader.rkt"))) (name . "dotlambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/dotlambda.git#main") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "96cfe93ab611db377a4a68f4b0a7e483ebf506a6") (source . "https://github.com/jsmaniac/dotlambda.git#main") (source_url . "https://github.com/jsmaniac/dotlambda.git#main"))))))) ("dotmethod" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotmethod" "doc/dotmethod@dotmethod/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotmethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotmethod.txt"))) (checksum . "4414f7708a68a560453946af4ba6dbc5672037c1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "afl" "postfix-dot-notation" "sweet-exp" "mutable-match-lambda" "my-cond" "racket-doc" "rackunit-lib" "scribble-code-examples" "scribble-lib")) (description . "obj.method(x) in racket using mutable-match-lambda") (implies . ()) (modules . ((lib "dotmethod/scribblings/dotmethod.scrbl") (lib "dotmethod/dotmethod.rkt") (lib "dotmethod/lang/reader.rkt") (lib "dotmethod/tests/test-lang.rkt") (lib "dotmethod/tests/test-require.rkt"))) (name . "dotmethod") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/AlexKnauth/dotmethod/tree/master") (tags . ("deprecated" "syntax")) (versions . #hash((default . #hasheq((checksum . "4414f7708a68a560453946af4ba6dbc5672037c1") (source . "git://github.com/AlexKnauth/dotmethod") (source_url . "http://github.com/AlexKnauth/dotmethod/tree/master"))))))) ("dracula-theme" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dracula-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dracula-theme.txt"))) (checksum . "e0c10bc0177ada3e37518f96ba0ea55560d76781") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1581779634) (dependencies . ("base")) (description . "Dracula color scheme for DrRacket (https://draculatheme.com/)") (implies . ()) (modules . ()) (name . "dracula-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:massung@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/dracula/racket.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "e0c10bc0177ada3e37518f96ba0ea55560d76781") (source . "https://github.com/dracula/racket.git") (source_url . "https://github.com/dracula/racket.git"))))))) ("drbayes" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/drbayes.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "math-lib" "images-lib" "plot-gui-lib" "plot-lib" "profile-lib")) (description . "Probabilistic programming language") (implies . ()) (modules . ((lib "drbayes/private/search/split.rkt") (lib "drbayes/direct/exact-semantics/tests.rkt") (lib "drbayes/private/set/union-more-ops.rkt") (lib "drbayes/private/search/utils.rkt") (lib "drbayes/private/arrow/prob-arrows.rkt") (lib "drbayes/private/arrow/meaning.rkt") (lib "drbayes/private/language.rkt") (lib "drbayes/private/flonum/directed-rounding.rkt") (lib "drbayes/tests/language-tests/probabilistic-grammar.rkt") (lib "drbayes/private/set/bool-set.rkt") (lib "drbayes/private/search/enumerate.rkt") (lib "drbayes/private/set/store-set.rkt") (lib "drbayes/private/arrow/pure-lifts/make-real-lift.rkt") (lib "drbayes/private/set/parameters.rkt") (lib "drbayes/private/flonum/probability.rkt") (lib "drbayes/private/arrow/pure-lifts.rkt") (lib "drbayes/private/search/parameters.rkt") (lib "drbayes/tests/set-tests/set-lattice-properties.rkt") (lib "drbayes/tests/set-tests/store-set-tests.rkt") (lib "drbayes/direct/exact-semantics/branch-trace.rkt") (lib "drbayes/private/set/store.rkt") (lib "drbayes/direct/exact-semantics/pre-arrow.rkt") (lib "drbayes/tests/random-sets/random-null-set.rkt") (lib "drbayes/tests/arrow-tests/real-function-tests.rkt") (lib "drbayes/direct/exact-semantics/bot-arrow.rkt") (lib "drbayes/private/set/union.rkt") (lib "drbayes/tests/set-tests/pair-set-tests.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/abstract-float.rkt") (lib "drbayes/tests/language-tests/ray-tracing.rkt") (lib "drbayes/private/arrow/indexes.rkt") (lib "drbayes/direct/exact-semantics/semantic-function.rkt") (lib "drbayes/tests/random-sets/random-real-set.rkt") (lib "drbayes/tests/set-tests/set-properties.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows-plus.rkt") (lib "drbayes/private/language/functions.rkt") (lib "drbayes/private/language/drbayes-dispatcher.rkt") (lib "drbayes/tests/random-sets/random-symbol-set.rkt") (lib "drbayes/tests/set-tests/set-tests.rkt") (lib "drbayes/tests/arrow-tests/arrow-tests.rkt") (lib "drbayes/direct/racket-impl/pre-star-arrow.rkt") (lib "drbayes/private/bigfloat/directed-rounding.rkt") (lib "drbayes/private/arrow/pure-arrows.rkt") (lib "drbayes/tests/set-tests/bool-set-tests.rkt") (lib "drbayes/private/language/parameterized-expansion.rkt") (lib "drbayes/private/arrow/pure-lifts/rounding-lifts.rkt") (lib "drbayes/private/arrow/proc-arrow.rkt") (lib "drbayes/private/flonum/symmetric-log.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-query.rkt") (lib "drbayes/private/arrow/types.rkt") (lib "drbayes/direct/racket-impl/set.rkt") (lib "drbayes/private/arrow/pure-lifts/make-predicate-lift.rkt") (lib "drbayes/private/arrow/prob-lifts.rkt") (lib "drbayes/private/set/null-set.rkt") (lib "drbayes/direct/exact-semantics/mapping.rkt") (lib "drbayes/tests/random-sets/random-bool-set.rkt") (lib "drbayes/private/set/union-ops.rkt") (lib "drbayes/private/search/sample.rkt") (lib "drbayes/direct/exact-semantics/fun-arrow.rkt") (lib "drbayes/private/arrow/refine.rkt") (lib "drbayes/tests/flonum-tests/log-random-tests.rkt") (lib "drbayes/tests/set-tests/prob-set-tests.rkt") (lib "drbayes/tests/language-tests/normal-normal.rkt") (lib "drbayes/private/set/store-index.rkt") (lib "drbayes/tests/real-tests/bijection-tests.rkt") (lib "drbayes/private/flonum/flops.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/geometric-inv-cdf.rkt") (lib "drbayes/tests/set-tests/symbol-set-tests.rkt") (lib "drbayes/tests/set-tests/set-algebra-properties.rkt") (lib "drbayes/tests/language-tests/tests.rkt") (lib "drbayes/private/arrow/preimage-mapping.rkt") (lib "drbayes/private/set/symbol-set.rkt") (lib "drbayes/tests/random-sets/random-prob-set.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/build-it-break-it.rkt") (lib "drbayes/private/search.rkt") (lib "drbayes/private/arrow/pure-lifts/comparison-lifts.rkt") (lib "drbayes/private/arrow/parameters.rkt") (lib "drbayes/private/set.rkt") (lib "drbayes/tests/real-tests/trijection-tests.rkt") (lib "drbayes/private/set/types.rkt") (lib "drbayes/private/bigfloat.rkt") (lib "drbayes/tests/random-sets/random-set.rkt") (lib "drbayes/direct/racket-impl/pre-mapping.rkt") (lib "drbayes/private/arrow/pure-lifts/make-prob-lift.rkt") (lib "drbayes/private/set/prob-set.rkt") (lib "drbayes/private/set/real-set.rkt") (lib "drbayes/private/arrow.rkt") (lib "drbayes/private/set/extremal-set.rkt") (lib "drbayes/main.rkt") (lib "drbayes/direct/exact-semantics/map-arrow.rkt") (lib "drbayes/private/arrow/pure-lifts/predicate-lifts.rkt") (lib "drbayes/private/arrow/cache.rkt") (lib "drbayes/direct/scratch/store-split.rkt") (lib "drbayes/private/flonum/utils.rkt") (lib "drbayes/private/arrow/pure-lifts/trijection.rkt") (lib "drbayes/tests/real-tests/utils.rkt") (lib "drbayes/tests/set-tests/set-membership-properties.rkt") (lib "drbayes/private/arrow/pure-lifts/bijection.rkt") (lib "drbayes/tests/set-tests/integer-set-tests.rkt") (lib "drbayes/private/set/value.rkt") (lib "drbayes/direct/exact-semantics/preimage-mapping.rkt") (lib "drbayes/tests/flonum-tests/symmetric-log-tests.rkt") (lib "drbayes/tests/random-sets/random-integer-set.rkt") (lib "drbayes/direct/exact-semantics/set-ops.rkt") (lib "drbayes/private/arrow/pure-lifts/prob-lifts.rkt") (lib "drbayes/tests/language-tests/need-for-strict-if.rkt") (lib "drbayes/private/search/refinement-sample.rkt") (lib "drbayes/tests/set-tests/null-set-tests.rkt") (lib "drbayes/private/set/bottom.rkt") (lib "drbayes/private/search/refinement-search.rkt") (lib "drbayes/private/flonum.rkt") (lib "drbayes/private/arrow/pure-lifts/tag-lifts.rkt") (lib "drbayes/private/search/search-tree.rkt") (lib "drbayes/private/utils.rkt") (lib "drbayes/direct/racket-impl/pre-arrow.rkt") (lib "drbayes/tests/random-sets/random-store-set.rkt") (lib "drbayes/tests/set-tests/real-set-tests.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-cond-query.rkt") (lib "drbayes/private/search/types.rkt") (lib "drbayes/private/untyped-utils.rkt") (lib "drbayes/tests/test-utils.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows.rkt") (lib "drbayes/direct/types.rkt") (lib "drbayes/private/bigfloat/symmetric-log.rkt") (lib "drbayes/private/arrow/pure-lifts/equal-lifts.rkt") (lib "drbayes/direct/untyped-utils.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/gamma-beta.rkt") (lib "drbayes/private/set/ordered-set.rkt") (lib "drbayes/private/arrow/pure-lifts/real-lifts.rkt") (lib "drbayes/private/set/integer-set.rkt") (lib "drbayes/private/language/macros.rkt"))) (name . "drbayes") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:neil.toronto@gmail.com . #t) (bayesian . #t) (language . #t) (probability . #t) (ring:1 . #t))) (source . "http://github.com/ntoronto/drbayes/tree/master") (tags . ("bayesian" "language" "probability")) (versions . #hash((default . #hasheq((checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (source . "git://github.com/ntoronto/drbayes") (source_url . "http://github.com/ntoronto/drbayes/tree/master"))))))) ("drcomplete" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1551770937) (dependencies . ("drcomplete-filename" "drcomplete-required" "drcomplete-user-defined" "drcomplete-module" "drcomplete-auto")) (description . "The package assembles drcomplete plugins") (implies . ()) (modules . ()) (name . "drcomplete") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete"))))))) ("drcomplete-auto" . #hasheq((author . "yj_qww6@126.com 1227847322@qq.com") (authors . ("yj_qww6@126.com" "1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-auto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-auto.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-auto") (conflicts . ()) (date-added . 1553154543) (dependencies . ("base" "gui-lib" "drracket-plugin-lib" "drracket")) (description . "automatic triggering of autocompletion") (implies . ()) (modules . ((lib "drcomplete-auto/tool.rkt"))) (name . "drcomplete-auto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:1227847322@qq.com . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto"))))))) ("drcomplete-base" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-base.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-base.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-base") (conflicts . ()) (date-added . 1555386683) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "rackunit-lib")) (description . "basic framework for drcomplete") (implies . ()) (modules . ((lib "drcomplete-base/main.rkt") (lib "drcomplete-base/tool.rkt"))) (name . "drcomplete-base") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base"))))))) ("drcomplete-filename" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-filename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-filename.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-filename") (conflicts . ()) (date-added . 1551249678) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib" "drcomplete-base")) (description . "A DrRacket plugin for autocomplete for filenames, only active inside string.") (implies . ()) (modules . ((lib "drcomplete-filename/tool.rkt") (lib "drcomplete-filename/interface.rkt") (lib "drcomplete-filename/private/main.rkt"))) (name . "drcomplete-filename") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename"))))))) ("drcomplete-method-names" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-method-names.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-method-names.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-method-names") (conflicts . ()) (date-added . 1594893288) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for class method names") (implies . ()) (modules . ((lib "drcomplete-method-names/tool.rkt"))) (name . "drcomplete-method-names") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names"))))))) ("drcomplete-module" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-module.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-module.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-module") (conflicts . ()) (date-added . 1552030077) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "drcomplete-base")) (description . "autocomplete for modules") (implies . ()) (modules . ((lib "drcomplete-module/tool.rkt") (lib "drcomplete-module/private/main.rkt"))) (name . "drcomplete-module") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module"))))))) ("drcomplete-required" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-required.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-required.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-required") (conflicts . ()) (date-added . 1551627861) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for required identifiers.") (implies . ()) (modules . ((lib "drcomplete-required/tests/test.rkt") (lib "drcomplete-required/private/walk.rkt") (lib "drcomplete-required/tool.rkt") (lib "drcomplete-required/private/expansion.rkt"))) (name . "drcomplete-required") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required"))))))) ("drcomplete-user-defined" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-user-defined.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-user-defined.txt"))) (checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (checksum-error . #f) (collection . "drcomplete-user-defined") (conflicts . ()) (date-added . 1551450799) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "syntax-color-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for user-defined identifiers.") (implies . ()) (modules . ((lib "drcomplete-user-defined/tests/test.rkt") (lib "drcomplete-user-defined/private/expansion.rkt") (lib "drcomplete-user-defined/private/main.rkt") (lib "drcomplete-user-defined/tool.rkt"))) (name . "drcomplete-user-defined") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "b652e06b3551fab846035b1ff88053dae60ddc81") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined"))))))) ("drdr" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr.txt"))) (checksum . "a4efefc74adfdfabe465895fe055645e259394f0") (checksum-error . #f) (collection . "drdr") (conflicts . ()) (dependencies . ("base" "eli-tester" "net-lib" "web-server-lib" "web-server-test" "job-queue-lib" "at-exp-lib" "scheme-lib" "scribble-lib")) (description . "DrDr, Racket's continuous integration system") (implies . ()) (modules . ((lib "drdr/scm.rkt") (lib "drdr/run-collect.rkt") (lib "drdr/set-browser.rkt") (lib "drdr/sema.rkt") (lib "drdr/path-utils.rkt") (lib "drdr/notify.rkt") (lib "drdr/formats.rkt") (lib "drdr/gather-logs.rkt") (lib "drdr/status-analyze.rkt") (lib "drdr/time-file.rkt") (lib "drdr/diff.rkt") (lib "drdr/cache.rkt") (lib "drdr/make-archive-lib.rkt") (lib "drdr/make-archive.rkt") (lib "drdr/diffcmd.rkt") (lib "drdr/replay-log.rkt") (lib "drdr/tests/run-collect.rkt") (lib "drdr/plt-build.rkt") (lib "drdr/archive.rkt") (lib "drdr/archive-repair.rkt") (lib "drdr/render.rkt") (lib "drdr/cc.rkt") (lib "drdr/dirstruct.rkt") (lib "drdr/retry.rkt") (lib "drdr/status.rkt") (lib "drdr/job-queue.rkt") (lib "drdr/time-check.rkt") (lib "drdr/svn.rkt") (lib "drdr/main.rkt") (lib "drdr/list-count.rkt") (lib "drdr/monitor-scm.rkt") (lib "drdr/rendering.rkt") (lib "drdr/time.rkt") (lib "drdr/rewriting.rkt") (lib "drdr/archive-test.rkt") (lib "drdr/config.rkt") (lib "drdr/tests/loud.rkt") (lib "drdr/metadata.rkt") (lib "drdr/analyze.rkt") (lib "drdr/monitor-drdr.rkt") (lib "drdr/replay.rkt"))) (name . "drdr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/drdr/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a4efefc74adfdfabe465895fe055645e259394f0") (source . "git://github.com/racket/drdr") (source_url . "http://github.com/racket/drdr/tree/master"))))))) ("drdr2" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr2.txt"))) (checksum . "680818e5cfa7d48de02bf1a027f78d766498a48d") (checksum-error . #f) (collection . "drdr2") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "sandbox-lib" "eli-tester")) (description . "Prototype replacement for DrDr") (implies . ()) (modules . ((lib "drdr2/tests/slave.rkt") (lib "drdr2/lib/scm.rkt") (lib "drdr2/monitor/monitor.rkt") (lib "drdr2/tests/pqueue.rkt") (lib "drdr2/tests/db.rkt") (lib "drdr2/renderer/renderer.rkt") (lib "drdr2/analyzer/analyzer.rkt") (lib "drdr2/scheduler/scheduler.rkt") (lib "drdr2/lib/db.rkt") (lib "drdr2/slave/slave.rkt") (lib "drdr2/monitor/scm.rkt") (lib "drdr2/master/master.rkt") (lib "drdr2/lib/pqueue.rkt"))) (name . "drdr2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/drdr2/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "680818e5cfa7d48de02bf1a027f78d766498a48d") (source . "git://github.com/racket/drdr2") (source_url . "http://github.com/racket/drdr2/tree/master"))))))) ("dropbox" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dropbox" "doc/dropbox@dropbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dropbox.txt") (test-failure-log . "server/built/test-fail/dropbox.txt") (test-success-log . #f))) (checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "SDK for Dropbox") (implies . ()) (modules . ((lib "dropbox/tests.rkt") (lib "dropbox/dropbox.rkt") (lib "dropbox/main.rkt") (lib "dropbox/dropbox.scrbl"))) (name . "dropbox") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:stchang@racket-lang.org . #t) (dropbox . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/stchang/dropbox/tree/master") (tags . ("API" "dropbox" "net" "web")) (versions . #hash((default . #hasheq((checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (source . "github://github.com/stchang/dropbox/master") (source_url . "http://github.com/stchang/dropbox/tree/master"))))))) ("drracket-ayu-mirage" . #hasheq((author . "oran.simhony@gmail.com") (authors . ("oran.simhony@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-ayu-mirage.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-ayu-mirage.txt"))) (checksum . "5271740c3f0089e3958647353c24b73a3a80e401") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1557150791) (dependencies . ("base")) (description . "🎨 An ayu mirage color scheme for DrRacket") (implies . ()) (modules . ()) (name . "drracket-ayu-mirage") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:oran.simhony@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/oransimhony/drracket-ayu-mirage.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "5271740c3f0089e3958647353c24b73a3a80e401") (source . "https://github.com/oransimhony/drracket-ayu-mirage.git") (source_url . "https://github.com/oransimhony/drracket-ayu-mirage.git"))))))) ("drracket-cmdline-args" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-cmdline-args" "doc/drracket-cmdline-args@drracket-cmdline-args/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cmdline-args.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cmdline-args.txt"))) (checksum . "40135ace2a04ea101af184fb939fce0afc464294") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1594575496) (dependencies . ("drracket-plugin-lib" "gui-lib" "shlex" "base" "scribble-lib" "racket-doc")) (description . "Accessible command-line arguments for DrRacket") (implies . ()) (modules . ((lib "drracket-cmdline-args/tool.rkt") (lib "drracket-cmdline-args/scribblings/drracket-cmdline-args.scrbl"))) (name . "drracket-cmdline-args") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (command-line . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/drracket-cmdline-args.git") (tags . ("command-line" "drracket")) (versions . #hash((default . #hasheq((checksum . "40135ace2a04ea101af184fb939fce0afc464294") (source . "https://github.com/sorawee/drracket-cmdline-args.git") (source_url . "https://github.com/sorawee/drracket-cmdline-args.git"))))))) ("drracket-custom-keybindings" . #hasheq((author . "aowens5189@gmail.com") (authors . ("aowens5189@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kb-base" "doc/kb-base@drracket-custom-keybindings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-custom-keybindings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-custom-keybindings.txt"))) (checksum . "9b944b7f36fbe4eee7b22b3af5b74c76287bc1e7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621733047) (dependencies . ("rackunit-lib" "base" "drracket-plugin-lib" "gui-lib" "plai-lib" "redex-gui-lib" "gui-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A plugin and language for implementing macro-specific keybinding extensions for DrRacket") (implies . ()) (modules . ((lib "tests/kb-base/example-keybindings/checker-movement-tests.rkt") (lib "drracket-custom-keybindings/custom-keybinding-tool.rkt") (lib "drracket-custom-keybindings/handler.rkt") (lib "kb-base/kb-base/example-macros.rkt") (lib "tests/kb-base/example-keybindings/checkers-movement.rkt") (lib "kb-base/kb-base/kb-expr.rkt") (lib "tests/kb-base/error-tests.rkt") (lib "tests/kb-base/operations-tests.rkt") (lib "tests/kb-base/example-keybindings/contracts.rkt") (lib "kb-base/debugger.rkt") (lib "kb-base/kb-base/interpreter.rkt") (lib "kb-base/kb-base/operations.rkt") (lib "tests/kb-base/well-formed.rkt") (lib "kb-base/kb-base/helpers.rkt") (lib "tests/kb-base/example-keybindings/plai.rkt") (lib "kb-base/test-utils.rkt") (lib "kb-base/scribblings/kb-base.scrbl") (lib "kb-base/main.rkt") (lib "tests/kb-base/example-keybindings/misc-racket.rkt") (lib "tests/kb-base/keybinding-tests.rkt"))) (name . "drracket-custom-keybindings") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (author:aowens5189@gmail.com . #t) (ide . #t) (ring:1 . #t))) (source . "https://github.com/aowens-21/drracket-custom-keybindings.git") (tags . ("DrRacket" "ide")) (versions . #hash((default . #hasheq((checksum . "9b944b7f36fbe4eee7b22b3af5b74c76287bc1e7") (source . "https://github.com/aowens-21/drracket-custom-keybindings.git") (source_url . "https://github.com/aowens-21/drracket-custom-keybindings.git"))))))) ("drracket-cyberpunk" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cyberpunk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cyberpunk.txt"))) (checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "drracket-cyberpunk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (DrRacket . #t) (author:scott@thinkmoore.net . #t) (colorscheme . #t) (ring:1 . #t))) (source . "http://github.com/thinkmoore/drracket-cyberpunk.git/tree/master") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (source . "git://github.com/thinkmoore/drracket-cyberpunk.git") (source_url . "http://github.com/thinkmoore/drracket-cyberpunk.git/tree/master"))))))) ("drracket-material" . #hasheq((author . "oeplse@gmail.com") (authors . ("oeplse@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-material.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-material.txt"))) (checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (checksum-error . #f) (collection . "racket-material") (conflicts . ()) (dependencies . ("base")) (description . "This package adds a Material colorscheme to DrRacket.") (implies . ()) (modules . ()) (name . "drracket-material") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:oeplse@gmail.com . #t) (colorscheme . #t) (material . #t) (ring:1 . #t))) (source . "https://github.com/turbinenreiter/drracket-material.git") (tags . ("colorscheme" "material")) (versions . #hash((default . #hasheq((checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (source . "https://github.com/turbinenreiter/drracket-material.git") (source_url . "https://github.com/turbinenreiter/drracket-material.git"))))))) ("drracket-one-dark" . #hasheq((author . "joao.brilhante@outlook.com") (authors . ("joao.brilhante@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-one-dark.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-one-dark.txt"))) (checksum . "7b9dbd998e8976f37f98cf1f8fa25c4f4631dcef") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1614955494) (dependencies . ("base")) (description . "Atom's iconic One Dark color scheme for DrRacket!") (implies . ()) (modules . ()) (name . "drracket-one-dark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:joao.brilhante@outlook.com . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/JoaoBrlt/drracket-one-dark.git") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "7b9dbd998e8976f37f98cf1f8fa25c4f4631dcef") (source . "https://github.com/JoaoBrlt/drracket-one-dark.git") (source_url . "https://github.com/JoaoBrlt/drracket-one-dark.git"))))))) ("drracket-paredit" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-paredit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-paredit.txt"))) (checksum . "b2272896fcdba7e1f2fae7f0f3ecf0043252a10f") (checksum-error . #f) (collection . "drracket-paredit") (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib")) (description . "paredit keybindings for DrRacket") (implies . ()) (modules . ((lib "drracket-paredit/tool.rkt") (lib "drracket-paredit/paredit.rkt"))) (name . "drracket-paredit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "http://github.com/yjqww6/drracket-paredit/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b2272896fcdba7e1f2fae7f0f3ecf0043252a10f") (source . "github://github.com/yjqww6/drracket-paredit/master") (source_url . "http://github.com/yjqww6/drracket-paredit/tree/master"))))))) ("drracket-red" . #hasheq((author . "jagen315@gmail.com") (authors . ("jagen315@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-red.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-red.txt"))) (checksum . "06030dbc0451476ba652db86e19e737de6e1d9a1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1620543867) (dependencies . ("base")) (description . "VsCode Red Theme for DrRacket") (implies . ()) (modules . ()) (name . "drracket-red") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jagen315@gmail.com . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/jagen31/drracket-red.git") (tags . ("drracket-theme")) (versions . #hash((default . #hasheq((checksum . "06030dbc0451476ba652db86e19e737de6e1d9a1") (source . "https://github.com/jagen31/drracket-red.git") (source_url . "https://github.com/jagen31/drracket-red.git"))))))) ("drracket-restore-workspace" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-restore-workspace" "doc/drracket-restore-workspace@drracket-restore-workspace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-restore-workspace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-restore-workspace.txt"))) (checksum . "139a3d95198c8e4e47835aca12cde4c9f140afc7") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1607287215) (dependencies . ("drracket-plugin-lib" "gui-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Restore workspace for DrRacket") (implies . ()) (modules . ((lib "drracket-restore-workspace/tool.rkt") (lib "drracket-restore-workspace/scribblings/drracket-restore-workspace.scrbl"))) (name . "drracket-restore-workspace") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/drracket-restore-workspace.git") (tags . ("drracket")) (versions . #hash((default . #hasheq((checksum . "139a3d95198c8e4e47835aca12cde4c9f140afc7") (source . "https://github.com/sorawee/drracket-restore-workspace.git") (source_url . "https://github.com/sorawee/drracket-restore-workspace.git"))))))) ("drracket-scheme-dark-green" . #hasheq((author . "shu-hung.you@eecs.northwestern.edu") (authors . ("shu-hung.you@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-scheme-dark-green.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-scheme-dark-green.txt"))) (checksum . "bda60667005f146ffa78b6435e10cd5731d7f211") (checksum-error . #f) (collection . "drracket-scheme-dark-green") (conflicts . ()) (dependencies . ("base")) (description . "This is a white-on-black dark green colorscheme for DrRacket.") (implies . ()) (modules . ()) (name . "drracket-scheme-dark-green") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:shu-hung.you@eecs.northwestern.edu . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/shhyou/drracket-scheme-dark-green.git") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "bda60667005f146ffa78b6435e10cd5731d7f211") (source . "https://github.com/shhyou/drracket-scheme-dark-green.git") (source_url . "https://github.com/shhyou/drracket-scheme-dark-green.git"))))))) ("drracket-solarized" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-solarized.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-solarized.txt"))) (checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Solarized colorscheme for Drracket") (implies . ()) (modules . ()) (name . "drracket-solarized") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/drracket-solarized/tree/master") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (source . "github://github.com/takikawa/drracket-solarized/master") (source_url . "http://github.com/takikawa/drracket-solarized/tree/master"))))))) ("drracket-tool-text-lib" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4757188c661ac8bd9252f11051c12242f93ac1f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1635616352) (dependencies . ("base" "scribble-lib" "string-constants-lib" "scribble-lib" "racket-index" "at-exp-lib" "rackunit-lib")) (description . "Code implementing non-GUI programmatic interfaces to some IDE tools that DrRacket supports") (implies . ()) (modules . ((lib "drracket/find-module-path-completions.rkt") (lib "drracket/private/syncheck/syncheck-local-member-names.rkt") (lib "drracket/private/syncheck/annotate.rkt") (lib "drracket/private/syncheck/traversals.rkt") (lib "drracket/private/syncheck/syncheck-intf.rkt") (lib "drracket/private/syncheck/contract-traversal.rkt") (lib "drracket/private/syncheck/xref.rkt") (lib "drracket/private/syncheck/colors.rkt") (lib "drracket/check-syntax.rkt"))) (name . "drracket-tool-text-lib") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/drracket/?path=drracket-tool-text-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4757188c661ac8bd9252f11051c12242f93ac1f5") (source . "git://github.com/racket/drracket/?path=drracket-tool-text-lib") (source_url . "git://github.com/racket/drracket/?path=drracket-tool-text-lib"))))))) ("drracket-vim-tool" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-vim-tool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-vim-tool.txt"))) (checksum . "c347e8f8dcb0d89efd44755587b108e1f420912a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib" "rackunit-lib" "at-exp-lib")) (description . "DrRacket plugin that simulates vim keybindings") (implies . ()) (modules . ((lib "drracket-vim-tool/private/commands.rkt") (lib "drracket-vim-tool/tool.rkt") (lib "drracket-vim-tool/private/text.rkt") (lib "drracket-vim-tool/tests/utils.rkt") (lib "drracket-vim-tool/tests/unit-tests.rkt") (lib "drracket-vim-tool/private/utils.rkt"))) (name . "drracket-vim-tool") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (drracket . #t) (editor . #t) (ring:1 . #t) (vim . #t))) (source . "http://github.com/takikawa/drracket-vim-tool/tree/master") (tags . ("drracket" "editor" "vim")) (versions . #hash((default . #hasheq((checksum . "c347e8f8dcb0d89efd44755587b108e1f420912a") (source . "git://github.com/takikawa/drracket-vim-tool") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master"))))))) ("drracket-wakatime" . #hasheq((author . "dannypsnl@gmail.com racket@racket.tw") (authors . ("dannypsnl@gmail.com" "racket@racket.tw")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-wakatime" "doc/drracket-wakatime@drracket-wakatime/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-wakatime.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-wakatime.txt"))) (checksum . "1ab480f7a52cd68f7fccc405f459a04db2e78808") (checksum-error . #f) (collection . "drracket-wakatime") (conflicts . ()) (date-added . 1640970057) (dependencies . ("base" "gui-lib" "drracket-plugin-lib" "formatted-string" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "wakatime support on DrRacket") (implies . ()) (modules . ((lib "drracket-wakatime/tool.rkt") (lib "drracket-wakatime/main.rkt") (lib "drracket-wakatime/send-heartbeat.rkt") (lib "drracket-wakatime/find-project.rkt") (lib "drracket-wakatime/scribblings/drracket-wakatime.scrbl"))) (name . "drracket-wakatime") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (ring:1 . #t) (wakatime . #t))) (source . "https://github.com/racket-tw/drracket-wakatime.git#develop") (tags . ("DrRacket" "wakatime")) (versions . #hash((default . #hasheq((checksum . "1ab480f7a52cd68f7fccc405f459a04db2e78808") (source . "https://github.com/racket-tw/drracket-wakatime.git#develop") (source_url . "https://github.com/racket-tw/drracket-wakatime.git#develop"))))))) ("drracket-workspaces" . #hasheq((author . "kbtpodifo@gmail.com") (authors . ("kbtpodifo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-workspaces.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-workspaces.txt"))) (checksum . "ec3eff8e7b7dc5ca7f59209f188ba843d5c827d2") (checksum-error . #f) (collection . "drracket-workspaces") (conflicts . ()) (date-added . 1619148339) (dependencies . ("base" "drracket-plugin-lib" "gui-lib")) (description . "Save and reopen groups of files in DrRacket as workspaces.") (implies . ()) (modules . ((lib "drracket-workspaces/tool.rkt") (lib "drracket-workspaces/preferences.rkt"))) (name . "drracket-workspaces") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kbtpodifo@gmail.com . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/stardust66/drracket-workspaces.git#main") (tags . ("drracket")) (versions . #hash((default . #hasheq((checksum . "ec3eff8e7b7dc5ca7f59209f188ba843d5c827d2") (source . "https://github.com/stardust66/drracket-workspaces.git#main") (source_url . "https://github.com/stardust66/drracket-workspaces.git#main"))))))) ("drracket-zenburn" . #hasheq((author . "andrei.formiga@gmail.com") (authors . ("andrei.formiga@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-zenburn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-zenburn.txt"))) (checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (checksum-error . #f) (collection . "drracket-zenburn") (conflicts . ()) (dependencies . ("base")) (description . "The Zenburn colorscheme for DrRacket.") (implies . ()) (modules . ()) (name . "drracket-zenburn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:andrei.formiga@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "http://github.com/tautologico/drracket-zenburn/tree/master") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (source . "git://github.com/tautologico/drracket-zenburn") (source_url . "http://github.com/tautologico/drracket-zenburn/tree/master"))))))) ("dset" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dset" "doc/dset@dset/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dset.txt") (test-failure-log . "server/built/test-fail/dset.txt") (test-success-log . #f))) (checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Sets") (implies . ()) (modules . ((lib "tests/data/dset.rkt") (lib "data/dset/dset.scrbl") (lib "data/dset.rkt"))) (name . "dset") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/pnwamk/dset.git/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (source . "git://github.com/pnwamk/dset.git") (source_url . "http://github.com/pnwamk/dset.git/tree/master"))))))) ("dssl" . #hasheq((author . "jesse.tov@gmail.com") (authors . ("jesse.tov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl" "doc/dssl@dssl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dssl.txt"))) (checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (checksum-error . #f) (collection . "dssl") (conflicts . ()) (dependencies . ("base" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "at-exp-lib" "sandbox-lib" "compatibility-doc")) (description . "Data Structures Student Language: an extension of ASL for easier imperative programming.") (implies . ()) (modules . ((lib "dssl/dssl.rkt") (lib "dssl/tests/mlang-test.rkt") (lib "dssl/scribblings/std-grammar.rkt") (lib "dssl/lang/reader.rkt") (lib "dssl/scribblings/common.rkt") (lib "dssl/main.rkt") (lib "dssl/scribblings/prim-ops.rkt") (lib "dssl/scribblings/dssl.scrbl") (lib "dssl/classes.rkt") (lib "dssl/tests/test.rkt"))) (name . "dssl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl.git") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (source . "https://github.com/tov/dssl.git") (source_url . "https://github.com/tov/dssl.git"))))))) ("dssl2" . #hasheq((author . "stamourv@racket-lang.org jesse.tov@gmail.com") (authors . ("stamourv@racket-lang.org" "jesse.tov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl2" "doc/dssl2@dssl2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dssl2.txt"))) (checksum . "759e25da5934505e0225449d1933ebdb499a1ccd") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1570395202) (dependencies . ("base" "gui-lib" "rackunit-lib" "parser-tools-lib" "plot-gui-lib" "plot-lib" "sandbox-lib" "snip-lib" "scribble-lib" "racket-doc")) (description . "A language for data structures students") (implies . ()) (modules . ((lib "dssl2/test/dssl2/default-timeout-slow-fail.rkt") (lib "dssl2/private/prims.rkt") (lib "dssl2/test/dssl2/map.rkt") (lib "dssl2/test/dssl2/str-huh.rkt") (lib "dssl2/test/dssl2/bitwise-fail.rkt") (lib "dssl2/test/dssl2/zero-huh.rkt") (lib "dssl2/test/dssl2/vector.rkt") (lib "dssl2/lib/stream.rkt") (lib "dssl2/test/dssl2/timeout-slow-fail.rkt") (lib "dssl2/private/names.rkt") (lib "dssl2/scribblings/statement-forms.scrbl") (lib "dssl2/test/dssl2/print.rkt") (lib "dssl2/test/dssl2/int-huh-ctc-fail.rkt") (lib "dssl2/lib/sbox_hash_dssl2.rkt") (lib "dssl2/private/interface.rkt") (lib "dssl2/scribblings/cons.scrbl") (lib "dssl2/test/dssl2/interface-import.rkt") (lib "dssl2/test/dssl2/error-message.rkt") (lib "dssl2/test/dssl2/fifo-contract.rkt") (lib "dssl2/private/drracket/indent.rkt") (lib "dssl2/test/dssl2/if1.rkt") (lib "dssl2/scribblings/util.rkt") (lib "dssl2/test/dssl2/tail-defns.rkt") (lib "dssl2/test/dssl2/posn-fail.rkt") (lib "dssl2/lib/fifo.rkt") (lib "dssl2/test/dssl2/float-huh.rkt") (lib "dssl2/test/dssl2/lambda.rkt") (lib "dssl2/private/syntax-classes.rkt") (lib "dssl2/test/dssl2/if5.rkt") (lib "dssl2/test/dssl2/or.rkt") (lib "dssl2/private/generic.rkt") (lib "dssl2/test/dssl2/arithmetic.rkt") (lib "dssl2/test/dssl2/integer-div-mod.rkt") (lib "dssl2/test/dssl2/struct-def.rkt") (lib "dssl2/private/struct.rkt") (lib "dssl2/scribblings/formal-grammar.scrbl") (lib "dssl2/lib/plot.rkt") (lib "dssl2/lib/tagged.rkt") (lib "dssl2/private/parser.rkt") (lib "dssl2/test/dssl2/vector-oob-fail.rkt") (lib "dssl2/test/dssl2/lt.rkt") (lib "dssl2/test/dssl2/if2.rkt") (lib "dssl2/test/dssl2/ceiling.rkt") (lib "dssl2/test/dssl2/range.rkt") (lib "dssl2/test/dssl2/def.rkt") (lib "dssl2/test/dssl2/defstruct.rkt") (lib "dssl2/test/dssl2/cons-lib.rkt") (lib "dssl2/test/dssl2/plus-fail.rkt") (lib "dssl2/test/dssl2/file-io.rkt") (lib "dssl2/test/dssl2/proc-huh.rkt") (lib "dssl2/scribblings/expression-forms.scrbl") (lib "dssl2/private/object.rkt") (lib "dssl2/test/dssl2/error-fail.rkt") (lib "dssl2/test/dssl2/assert-error.rkt") (lib "dssl2/test/dssl2/len.rkt") (lib "dssl2/test/dssl2/vector-comprehension.rkt") (lib "dssl2/language.rkt") (lib "dssl2/test/dssl2/dll-for-each.rkt") (lib "dssl2/private/provide.rkt") (lib "dssl2/test/dssl2/container-interface.rkt") (lib "dssl2/test/dssl2/explode.rkt") (lib "dssl2/test/dssl2/dll-nested-struct.rkt") (lib "dssl2/test/dssl2/promise.rkt") (lib "dssl2/test/dssl2/interface.rkt") (lib "dssl2/test/dssl2/parametric.rkt") (lib "dssl2/lib/cons.rkt") (lib "dssl2/test/dssl2/break.rkt") (lib "dssl2/test/dssl2/subtract.rkt") (lib "dssl2/private/drracket/line-summary.rkt") (lib "dssl2/private/drracket/comment.rkt") (lib "dssl2/lib/ring_buffer.rkt") (lib "dssl2/test/dssl2/recursive-interface.rkt") (lib "dssl2/test/dssl2/print-cycle.rkt") (lib "dssl2/private/drracket/editor-helpers.rkt") (lib "dssl2/test/dssl2/negative-huh.rkt") (lib "dssl2/test/dssl2/fifo.rkt") (lib "dssl2/test/dssl2/struct-set.rkt") (lib "dssl2/test/dssl2/if4.rkt") (lib "dssl2/private/drracket/color-lexer.rkt") (lib "dssl2/test/dssl2/and.rkt") (lib "dssl2/test/dssl2/class-posn.rkt") (lib "dssl2/test/dssl2/positive-huh.rkt") (lib "dssl2/test/dssl2/posn-assign-fail.rkt") (lib "dssl2/private/printer.rkt") (lib "dssl2/test/dssl2/num-huh.rkt") (lib "dssl2/private/syntax.rkt") (lib "dssl2/test/dssl2/float.rkt") (lib "dssl2/lib/promise.rkt") (lib "dssl2/test/dssl2/even-huh.rkt") (lib "dssl2/private/drracket/test-helpers.rkt") (lib "dssl2/test/dssl2/vec-huh.rkt") (lib "dssl2/test/dssl2/default-timeout-slow.rkt") (lib "dssl2/scribblings/built-ins.scrbl") (lib "dssl2/private/operators.rkt") (lib "dssl2/test/dssl2/strlen.rkt") (lib "dssl2/test/dssl2/int-huh.rkt") (lib "dssl2/test/dssl2/object-equality.rkt") (lib "dssl2/test/dssl2/filter.rkt") (lib "dssl2/test/dssl2/expt.rkt") (lib "dssl2/lib/sbox_hash.rkt") (lib "dssl2/private/lexer.rkt") (lib "dssl2/scribblings/dssl2.scrbl") (lib "dssl2/test/dssl2/stream.rkt") (lib "dssl2/test/dssl2/int-huh-ctc.rkt") (lib "dssl2/test/dssl2/test.rkt") (lib "dssl2/private/class-system.rkt") (lib "dssl2/test/dssl2/make-vector.rkt") (lib "dssl2/test/dssl2/char.rkt") (lib "dssl2/test/dssl2/modulo.rkt") (lib "dssl2/scribblings/sbox_hash.scrbl") (lib "dssl2/test/dssl2/dll.rkt") (lib "dssl2/private/rte.rkt") (lib "dssl2/test/dssl2/if3.rkt") (lib "dssl2/private/find-lib.rkt") (lib "dssl2/lib/adt.rkt") (lib "dssl2/test/dssl2/plus.rkt") (lib "dssl2/test/dssl2/dll-nested-class.rkt") (lib "dssl2/test/dssl2/bitwise.rkt") (lib "dssl2/test/dssl2/continue.rkt") (lib "dssl2/test/run-dssl2-tests.rkt") (lib "dssl2/test/dssl2/max-min.rkt") (lib "dssl2/main.rkt") (lib "dssl2/private/defines.rkt") (lib "dssl2/test/dssl2/floor.rkt") (lib "dssl2/test/dssl2/if6.rkt") (lib "dssl2/test/dssl2/while.rkt") (lib "dssl2/test/dssl2/posn.rkt") (lib "dssl2/test/dssl2/struct-get.rkt") (lib "dssl2/test/dssl2/comparisons.rkt") (lib "dssl2/lib/dll.rkt") (lib "dssl2/test/dssl2/matrix.rkt") (lib "dssl2/private/errors.rkt") (lib "dssl2/lib/round.rkt") (lib "dssl2/test/dssl2/int.rkt") (lib "dssl2/test/dssl2/implode.rkt") (lib "dssl2/lib/uint64.rkt") (lib "dssl2/lang/reader.rkt") (lib "dssl2/test/dssl2/equal.rkt") (lib "dssl2/test/dssl2/timeout.rkt") (lib "dssl2/scribblings/common.rkt") (lib "dssl2/private/stxparams.rkt") (lib "dssl2/test/dssl2/object-printer.rkt") (lib "dssl2/private/singletons.rkt") (lib "dssl2/scribblings/contracts.scrbl") (lib "dssl2/test/dssl2/timeout-slow.rkt") (lib "dssl2/private/util.rkt") (lib "dssl2/scribblings/lexical-syntax.scrbl") (lib "dssl2/test/dssl2/struct-init.rkt") (lib "dssl2/test/dssl2/cells.rkt") (lib "dssl2/test/dssl2/odd-huh.rkt") (lib "dssl2/private/contract.rkt") (lib "dssl2/test/dssl2/eq.rkt") (lib "dssl2/test/dssl2/format.rkt") (lib "dssl2/test/parser.rkt"))) (name . "dssl2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (author:stamourv@racket-lang.org . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl2.git#release") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "759e25da5934505e0225449d1933ebdb499a1ccd") (source . "https://github.com/tov/dssl2.git#release") (source_url . "https://github.com/tov/dssl2.git#release"))))))) ("dynamic-ffi" . #hasheq((author . "dbenoit@fedoraproject.org") (authors . ("dbenoit@fedoraproject.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dynamic-ffi" "doc/dynamic-ffi@dynamic-ffi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dynamic-ffi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dynamic-ffi.txt"))) (checksum . "a1ab6473c8911226bd97fffa19b31c0bc641ca12") (checksum-error . #f) (collection . "dynamic-ffi") (conflicts . ()) (date-added . 1558910128) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-lib" "at-exp-lib" "scribble-lib" "scribble-doc")) (description . "Dynamically generate FFI bindings to C, and write C code inline in your Racket programs.") (implies . ()) (modules . ((lib "dynamic-ffi/cached.rkt") (lib "dynamic-ffi/main.rkt") (lib "dynamic-ffi/ffi.rkt") (lib "dynamic-ffi/test/inline.rkt") (lib "dynamic-ffi/runtime-paths.rkt") (lib "dynamic-ffi/common.rkt") (lib "dynamic-ffi/export.rkt") (lib "dynamic-ffi/scribblings/dynamic-ffi.scrbl") (lib "dynamic-ffi/meta.rkt") (lib "dynamic-ffi/make.rkt") (lib "dynamic-ffi/test/manual/generate.rkt") (lib "dynamic-ffi/unsafe.rkt") (lib "dynamic-ffi/test/typedef-struct.rkt") (lib "dynamic-ffi/inline.rkt") (lib "dynamic-ffi/test/libc.rkt"))) (name . "dynamic-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:dbenoit@fedoraproject.org . #t) (dynamic . #t) (ffi . #t) (language . #t) (programming . #t) (ring:1 . #t))) (source . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1") (tags . ("C" "dynamic" "ffi" "language" "programming")) (versions . #hash((default . #hasheq((checksum . "a1ab6473c8911226bd97fffa19b31c0bc641ca12") (source . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1") (source_url . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1"))))))) ("dynamic-xml" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dynamic-xml" "doc/dynamic-xml@dynamic-xml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dynamic-xml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dynamic-xml.txt"))) (checksum . "0e41c5b26fd0780604d0ecdc27d1e2c40faceb97") (checksum-error . #f) (collection . "dynamic-xml") (conflicts . ()) (date-added . 1586409840) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Apply keyword procedures in a given Racket namespace using X-expressions.") (implies . ()) (modules . ((lib "dynamic-xml/scribblings/dynamic-xml.scrbl") (lib "dynamic-xml/main.rkt"))) (name . "dynamic-xml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (dynamic . #t) (keywords . #t) (ring:1 . #t) (x-expressions . #t) (xexpr . #t) (xml . #t))) (source . "https://github.com/zyrolasting/dynamic-xml.git") (tags . ("dynamic" "keywords" "x-expressions" "xexpr" "xml")) (versions . #hash((default . #hasheq((checksum . "0e41c5b26fd0780604d0ecdc27d1e2c40faceb97") (source . "https://github.com/zyrolasting/dynamic-xml.git") (source_url . "https://github.com/zyrolasting/dynamic-xml.git"))))))) ("ebml" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ebml" "doc/ebml@ebml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebml.txt"))) (checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A library for reading and writing EBML files.") (implies . ()) (modules . ((lib "ebml/main.rkt") (lib "ebml/reader.rkt") (lib "ebml/ebml.scrbl") (lib "ebml/writer.rkt") (lib "ebml/examples/rust-ebml-parser.rkt") (lib "ebml/examples/sexp-ebml.rkt"))) (name . "ebml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (data . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/ebml/tree/master") (tags . ("data" "io")) (versions . #hash((default . #hasheq((checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (source . "github://github.com/jbclements/ebml/master") (source_url . "http://github.com/jbclements/ebml/tree/master"))))))) ("ebuild" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633149233) (dependencies . ("base" "ebuild-doc" "ebuild-lib" "ebuild-modify-lang" "ebuild-templates" "ebuild-test" "ebuild-tools" "ebuild-transformers")) (description . "Library to ease automatic ebuild creation. Metapackage.") (implies . ()) (modules . ()) (name . "ebuild") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild"))))))) ("ebuild-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ebuild" "doc/ebuild@ebuild-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-doc.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633149185) (dependencies . ("base" "racket-doc" "net-doc" "scribble-lib" "ziptie-git" "ebuild-lib" "ebuild-templates" "ebuild-tools" "ebuild-transformers")) (description . "Library to ease automatic ebuild creation. Documentation.") (implies . ()) (modules . ((lib "ebuild/scribblings/tools.scrbl") (lib "ebuild/scribblings/about.scrbl") (lib "ebuild/scribblings/exported/manifest.scrbl") (lib "ebuild/scribblings/templates/gh.scrbl") (lib "ebuild/scribblings/exported/metadata.scrbl") (lib "ebuild/scribblings/templates.scrbl") (lib "ebuild/scribblings/tools/githost2metadata.scrbl") (lib "ebuild/scribblings/miscellaneous-tools.scrbl") (lib "ebuild/scribblings/classes/metadata.scrbl") (lib "ebuild/scribblings/tools/clean-versions.scrbl") (lib "ebuild/scribblings/transformers/githost.scrbl") (lib "ebuild/scribblings/transformers/uncache.scrbl") (lib "ebuild/scribblings/exported/ebuild.scrbl") (lib "ebuild/scribblings/tools/interactive.scrbl") (lib "ebuild/scribblings/templates/cargo.scrbl") (lib "ebuild/scribblings/tools/dispatcher.scrbl") (lib "ebuild/scribblings/templates/git.scrbl") (lib "ebuild/scribblings/tools/commit.scrbl") (lib "ebuild/scribblings/transformers/cflag.scrbl") (lib "ebuild/scribblings/repository-maintenance-tools.scrbl") (lib "ebuild/scribblings/classes/repository.scrbl") (lib "ebuild/scribblings/transformers/metadata.scrbl") (lib "ebuild/scribblings/classes/package.scrbl") (lib "ebuild/scribblings/package-creation-tools.scrbl") (lib "ebuild/scribblings/exported/package.scrbl") (lib "ebuild/scribblings/ebuild.scrbl") (lib "ebuild/scribblings/classes/ebuild.scrbl") (lib "ebuild/scribblings/classes.scrbl") (lib "ebuild/scribblings/external.scrbl") (lib "ebuild/scribblings/tools/common-options.rkt") (lib "ebuild/scribblings/exported.scrbl") (lib "ebuild/scribblings/tools/fix-head.scrbl") (lib "ebuild/scribblings/tools/modify-metadata.scrbl") (lib "ebuild/scribblings/tools/manifest.scrbl") (lib "ebuild/scribblings/exported/repository.scrbl") (lib "ebuild/scribblings/tools/url2pkg.scrbl") (lib "ebuild/scribblings/tools/pkgname.scrbl") (lib "ebuild/scribblings/transformers/src-uri.scrbl") (lib "ebuild/scribblings/transformers.scrbl") (lib "ebuild/scribblings/templates/elisp.scrbl") (lib "ebuild/scribblings/main.scrbl") (lib "ebuild/scribblings/exported/sh-function.scrbl"))) (name . "ebuild-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-doc") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-doc") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-doc"))))))) ("ebuild-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-lib.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633148600) (dependencies . ("base" "typed-racket-lib" "reprovide-lang-lib" "threading-lib")) (description . "Library to ease automatic ebuild creation. Core.") (implies . ()) (modules . ((lib "ebuild/base/metadata-base.rkt") (lib "ebuild/private/metadata/empty-tags.rkt") (lib "ebuild/main.rkt") (lib "ebuild/interface/package-interface.rkt") (lib "ebuild/lang/reader.rkt") (lib "ebuild/private/repository/conf.rkt") (lib "ebuild/interface/create-interface.rkt") (lib "ebuild/interface/save-interface.rkt") (lib "ebuild/private/ebuild/default-values.rkt") (lib "ebuild/base/package-base.rkt") (lib "ebuild/repository.rkt") (lib "ebuild/version.rkt") (lib "ebuild/private/metadata/upstream.rkt") (lib "ebuild/package.rkt") (lib "ebuild/sh-function.rkt") (lib "ebuild/break-string.rkt") (lib "ebuild/interface/show-interface.rkt") (lib "ebuild/private/metadata/maintainer.rkt") (lib "ebuild/interface/repository-interface.rkt") (lib "ebuild/private/metadata/slots.rkt") (lib "ebuild/manifest.rkt") (lib "ebuild/private/ebuild/variable.rkt") (lib "ebuild/private/ebuild/unroll.rkt") (lib "ebuild/private/repository/layout.rkt") (lib "ebuild/private/ebuild/generic.rkt") (lib "ebuild/class-utils.rkt") (lib "ebuild/private/metadata/elsenull.rkt") (lib "ebuild/interface/ebuild-interface.rkt") (lib "ebuild/private/ebuild/unroll-stx.rkt") (lib "ebuild/private/ebuild/header.rkt") (lib "ebuild/private/metadata/element.rkt") (lib "ebuild/interface/metadata-interface.rkt") (lib "ebuild/private/metadata/localized.rkt") (lib "ebuild/private/ebuild/src-uri.rkt") (lib "ebuild/metadata.rkt") (lib "ebuild/ebuild.rkt") (lib "ebuild/private/metadata/longdescription.rkt") (lib "ebuild/private/ebuild/variable-stx.rkt") (lib "ebuild/private/package/version.rkt") (lib "ebuild/base/repository-base.rkt") (lib "ebuild/base/ebuild-base.rkt") (lib "ebuild/private/metadata/typed-xml.rkt") (lib "ebuild/private/ebuild/constraint-flag.rkt") (lib "ebuild/private/metadata/use.rkt") (lib "ebuild/private/metadata/pkgmetadata.rkt"))) (name . "ebuild-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-lib") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-lib") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-lib"))))))) ("ebuild-modify-lang" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-modify-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-modify-lang.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1660777550) (dependencies . ("base" "ebuild-lib")) (description . "Library to ease automatic ebuild creation. Modification DSL.") (implies . ()) (modules . ((lib "ebuild/modify/lang/reader.rkt") (lib "ebuild/modify/lang.rkt"))) (name . "ebuild-modify-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-modify-lang") (tags . ("gentoo")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-modify-lang") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-modify-lang"))))))) ("ebuild-templates" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-templates.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-templates.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633148875) (dependencies . ("base" "threading-lib" "ebuild-lib")) (description . "Library to ease automatic ebuild creation. Additional templates.") (implies . ()) (modules . ((lib "ebuild/templates/git.rkt") (lib "ebuild/templates/gh.rkt") (lib "ebuild/templates/elisp.rkt") (lib "ebuild/templates/cargo.rkt"))) (name . "ebuild-templates") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-templates") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-templates") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-templates"))))))) ("ebuild-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-test.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633149121) (dependencies . ("base" "rackunit-lib" "threading-lib" "upi-lib" "uuid" "ebuild-lib" "ebuild-modify-lang" "ebuild-templates" "ebuild-tools" "ebuild-transformers")) (description . "Library to ease automatic ebuild creation. Tests.") (implies . ()) (modules . ((lib "ebuild/tests/unit/templates/template-fail-test.rkt") (lib "ebuild/tests/unit/tools/fix-head-test.rkt") (lib "ebuild/tests/unit/metadata/longdescription-test.rkt") (lib "ebuild/tests/unit/metadata/slots-test.rkt") (lib "ebuild/tests/unit/ebuild/cflag-test.rkt") (lib "ebuild/tests/integration/ebuild/simple-test.rkt") (lib "ebuild/tests/unit/metadata/localized-test.rkt") (lib "ebuild/tests/unit/repository/conf-test.rkt") (lib "ebuild/tests/unit/ebuild/unroll-test.rkt") (lib "ebuild/tests/unit/transformers/cflag-test.rkt") (lib "ebuild/tests/integration/templates/frankenstein/frankenstein-test.rkt") (lib "ebuild/tests/unit/metadata/use-test.rkt") (lib "ebuild/tests/unit/metadata/upstream-test.rkt") (lib "ebuild/tests/unit/ebuild/variable-test.rkt") (lib "ebuild/tests/integration/modify-lang/simple-modify-1.rkt") (lib "ebuild/tests/unit/metadata/elsenull-test.rkt") (lib "ebuild/tests/unit/manifest/dist-test.rkt") (lib "ebuild/tests/test.rkt") (lib "ebuild/tests/unit/package/version-test.rkt") (lib "ebuild/tests/integration/modify-lang/simple-modify-0.rkt") (lib "ebuild/tests/integration/templates/cargo/ripgrep-test.rkt") (lib "ebuild/tests/integration/repository/repoman-metadata-test.rkt") (lib "ebuild/tests/integration/modify-lang/simple-modify-2.rkt") (lib "ebuild/tests/unit/metadata/maintainer-test.rkt") (lib "ebuild/tests/unit/transformers/githost-test.rkt") (lib "ebuild/tests/unit/repository/layout-test.rkt") (lib "ebuild/tests/integration/metadata/xml-in-test.rkt") (lib "ebuild/tests/integration/modify-lang/simple-test.rkt") (lib "ebuild/tests/integration/repository/repoman-helper.rkt") (lib "ebuild/tests/unit/manifest/checksum-test.rkt") (lib "ebuild/tests/unit/sh-function/string-test.rkt") (lib "ebuild/tests/unit/metadata/element-test.rkt") (lib "ebuild/tests/unit/manifest/manifest-test.rkt") (lib "ebuild/tests/unit/ebuild/unroll-stx-test.rkt") (lib "ebuild/tests/integration/repository/repoman-ebuild-test.rkt") (lib "ebuild/tests/unit/ebuild/generic-test.rkt") (lib "ebuild/tests/unit/tools/clean-versions-test.rkt") (lib "ebuild/tests/unit/package/cyclone-test.rkt") (lib "ebuild/tests/integration/ebuild/conditional-depend/conditional-depend-ebuild-test.rkt"))) (name . "ebuild-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (ring:1 . #t) (tests . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-test") (tags . ("ebuild" "gentoo" "tests")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-test") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-test"))))))) ("ebuild-tools" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-tools.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633149070) (dependencies . ("base" "typed-racket-lib" "threading-lib" "upi-lib" "ziptie-git" "ebuild-lib" "ebuild-templates" "ebuild-transformers")) (description . "Library to ease automatic ebuild creation. Tools.") (implies . ()) (modules . ((lib "ebuild/tools/private/modify-metadata.rkt") (lib "ebuild/tools/manifest-exe.rkt") (lib "ebuild/tools/private/fix-head.rkt") (lib "ebuild/tools/fix-head-exe.rkt") (lib "ebuild/tools/private/githost2metadata.rkt") (lib "ebuild/tools/private/url2pkg.rkt") (lib "ebuild/tools/url2pkg-exe.rkt") (lib "ebuild/tools/clean-versions-exe.rkt") (lib "ebuild/tools/private/clean-versions.rkt") (lib "ebuild/tools/private/interactive/input.rkt") (lib "ebuild/tools/private/pkgname.rkt") (lib "ebuild/tools/pkgname-exe.rkt") (lib "ebuild/tools/private/commit.rkt") (lib "ebuild/tools/dispatcher-exe.rkt") (lib "ebuild/tools/private/manifest.rkt") (lib "ebuild/tools/commit-exe.rkt") (lib "ebuild/tools/modify-metadata-exe.rkt") (lib "ebuild/tools/githost2metadata-exe.rkt") (lib "ebuild/tools/interactive-exe.rkt"))) (name . "ebuild-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-tools") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-tools") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-tools"))))))) ("ebuild-transformers" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild-transformers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild-transformers.txt"))) (checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633148956) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "threading-lib" "upi-lib" "ebuild-lib")) (description . "Library to ease automatic ebuild creation. Additional helper libraries.") (implies . ()) (modules . ((lib "ebuild/transformers/uncache.rkt") (lib "ebuild/transformers/metadata.rkt") (lib "ebuild/transformers/cflag.rkt") (lib "ebuild/transformers/githost.rkt") (lib "ebuild/transformers/src-uri.rkt") (lib "ebuild/transformers/private/metadata.rkt"))) (name . "ebuild-transformers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-transformers") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "90537e7002cbad2649d19b97a696e0dd7029af6c") (source . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-transformers") (source_url . "https://gitlab.com/gentoo-racket/racket-ebuild.git?path=src%2Febuild-transformers"))))))) ("ec" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ec" "doc/ec@ec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ec.txt"))) (checksum . "81d6fbe1852d3b20cffa651e6062dd1aca146018") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597682543) (dependencies . ("base" "math-lib" "binaryio" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "crypto-lib" "rackunit-typed")) (description . "Provides elliptic curve arithmetic, point (de)serialization, and parameters for popular cryptographic elliptic curves.") (implies . ()) (modules . ((lib "ec/typed-binaryio.rkt") (lib "ec/main.rkt") (lib "ec/sec.rkt") (lib "ec/test.rkt") (lib "ec/ec.rkt") (lib "ec/data.rkt") (lib "ec/curves.rkt") (lib "ec/ec.scrbl"))) (name . "ec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (crypto . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/marckn0x/ec.git") (tags . ("crypto" "math")) (versions . #hash((default . #hasheq((checksum . "81d6fbe1852d3b20cffa651e6062dd1aca146018") (source . "https://github.com/marckn0x/ec.git") (source_url . "https://github.com/marckn0x/ec.git"))))))) ("echonest" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/echonest.txt") (test-failure-log . "server/built/test-fail/echonest.txt") (test-success-log . #f))) (checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "wffi" "rackjure" "rackunit-lib")) (description . "Wrapper for The Echo Nest web API.") (implies . ()) (modules . ((lib "echonest/main.rkt") (lib "echonest/test.rkt"))) (name . "echonest") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:racket@greghendershott.com . #t) (music . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/greghendershott/echonest/tree/master") (tags . ("audio" "music" "web")) (versions . #hash((default . #hasheq((checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (source . "github://github.com/greghendershott/echonest/master") (source_url . "http://github.com/greghendershott/echonest/tree/master"))))))) ("eclass2scrbl" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "eclass2scrbl" "doc/eclass2scrbl@eclass2scrbl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eclass2scrbl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eclass2scrbl.txt"))) (checksum . "3a7d7348d40719056acc2753995f9ba4d40913e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1660443787) (dependencies . ("base" "brag-lib" "threading-lib" "upi-lib" "scribble-lib" "ziptie-git")) (description . "Convert Gentoo Eclasses to Scribble documents.") (implies . ()) (modules . ((lib "eclass2scrbl/tokenize.rkt") (lib "eclass2scrbl/content.rkt") (lib "eclass2scrbl/scribblings/cli.scrbl") (lib "eclass2scrbl/scribblings/tutorial.scrbl") (lib "eclass2scrbl/main.rkt") (lib "eclass2scrbl/scribblings/ref.scrbl") (lib "eclass2scrbl/tests/tokenize-test.rkt") (lib "eclass2scrbl/scribblings/main.scrbl") (lib "eclass2scrbl/version.rkt") (lib "eclass2scrbl/parse.rkt") (lib "eclass2scrbl/interpret.rkt"))) (name . "eclass2scrbl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/gentoo-racket/racket-eclass2scrbl.git") (tags . ("gentoo")) (versions . #hash((default . #hasheq((checksum . "3a7d7348d40719056acc2753995f9ba4d40913e5") (source . "https://gitlab.com/gentoo-racket/racket-eclass2scrbl.git") (source_url . "https://gitlab.com/gentoo-racket/racket-eclass2scrbl.git"))))))) ("ecmascript" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ecmascript" "doc/ecmascript@ecmascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ecmascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ecmascript.txt"))) (checksum . "69fcfa42856ea799ff9d9d63a60eaf1b1783fe50") (checksum-error . #f) (collection . "ecmascript") (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "ragg" "racket-doc" "scribble-lib")) (description . "Parser, runtime and #lang for ECMAScript") (implies . ()) (modules . ((lib "ecmascript/init.rkt") (lib "ecmascript/types.rkt") (lib "ecmascript/convert.rkt") (lib "ecmascript/lang/compile.rkt") (lib "ecmascript/scribblings/statements.scrbl") (lib "ecmascript/scribblings/functions.scrbl") (lib "ecmascript/lang/runtime-config.rkt") (lib "ecmascript/private/date.rkt") (lib "ecmascript/lib/object.rkt") (lib "ecmascript/main.rkt") (lib "ecmascript/lang/reader.rkt") (lib "ecmascript/lib/error.rkt") (lib "ecmascript/lang/operator.rkt") (lib "ecmascript/lib/number.rkt") (lib "ecmascript/lib/math.rkt") (lib "ecmascript/lib/string.rkt") (lib "ecmascript/function.rkt") (lib "ecmascript/lang/read.rkt") (lib "ecmascript/eval.rkt") (lib "ecmascript/lib/array.rkt") (lib "ecmascript/private/this.rkt") (lib "ecmascript/lib/regexp.rkt") (lib "ecmascript/parse.rkt") (lib "ecmascript/lang/literal.rkt") (lib "ecmascript/lib/util.rkt") (lib "ecmascript/private/object.rkt") (lib "ecmascript/lang/statement.rkt") (lib "ecmascript/run.rkt") (lib "ecmascript/scribblings/syntax.scrbl") (lib "ecmascript/private/error.rkt") (lib "ecmascript/lib/boolean.rkt") (lib "ecmascript/private/array.rkt") (lib "ecmascript/lang/lex.rkt") (lib "ecmascript/lang/grammar.rkt") (lib "ecmascript/scribblings/types.scrbl") (lib "ecmascript/scribblings/ecmascript.scrbl") (lib "ecmascript/object.rkt") (lib "ecmascript/scribblings/parsing.scrbl") (lib "ecmascript/scribblings/lit-op.scrbl") (lib "ecmascript/private/primitive.rkt") (lib "ecmascript/scribblings/lang.scrbl") (lib "ecmascript/lang/language-info.rkt") (lib "ecmascript/lang/helpers.rkt") (lib "ecmascript/lang/function.rkt") (lib "ecmascript/scribblings/sexpr.scrbl") (lib "ecmascript/private/function.rkt") (lib "ecmascript/private/global-object.rkt") (lib "ecmascript/private/environment.rkt") (lib "ecmascript/lang/environment.rkt") (lib "ecmascript/lib/function.rkt") (lib "ecmascript/ast.rkt"))) (name . "ecmascript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/lwhjp/ecmascript/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "69fcfa42856ea799ff9d9d63a60eaf1b1783fe50") (source . "git://github.com/lwhjp/ecmascript") (source_url . "http://github.com/lwhjp/ecmascript/tree/master"))))))) ("ee-lib" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ee-lib" "doc/ee-lib@ee-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ee-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ee-lib.txt"))) (checksum . "8439e79d90d705fa35eadacdfb02f7763c1c2eb9") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1561146824) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "drracket")) (description . "Utilities for defining embedded macro expanders") (implies . ()) (modules . ((lib "ee-lib/test/suspend/suspend-test.rkt") (lib "ee-lib/test/js.rkt") (lib "ee-lib/main.rkt") (lib "ee-lib/define.rkt") (lib "ee-lib/private/flip-intro-scope.rkt") (lib "ee-lib/test/splicing.rkt") (lib "ee-lib/persistent-id-table.rkt") (lib "ee-lib/test/same-binding.rkt") (lib "ee-lib/private/binding.rkt") (lib "ee-lib/scribblings/ee-lib.scrbl") (lib "ee-lib/private/lift-trampoline.rkt") (lib "ee-lib/test/jstest.rkt") (lib "ee-lib/test/phone-numbers-ee-lib.rkt") (lib "ee-lib/test/phone-numbers-basic.rkt") (lib "ee-lib/private/lift-disappeareds.rkt") (lib "ee-lib/errors.rkt") (lib "ee-lib/test/suspend/suspend.rkt") (lib "ee-lib/private/syntax-datum.rkt"))) (name . "ee-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/ee-lib.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8439e79d90d705fa35eadacdfb02f7763c1c2eb9") (source . "https://github.com/michaelballantyne/ee-lib.git") (source_url . "https://github.com/michaelballantyne/ee-lib.git"))))))) ("eff" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eff.txt"))) (checksum . "1c467f8f4f79706c3fcd5b4e429f74bcb2c7eaa7") (checksum-error . #f) (collection . "eff") (conflicts . ()) (date-added . 1609683961) (dependencies . ("base" "rackunit-lib")) (description . "A Library Provide Extensible Effects in Racket (Untyped).") (implies . ()) (modules . ((lib "eff/main.rkt") (lib "eff/value-effs.rkt") (lib "eff/scope.rkt") (lib "eff/tests/comprehension.rkt") (lib "eff/macro-helpers.rkt") (lib "eff/tests/state.rkt") (lib "eff/tests/scoped-value.rkt") (lib "eff/control-effs.rkt"))) (name . "eff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebraic-effects . #t) (author:1227847322@qq.com . #t) (extensible-effects . #t) (ring:1 . #t))) (source . "https://github.com/syntacticlosure/eff.git#untyped") (tags . ("algebraic-effects" "extensible-effects")) (versions . #hash((default . #hasheq((checksum . "1c467f8f4f79706c3fcd5b4e429f74bcb2c7eaa7") (source . "https://github.com/syntacticlosure/eff.git#untyped") (source_url . "https://github.com/syntacticlosure/eff.git#untyped"))))))) ("effection" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection.txt"))) (checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1579216433) (dependencies . ("effection-doc" "effection-lib")) (description . "A library for custom side effects.") (implies . ("effection-doc" "effection-lib")) (modules . ()) (name . "effection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (source . "https://github.com/rocketnia/effection.git?path=effection#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection#main"))))))) ("effection-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "effection" "doc/effection@effection-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-doc.txt"))) (checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217442) (dependencies . ("base" "parendown-lib" "scribble-lib")) (description . "A library for custom side effects. (doc)") (implies . ()) (modules . ((lib "effection/scribblings/effection.scrbl"))) (name . "effection-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-doc#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (source . "https://github.com/rocketnia/effection.git?path=effection-doc#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-doc#main"))))))) ("effection-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-lib.txt"))) (checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217467) (dependencies . ("base" "interconfection-lib" "lathe-comforts-lib" "parendown-lib")) (description . "A library for custom side effects. (lib)") (implies . ()) (modules . ((lib "effection/effects/base.rkt") (lib "effection/main.rkt"))) (name . "effection-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-lib#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (source . "https://github.com/rocketnia/effection.git?path=effection-lib#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-lib#main"))))))) ("effection-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-test.txt"))) (checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217501) (dependencies . ("base")) (description . "A library for custom side effects. (test)") (implies . ()) (modules . ()) (name . "effection-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-test#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "012c8ab1b45993770ed240cae0831f09574fe976") (source . "https://github.com/rocketnia/effection.git?path=effection-test#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-test#main"))))))) ("effects" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/effects.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effects.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effects.txt"))) (checksum . "e4e7cd99e120660b84baa6c7612995a528e8a1b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1558451028) (dependencies . ("base")) (description . "Delimited-continuation-based effects for Racket") (implies . ()) (modules . ((lib "effects/main.rkt"))) (name . "effects") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (effects . #t) (ring:1 . #t))) (source . "https://github.com/tonyg/racket-effects.git") (tags . ("effects")) (versions . #hash((default . #hasheq((checksum . "e4e7cd99e120660b84baa6c7612995a528e8a1b2") (source . "https://github.com/tonyg/racket-effects.git") (source_url . "https://github.com/tonyg/racket-effects.git"))))))) ("egal" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/egal.txt"))) (checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (checksum-error . #f) (collection . "egal") (conflicts . ()) (dependencies . ("base")) (description . "Henry Baker's egal") (implies . ()) (modules . ((lib "egal/main.rkt"))) (name . "egal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (comparison . #t) (equality . #t) (ring:1 . #t))) (source . "http://github.com/samth/egal/tree/master") (tags . ("comparison" "equality")) (versions . #hash((default . #hasheq((checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (source . "git://github.com/samth/egal") (source_url . "http://github.com/samth/egal/tree/master"))))))) ("ejs" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ejs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ejs.txt"))) (checksum . "6b8e74c48e98e1db0a02ddfe72eb44be9070112f") (checksum-error . #f) (collection . "ejs") (conflicts . ()) (date-added . 1607664649) (dependencies . ("base" "rackunit-lib")) (description . "EJS is exact JSON: A no-compromises implementation of RFC 8259 in which all numbers are rational") (implies . ()) (modules . ((lib "ejs/value.rkt") (lib "ejs/equal.rkt") (lib "ejs/render.rkt") (lib "ejs/util.rkt") (lib "ejs/main.rkt"))) (name . "ejs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/ejs.git") (tags . ("json")) (versions . #hash((default . #hasheq((checksum . "6b8e74c48e98e1db0a02ddfe72eb44be9070112f") (source . "https://github.com/jessealama/ejs.git") (source_url . "https://github.com/jessealama/ejs.git"))))))) ("ekans" . #hasheq((author . "kalxd@126.com") (authors . ("kalxd@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ekans" "doc/ekans@ekans/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ekans.txt") (test-failure-log . "server/built/test-fail/ekans.txt") (test-success-log . #f))) (checksum . "52d5acb0339dc38a6410f853957d57f90f566131") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1581862006) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "歌词下载器。") (implies . ()) (modules . ((lib "ekans/main-window/viewer-dialog.rkt") (lib "ekans/scribblings/generic.scrbl") (lib "ekans/base/main.rkt") (lib "ekans/main.rkt") (lib "ekans/base/action.rkt") (lib "ekans/site/netease.rkt") (lib "ekans/base/error.rkt") (lib "ekans/scribblings/install.scrbl") (lib "ekans/scribblings/ekans.scrbl") (lib "ekans/base/type.rkt") (lib "ekans/site/main.rkt") (lib "ekans/main-window/main.rkt") (lib "ekans/scribblings/site.scrbl") (lib "ekans/site/kugou.rkt"))) (name . "ekans") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalxd@126.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/kalxd/ekans.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "52d5acb0339dc38a6410f853957d57f90f566131") (source . "https://github.com/kalxd/ekans.git") (source_url . "https://github.com/kalxd/ekans.git"))))))) ("elasticsearch" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elasticsearch.txt") (test-failure-log . "server/built/test-fail/elasticsearch.txt") (test-success-log . #f))) (checksum . "160e2be024a21e7b043b93a5d45eaaca8e3713a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "elasticsearch/utils.rkt") (lib "elasticsearch/elasticsearch.rkt") (lib "elasticsearch/main.rkt") (lib "elasticsearch/tests.rkt"))) (name . "elasticsearch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/vishesh/elasticsearch.rkt/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "160e2be024a21e7b043b93a5d45eaaca8e3713a1") (source . "git://github.com/vishesh/elasticsearch.rkt") (source_url . "http://github.com/vishesh/elasticsearch.rkt/tree/master"))))))) ("elle" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/elle.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010555) (dependencies . ("elle-lib" "elle-doc")) (description . "The library and documentation for the Elle language, a Racket-like language with reimagined syntax and updated features.") (implies . ("elle-lib" "elle-doc")) (modules . ()) (name . "elle") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:kellysmith12.21@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle#release") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle#release"))))))) ("elle-doc" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "Elle" "doc/Elle@elle-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle-doc.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010398) (dependencies . ("base" "elle-lib" "scribble-lib" "racket-doc" "rebellion")) (description . "Documentation for the Elle language.") (implies . ()) (modules . ((lib "elle/scribblings/util.rkt") (lib "elle/scribblings/core-data/number.scrbl") (lib "elle/scribblings/core-data/text.scrbl") (lib "elle/scribblings/core-data.scrbl") (lib "elle/scribblings/core-forms.scrbl") (lib "elle/scribblings/generics.scrbl") (lib "elle/scribblings/core-data/symbol.scrbl") (lib "elle/scribblings/core-data/boolean.scrbl") (lib "elle/scribblings/core-forms/pattern.scrbl") (lib "elle/scribblings/core-data/keyword.scrbl") (lib "elle/scribblings/core-forms/local-binding.scrbl") (lib "elle/scribblings/core-forms/conditional.scrbl") (lib "elle/scribblings/core-data/result.scrbl") (lib "elle/scribblings/main.scrbl") (lib "elle/scribblings/core-forms/procedure.scrbl") (lib "elle/scribblings/core-data/optional.scrbl") (lib "elle/scribblings/core-data/character.scrbl") (lib "elle/scribblings/render-id-without-prefix.rkt") (lib "elle/scribblings/contracts.scrbl") (lib "elle/scribblings/core-forms/definition.scrbl") (lib "elle/scribblings/core-forms/type.scrbl"))) (name . "elle-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kellysmith12.21@gmail.com . #t) (docs . #t) (documentation . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle-doc#release") (tags . ("docs" "documentation")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle-doc#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle-doc#release"))))))) ("elle-lib" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle-lib.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010249) (dependencies . ("base" "rebellion")) (description . "The Elle language, a Racket-like language with reimagined syntax and updated features.") (implies . ()) (modules . ((lib "elle/base.rkt") (lib "elle/private/prebase/parameter.rkt") (lib "elle/private/prebase/let-lam.rkt") (lib "elle/private/option.rkt") (lib "elle/private/prebase/require-provide.rkt") (lib "elle/vector.rkt") (lib "elle/private/prebase/special.rkt") (lib "elle/private/ordering.rkt") (lib "elle/private/prebase/preprebase.rkt") (lib "elle/private/bytes.rkt") (lib "elle/private/procedure.rkt") (lib "elle/math.rkt") (lib "elle/list.rkt") (lib "elle/private/text.rkt") (lib "elle/private/char.rkt") (lib "elle/private/reader.rkt") (lib "elle/private/symbol.rkt") (lib "elle/hash.rkt") (lib "elle/private/prebase/module-body.rkt") (lib "elle/private/prebase/conditional.rkt") (lib "elle/private/boolean.rkt") (lib "elle/private/prebase/match.rkt") (lib "elle/prelude.rkt") (lib "elle/private/equality.rkt") (lib "elle/main.rkt") (lib "elle/private/number.rkt") (lib "elle/private/prebase/contract.rkt") (lib "elle/private/prebase.rkt") (lib "elle/private/result.rkt") (lib "elle/private/prebase/type.rkt") (lib "elle/private/keyword.rkt"))) (name . "elle-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kellysmith12.21@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle-lib#release") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle-lib#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle-lib#release"))))))) ("emcsabac" . #hasheq((author . "tbn@cs.brown.edu tn@cs.brown.edu") (authors . ("tbn@cs.brown.edu" "tn@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/emcsabac.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e14172de583770ebfae544cc40432738e429a4dc") (checksum-error . #f) (collection . "emcsabac") (conflicts . ()) (date-added . 1549286482) (dependencies . ("base" "rosette" "ocelot")) (description . "Basic ABAC analyzer for educational purposes") (implies . ()) (modules . ((lib "emcsabac/test/arbac1.rkt") (lib "emcsabac/test/errors.rkt") (lib "emcsabac/lexparse.rkt") (lib "emcsabac/test/arbac2.rkt") (lib "emcsabac/test/emcstests.rkt") (lib "emcsabac/runner.rkt") (lib "emcsabac/runtime-config.rkt") (lib "emcsabac/language-info.rkt") (lib "emcsabac/main.rkt") (lib "emcsabac/lang/reader.rkt"))) (name . "emcsabac") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:tbn@cs.brown.edu . #t) (author:tn@cs.brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/tnelson/emcsabac.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e14172de583770ebfae544cc40432738e429a4dc") (source . "https://github.com/tnelson/emcsabac.git") (source_url . "https://github.com/tnelson/emcsabac.git"))))))) ("emmy" . #hasheq((author . "a11ce@protonmail.com") (authors . ("a11ce@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/emmy.txt") (docs . (("main" "emmy" "doc/emmy@emmy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/emmy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/emmy.txt"))) (checksum . "826dccbb47c07c16f3d2769ef0d29d9232a23121") (checksum-error . #f) (collection . "emmy") (conflicts . ()) (date-added . 1661304381) (dependencies . ("base" "gui-lib" "htdp-lib" "rackunit-lib" "rackunit-typed" "srfi-lite-lib" "typed-racket-lib" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "emmy/define-type.rkt") (lib "emmy/define.rkt") (lib "emmy/struct.rkt") (lib "emmy/common-types.rkt") (lib "emmy/procedure.rkt") (lib "emmy/test/dagger-test.rkt") (lib "emmy/test/stack-test.rkt") (lib "emmy/enum.rkt") (lib "emmy/dagger.rkt") (lib "emmy/lang/reader.rkt") (lib "emmy/test/struct-props-typed-test.rkt") (lib "emmy/test/images.rkt") (lib "emmy/common-syntax.rkt") (lib "emmy/scribblings/emmy.scrbl") (lib "emmy/main.rkt") (lib "emmy/stack-tracing.rkt"))) (name . "emmy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:a11ce@protonmail.com . #t) (ring:1 . #t))) (source . "https://github.com/a11ce/emmy.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "826dccbb47c07c16f3d2769ef0d29d9232a23121") (source . "https://github.com/a11ce/emmy.git") (source_url . "https://github.com/a11ce/emmy.git"))))))) ("emo" . #hasheq((author . "setthemfree@privacyrequired.com") (authors . ("setthemfree@privacyrequired.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/emo.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/emo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/emo.txt"))) (checksum . "550c38950a76d2775dac2b889c31ef3227ef572f") (checksum-error . #f) (collection . "emo") (conflicts . ()) (date-added . 1654403079) (dependencies . ()) (description . "A very simple command line emoji finder") (implies . ()) (modules . ((lib "emo/emo.rkt"))) (name . "emo") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:setthemfree@privacyrequired.com . #t) (emoji . #t) (ring:1 . #t))) (source . "https://gitlab.com/yurb/emo.git#main") (tags . ("emoji")) (versions . #hash((default . #hasheq((checksum . "550c38950a76d2775dac2b889c31ef3227ef572f") (source . "https://gitlab.com/yurb/emo.git#main") (source_url . "https://gitlab.com/yurb/emo.git#main"))))))) ("emoji" . #hasheq((author . "whichxjy@gmail.com") (authors . ("whichxjy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "emoji" "doc/emoji@emoji/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/emoji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/emoji.txt"))) (checksum . "f1a1bececc0f6ed232bc3f77f1975818b457d9f8") (checksum-error . #f) (collection . "emoji") (conflicts . ()) (date-added . 1570896633) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Emoji terminal output for Racket") (implies . ()) (modules . ((lib "emoji/code-map.rkt") (lib "emoji/scribblings/emoji.scrbl") (lib "emoji/main.rkt"))) (name . "emoji") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:whichxjy@gmail.com . #t) (emoji . #t) (ring:1 . #t))) (source . "https://github.com/whichxjy/emoji.git?path=emoji") (tags . ("emoji")) (versions . #hash((default . #hasheq((checksum . "f1a1bececc0f6ed232bc3f77f1975818b457d9f8") (source . "https://github.com/whichxjy/emoji.git?path=emoji") (source_url . "https://github.com/whichxjy/emoji.git?path=emoji"))))))) ("endeavor" . #hasheq((author . "sunarch@protonmail.com") (authors . ("sunarch@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/endeavor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/endeavor.txt"))) (checksum . "d77f2e84ac83ee81cb12ab6953b62675ec7fa432") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1641894422) (dependencies . ("base")) (description . "((status \"pre-alpha\") (phase \"design\"))") (implies . ()) (modules . ((lib "endeavor/main.rkt"))) (name . "endeavor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sunarch@protonmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/sunarch/endeavor.git?path=endeavor#main") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "d77f2e84ac83ee81cb12ab6953b62675ec7fa432") (source . "https://github.com/sunarch/endeavor.git?path=endeavor#main") (source_url . "https://github.com/sunarch/endeavor.git?path=endeavor#main"))))))) ("english" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "english" "doc/english@english/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/english.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/english.txt"))) (checksum . "b03f3b203fdbc11780291e09a528ff0590b5802b") (checksum-error . #f) (collection . "english") (conflicts . ()) (date-added . 1569608713) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Utilities for generating English text strings -- e.g. plurals") (implies . ()) (modules . ((lib "english/scribblings/english.scrbl") (lib "english/main.rkt"))) (name . "english") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/english.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b03f3b203fdbc11780291e09a528ff0590b5802b") (source . "https://github.com/thoughtstem/english.git") (source_url . "https://github.com/thoughtstem/english.git"))))))) ("envlang" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/envlang.txt") (docs . (("main" "envlang" "doc/envlang@envlang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envlang.txt") (test-failure-log . "server/built/test-fail/envlang.txt") (test-success-log . #f))) (checksum . "c45bfb25492a5fbedad50c7ad530d82bbbb43e3c") (checksum-error . #f) (collection . "envlang") (conflicts . ()) (date-added . 1616342905) (dependencies . ("base" "rackunit-lib" "phc-toolkit" "base" "reprovide-lang-lib" "polysemy" "scribble-lib" "hyper-literate")) (description . "Prototype of a proof-of-concept for a language with first-class environments.") (implies . ()) (modules . ((lib "envlang/demo2-rkt.hl.rkt") (lib "envlang/tiny.rkt") (lib "envlang/racket-utils.rkt") (lib "envlang/envlang-rkt-for-test.rkt") (lib "envlang/test-tiny.rkt") (lib "envlang/envlang.rkt") (lib "envlang/scribblings/envlang.scrbl") (lib "envlang/test-tiny.hl.rkt") (lib "envlang/rkt.rkt") (lib "envlang/demo-rkt.hl.rkt") (lib "envlang/test-rkt.rkt"))) (name . "envlang") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:racket@suzanne.soy . #t) (deprecated . #t) (experimental . #t) (language . #t) (lazy . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/envlang/racket.git#main") (tags . ("app-syntax" "deprecated" "experimental" "language" "lazy" "sugar")) (versions . #hash((default . #hasheq((checksum . "c45bfb25492a5fbedad50c7ad530d82bbbb43e3c") (source . "https://github.com/envlang/racket.git#main") (source_url . "https://github.com/envlang/racket.git#main"))))))) ("envy" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "envy" "doc/envy@envy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/envy.txt"))) (checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "threading" "typed-racket-lib" "racket-doc" "scribble-lib" "sweet-exp" "typed-racket-doc" "typed-racket-more")) (description . "an environment variable manager for applications") (implies . ("typed-racket-lib")) (modules . ((lib "tests/envy/environment.rkt") (lib "envy/scribblings/util.rkt") (lib "envy/environment.rkt") (lib "envy/s-exp/lang/reader.rkt") (lib "envy/scribblings/lang-envy-sexp.scrbl") (lib "envy/main.rkt") (lib "envy/scribblings/envy.scrbl") (lib "envy/scribblings/api-reference.scrbl") (lib "envy/s-exp/lang/language.rkt") (lib "envy/private/coerce.rkt") (lib "envy/lang/reader.rkt") (lib "envy/scribblings/lang-envy.scrbl"))) (name . "envy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/envy/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (source . "git://github.com/lexi-lambda/envy") (source_url . "http://github.com/lexi-lambda/envy/tree/master"))))))) ("errortrace" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org" "florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "612995aff0111e6500f7da1ad93250db65633523") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("errortrace-lib" "errortrace-doc")) (implies . ("errortrace-lib" "errortrace-doc")) (modules . ()) (name . "errortrace") (ring . 1) (search-terms . #hasheq((:no-desc: . #t) (:no-tag: . #t) (author:florence@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/errortrace/?path=errortrace") (tags . ()) (versions . #hash((default . #hasheq((checksum . "612995aff0111e6500f7da1ad93250db65633523") (source . "git://github.com/racket/errortrace/?path=errortrace") (source_url . "git://github.com/racket/errortrace/?path=errortrace"))))))) ("errortrace-pkg" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "errortrace-pkg" "doc/errortrace-pkg@errortrace-pkg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/errortrace-pkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/errortrace-pkg.txt"))) (checksum . "67719cce30a4b675b58dc882e99ac2ca29e00ab7") (checksum-error . #f) (collection . "errortrace-pkg") (conflicts . ()) (date-added . 1596330208) (dependencies . ("base" "custom-load" "errortrace-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Errortrace installed packages") (implies . ()) (modules . ((lib "errortrace-pkg/scribblings/errortrace-pkg.scrbl") (lib "errortrace-pkg/lib.rkt") (lib "errortrace-pkg/main.rkt"))) (name . "errortrace-pkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (errortrace . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/errortrace-pkg.git") (tags . ("errortrace")) (versions . #hash((default . #hasheq((checksum . "67719cce30a4b675b58dc882e99ac2ca29e00ab7") (source . "https://github.com/sorawee/errortrace-pkg.git") (source_url . "https://github.com/sorawee/errortrace-pkg.git"))))))) ("esAsm" . #hasheq((author . "a11ce@protonmail.com") (authors . ("a11ce@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "esAsm" "doc/esAsm@esAsm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/esAsm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/esAsm.txt"))) (checksum . "895709fc4c46a8f366034497f2cadc3ae97d1c09") (checksum-error . #f) (collection . "esAsm") (conflicts . ()) (date-added . 1634523935) (dependencies . ("base" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "esAsm is a toy assembly-ish language.") (implies . ()) (modules . ((lib "esAsm/esAsm.rkt") (lib "esAsm/parser.rkt") (lib "esAsm/lang/reader.rkt") (lib "esAsm/scribblings/esAsm.scrbl"))) (name . "esAsm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:a11ce@protonmail.com . #t) (ring:1 . #t) (toy . #t))) (source . "https://github.com/a11ce/esAsm.git?path=racket") (tags . ("toy")) (versions . #hash((default . #hasheq((checksum . "895709fc4c46a8f366034497f2cadc3ae97d1c09") (source . "https://github.com/a11ce/esAsm.git?path=racket") (source_url . "https://github.com/a11ce/esAsm.git?path=racket"))))))) ("esc-vp21" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "esc-vp21" "doc/esc-vp21@esc-vp21/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/esc-vp21.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/esc-vp21.txt"))) (checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Epson ESC/VP21 Projector Control") (implies . ()) (modules . ((lib "esc/vp21.rkt") (lib "esc/vp-net.rkt") (lib "esc/esc-vp21.scrbl"))) (name . "esc-vp21") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-esc-vp21/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (source . "git://github.com/mordae/racket-esc-vp21") (source_url . "http://github.com/mordae/racket-esc-vp21/tree/master"))))))) ("euclid" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "euclid" "doc/euclid@euclid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/euclid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/euclid.txt"))) (checksum . "bd64f8f2c7e60ce6d435c7f0241cf3dfffe6d297") (checksum-error . #f) (collection . "euclid") (conflicts . ()) (date-added . 1621494454) (dependencies . ("rebellion" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Data structures and algorithms related to Euclidean geometry") (implies . ()) (modules . ((lib "euclid/plane/angle.rkt") (lib "euclid/private/scribble-evaluator-factory.rkt") (lib "euclid/solid.rkt") (lib "euclid/plane.rkt") (lib "euclid/plane/ray.scrbl") (lib "euclid/solid/point.rkt") (lib "euclid/plane.scrbl") (lib "euclid/plane/point.scrbl") (lib "euclid/plane/ray.rkt") (lib "euclid/main.scrbl") (lib "euclid/plane/angle.scrbl") (lib "euclid/plane/point.rkt") (lib "euclid/solid/point.scrbl") (lib "euclid/main.rkt") (lib "euclid/solid.scrbl"))) (name . "euclid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (geometry . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/euclid.git") (tags . ("data-structures" "geometry" "math")) (versions . #hash((default . #hasheq((checksum . "bd64f8f2c7e60ce6d435c7f0241cf3dfffe6d297") (source . "https://github.com/jackfirth/euclid.git") (source_url . "https://github.com/jackfirth/euclid.git"))))))) ("event" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "event-lang"))) (failure-log . "server/built/fail/event.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5c31cb32a816b0b23af2905bf25c7c3b69bd36cb") (checksum-error . #f) (collection . "event") (conflicts . ()) (date-added . 1599023999) (dependencies . ("algebraic" "base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Synchronizable event programming") (implies . ()) (modules . ((lib "event/scribblings/event-lang-includes.rkt") (lib "event/main.rkt") (lib "event/gate.rkt") (lib "event/scribblings/event-lang.scrbl"))) (name . "event") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-event.git") (tags . ("concurrency" "experimental")) (versions . #hash((default . #hasheq((checksum . "5c31cb32a816b0b23af2905bf25c7c3b69bd36cb") (source . "https://github.com/dedbox/racket-event.git") (source_url . "https://github.com/dedbox/racket-event.git"))))))) ("eventfd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "eventfd" "doc/eventfd@eventfd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eventfd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eventfd.txt"))) (checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Linux eventfd support") (implies . ()) (modules . ((lib "eventfd/eventfd.scrbl") (lib "eventfd/private/ffi.rkt") (lib "eventfd/main.rkt"))) (name . "eventfd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-eventfd/tree/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (source . "github://github.com/mordae/racket-eventfd/master") (source_url . "http://github.com/mordae/racket-eventfd/tree/master"))))))) ("exact-decimal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "exact-decimal-lang" "doc/exact-decimal-lang@exact-decimal-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/exact-decimal-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/exact-decimal-lang.txt"))) (checksum . "434723f8675944bc3884c6a19327ce5ff68d5f70") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension that reads decimals as exact rationals") (implies . ()) (modules . ((lib "exact-decimal/lang/runtime-config.rkt") (lib "exact-decimal/docs/exact-decimal-lang.scrbl") (lib "exact-decimal/lang/language-info.rkt") (lib "exact-decimal/tests/test.rkt") (lib "exact-decimal/lang/reader.rkt"))) (name . "exact-decimal-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/exact-decimal-lang/tree/master") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "434723f8675944bc3884c6a19327ce5ff68d5f70") (source . "git://github.com/AlexKnauth/exact-decimal-lang") (source_url . "http://github.com/AlexKnauth/exact-decimal-lang/tree/master"))))))) ("expander" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/expander.txt") (test-failure-log . "server/built/test-fail/expander.txt") (test-success-log . #f))) (checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (checksum-error . #f) (collection . "expander") (conflicts . ()) (dependencies . ("base" "zo-lib" "compiler-lib" "at-exp-lib")) (description . "Racket's implementation of macros, modules, and top-level evaluation") (implies . ()) (modules . ((lib "expander/read/coerce-key.rkt") (lib "expander/read/delimiter.rkt") (lib "expander/read/hash.rkt") (lib "expander/compile/multi-top.rkt") (lib "expander/syntax/read-syntax.rkt") (lib "expander/demo.rkt") (lib "expander/extract/save-and-report.rkt") (lib "expander/extract/gc-defn.rkt") (lib "expander/expand/main.rkt") (lib "expander/run.rkt") (lib "expander/compile/write-linklet.rkt") (lib "expander/read/consume.rkt") (lib "expander/boot/kernel.rkt") (lib "expander/common/inline.rkt") (lib "expander/expand/dup-check.rkt") (lib "expander/common/module-path.rkt") (lib "expander/eval/module-read.rkt") (lib "expander/syntax/match.rkt") (lib "expander/boot/expobs-primitive.rkt") (lib "expander/read/language.rkt") (lib "expander/namespace/module.rkt") (lib "expander/read/extension.rkt") (lib "expander/expand/local-expand.rkt") (lib "expander/expand/env.rkt") (lib "expander/compile/linklet.rkt") (lib "expander/expand/syntax-id-error.rkt") (lib "expander/common/module-path-intern.rkt") (lib "expander/read/string.rkt") (lib "expander/common/phase.rkt") (lib "expander/namespace/variable-reference.rkt") (lib "expander/syntax/datum-map.rkt") (lib "expander/read/constant.rkt") (lib "expander/compile/serialize-state.rkt") (lib "expander/eval/collection.rkt") (lib "expander/expand/log.rkt") (lib "expander/eval/top-level-instance.rkt") (lib "expander/boot/read-primitive.rkt") (lib "expander/run/cache.rkt") (lib "expander/read/wrap.rkt") (lib "expander/extract/flatten.rkt") (lib "expander/bootstrap-demo.rkt") (lib "expander/eval/multi-top.rkt") (lib "expander/syntax/module-binding.rkt") (lib "expander/syntax/mapped-name.rkt") (lib "expander/common/parse-module-path.rkt") (lib "expander/namespace/inspector.rkt") (lib "expander/expand/binding-for-transformer.rkt") (lib "expander/bootstrap-run.rkt") (lib "expander/read/symbol-or-number.rkt") (lib "expander/namespace/provide-for-api.rkt") (lib "expander/expand/stop-ids.rkt") (lib "expander/common/intern.rkt") (lib "expander/expand/lift-key.rkt") (lib "expander/expand/module-prompt.rkt") (lib "expander/read/digit.rkt") (lib "expander/eval/module-cache.rkt") (lib "expander/run/linklet-operation.rkt") (lib "expander/compile/module-use.rkt") (lib "expander/expand/top.rkt") (lib "expander/syntax/cache.rkt") (lib "expander/read/primitive-parameter.rkt") (lib "expander/syntax/weaker-inspector.rkt") (lib "expander/compile/top.rkt") (lib "expander/compile/header.rkt") (lib "expander/compile/instance.rkt") (lib "expander/host/correlate-syntax.rkt") (lib "expander/compile/version-bytes.rkt") (lib "expander/host/linklet.rkt") (lib "expander/syntax/local-binding.rkt") (lib "expander/expand/already-expanded.rkt") (lib "expander/compile/correlated-linklet.rkt") (lib "expander/common/reflect-hash.rkt") (lib "expander/boot/utils-primitive.rkt") (lib "expander/extract/module.rkt") (lib "expander/read/sequence.rkt") (lib "expander/extract/link.rkt") (lib "expander/eval/top.rkt") (lib "expander/boot/linklet-primitive.rkt") (lib "expander/extract/c-encode.rkt") (lib "expander/extract/prune-name.rkt") (lib "expander/extract/symbol.rkt") (lib "expander/syntax/property.rkt") (lib "expander/expand/syntax-local.rkt") (lib "expander/eval/reflect.rkt") (lib "expander/extract/decompile.rkt") (lib "expander/extract/check-and-report.rkt") (lib "expander/compile/multi-top-data.rkt") (lib "expander/eval/direct.rkt") (lib "expander/compile/serialize.rkt") (lib "expander/eval/root-context.rkt") (lib "expander/compile/reserved-symbol.rkt") (lib "expander/expand/apply-transformer.rkt") (lib "expander/read/whitespace.rkt") (lib "expander/syntax/serialize.rkt") (lib "expander/syntax/api-taint.rkt") (lib "expander/expand/liberal-def-ctx.rkt") (lib "expander/common/performance.rkt") (lib "expander/compile/self-quoting.rkt") (lib "expander/expand/save-and-restore.rkt") (lib "expander/namespace/provided.rkt") (lib "expander/read/quote.rkt") (lib "expander/eval/load.rkt") (lib "expander/read/char.rkt") (lib "expander/compile/eager-instance.rkt") (lib "expander/host/syntax-to-reader-syntax.rkt") (lib "expander/extract/get-linklet.rkt") (lib "expander/extract/simplify-defn.rkt") (lib "expander/expand/implicit-property.rkt") (lib "expander/common/struct-star.rkt") (lib "expander/boot/load-handler.rkt") (lib "expander/read/fixnum-flonum.rkt") (lib "expander/expand/require.rkt") (lib "expander/read/special.rkt") (lib "expander/compile/namespace-scope.rkt") (lib "expander/read/special-comment.rkt") (lib "expander/expand/rename-trans.rkt") (lib "expander/read/parameter.rkt") (lib "expander/expand/missing-module.rkt") (lib "expander/eval/shadow-directory.rkt") (lib "expander/namespace/namespace.rkt") (lib "expander/expand/bind-top.rkt") (lib "expander/expand/set-bang-trans.rkt") (lib "expander/read/main.rkt") (lib "expander/expand/provide.rkt") (lib "expander/namespace/api-module.rkt") (lib "expander/expand/expanded+parsed.rkt") (lib "expander/common/fasl.rkt") (lib "expander/main.rkt") (lib "expander/expand/expr.rkt") (lib "expander/read/closer.rkt") (lib "expander/syntax/error.rkt") (lib "expander/expand/module-path.rkt") (lib "expander/read/readtable-parameter.rkt") (lib "expander/syntax/track.rkt") (lib "expander/compile/module.rkt") (lib "expander/common/contract.rkt") (lib "expander/read/indentation.rkt") (lib "expander/read/box.rkt") (lib "expander/read/number.rkt") (lib "expander/syntax/binding.rkt") (lib "expander/compile/recompile.rkt") (lib "expander/boot/runtime-primitive.rkt") (lib "expander/common/make-match.rkt") (lib "expander/common/memo.rkt") (lib "expander/expand/top-portal-syntax.rkt") (lib "expander/expand/free-id-set.rkt") (lib "expander/namespace/attach.rkt") (lib "expander/expand/require+provide.rkt") (lib "expander/eval/api.rkt") (lib "expander/namespace/primitive-module.rkt") (lib "expander/expand/def-id.rkt") (lib "expander/expand/parsed.rkt") (lib "expander/extract/defn.rkt") (lib "expander/extract/variable.rkt") (lib "expander/boot/core-primitive.rkt") (lib "expander/host/string-to-number.rkt") (lib "expander/eval/protect.rkt") (lib "expander/compile/linklet-api.rkt") (lib "expander/syntax/binding-set.rkt") (lib "expander/namespace/registry.rkt") (lib "expander/compile/expr.rkt") (lib "expander/read/graph.rkt") (lib "expander/compile/compiled-in-memory.rkt") (lib "expander/extract/export.rkt") (lib "expander/namespace/core.rkt") (lib "expander/read/parse-case.rkt") (lib "expander/common/set.rkt") (lib "expander/compile/form.rkt") (lib "expander/read/struct.rkt") (lib "expander/syntax/binding-table.rkt") (lib "expander/extract/linklet.rkt") (lib "expander/syntax/bulk-binding.rkt") (lib "expander/expand/portal-syntax.rkt") (lib "expander/syntax/full-binding.rkt") (lib "expander/expand/binding-to-module.rkt") (lib "expander/extract/linklet-info.rkt") (lib "expander/extract/main.rkt") (lib "expander/syntax/space-scope.rkt") (lib "expander/read/vector.rkt") (lib "expander/syntax/scope.rkt") (lib "expander/common/small-hash.rkt") (lib "expander/boot/main-primitive.rkt") (lib "expander/expand/bindings-arity-error.rkt") (lib "expander/eval/parameter.rkt") (lib "expander/compile/correlate.rkt") (lib "expander/compile/built-in-symbol.rkt") (lib "expander/extract/defn-known.rkt") (lib "expander/read/coerce.rkt") (lib "expander/extract/primitive-table.rkt") (lib "expander/boot/place-primitive.rkt") (lib "expander/read/readtable.rkt") (lib "expander/expand/root-expand-context.rkt") (lib "expander/compile/known.rkt") (lib "expander/read/error.rkt") (lib "expander/expand/rebuild.rkt") (lib "expander/common/prefab.rkt") (lib "expander/expand/protect.rkt") (lib "expander/read/location.rkt") (lib "expander/compile/main.rkt") (lib "expander/eval/dynamic-require.rkt") (lib "expander/run/submodule.rkt") (lib "expander/host/correlate.rkt") (lib "expander/syntax/fallback.rkt") (lib "expander/syntax/preserved.rkt") (lib "expander/compile/context.rkt") (lib "expander/expand/allowed-context.rkt") (lib "expander/syntax/srcloc.rkt") (lib "expander/namespace/api.rkt") (lib "expander/extract/global.rkt") (lib "expander/extract/needed.rkt") (lib "expander/run/bootstrap.rkt") (lib "expander/boot/handler.rkt") (lib "expander/eval/main.rkt") (lib "expander/expand/lift-context.rkt") (lib "expander/expand/append.rkt") (lib "expander/expand/body.rkt") (lib "expander/run/correlated-to-host-syntax.rkt") (lib "expander/run/status.rkt") (lib "expander/expand/definition-context.rkt") (lib "expander/syntax/original.rkt") (lib "expander/compile/read-linklet.rkt") (lib "expander/compile/extra-inspector.rkt") (lib "expander/extract/underscore.rkt") (lib "expander/common/list-ish.rkt") (lib "expander/syntax/taint-object.rkt") (lib "expander/syntax/to-list.rkt") (lib "expander/expand/syntax-implicit-error.rkt") (lib "expander/read/accum-string.rkt") (lib "expander/syntax/like-ambiguous-binding.rkt") (lib "expander/eval/reflect-name.rkt") (lib "expander/host/reader-syntax.rkt") (lib "expander/extract/known-primitive.rkt") (lib "expander/expand/module.rkt") (lib "expander/syntax/syntax.rkt") (lib "expander/compile/serialize-property.rkt") (lib "expander/syntax/taint.rkt") (lib "expander/run/linklet.rkt") (lib "expander/read/demo.rkt") (lib "expander/compile/side-effect.rkt") (lib "expander/read/config.rkt") (lib "expander/eval/reflect-submodule.rkt") (lib "expander/common/phase+space.rkt") (lib "expander/expand/reference-record.rkt") (lib "expander/read/api.rkt") (lib "expander/expand/use-site.rkt") (lib "expander/expand/cross-phase.rkt") (lib "expander/common/promise.rkt") (lib "expander/expand/context.rkt") (lib "expander/expand/prepare.rkt") (lib "expander/eval/reflect-compiled.rkt") (lib "expander/eval/module.rkt") (lib "expander/read/regexp.rkt") (lib "expander/syntax/api.rkt") (lib "expander/syntax/debug.rkt") (lib "expander/common/parameter-like.rkt"))) (name . "expander") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket/?path=racket/src/expander") (tags . ()) (versions . #hash((default . #hasheq((checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (source . "git://github.com/racket/racket/?path=racket/src/expander") (source_url . "git://github.com/racket/racket/?path=racket/src/expander"))))))) ("expect" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "expect" "doc/expect@expect/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/expect.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/expect.txt"))) (checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (checksum-error . #f) (collection . "expect") (conflicts . ()) (dependencies . ("syntax-classes-lib" "arguments" "base" "fancy-app" "rackunit-lib" "reprovide-lang" "rackunit-doc" "doc-coverage" "racket-doc" "scribble-lib" "scribble-text-lib" "syntax-classes-lib")) (description . "A package defining \"expectations\", first-class assertions about values for use in validation and unit testing with high quality error messages. Currently experimental.") (implies . ()) (modules . ((lib "expect/private/text.rkt") (lib "expect/private/rackunit/check.rkt") (lib "expect/tests/data/data-set.rkt") (lib "expect/private/lite/compare-sugar.rkt") (lib "expect/private/lite/combinator.rkt") (lib "expect/tests/struct.rkt") (lib "expect/private/util.rkt") (lib "expect/scribblings/convert.scrbl") (lib "expect/rackunit.rkt") (lib "expect/private/data/convert.rkt") (lib "expect/scribblings/main.scrbl") (lib "expect/private/data/convert-base.rkt") (lib "expect/scribblings/base.scrbl") (lib "expect/tests/scribble.rkt") (lib "expect/tests/text.rkt") (lib "expect/tests/function.rkt") (lib "expect/private/meta.rkt") (lib "expect/private/data/data-box.rkt") (lib "expect/tests/data/data-sequence.rkt") (lib "expect/private/data/data-dict.rkt") (lib "expect/tests/syntax.rkt") (lib "expect/scribblings/syntax.scrbl") (lib "expect/scribblings/text.scrbl") (lib "expect/private/function.rkt") (lib "expect/tests/data/data-box.rkt") (lib "expect/private/rackunit/case.rkt") (lib "expect/private/data/context.rkt") (lib "expect/scribblings/logic.scrbl") (lib "expect/scribblings/combinator.scrbl") (lib "expect/scribblings/base.rkt") (lib "expect/scribblings/rackunit.scrbl") (lib "expect/scribblings/function.scrbl") (lib "expect/tests/meta.rkt") (lib "expect/private/lite/logic.rkt") (lib "expect/tests/util.rkt") (lib "expect/private/data/data-syntax.rkt") (lib "expect/private/main.rkt") (lib "expect/tests/logic.rkt") (lib "expect/private/fail.rkt") (lib "expect/private/lite.rkt") (lib "expect/tests/data/convert-equal.rkt") (lib "expect/private/syntax.rkt") (lib "expect/private/data/data-sequence.rkt") (lib "expect/private/lite/base.rkt") (lib "expect/scribblings/compare.scrbl") (lib "expect/tests/rackunit.rkt") (lib "expect/main.rkt") (lib "expect/private/function-context.rkt") (lib "expect/private/data/main.rkt") (lib "expect/private/data/data-set.rkt") (lib "expect/private/data.rkt") (lib "expect/tests/data/convert.rkt") (lib "expect/scribblings/data.scrbl") (lib "expect/scribblings/meta.scrbl") (lib "expect/private/lite/main.rkt") (lib "expect/scribblings/util.rkt") (lib "expect/tests/data/data-hash.rkt") (lib "expect/private/lite/compare.rkt") (lib "expect/private/struct.rkt") (lib "expect/private/rackunit/main.rkt") (lib "expect/tests/compare.rkt") (lib "expect/private/rackunit/base.rkt") (lib "expect/private/text-io.rkt") (lib "expect/scribblings/struct.scrbl"))) (name . "expect") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (rackunit . #t) (ring:1 . #t) (testing . #t) (validation . #t))) (source . "http://github.com/jackfirth/racket-expect/tree/master") (tags . ("experimental" "rackunit" "testing" "validation")) (versions . #hash((default . #hasheq((checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (source . "git://github.com/jackfirth/racket-expect") (source_url . "http://github.com/jackfirth/racket-expect/tree/master"))))))) ("expeditor" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1634221935) (dependencies . ("expeditor-lib" "expeditor-doc")) (description . "Terminal expression editor") (implies . ("expeditor-lib" "expeditor-doc")) (modules . ()) (name . "expeditor") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (command-line . #t) (editor . #t) (ring:0 . #t))) (source . "https://github.com/racket/expeditor.git?path=expeditor") (tags . ("command-line" "editor")) (versions . #hash((default . #hasheq((checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (source . "https://github.com/racket/expeditor.git?path=expeditor") (source_url . "https://github.com/racket/expeditor.git?path=expeditor"))))))) ("expeditor-doc" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "expeditor" "doc/expeditor@expeditor-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (checksum-error . #f) (collection . "expeditor") (conflicts . ()) (date-added . 1634221894) (dependencies . ("base" "scribble-lib" "expeditor-lib" "racket-doc")) (description . "documentation part of \"expeditor\"") (implies . ()) (modules . ((lib "expeditor/expeditor.scrbl"))) (name . "expeditor-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (command-line . #t) (editor . #t) (ring:0 . #t))) (source . "https://github.com/racket/expeditor.git?path=expeditor-doc") (tags . ("command-line" "editor")) (versions . #hash((default . #hasheq((checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (source . "https://github.com/racket/expeditor.git?path=expeditor-doc") (source_url . "https://github.com/racket/expeditor.git?path=expeditor-doc"))))))) ("expeditor-lib" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (checksum-error . #f) (collection . "expeditor") (conflicts . ()) (date-added . 1634221795) (dependencies . ("base" "syntax-color-lib")) (description . "implementation (no documentation) part of \"expeditor\"") (implies . ()) (modules . ((lib "expeditor/private/color.rkt") (lib "expeditor/private/object.rkt") (lib "expeditor/private/history.rkt") (lib "expeditor/private/public.rkt") (lib "expeditor/private/pos.rkt") (lib "expeditor/private/assert.rkt") (lib "expeditor/private/terminal.rkt") (lib "expeditor/private/wstring.rkt") (lib "expeditor/private/ee.rkt") (lib "expeditor/main.rkt") (lib "expeditor/private/port.rkt") (lib "expeditor/private/screen.rkt") (lib "expeditor/private/token.rkt") (lib "expeditor/private/param.rkt"))) (name . "expeditor-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (command-line . #t) (editor . #t) (ring:0 . #t))) (source . "https://github.com/racket/expeditor.git?path=expeditor-lib") (tags . ("command-line" "editor")) (versions . #hash((default . #hasheq((checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (source . "https://github.com/racket/expeditor.git?path=expeditor-lib") (source_url . "https://github.com/racket/expeditor.git?path=expeditor-lib"))))))) ("expeditor-test" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/expeditor-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/expeditor-test.txt"))) (checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (checksum-error . #f) (collection . "expeditor") (conflicts . ()) (date-added . 1637092653) (dependencies . ("base" "gui-lib" "syntax-color-lib" "expeditor-lib")) (description . "test part of \"expeditor\"") (implies . ()) (modules . ((lib "expeditor/tests/object.rkt"))) (name . "expeditor-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (command-line . #t) (editor . #t) (ring:1 . #t))) (source . "https://github.com/racket/expeditor.git?path=expeditor-test") (tags . ("command-line" "editor")) (versions . #hash((default . #hasheq((checksum . "86bad7e267e6a1e894fb4dbc4ade8032f507d084") (source . "https://github.com/racket/expeditor.git?path=expeditor-test") (source_url . "https://github.com/racket/expeditor.git?path=expeditor-test"))))))) ("explorer" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/explorer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/explorer.txt"))) (checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "rackunit-lib")) (description . "Utility for interactive exploration of complex data structures.") (implies . ()) (modules . ((lib "explorer/example.rkt") (lib "explorer/compile-cond.rkt") (lib "explorer/main.rkt") (lib "explorer/frame.rkt") (lib "explorer/workspace.rkt"))) (name . "explorer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-explorer/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (source . "git://github.com/tonyg/racket-explorer") (source_url . "http://github.com/tonyg/racket-explorer/tree/master"))))))) ("expr-in-racket" . #hasheq((author . "kevin2059@163.com") (authors . ("kevin2059@163.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/expr-in-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "embed expr like \"x+1\" in racket.") (implies . ()) (modules . ((lib "expr-in-racket/main.rkt") (lib "expr-in-racket/srcloc.rkt") (lib "expr-in-racket/compiler.rkt") (lib "expr-in-racket/grammar/ast.rkt") (lib "expr-in-racket/lang/reader.rkt") (lib "expr-in-racket/lang/lang-info.rkt") (lib "expr-in-racket/grammar/yacc.rkt") (lib "expr-in-racket/syntax.rkt") (lib "expr-in-racket/grammar/lex.rkt") (lib "expr-in-racket/lib.rkt") (lib "expr-in-racket/lang/configure-runtime.rkt"))) (name . "expr-in-racket") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:kevin2059@163.com . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/connor2059/expr-in-racket.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (source . "https://github.com/connor2059/expr-in-racket.git") (source_url . "https://github.com/connor2059/expr-in-racket.git"))))))) ("extenor" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extenor" "doc/extenor@extenor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extenor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extenor.txt"))) (checksum . "f145ca1c07a2f142037634824b08105e9d07a116") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608412528) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Extensible Nominal Records.  They're like mixin-able structs that keep their extensions when functionally updated by procedures that only know about the non-extended version.  Also somewhat like dictionaries, but supporting struct-type-properties.") (implies . ()) (modules . ((lib "extenor/extenorcl/custom-write-extenorcl.rkt") (lib "extenor/extenorcl/dict-extenorcl.rkt") (lib "extenor/main.rkt") (lib "extenor/scribblings/extenor.scrbl"))) (name . "extenor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (struct . #t))) (source . "https://github.com/willghatch/racket-extenor.git") (tags . ("struct")) (versions . #hash((default . #hasheq((checksum . "f145ca1c07a2f142037634824b08105e9d07a116") (source . "https://github.com/willghatch/racket-extenor.git") (source_url . "https://github.com/willghatch/racket-extenor.git"))))))) ("extensible-functions" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-functions" "doc/extensible-functions@extensible-functions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-functions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-functions.txt"))) (checksum . "7aa4c134ba48137bd66d30ad9282d261a5507dbe") (checksum-error . #f) (collection . "extensible-functions") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "A solution to the expression problem in Typed Racket") (implies . ()) (modules . ((lib "extensible-functions/extensible-functions.scrbl") (lib "extensible-functions/main.rkt"))) (name . "extensible-functions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (expression-problem . #t) (extensible . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/leafac/extensible-functions.git") (tags . ("expression-problem" "extensible" "utility")) (versions . #hash((default . #hasheq((checksum . "7aa4c134ba48137bd66d30ad9282d261a5507dbe") (source . "https://github.com/leafac/extensible-functions.git") (source_url . "https://github.com/leafac/extensible-functions.git"))))))) ("extensible-parser-specifications" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-parser-specifications" "doc/extensible-parser-specifications@extensible-parser-specifications/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-parser-specifications.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-parser-specifications.txt"))) (checksum . "616130a74b83cf7790257150655949698a7a3913") (checksum-error . #f) (collection . "extensible-parser-specifications") (conflicts . ()) (date-added . 1614799389) (dependencies . ("base" "rackunit-lib" "phc-toolkit" "generic-syntax-expanders" "alexis-util" "scribble-lib" "racket-doc" "seq-no-order")) (description . "Unstable, and has seemingly unsolvable problems with module boundaries. This package works like seq-no-order by Alexander Knauth, but adds reusable (within the same module) clauses and global constraints like \"a must occur before b\" or \"a mutually exclusive with c\".") (implies . ()) (modules . ((lib "extensible-parser-specifications/scribblings/utils.rkt") (lib "extensible-parser-specifications/scribblings/no-order.scrbl") (lib "extensible-parser-specifications/scribblings/post.scrbl") (lib "extensible-parser-specifications/scribblings/pre-global-post-section.scrbl") (lib "extensible-parser-specifications/private/mixin.rkt") (lib "extensible-parser-specifications/scribblings/pre.scrbl") (lib "extensible-parser-specifications/scribblings/rest.scrbl") (lib "extensible-parser-specifications/private/post.rkt") (lib "extensible-parser-specifications/scribblings/forward-attributes.scrbl") (lib "extensible-parser-specifications/private/optional.rkt") (lib "extensible-parser-specifications/private/global-mutex.rkt") (lib "extensible-parser-specifications/test/test-global.rkt") (lib "extensible-parser-specifications/scribblings/defining-reusable-mixins.scrbl") (lib "extensible-parser-specifications/test/test-order-point.rkt") (lib "extensible-parser-specifications/private/no-order.rkt") (lib "extensible-parser-specifications/private/pre.rkt") (lib "extensible-parser-specifications/test/test-extend-structure-options.rkt") (lib "extensible-parser-specifications/test/test-maybe-empty.rkt") (lib "extensible-parser-specifications/main.rkt") (lib "extensible-parser-specifications/private/nop.rkt") (lib "extensible-parser-specifications/test/test-structure-options.rkt") (lib "extensible-parser-specifications/test/test-scopes-mixin-in-syntax-parser.rkt") (lib "extensible-parser-specifications/private/global.rkt") (lib "extensible-parser-specifications/private/try-attribute.rkt") (lib "extensible-parser-specifications/test/test-rest.rkt") (lib "extensible-parser-specifications/scribblings/pre-global-post-order.scrbl") (lib "extensible-parser-specifications/private/parameters.rkt") (lib "extensible-parser-specifications/scribblings/misc.scrbl") (lib "extensible-parser-specifications/private/define-syntax+simple-api.rkt") (lib "extensible-parser-specifications/scribblings/global.scrbl") (lib "extensible-parser-specifications/private/before-after.rkt") (lib "extensible-parser-specifications/scribblings/extensible-parser-specifications.scrbl"))) (name . "extensible-parser-specifications") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/extensible-parser-specifications.git#main") (tags . ("experimental" "syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "616130a74b83cf7790257150655949698a7a3913") (source . "https://github.com/jsmaniac/extensible-parser-specifications.git#main") (source_url . "https://github.com/jsmaniac/extensible-parser-specifications.git#main"))))))) ("extra-srfi-libs" . #hasheq((author . "shawnw.mobile@gmail.com") (authors . ("shawnw.mobile@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extra-srfi-libs" "doc/extra-srfi-libs@extra-srfi-libs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extra-srfi-libs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extra-srfi-libs.txt"))) (checksum . "decf15242241b97f98b94f745a5eb3791d0169a9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662335274) (dependencies . ("base" "typed-racket-lib" "srfi-lib" "math-lib" "racket" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-typed")) (description . "Additional SRFI libraries not included in the standard srfi-lib package") (implies . ()) (modules . ((lib "srfi/128.rkt") (lib "srfi/190.rkt") (lib "srfi/194.rkt") (lib "srfi/158.rkt") (lib "srfi/151.rkt") (lib "srfi/224.rkt") (lib "srfi/223/bytes.rkt") (lib "typed/srfi/141.rkt") (lib "srfi/112.rkt") (lib "typed/srfi/208.rkt") (lib "srfi/scribblings/extra-srfi-libs.scrbl") (lib "srfi/223.rkt") (lib "srfi/175.rkt") (lib "srfi/208.rkt") (lib "srfi/141.rkt") (lib "srfi/145.rkt") (lib "srfi/132.rkt"))) (name . "extra-srfi-libs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (SRFI . #t) (author:shawnw.mobile@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/shawnw/racket-extra-srfi-libs.git#master") (tags . ("SRFI")) (versions . #hash((default . #hasheq((checksum . "decf15242241b97f98b94f745a5eb3791d0169a9") (source . "https://github.com/shawnw/racket-extra-srfi-libs.git#master") (source_url . "https://github.com/shawnw/racket-extra-srfi-libs.git#master"))))))) ("ez-csv" . #hasheq((author . "steven.leibrock@gmail.com") (authors . ("steven.leibrock@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ez-csv" "doc/ez-csv@ez-csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ez-csv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ez-csv.txt"))) (checksum . "0e43705e977c1edb347a5aee253e425900e74a33") (checksum-error . #f) (collection . "ez-csv") (conflicts . ()) (date-added . 1634074626) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Reading and writing CSV files from Racket... Except easier.") (implies . ()) (modules . ((lib "ez-csv/scribblings/ez-csv.scrbl") (lib "ez-csv/main.rkt"))) (name . "ez-csv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:steven.leibrock@gmail.com . #t) (csv . #t) (data . #t) (ring:1 . #t) (spreadsheet . #t))) (source . "https://github.com/sleibrock/ez-csv.git#main") (tags . ("csv" "data" "spreadsheet")) (versions . #hash((default . #hasheq((checksum . "0e43705e977c1edb347a5aee253e425900e74a33") (source . "https://github.com/sleibrock/ez-csv.git#main") (source_url . "https://github.com/sleibrock/ez-csv.git#main"))))))) ("fairyfloss" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fairyfloss.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fairyfloss.txt"))) (checksum . "967a9db447145f56e178273e930067d36c4668b5") (checksum-error . #f) (collection . "fairyfloss") (conflicts . ()) (date-added . 1577589554) (dependencies . ("base")) (description . "sailorhg's fairyfloss for DrRacket ") (implies . ()) (modules . ()) (name . "fairyfloss") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "967a9db447145f56e178273e930067d36c4668b5") (source . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable") (source_url . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable"))))))) ("fancy-app" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fancy-app" "doc/fancy-app@fancy-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fancy-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fancy-app.txt"))) (checksum . "f451852164ee67e3e122f25b4bce45001a557045") (checksum-error . #f) (collection . "fancy-app") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Scala-style anonymous functions") (implies . ()) (modules . ((lib "fancy-app/main.scrbl") (lib "fancy-app/main.rkt"))) (name . "fancy-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/samth/fancy-app/tree/master") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "f451852164ee67e3e122f25b4bce45001a557045") (source . "github://github.com/samth/fancy-app/master") (source_url . "http://github.com/samth/fancy-app/tree/master"))))))) ("fast-convert" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fast-convert" "doc/fast-convert@fast-convert/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-convert.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-convert.txt"))) (checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Fast conversion from bytes to string  for one-byte encoding") (implies . ()) (modules . ((lib "fast-convert/fast-convert.scrbl") (lib "fast-convert/main.rkt"))) (name . "fast-convert") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/fast-convert/tree/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (source . "git://github.com/Kalimehtar/fast-convert") (source_url . "http://github.com/Kalimehtar/fast-convert/tree/master"))))))) ("fast-sequence" . #hasheq((author . "ryanc@racket-lang.org ann-bolotina@yandex.ru") (authors . ("ryanc@racket-lang.org" "ann-bolotina@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fast-sequence.txt") (docs . (("main" "fast-sequence" "doc/fast-sequence@fast-sequence/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-sequence.txt") (test-failure-log . "server/built/test-fail/fast-sequence.txt") (test-success-log . #f))) (checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (checksum-error . #f) (collection . "fast-sequence") (conflicts . ()) (date-added . 1602256245) (dependencies . ("base" "fast-sequence-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Macros for fast sequences.") (implies . ("fast-sequence-lib")) (modules . ((lib "fast-sequence/private/fast-sequence-testing.rkt") (lib "fast-sequence/tests/do-seq-long-running-tests.rkt") (lib "fast-sequence/tests/do-sequence-tests.rkt") (lib "fast-sequence/benchmarks/benchmarks.rkt") (lib "fast-sequence/fast-sequence.scrbl") (lib "fast-sequence/benchmarks/nest.rkt") (lib "fast-sequence/tests/fast-sequence-tests.rkt"))) (name . "fast-sequence") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:ann-bolotina@yandex.ru . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t) (sequence . #t))) (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable") (tags . ("sequence")) (versions . #hash((default . #hasheq((checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable") (source_url . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable"))))))) ("fast-sequence-lib" . #hasheq((author . "ryanc@racket-lang.org ann-bolotina@yandex.ru") (authors . ("ryanc@racket-lang.org" "ann-bolotina@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-sequence-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-sequence-lib.txt"))) (checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (checksum-error . #f) (collection . "fast-sequence") (conflicts . ()) (date-added . 1602256008) (dependencies . ("base")) (description . "Macros for fast sequences.") (implies . ()) (modules . ((lib "fast-sequence/private/do-sequence.rkt") (lib "fast-sequence/private/fast-sequence-filter.rkt") (lib "fast-sequence/private/fast-sequence-map.rkt") (lib "fast-sequence/main.rkt"))) (name . "fast-sequence-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ann-bolotina@yandex.ru . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t) (sequence . #t))) (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable") (tags . ("sequence")) (versions . #hash((default . #hasheq((checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable") (source_url . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable"))))))) ("faster-minikanren" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/faster-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/faster-minikanren.txt"))) (checksum . "910fbea468d57c811b85e3e365e27f5e2d9dc2ba") (checksum-error . #f) (collection . "minikanren") (conflicts . ("minikanren")) (dependencies . ("base")) (description . "A fast implementation of miniKanren with disequality and absento.") (implies . ()) (modules . ((lib "minikanren/simple-interp.rkt") (lib "minikanren/private-unstable.rkt") (lib "minikanren/numbers.rkt") (lib "minikanren/mk.rkt") (lib "minikanren/matche.rkt") (lib "minikanren/main.rkt") (lib "minikanren/full-interp.rkt"))) (name . "faster-minikanren") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:2 . #t))) (source . "http://github.com/michaelballantyne/faster-miniKanren/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "910fbea468d57c811b85e3e365e27f5e2d9dc2ba") (source . "git://github.com/michaelballantyne/faster-miniKanren") (source_url . "http://github.com/michaelballantyne/faster-miniKanren/tree/master"))))))) ("feature-profile" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "feature-profile" "doc/feature-profile@feature-profile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/feature-profile.txt") (test-failure-log . "server/built/test-fail/feature-profile.txt") (test-success-log . #f))) (checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (checksum-error . #f) (collection . "feature-profile") (conflicts . ()) (dependencies . ("base" "contract-profile" "profile-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "Profile that measures time spent in language/library features") (implies . ()) (modules . ((lib "feature-profile/examples/composition.rkt") (lib "feature-profile/tree-walker.rkt") (lib "feature-profile/utils.rkt") (lib "feature-profile/structs.rkt") (lib "feature-profile/examples/fizzbuzz.rkt") (lib "feature-profile/examples/matrix-mult.rkt") (lib "feature-profile/features.rkt") (lib "feature-profile/raco.rkt") (lib "feature-profile/scribblings/feature-profile.scrbl") (lib "feature-profile/examples/run-all.rkt") (lib "feature-profile/plug-in-lib.rkt") (lib "feature-profile/profile-helpers.rkt") (lib "feature-profile/examples/word-wrap.rkt") (lib "feature-profile/main.rkt"))) (name . "feature-profile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/stamourv/feature-profile/tree/master#master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (source . "git://github.com/stamourv/feature-profile#master") (source_url . "http://github.com/stamourv/feature-profile/tree/master#master"))))))) ("fector" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fector.txt"))) (checksum . "269812d67549fbd77273f5025a4144214d790081") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Persistent Functional Vectors") (implies . ()) (modules . ((lib "data/fector.rkt") (lib "data/fector/fast.rkt"))) (name . "fector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/dvanhorn/fector/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "269812d67549fbd77273f5025a4144214d790081") (source . "github://github.com/dvanhorn/fector/master") (source_url . "http://github.com/dvanhorn/fector/tree/master"))))))) ("fexpress" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress.txt"))) (checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1628915517) (dependencies . ("fexpress-doc" "fexpress-lib")) (description . "A compilation-friendly fexpr language.") (implies . ("fexpress-doc" "fexpress-lib")) (modules . ()) (name . "fexpress") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress#main"))))))) ("fexpress-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fexpress" "doc/fexpress@fexpress-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-doc.txt"))) (checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915313) (dependencies . ("base" "fexpress-lib" "racket-doc" "scribble-lib")) (description . "A compilation-friendly fexpr language. (doc)") (implies . ()) (modules . ((lib "fexpress/scribblings/fexpress.scrbl"))) (name . "fexpress-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main"))))))) ("fexpress-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-lib.txt"))) (checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915369) (dependencies . ("base")) (description . "A compilation-friendly fexpr language. (lib)") (implies . ()) (modules . ((lib "fexpress/main.rkt") (lib "fexpress/proof-of-concept.rkt"))) (name . "fexpress-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main"))))))) ("fexpress-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-test.txt"))) (checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915446) (dependencies . ("base" "fexpress-lib" "rackunit-lib")) (description . "A compilation-friendly fexpr language. (test)") (implies . ()) (modules . ((lib "fexpress/tests.rkt") (lib "fexpress/tests/and.rkt"))) (name . "fexpress-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "1fa067d6b943c1217c0061dfed8d4457fc454d6f") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main"))))))) ("ffi-definer-convention" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "ffi-definer-convention"))) (failure-log . "server/built/fail/ffi-definer-convention.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (checksum-error . #f) (collection . "ffi-definer-convention") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "No longer necessary in 6.9.0.5 and newer (it's built-in to the ffi library now)") (implies . ()) (modules . ((lib "ffi-definer-convention/ffi-definer-convention.scrbl") (lib "ffi-definer-convention/test.rkt") (lib "ffi-definer-convention/conventions.rkt") (lib "ffi-definer-convention/main.rkt"))) (name . "ffi-definer-convention") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-ffi-definer-convention/tree/master") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (source . "git://github.com/takikawa/racket-ffi-definer-convention") (source_url . "http://github.com/takikawa/racket-ffi-definer-convention/tree/master"))))))) ("ffi-utils" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "ffi-utils"))) (failure-log . "server/built/fail/ffi-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (checksum-error . #f) (collection . "ffi-utils") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Helpful tools for writing FFI interfaces to C") (implies . ()) (modules . ((lib "ffi-utils/private/generate-errno.rkt") (lib "ffi-utils/errno.rkt") (lib "ffi-utils/private/includes.rkt") (lib "ffi-utils/data.rkt") (lib "ffi-utils/scribblings/ffi-utils.scrbl"))) (name . "ffi-utils") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:scott@thinkmoore.net . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/thinkmoore/ffi-utils/tree/master") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (source . "git://github.com/thinkmoore/ffi-utils") (source_url . "http://github.com/thinkmoore/ffi-utils/tree/master"))))))) ("ffmpeg-i386-macosx-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/ffmpeg-i386-macosx-3-4.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: ffmpeg-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:914:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-i386-macosx-3-4") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4"))))))) ("ffmpeg-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ffmpeg-i386-win32.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-i386-win32") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-i386-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-i386-win32"))))))) ("ffmpeg-i386-win32-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-i386-win32-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-i386-win32-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-i386-win32-3-4") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4"))))))) ("ffmpeg-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-macosx") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-macosx"))))))) ("ffmpeg-x86_64-macosx-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-macosx-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-macosx-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "openh264-x86_64-macosx")) (description . "Bindings for ffmpeg 3.4") (implies . ()) (modules . ()) (name . "ffmpeg-x86_64-macosx-3-4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4"))))))) ("ffmpeg-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ffmpeg-x86_64-win32.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-win32"))))))) ("ffmpeg-x86_64-win32-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-win32-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-win32-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-x86_64-win32-3-4") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4"))))))) ("fiberweb" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "fiberweb" "doc/fiberweb@fiberweb/index.html"))) (failure-log . "server/built/fail/fiberweb.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c2ea40456784fa45d682bc4230b49e07f862ae78") (checksum-error . #f) (collection . "fiberweb") (conflicts . ()) (date-added . 1581496862) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An experiment in cooperative concurrency. Wildly unimplemented.") (implies . ()) (modules . ((lib "fiberweb/main.rkt") (lib "fiberweb/main.scrbl"))) (name . "fiberweb") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (asynchronous . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (io . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/fiberweb.git") (tags . ("asynchronous" "concurrency" "io")) (versions . #hash((default . #hasheq((checksum . "c2ea40456784fa45d682bc4230b49e07f862ae78") (source . "https://github.com/jackfirth/fiberweb.git") (source_url . "https://github.com/jackfirth/fiberweb.git"))))))) ("file-metadata" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/file-metadata.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/file-metadata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/file-metadata.txt"))) (checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (checksum-error . #f) (collection . "file-metadata") (conflicts . ()) (dependencies . ()) (description . "Answer various questions about a file, e.g. \"Is this a gzip file?\"  \r\n\r\nTHIS IS VERY ALPHA.  Currently only supports the 'is it a gzip' question, code is ugly, etc.") (implies . ()) (modules . ((lib "file-metadata/tests/test_main.rkt") (lib "file-metadata/main.rkt") (lib "file-metadata/definitions/gzip.rkt"))) (name . "file-metadata") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:david.storrs@gmail.com . #t) (file . #t) (metadata . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/file-metadata.git") (tags . ("file" "metadata")) (versions . #hash((default . #hasheq((checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (source . "https://github.com/dstorrs/file-metadata.git") (source_url . "https://github.com/dstorrs/file-metadata.git"))))))) ("file-watchers" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "file-watchers" "doc/file-watchers@file-watchers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/file-watchers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/file-watchers.txt"))) (checksum . "c1ac766a345a335438165ab0d13a4d8f6aec6162") (checksum-error . #f) (collection . "file-watchers") (conflicts . ()) (date-added . 1561591938) (dependencies . ("rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Sensible file watching procedures") (implies . ()) (modules . ((lib "file-watchers/main.rkt") (lib "file-watchers/threads.rkt") (lib "file-watchers/cli.rkt") (lib "file-watchers/apathetic-watch.rkt") (lib "file-watchers/intensive-watch.rkt") (lib "file-watchers/scribblings/file-watchers.scrbl") (lib "file-watchers/lists.rkt") (lib "file-watchers/filesystem.rkt") (lib "file-watchers/robust-watch.rkt"))) (name . "file-watchers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audit . #t) (author:sage@sagegerard.com . #t) (file . #t) (file-system . #t) (filesystem . #t) (io . #t) (monitor . #t) (monitoring . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/zyrolasting/file-watchers.git") (tags . ("audit" "file" "file-system" "filesystem" "io" "monitor" "monitoring" "threading")) (versions . #hash((default . #hasheq((checksum . "c1ac766a345a335438165ab0d13a4d8f6aec6162") (source . "https://github.com/zyrolasting/file-watchers.git") (source_url . "https://github.com/zyrolasting/file-watchers.git"))))))) ("files-viewer" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "files-viewer" "doc/files-viewer@files-viewer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/files-viewer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/files-viewer.txt"))) (checksum . "164d4034611a970b5eb36ae20675241f0b52e82b") (checksum-error . #f) (collection . "files-viewer") (conflicts . ()) (date-added . 1587720025) (dependencies . ("base" "gui-lib" "drracket" "rackunit-lib" "scheme-lib" "compatibility-lib" "scribble-lib" "pict-lib")) (description . "a file manager for drracket") (implies . ()) (modules . ((lib "files-viewer/private/main.rkt") (lib "files-viewer/private/popup-menu.rkt") (lib "files-viewer/private/info-instructor.rkt") (lib "files-viewer/private/gui-helpers.rkt") (lib "files-viewer/private/contents.rkt") (lib "files-viewer/private/color-scheme.rkt") (lib "files-viewer/private/fschange.rkt") (lib "files-viewer/private/path-helpers.rkt") (lib "files-viewer/private/rename-dialog.rkt") (lib "files-viewer/private/terminal.rkt") (lib "files-viewer/private/dir-control.rkt") (lib "files-viewer/hierlist/hierlist.rkt") (lib "files-viewer/tool.rkt") (lib "files-viewer/private/file-filters.rkt") (lib "files-viewer/scribblings/files-viewer.scrbl") (lib "files-viewer/hierlist/hierlist-sig.rkt") (lib "files-viewer/hierlist/hierlist-unit.rkt"))) (name . "files-viewer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:1227847322@qq.com . #t) (drracket . #t) (file-manager . #t) (ring:1 . #t))) (source . "https://github.com/MatrixForChange/files-viewer.git") (tags . ("drracket" "file-manager")) (versions . #hash((default . #hasheq((checksum . "164d4034611a970b5eb36ae20675241f0b52e82b") (source . "https://github.com/MatrixForChange/files-viewer.git") (source_url . "https://github.com/MatrixForChange/files-viewer.git"))))))) ("finalizer" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "finalizer" "doc/finalizer@finalizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/finalizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/finalizer.txt"))) (checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Trivial finalizer. Does action when object garbage collected") (implies . ()) (modules . ((lib "finalizer/main.rkt") (lib "finalizer/finalizer.scrbl"))) (name . "finalizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/finalizer/tree/master") (tags . ("dev")) (versions . #hash((default . #hasheq((checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (source . "git://github.com/Kalimehtar/finalizer") (source_url . "http://github.com/Kalimehtar/finalizer/tree/master"))))))) ("find-parent-dir" . #hasheq((author . "samth@ccs.neu.edu eric.hanchrow@gmail.com") (authors . ("samth@ccs.neu.edu" "eric.hanchrow@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/find-parent-dir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/find-parent-dir.txt"))) (checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Find parent directories matching a criterion.") (implies . ()) (modules . ((lib "find-parent-dir/main.rkt"))) (name . "find-parent-dir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:eric.hanchrow@gmail.com . #t) (author:samth@ccs.neu.edu . #t) (file-system . #t) (ring:1 . #t))) (source . "http://github.com/samth/find-parent-dir/tree/master") (tags . ("file-system")) (versions . #hash((default . #hasheq((checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (source . "github://github.com/samth/find-parent-dir/master") (source_url . "http://github.com/samth/find-parent-dir/tree/master"))))))) ("fixture" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fixture" "doc/fixture@fixture/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fixture.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fixture.txt"))) (checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (checksum-error . #f) (collection . "fixture") (conflicts . ()) (dependencies . ("reprovide-lang" "fancy-app" "rackunit-lib" "base" "disposable" "doc-coverage" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "Provides test fixtures: resources that are automatically created and destroyed for each RackUnit test case") (implies . ()) (modules . ((lib "fixture/scribblings/util.rkt") (lib "fixture/tests/main.rkt") (lib "fixture/main.rkt") (lib "fixture/base.rkt") (lib "fixture/scribblings/base.rkt") (lib "fixture/tests/util.rkt") (lib "fixture/scribblings/main.scrbl") (lib "fixture/rackunit.rkt"))) (name . "fixture") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (disposable . #t) (experimental . #t) (io . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jackfirth/racket-fixture/tree/master") (tags . ("disposable" "experimental" "io" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (source . "git://github.com/jackfirth/racket-fixture") (source_url . "http://github.com/jackfirth/racket-fixture/tree/master"))))))) ("flexpr" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "flexpr" "doc/flexpr@flexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/flexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/flexpr.txt"))) (checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket" "at-exp-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . " Expressions rendered as both XML and JSON") (implies . ()) (modules . ((lib "flexpr/flexpr.scrbl") (lib "flexpr/main.rkt"))) (name . "flexpr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (json . #t) (ring:1 . #t) (xml . #t))) (source . "http://github.com/greghendershott/flexpr/tree/master") (tags . ("json" "xml")) (versions . #hash((default . #hasheq((checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (source . "git://github.com/greghendershott/flexpr") (source_url . "http://github.com/greghendershott/flexpr/tree/master"))))))) ("fltest" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fltest.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fltest.txt"))) (checksum . "0550ef11664f106002e2cf75fa22e5eb636364f1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1600713973) (dependencies . ("base" "math-lib")) (description . "") (implies . ()) (modules . ((lib "fltest/main.rkt"))) (name . "fltest") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/fltest.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0550ef11664f106002e2cf75fa22e5eb636364f1") (source . "https://github.com/samth/fltest.git") (source_url . "https://github.com/samth/fltest.git"))))))) ("fluent" . #hasheq((author . "racket@rogerkeays.com") (authors . ("racket@rogerkeays.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fluent.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fluent.txt"))) (checksum . "b8bc82e25a35451ba3136f393157e380e6f4837f") (checksum-error . #f) (collection . "fluent") (conflicts . ()) (date-added . 1615128751) (dependencies . ("base" "rackunit")) (description . "UNIX style pipes and a lambda shorthand syntax to make your code more readable.") (implies . ()) (modules . ((lib "fluent/main.rkt") (lib "fluent/main-test-rename.rkt") (lib "fluent/unicode.rkt") (lib "fluent/short-test.rkt") (lib "fluent/short.rkt") (lib "fluent/unicode-test.rkt") (lib "fluent/main-test-default.rkt"))) (name . "fluent") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@rogerkeays.com . #t) (functional . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/rogerkeays/racket-fluent.git#main") (tags . ("functional" "lambda" "lang-extension")) (versions . #hash((default . #hasheq((checksum . "b8bc82e25a35451ba3136f393157e380e6f4837f") (source . "https://github.com/rogerkeays/racket-fluent.git#main") (source_url . "https://github.com/rogerkeays/racket-fluent.git#main"))))))) ("fme" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fme" "doc/fme@fme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fme.txt"))) (checksum . "63075d432e7803b2822a78568306c29a6fde557c") (checksum-error . #f) (collection . "fme") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fourier-Motzkin elimination for integer inequality satisfiability") (implies . ()) (modules . ((lib "fme/main.rkt") (lib "fme/private/fme-utils.rkt") (lib "fme/private/fme.rkt") (lib "fme/private/leq.rkt") (lib "fme/fme.scrbl") (lib "fme/private/benchmarks.rkt") (lib "fme/private/lexp.rkt"))) (name . "fme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sgtamk@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/pnwamk/fme/tree/master#master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "63075d432e7803b2822a78568306c29a6fde557c") (source . "git://github.com/pnwamk/fme#master") (source_url . "http://github.com/pnwamk/fme/tree/master#master"))))))) ("fmt" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fmt" "doc/fmt@fmt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fmt.txt") (test-failure-log . "server/built/test-fail/fmt.txt") (test-success-log . #f))) (checksum . "732b41bda63c961b2903166281e8275e3e97f8b1") (checksum-error . #f) (collection . "fmt") (conflicts . ()) (date-added . 1632695226) (dependencies . ("pprint-compact" "syntax-color-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An extensible code formatter for Racket") (implies . ()) (modules . ((lib "fmt/tests/test-herestring.rkt") (lib "fmt/read.rkt") (lib "fmt/tests/test-dot.rkt") (lib "fmt/regen.rkt") (lib "fmt/for-profiling.rkt") (lib "fmt/.fmt.rkt") (lib "fmt/tests/general.rkt") (lib "fmt/conventions.rkt") (lib "fmt/tests/large2.rkt") (lib "fmt/core.rkt") (lib "fmt/version.rkt") (lib "fmt/tests/test-deinprogramm.rkt") (lib "fmt/scribblings/util.rkt") (lib "fmt/tests/test-class.rkt") (lib "fmt/common.rkt") (lib "fmt/raco.rkt") (lib "fmt/scribblings/examples/example.rkt") (lib "fmt/tests/test-asl.rkt") (lib "fmt/realign.rkt") (lib "fmt/test.rkt") (lib "fmt/scribblings/fmt.scrbl") (lib "fmt/record.rkt") (lib "fmt/tests/large.rkt") (lib "fmt/main.rkt") (lib "fmt/tokenize.rkt") (lib "fmt/tests/test-hash-bang.rkt") (lib "fmt/scribblings/kws.rkt") (lib "fmt/params.rkt"))) (name . "fmt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (formatter . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/fmt.git") (tags . ("formatter")) (versions . #hash((default . #hasheq((checksum . "732b41bda63c961b2903166281e8275e3e97f8b1") (source . "https://github.com/sorawee/fmt.git") (source_url . "https://github.com/sorawee/fmt.git"))))))) ("font-finder" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "font-finder" "doc/font-finder@font-finder/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/font-finder.txt") (test-failure-log . "server/built/test-fail/font-finder.txt") (test-success-log . #f))) (checksum . "fa316eef64ee8525ad741479f132246b4a0acf85") (checksum-error . #f) (collection . "font-finder") (conflicts . ()) (date-added . 1585796965) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Locate font files on your computer") (implies . ()) (modules . ((lib "font-finder/scribblings/font-finder.scrbl") (lib "font-finder/main.rkt"))) (name . "font-finder") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (filesystem . #t) (font . #t) (fonts . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/font-finder.git") (tags . ("filesystem" "font" "fonts")) (versions . #hash((default . #hasheq((checksum . "fa316eef64ee8525ad741479f132246b4a0acf85") (source . "https://github.com/dstorrs/font-finder.git") (source_url . "https://github.com/dstorrs/font-finder.git"))))))) ("fontconfig" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fontconfig.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fontconfig.txt") (test-failure-log . "server/built/test-fail/fontconfig.txt") (test-success-log . #f))) (checksum . "3c4332aa72fff0ddf1172d442f30954dffde616b") (checksum-error . #f) (collection . "fontconfig") (conflicts . ()) (date-added . 1561082305) (dependencies . ("base")) (description . "FFI bindings for fontconfig") (implies . ()) (modules . ((lib "fontconfig/main.rkt") (lib "fontconfig/test.rkt") (lib "fontconfig/fontconfig.rkt"))) (name . "fontconfig") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "https://github.com/takikawa/racket-fontconfig.git") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "3c4332aa72fff0ddf1172d442f30954dffde616b") (source . "https://github.com/takikawa/racket-fontconfig.git") (source_url . "https://github.com/takikawa/racket-fontconfig.git"))))))) ("fontland" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fontland.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fontland.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661206) (dependencies . ("crc32c" "db-lib" "base" "beautiful-racket-lib" "debug" "draw-lib" "rackunit-lib" "png-image" "sugar" "xenomorph")) (description . "font processing [in development]") (implies . ()) (modules . ((lib "fontland/font.rkt") (lib "fontland/table/hhea.rkt") (lib "fontland/main.rkt") (lib "fontland/glyphrun.rkt") (lib "fontland/tables.rkt") (lib "fontland/table/hmtx.rkt") (lib "fontland/struct.rkt") (lib "fontland/table/OS2.rkt") (lib "fontland/table/cff/cff-struct.rkt") (lib "fontland/table-stream.rkt") (lib "fontland/table/cff/cff-charsets.rkt") (lib "fontland/test/directory.rkt") (lib "fontland/woff-directory.rkt") (lib "fontland/table/CFF_.rkt") (lib "fontland/table/cff/cff-encodings.rkt") (lib "fontland/test/glyphs.rkt") (lib "fontland/table/cff/cff-dict.rkt") (lib "fontland/table/cvt_.rkt") (lib "fontland/db.rkt") (lib "fontland/table/fpgm.rkt") (lib "fontland/table/cff/cff-font.rkt") (lib "fontland/table/cff/cff-standard-strings.rkt") (lib "fontland/unsafe/freetype.rkt") (lib "fontland/bbox.rkt") (lib "fontland/path.rkt") (lib "fontland/unsafe/harfbuzz-helper.rkt") (lib "fontland/font-path.rkt") (lib "fontland/script.rkt") (lib "fontland/cff-glyph.rkt") (lib "fontland/zlib.rkt") (lib "fontland/directory.rkt") (lib "fontland/table/loca.rkt") (lib "fontland/test/metadata.rkt") (lib "fontland/test/index.rkt") (lib "fontland/table/head.rkt") (lib "fontland/table/maxp.rkt") (lib "fontland/glyph-position.rkt") (lib "fontland/table/cff/cff-pointer.rkt") (lib "fontland/test/subset.rkt") (lib "fontland/deque.rkt") (lib "fontland/table/cff/cff-top.rkt") (lib "fontland/unsafe/harfbuzz.rkt") (lib "fontland/woff2-directory.rkt") (lib "fontland/table/post.rkt") (lib "fontland/unsafe/fontconfig.rkt") (lib "fontland/test/glyph_mapping.rkt") (lib "fontland/table/cff/cff-operand.rkt") (lib "fontland/glyph.rkt") (lib "fontland/table/glyf.rkt") (lib "fontland/table/cff/cff-index.rkt") (lib "fontland/table/cff/cff-private-dict.rkt") (lib "fontland/ttf-glyph.rkt") (lib "fontland/table/prep.rkt") (lib "fontland/helper.rkt") (lib "fontland/subset.rkt"))) (name . "fontland") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (fonts . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=fontland#main") (tags . ("fonts")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=fontland#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=fontland#main"))))))) ("for-helpers" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "for-helpers" "doc/for-helpers@for-helpers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/for-helpers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/for-helpers.txt"))) (checksum . "3753dbce905e5c115e8107a9411249a12a06fd64") (checksum-error . #f) (collection . "for-helpers") (conflicts . ()) (date-added . 1596103707) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib")) (description . "Helper macros for racket for macros to avoid intermediate sequences") (implies . ()) (modules . ((lib "for-helpers/extra.rkt") (lib "for-helpers/tests/test-extra.rkt") (lib "for-helpers/private/common.rkt") (lib "for-helpers/tests/bench.rkt") (lib "for-helpers/main.rkt") (lib "for-helpers/private/helper.rkt") (lib "for-helpers/private/main.rkt") (lib "for-helpers/scribblings/for-helpers.scrbl") (lib "for-helpers/tests/test.rkt") (lib "for-helpers/private/extra.rkt") (lib "for-helpers/tests/bench-extra.rkt") (lib "for-helpers/private/optimize.rkt"))) (name . "for-helpers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/yjqww6/for-helpers.git") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "3753dbce905e5c115e8107a9411249a12a06fd64") (source . "https://github.com/yjqww6/for-helpers.git") (source_url . "https://github.com/yjqww6/for-helpers.git"))))))) ("forge" . #hasheq((author . "tim_nelson@brown.edu") (authors . ("tim_nelson@brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forge.txt") (test-failure-log . "server/built/test-fail/forge.txt") (test-success-log . #f))) (checksum . "1687cba0ebdb598c29c51845d43c98a459d0588f") (checksum-error . #f) (collection . "forge") (conflicts . ()) (date-added . 1579888770) (dependencies . ("base" "syntax-classes" "br-parser-tools-lib" "brag-lib" "beautiful-racket" "syntax-color-lib" "net-lib" "profile-lib" "crypto-lib" "rackunit-lib" "web-server-lib" "draw-lib" "mischief" "gui-lib" "drracket-plugin-lib" "pretty-format" "predicates" "basedir" "request" "sha")) (description . "A model-finding language with Alloy-adjacent syntax.") (implies . ()) (modules . ((lib "forge/racket-rfc6455/net/rfc6455/service-mapper.rkt") (lib "forge/sigs-functional.rkt") (lib "forge/testme/lang/expander.rkt") (lib "forge/tests/forge/relations/set.rkt") (lib "forge/amalgam/lift-bounds/lift-bounds_helpers.rkt") (lib "forge/tests/forge-core/instances/basic-instances.rkt") (lib "forge/demo/life.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/cat.rkt") (lib "forge/example/forge/simple-graph.rkt") (lib "forge/amalgam/tests/forge_ex.rkt") (lib "forge/tests/forge/formulas/booleanFormulaOperators.rkt") (lib "forge/tests/forge/electrum/always-tests.rkt") (lib "forge/tests/forge/target/far_retargeting.rkt") (lib "forge/testme/library.rkt") (lib "forge/amalgam/tests/forge_ex_test.rkt") (lib "forge/pardinus-cli/server/error-tests.rkt") (lib "forge/lang/ast.rkt") (lib "forge/kodkod-cli/server/server-common.rkt") (lib "forge/tests/forge/sigs/abstractSigs.rkt") (lib "forge/tests/forge/electrum/social-network.rkt") (lib "forge/tests/forge-core/other/emptyJoinError.rkt") (lib "forge/examples/test.rkt") (lib "forge/tests/forge/formulas/quantifiedFormulas.rkt") (lib "forge/tests/forge/expressions/orderOfOpsExprs.rkt") (lib "forge/tests/forge-core/formulas/disj-all-core.rkt") (lib "forge/tests/forge/electrum/traffic-light.rkt") (lib "forge/tests/forge/formulas/multiplicityFormulas.rkt") (lib "forge/check-ex-spec/core/lang/reader.rkt") (lib "forge/tests/forge-functional/instances/eval-int-match.rkt") (lib "forge/examples/example.rkt") (lib "forge/tests/forge-functional/formulas/quantifiedFormulas.rkt") (lib "forge/example/forge/coercing-ints.rkt") (lib "forge/OLD/bugs/quantifierBug.rkt") (lib "forge/examples/tttnew.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/echo-server.rkt") (lib "forge/amalgam/userStudies/mturk_spec.rkt") (lib "forge/tests/forge/expressions/orderOfOpsLogical.rkt") (lib "forge/examples/smallsigstest.rkt") (lib "forge/tests/forge/electrum/past-time.rkt") (lib "forge/tests/forge/electrum/after-tests.rkt") (lib "forge/bsl/lang/reader.rkt") (lib "forge/example/store/testing.rkt") (lib "forge/new-mode/examples/basic-example-core.rkt") (lib "forge/tests/forge-core/sigs/oneSigs.rkt") (lib "forge/test4.rkt") (lib "forge/tests/forge-core/formulas/quantifiedFormulas.rkt") (lib "forge/testme/examples/ta-template/summarize.rkt") (lib "forge/tests/forge/other/decl-order.rkt") (lib "forge/tests/forge/examples/sudoku.rkt") (lib "forge/example/forge/tristan-bug.rkt") (lib "forge/example/forge-core/setting-solver.rkt") (lib "forge/amalgam/tests/substitutor_test.rkt") (lib "forge/new-mode/lang/reader.rkt") (lib "forge/examples/simpleTrace2.rkt") (lib "forge/example/forge-core/graphs.rkt") (lib "forge/example/store/testing2.rkt") (lib "forge/example/forge/graphs.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/test-server.rkt") (lib "forge/bsl/lang/bsl-lang-specific-checks.rkt") (lib "forge/example/store/edge-size-bug.rkt") (lib "forge/new-mode/core/main.rkt") (lib "forge/example/forge-core/import2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/dispatcher.rkt") (lib "forge/OLD/bugs/unreferencedAtomsDontPopulateBug.rkt") (lib "forge/kodkod-cli/server/kkcli-reader.rkt") (lib "forge/example/forge-core/pardinus2.rkt") (lib "forge/tests/forge/electrum/basic-temporal-example.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/test-service-mapper.rkt") (lib "forge/tests/forge/target/hamming_runs.rkt") (lib "forge/examples/circular.rkt") (lib "forge/tests/forge-core/ints/intStructure.rkt") (lib "forge/example/forge/check.rkt") (lib "forge/testme/examples/sample-ta/sample/chaffs/sample-chaff2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/client.rkt") (lib "forge/example/forge-core/shutdown.rkt") (lib "forge/examples/simplerTrace.rkt") (lib "forge/tests/forge-core/ints/intOperators.rkt") (lib "forge/tests/forge-functional/other/multiple-runs.rkt") (lib "forge/check-ex-spec/main.rkt") (lib "forge/example/forge-core/relation-breakers.rkt") (lib "forge/kodkod-cli/server/error-tests.rkt") (lib "forge/tests/forge/ints/intStructure.rkt") (lib "forge/tests/forge-core/other/ast-nodes.rkt") (lib "forge/examples/ADTtrace.rkt") (lib "forge/tests/forge/target/far_fixed.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/handshake.rkt") (lib "forge/tests/forge-functional/electrum/non-temporal-var-errors.rkt") (lib "forge/breaks.rkt") (lib "forge/example/store/quant-bug.rkt") (lib "forge/tests/forge-functional/electrum/trace-length-errors.rkt") (lib "forge/tests/forge-core/sigs/basicSigs.rkt") (lib "forge/example/store/with-command/make-c-sig.rkt") (lib "forge/example/store/with-command/make-b-sig.rkt") (lib "forge/amalgam/userStudies/KittyBacon.rkt") (lib "forge/amalgam/desugar/desugar_helpers.rkt") (lib "forge/tests/forge/relations/lone.rkt") (lib "forge/testme/examples/sample-student/student-sample-core.rkt") (lib "forge/examples/traceBreak.rkt") (lib "forge/example/forge-core/small.rkt") (lib "forge/tests/forge/ints/intComparators.rkt") (lib "forge/tests/forge/target/close_fixed.rkt") (lib "forge/amalgam/userStudies/test.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/chaffs/sample-chaff1.rkt") (lib "forge/check-ex-spec/library/commands.rkt") (lib "forge/tests/evaluator.rkt") (lib "forge/example/forge/unbound-identifier-bug.rkt") (lib "forge/tests/forge-core/formulas/booleanFormulaOperators.rkt") (lib "forge/lang/alloy-syntax/indenter.rkt") (lib "forge/kodkod-cli/server/kkcli-expander.rkt") (lib "forge/examples/hopsBetweenCities.rkt") (lib "forge/pardinus-cli/server/server.rkt") (lib "forge/racket-rfc6455/net/rfc6455/private/connection-manager.rkt") (lib "forge/tests/forge/other/instances.rkt") (lib "forge/logging/2022/main.rkt") (lib "forge/tests/forge/electrum/var-can-force-var-changes.rkt") (lib "forge/tests/forge/electrum/example-light-puzzle.rkt") (lib "forge/tests/forge-core/ints/intComparators.rkt") (lib "forge/tests/forge/target/close_retargeting.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/conn.rkt") (lib "forge/tests/forge-core/electrum/non-temporal-next.rkt") (lib "forge/tests/forge-core/formulas/disj-no-core.rkt") (lib "forge/example/store/meeting-bug.rkt") (lib "forge/sigs.rkt") (lib "forge/racket-rfc6455/net/rfc6455/timeout.rkt") (lib "forge/testme/lang/reader.rkt") (lib "forge/OLD/bugs/func-bug.rkt") (lib "forge/tests/forge-core/other/multiple-runs.rkt") (lib "forge/examples/test2.rkt") (lib "forge/bsl/main.rkt") (lib "forge/tests/forge-functional/formulas/multiplicityFormulas.rkt") (lib "forge/examples/eval-thing.rkt") (lib "forge/examples/intTests.rkt") (lib "forge/tests/forge-functional/sigs/basicSigs.rkt") (lib "forge/pardinus-cli/server/server-common.rkt") (lib "forge/examples/kittybacon.rkt") (lib "forge/testme/examples/sample-student/student-sample-surface.rkt") (lib "forge/examples/checkXSpecTests.rkt") (lib "forge/tests/forge/electrum/non-var-can-stop-var-changes.rkt") (lib "forge/kodkod-cli/server/server.rkt") (lib "forge/examples/undirectedtree.rkt") (lib "forge/examples/goatswolves3.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/client.rkt") (lib "forge/tests/forge-core/expressions/setComprehensions.rkt") (lib "forge/lang/reader.rkt") (lib "forge/tests/forge-functional/instances/basic-instances.rkt") (lib "forge/translate-to-kodkod-cli.rkt") (lib "forge/translate-from-kodkod-cli.rkt") (lib "forge/new-mode/library/public-utilities.rkt") (lib "forge/tests/forge-functional/examples/spanning-tree.rkt") (lib "forge/tests/forge-core/sigs/abstractSigs.rkt") (lib "forge/amalgam/substitutor/substitutor.rkt") (lib "forge/tests/forge/ints/intConverters.rkt") (lib "forge/amalgam/tests/desugar_test.rkt") (lib "forge/example/forge-core/testing-test.rkt") (lib "forge/tests/forge/sigs/extendingSigs.rkt") (lib "forge/testme/core/main.rkt") (lib "forge/OLD/OLD/traces/addRemove.rkt") (lib "forge/examples/crypto.rkt") (lib "forge/tests/forge-core/instances/atoms.rkt") (lib "forge/example/forge-core/testing-merge.rkt") (lib "forge/tests/forge/electrum/eventually-tests.rkt") (lib "forge/tests/forge-core/expressions/expressionOperators.rkt") (lib "forge/amalgam/desugar/desugar.rkt") (lib "forge/core/main.rkt") (lib "forge/example/store/quant-bug2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-client-with-threads.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-server.rkt") (lib "forge/new-mode/lang/expander.rkt") (lib "forge/tests/forge-functional/ints/intConverters.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/wheats/sample-wheat.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/conn.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/handshake.rkt") (lib "forge/tests/forge-core/electrum/temporal-next.rkt") (lib "forge/examples/bindTests.rkt") (lib "forge/tests/forge/electrum/var-vs-non-var-rels.rkt") (lib "forge/example/forge-core/pardinus.rkt") (lib "forge/examples/fancyBoundsTests.rkt") (lib "forge/amalgam/userStudies/test-model2.rkt") (lib "forge/check-ex-spec/demo/demo-suite.rkt") (lib "forge/examples/token_test.rkt") (lib "forge/examples/dir/file.rkt") (lib "forge/examples/Untitled.rkt") (lib "forge/tests/forge-core/sigs/extendingSigs.rkt") (lib "forge/new-mode/examples/basic-example-surface.rkt") (lib "forge/tests/forge/relations/breakers.rkt") (lib "forge/drracket-link.rkt") (lib "forge/tests/forge/examples/booleanLogic.rkt") (lib "forge/OLD/OLD/old-tests/basicGraph.rkt") (lib "forge/examples/internal/highlighting-experiment.rkt") (lib "forge/tests/forge/sigs/basicSigs.rkt") (lib "forge/testme/library/commands.rkt") (lib "forge/example/store/new-bug.rkt") (lib "forge/example/forge/instances.rkt") (lib "forge/OLD/OLD/old-tests/instances.rkt") (lib "forge/examples/errors/error-test-ast.rkt") (lib "forge/tests/forge/electrum/var-vs-non-var-sigs.rkt") (lib "forge/lang/lang-specific-checks.rkt") (lib "forge/server/eval-model.rkt") (lib "forge/testme/main.rkt") (lib "forge/lang/expander.rkt") (lib "forge/tests/forge/sigs/givenBounds.rkt") (lib "forge/examples/soundBreakTests.rkt") (lib "forge/racket-rfc6455/net/rfc6455/dispatcher.rkt") (lib "forge/tests/forge/relations/one.rkt") (lib "forge/example/store/scripting-preds.rkt") (lib "forge/example/forge/transition-system.rkt") (lib "forge/tests/forge-functional/instances/eval-expr-match.rkt") (lib "forge/main.rkt") (lib "forge/check-ex-spec/core/main.rkt") (lib "forge/lang/alloy-syntax/parser.rkt") (lib "forge/OLD/bugs/restrictionOperatorBug.rkt") (lib "forge/example/store/edge-size-bug-forge.rkt") (lib "forge/pardinus-cli/server/kkcli-trace.rkt") (lib "forge/tests/forge-functional/expressions/expressionOperators.rkt") (lib "forge/tests/forge-functional/sigs/extendingSigs.rkt") (lib "forge/tests/forge/other/univIdenRTC.rkt") (lib "forge/logging/sigs.rkt") (lib "forge/amalgam/lift-bounds/lift-bounds.rkt") (lib "forge/tests/forge/formulas/setFormulaOperators.rkt") (lib "forge/examples/test0.rkt") (lib "forge/racket-rfc6455/net/rfc6455/client.rkt") (lib "forge/server/modelToXML.rkt") (lib "forge/example/store/tainting/tainting.rkt") (lib "forge/tests/forge-functional/formulas/booleanFormulaOperators.rkt") (lib "forge/examples/address2_parsed.rkt") (lib "forge/tests/forge-functional/instances/breakers.rkt") (lib "forge/tests/forge-core/examples/testing.rkt") (lib "forge/example/store/old-forge.rkt") (lib "forge/kodkod-cli/server/intTests2.rkt") (lib "forge/example/store/tainting/some-defs.rkt") (lib "forge/lang/bounds.rkt") (lib "forge/examples/intTests2.rkt") (lib "forge/shared.rkt") (lib "forge/example/store/forge-file.rkt") (lib "forge/examples/soundBreakTests3.rkt") (lib "forge/tests/forge-core/expressions/ifte-performance.rkt") (lib "forge/kodkod-cli/server/kkcli-trace.rkt") (lib "forge/example/forge-core/basic-relation.rkt") (lib "forge/amalgam.rkt") (lib "forge/racket-rfc6455/net/rfc6455/url.rkt") (lib "forge/sigs-structs.rkt") (lib "forge/testme/examples/sample-ta/sample/wheats/sample-wheat.rkt") (lib "forge/example/forge-core/evaluating.rkt") (lib "forge/new-mode/main.rkt") (lib "forge/examples/sudoku.rkt") (lib "forge/check-ex-spec/lang/expander.rkt") (lib "forge/amalgam/tests/amalgam_tests.rkt") (lib "forge/example/forge-core/transition-system.rkt") (lib "forge/check-ex-spec/examples/ta-template/summarize.rkt") (lib "forge/examples/simpleTrace.rkt") (lib "forge/example/forge-core/import1.rkt") (lib "forge/check-ex-spec/lang/reader.rkt") (lib "forge/example/forge/basic-core.rkt") (lib "forge/examples/join-lhs-core.rkt") (lib "forge/pardinus-cli/server/kkcli-reader.rkt") (lib "forge/examples/traceSyntax.rkt") (lib "forge/tests/forge/electrum/always-true.rkt") (lib "forge/example/new-mode/new-mode-fancy.rkt") (lib "forge/amalgam/userStudies/un-commentedKittyBacon.rkt") (lib "forge/tests/forge/ints/intOperators.rkt") (lib "forge/tests/forge-functional/formulas/setFormulaOperators.rkt") (lib "forge/pardinus-cli/server/intTests2.rkt") (lib "forge/tests/forge-core/ints/intConverters.rkt") (lib "forge/tests/forge-functional/other/ast-nodes.rkt") (lib "forge/tests/forge-functional/ints/intOperators.rkt") (lib "forge/amalgam/tests/forge_ex2.rkt") (lib "forge/example/store/forge-core-file.rkt") (lib "forge/OLD/OLD/old-tests/plinear.rkt") (lib "forge/examples/soundBreakTests2.rkt") (lib "forge/amalgam/tests/desugar_helpers_test.rkt") (lib "forge/examples/address.rkt") (lib "forge/tests/forge-core/electrum/temporal-next-PvsC.rkt") (lib "forge/tests/forge/sigs/oneSigs.rkt") (lib "forge/examples/simplest.rkt") (lib "forge/pardinus-cli/server/kkcli-expander.rkt") (lib "forge/kodkod-cli/server/kks.rkt") (lib "forge/new-mode/library/private-utilities.rkt") (lib "forge/examples/namedAtoms.rkt") (lib "forge/testme/examples/sample-ta/sample/chaffs/sample-chaff1.rkt") (lib "forge/OLD/test-evaluator.rkt") (lib "forge/choose-lang-specific.rkt") (lib "forge/amalgam/desugar/tuple2Expr.rkt") (lib "forge/amalgam/tests/lift-bounds_helpers_tests.rkt") (lib "forge/last-checker.rkt") (lib "forge/examples/abc.rkt") (lib "forge/tests/forge-functional/sigs/oneSigs.rkt") (lib "forge/examples/address2.rkt") (lib "forge/example/forge-core/ints.rkt") (lib "forge/examples/errors/error-test-forge.rkt") (lib "forge/examples/tttboards.rkt") (lib "forge/lang/alloy-syntax/colorer.rkt") (lib "forge/tests/forge/electrum/cities.rkt") (lib "forge/tests/forge/sigs/loneSigs.rkt") (lib "forge/tests/forge-functional/instances/atoms.rkt") (lib "forge/server/forgeserver.rkt") (lib "forge/new-mode/library.rkt") (lib "forge/tests/error/main.rkt") (lib "forge/OLD/OLD/old-tests/skolemOptions.rkt") (lib "forge/tests/forge-core/formulas/disj-some-core.rkt") (lib "forge/tests/forge-core/formulas/disj-lone-core.rkt") (lib "forge/examples/goatswolves2.rkt") (lib "forge/example/forge-core/contrasting.rkt") (lib "forge/tests/forge-functional/expressions/setComprehensions.rkt") (lib "forge/example/store/minimal-quant-bug.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-client-with-sync.rkt") (lib "forge/lang/alloy-syntax/lexer.rkt") (lib "forge/logging/logging.rkt") (lib "forge/examples/graph.rkt") (lib "forge/evaluator.rkt") (lib "forge/tests/forge-functional/examples/testing.rkt") (lib "forge/tests/forge-core/formulas/setFormulaOperators.rkt") (lib "forge/tests/forge/expressions/setComprehensions.rkt") (lib "forge/check-ex-spec/examples/sample-student/student-sample-core.rkt") (lib "forge/core/lang/reader.rkt") (lib "forge/tool.rkt") (lib "forge/tests/forge-functional/electrum/temporal-next.rkt") (lib "forge/drracket-gui.rkt") (lib "forge/example/forge/basic.rkt") (lib "forge/example/store/new-bug2.rkt") (lib "forge/examples/traceComparison.rkt") (lib "forge/tests/forge-core/formulas/disj-one-core.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/chaffs/sample-chaff2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/conn-api.rkt") (lib "forge/tests/forge-functional/other/emptyJoinError.rkt") (lib "forge/example/forge-core/partial-instance.rkt") (lib "forge/racket-rfc6455/net/rfc6455/http.rkt") (lib "forge/testme/library/download-file.rkt") (lib "forge/tests/forge-core/electrum/trace-length-errors.rkt") (lib "forge/examples/higherOrderHack.rkt") (lib "forge/example/store/with-command/local-import.rkt") (lib "forge/examples/errors/error-test-paren.rkt") (lib "forge/racket-rfc6455/net/rfc6455.rkt") (lib "forge/new-mode/core/lang/reader.rkt") (lib "forge/tests/forge/expressions/expressionOperators.rkt") (lib "forge/example/new-mode/new-mode-core.rkt") (lib "forge/tests/forge-functional/ints/intComparators.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/dispatcher.rkt") (lib "forge/tests/forge-core/electrum/non-temporal-var-errors.rkt") (lib "forge/racket-rfc6455/net/rfc6455/server.rkt") (lib "forge/examples/address_parsed.rkt") (lib "forge/example/forge-core/info-maps.rkt") (lib "forge/examples/blah.rkt") (lib "forge/OLD/OLD/old-tests/intConversion.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/client.rkt") (lib "forge/example/forge-core/importing.rkt") (lib "forge/new-mode/library/commands.rkt") (lib "forge/examples/state-machine-inst.rkt") (lib "forge/send-to-kodkod.rkt") (lib "forge/examples/booleanLogic.rkt") (lib "forge/tests/forge-functional/sigs/abstractSigs.rkt") (lib "forge/tests/forge-functional/electrum/non-temporal-next.rkt") (lib "forge/pardinus-cli/server/kks.rkt") (lib "forge/OLD/OLD/instances.rkt") (lib "forge/example/forge-core/multiple-import.rkt") (lib "forge/example/forge/importing.rkt") (lib "forge/tests/forge-core/other/override-core.rkt") (lib "forge/amalgam/tests/lift-bounds_test.rkt") (lib "forge/lazy-tree.rkt") (lib "forge/example/forge-core/extending-ints.rkt") (lib "forge/tests/forge-core/other/bounds-optimization.rkt") (lib "forge/examples/undirected_tree_syntax.rkt") (lib "forge/examples/join-lhs.rkt") (lib "forge/kodkod-cli/server/kkcli-test.rkt") (lib "forge/tests/forge-functional/expressions/ifte-performance.rkt") (lib "forge/tests/forge-core/formulas/multiplicityFormulas.rkt") (lib "forge/testme/core/lang/reader.rkt") (lib "forge/check-ex-spec/examples/sample-student/student-sample-surface.rkt") (lib "forge/tests/forge-functional/electrum/temporal-next-PvsC.rkt") (lib "forge/example/forge-core/read-from-file.rkt") (lib "forge/examples/life.rkt") (lib "forge/pardinus-cli/server/kkcli-test.rkt") (lib "forge/check-ex-spec/library/download-file.rkt") (lib "forge/examples/variadicBreakTests.rkt") (lib "forge/check-ex-spec/library.rkt") (lib "forge/example/store/meeting-test.rkt") (lib "forge/logging/check-ex-spec/main.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/frame.rkt") (lib "forge/amalgam/tests/test_helpers.rkt") (lib "forge/tests/forge-functional/ints/intStructure.rkt") (lib "forge/tests/forge/expressions/orderOfOpsLogical2.rkt") (lib "forge/lang/alloy-syntax/tokenizer.rkt") (lib "forge/examples/test1.rkt") (lib "forge/example/store/forge-core-importing.rkt"))) (name . "forge") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (alloy . #t) (author:tim_nelson@brown.edu . #t) (education . #t) (logic . #t) (modeling . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/tnelson/Forge.git?path=forge") (tags . ("alloy" "education" "logic" "modeling" "relational")) (versions . #hash((default . #hasheq((checksum . "1687cba0ebdb598c29c51845d43c98a459d0588f") (source . "https://github.com/tnelson/Forge.git?path=forge") (source_url . "https://github.com/tnelson/Forge.git?path=forge"))))))) ("forged-ocelot" . #hasheq((author . "charles_cutting@brown.edu") (authors . ("charles_cutting@brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forged-ocelot" "doc/forged-ocelot@forged-ocelot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forged-ocelot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forged-ocelot.txt"))) (checksum . "f28a7012348b9096ede5cb1da64ef6544686b205") (checksum-error . #f) (collection . "forged-ocelot") (conflicts . ()) (date-added . 1563299930) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "rosette" "scribble-lib" "racket-doc")) (description . "A fork of James Bornholt's Ocelot solver for relational model finding, for use in Forge.") (implies . ()) (modules . ((lib "forged-ocelot/lang/universe.rkt") (lib "forged-ocelot/lib/simplify.rkt") (lib "forged-ocelot/lang/sketch.rkt") (lib "forged-ocelot/forged-ocelot.rkt") (lib "forged-ocelot/scribblings/forged-ocelot.scrbl") (lib "forged-ocelot/lib/alloy.rkt") (lib "forged-ocelot/lib/simplify-solve.rkt") (lib "forged-ocelot/engine/matrix-ops.rkt") (lib "forged-ocelot/engine/engine.rkt") (lib "forged-ocelot/engine/symmetry.rkt") (lib "forged-ocelot/engine/tuple.rkt") (lib "forged-ocelot/lang/bounds.rkt") (lib "forged-ocelot/engine/matrix.rkt") (lib "forged-ocelot/scribblings/log.rkt") (lib "forged-ocelot/engine/interpretation.rkt") (lib "forged-ocelot/lib/print.rkt") (lib "forged-ocelot/lang/ast.rkt") (lib "forged-ocelot/main.rkt"))) (name . "forged-ocelot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:charles_cutting@brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/cemcutting/forged-ocelot.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f28a7012348b9096ede5cb1da64ef6544686b205") (source . "https://github.com/cemcutting/forged-ocelot.git") (source_url . "https://github.com/cemcutting/forged-ocelot.git"))))))) ("formatted-string" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "formatted-string" "doc/formatted-string@formatted-string/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/formatted-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/formatted-string.txt"))) (checksum . "7d477f7d8b2d64bd3e93b1f376a95ca89fc655eb") (checksum-error . #f) (collection . "formatted-string") (conflicts . ()) (date-added . 1639210527) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Extends racket string to formatted string") (implies . ()) (modules . ((lib "formatted-string/tests/test.rkt") (lib "formatted-string/scribblings/formatted-string.scrbl") (lib "formatted-string/lang/reader.rkt") (lib "formatted-string/lang/language-info.rkt") (lib "formatted-string/lang/runtime-config.rkt"))) (name . "formatted-string") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (formatted-string . #t) (reader . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/formatted-string.git#develop") (tags . ("formatted-string" "reader")) (versions . #hash((default . #hasheq((checksum . "7d477f7d8b2d64bd3e93b1f376a95ca89fc655eb") (source . "https://github.com/dannypsnl/formatted-string.git#develop") (source_url . "https://github.com/dannypsnl/formatted-string.git#develop"))))))) ("formica" . #hasheq((author . "samsergey@yandex.ru") (authors . ("samsergey@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/formica.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "/var/tmp/16630197821663019782785-samsergey_formica_head/info.rkt:5:0: require: bad syntax\n  in: (require string-constants)\n  location...:\n   /var/tmp/16630197821663019782785-samsergey_formica_head/info.rkt:5:0\n  context...:\n   /home/pkgserver/racket/collects/setup/getinfo.rkt:33:0: get-info/full\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "\"Functionally oriented\" educational language") (implies . ()) (modules . ()) (name . "formica") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:samsergey@yandex.ru . #t) (ring:1 . #t))) (source . "http://github.com/samsergey/formica/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "git://github.com/samsergey/formica") (source_url . "http://github.com/samsergey/formica/tree/master"))))))) ("forms" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("forms-doc" "forms-lib")) (description . "Web form validation (docs and implementation).") (implies . ("forms-doc" "forms-lib")) (modules . ()) (name . "forms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms"))))))) ("forms-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forms" "doc/forms@forms-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-doc.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . "forms") (conflicts . ()) (dependencies . ("base" "forms-lib" "sandbox-lib" "scribble-lib" "racket-doc" "web-server-doc" "web-server-lib")) (description . "Web form validation (documentation only).") (implies . ()) (modules . ((lib "forms/forms.scrbl"))) (name . "forms-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc"))))))) ("forms-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-lib.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . "forms") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "web-server-lib")) (description . "Web form validation (implementation only).") (implies . ()) (modules . ((lib "forms/private/l10n.rkt") (lib "forms/main.rkt") (lib "forms/private/contract.rkt") (lib "forms/private/prim.rkt") (lib "forms/private/widget.rkt") (lib "forms/private/formlet.rkt") (lib "forms/base.rkt") (lib "forms/private/form.rkt"))) (name . "forms-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib"))))))) ("forms-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-test.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "forms-lib" "rackunit-lib" "srfi-lite-lib" "web-server-lib")) (description . "Web form validation (tests only).") (implies . ()) (modules . ((lib "tests/forms/widget-tests.rkt") (lib "tests/forms/formlet-tests.rkt") (lib "tests/forms/util.rkt") (lib "tests/forms/run-all-tests.rkt") (lib "tests/forms/form-tests.rkt"))) (name . "forms-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-test") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-test") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-test"))))))) ("forth" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forth" "doc/forth@forth/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forth.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forth.txt"))) (checksum . "2e9247b1b8c28402d0eecfc3fb97e805e3074255") (checksum-error . #f) (collection . "forth") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs")) (description . "Forth emulator, as a Racket #lang") (implies . ()) (modules . ((lib "forth/main.rkt") (lib "forth/examples/define.rkt") (lib "forth/examples/exit.rkt") (lib "forth/examples/arithmetic.rkt") (lib "forth/lang/reader.rkt") (lib "forth/private/stack.rkt") (lib "forth/scribblings/forth.scrbl") (lib "forth/examples/two-and-two-make-four.rkt") (lib "forth/private/command.rkt"))) (name . "forth") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (repl . #t) (ring:1 . #t))) (source . "http://github.com/bennn/forth/tree/master") (tags . ("repl")) (versions . #hash((default . #hasheq((checksum . "2e9247b1b8c28402d0eecfc3fb97e805e3074255") (source . "git://github.com/bennn/forth") (source_url . "http://github.com/bennn/forth/tree/master"))))))) ("fpbench" . #hasheq((author . "me@pavpanchekha.com dthien@cs.washington.edu") (authors . ("me@pavpanchekha.com" "dthien@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fpbench.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fpbench.txt"))) (checksum . "40952f5e05b3b263d624203678e570d1bfea2aac") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1548660608) (dependencies . ("base" "math-lib" "generic-flonum" "rackunit-lib")) (description . "Tools for the FPBench numerical software standards (more info at http://fpbench.org/)") (implies . ()) (modules . ((lib "fpbench/src/core2js.rkt") (lib "fpbench/infra/test-core2python.rkt") (lib "fpbench/src/core2wls.rkt") (lib "fpbench/src/core2python.rkt") (lib "fpbench/infra/test-common.rkt") (lib "fpbench/infra/test-core2java.rkt") (lib "fpbench/infra/test-core2ocaml.rkt") (lib "fpbench/src/fpcore-checker.rkt") (lib "fpbench/src/common.rkt") (lib "fpbench/src/imperative.rkt") (lib "fpbench/src/common-subexpr-elim.rkt") (lib "fpbench/evaluate.rkt") (lib "fpbench/infra/test-core2go.rkt") (lib "fpbench/export.rkt") (lib "fpbench/toolserver.rkt") (lib "fpbench/src/core2sollya.rkt") (lib "fpbench/infra/gen-expr.rkt") (lib "fpbench/src/canonicalizer.rkt") (lib "fpbench/src/core2gappa.rkt") (lib "fpbench/src/ml-canonicalizer.rkt") (lib "fpbench/src/core2smtlib2.rkt") (lib "fpbench/src/range-analysis.rkt") (lib "fpbench/src/core2go.rkt") (lib "fpbench/src/core2h.rkt") (lib "fpbench/src/core2cakeml.rkt") (lib "fpbench/infra/test-core2cakeml.rkt") (lib "fpbench/src/ml.rkt") (lib "fpbench/src/core2c.rkt") (lib "fpbench/infra/gen-sanity.rkt") (lib "fpbench/src/evaluator.rkt") (lib "fpbench/src/fpcore-reader.rkt") (lib "fpbench/infra/test-core2fortran03.rkt") (lib "fpbench/infra/test-core2sollya.rkt") (lib "fpbench/src/core2tex.rkt") (lib "fpbench/infra/gen-tests.rkt") (lib "fpbench/infra/test-core2fptaylor.rkt") (lib "fpbench/src/compilers.rkt") (lib "fpbench/src/core2matlab.rkt") (lib "fpbench/infra/bench-stats.rkt") (lib "fpbench/src/core2fortran03.rkt") (lib "fpbench/src/core2scala.rkt") (lib "fpbench/src/core2ocaml.rkt") (lib "fpbench/src/tensor.rkt") (lib "fpbench/infra/test-core2wls.rkt") (lib "fpbench/src/sampler.rkt") (lib "fpbench/src/fpcore-visitor.rkt") (lib "fpbench/src/fpcore-interpreter.rkt") (lib "fpbench/infra/filter.rkt") (lib "fpbench/infra/test-core2haskell.rkt") (lib "fpbench/infra/test-core2smtlib2.rkt") (lib "fpbench/infra/test-core2scala.rkt") (lib "fpbench/infra/test-core2julia.rkt") (lib "fpbench/src/lisp.rkt") (lib "fpbench/infra/core2json.rkt") (lib "fpbench/infra/test-core2c.rkt") (lib "fpbench/infra/test-core2matlab.rkt") (lib "fpbench/src/core2fptaylor.rkt") (lib "fpbench/src/fpcore-extra.rkt") (lib "fpbench/main.rkt") (lib "fpbench/src/core2java.rkt") (lib "fpbench/src/core2julia.rkt") (lib "fpbench/transform.rkt") (lib "fpbench/infra/test-core2js.rkt") (lib "fpbench/src/supported.rkt") (lib "fpbench/src/core2haskell.rkt"))) (name . "fpbench") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dthien@cs.washington.edu . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (numerical . #t) (ring:1 . #t) (standards . #t))) (source . "https://github.com/FPBench/FPBench.git") (tags . ("floating-point" "numerical" "standards")) (versions . #hash((default . #hasheq((checksum . "40952f5e05b3b263d624203678e570d1bfea2aac") (source . "https://github.com/FPBench/FPBench.git") (source_url . "https://github.com/FPBench/FPBench.git"))))))) ("fra" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fra" "doc/fra@fra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fra.txt"))) (checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "Purely functional implementation of relational algebra") (implies . ()) (modules . ((lib "fra/main.rkt") (lib "fra/database.rkt") (lib "fra/ivector.rkt") (lib "fra/test.rkt") (lib "fra/tuple.rkt") (lib "fra/schema.rkt") (lib "fra/query.rkt") (lib "fra/optimize.rkt") (lib "fra/relation.rkt") (lib "fra/optimize-tests.rkt") (lib "fra/fra.scrbl") (lib "fra/prop.rkt"))) (name . "fra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/fra/tree/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (source . "github://github.com/jeapostrophe/fra/master") (source_url . "http://github.com/jeapostrophe/fra/tree/master"))))))) ("frog" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "frog" "doc/frog@frog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/frog.txt") (test-failure-log . "server/built/test-fail/frog.txt") (test-success-log . #f))) (checksum . "8fc8fc7ae323bdfc3208669c526703c8a0b3e000") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "find-parent-dir" "html-lib" "markdown" "racket-index" "reprovide-lang-lib" "scribble-lib" "scribble-text-lib" "srfi-lite-lib" "threading-lib" "web-server-lib" "at-exp-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-text-lib" "threading-doc" "web-server-doc")) (description . "Static blog generator application. Supports Twitter Bootstrap, Pygments, more.") (implies . ()) (modules . ((lib "frog/private/bodies-page.rkt") (lib "example/_src/A-Non-Post-Scribble-Page.scrbl") (lib "frog/private/posts.rkt") (lib "frog/private/define-doc.rkt") (lib "frog/private/tags.rkt") (lib "frog/paths.rkt") (lib "frog/params.rkt") (lib "frog/private/feeds.rkt") (lib "example/_src/posts/2013-06-19-a-scribble-post.scrbl") (lib "frog/private/read-scribble.rkt") (lib "frog/private/new-post.rkt") (lib "example/frog.rkt") (lib "frog/private/version.rkt") (lib "frog/private/main.rkt") (lib "frog/private/serialize-posts.rkt") (lib "frog/config/lang/reader.rkt") (lib "frog/private/stale.rkt") (lib "frog/private/author.rkt") (lib "frog/frog.scrbl") (lib "frog/widgets.rkt") (lib "frog/private/params.rkt") (lib "frog/private/xexpr2text.rkt") (lib "frog/config/main.rkt") (lib "frog/private/util.rkt") (lib "frog/private/enhance-body/add-doc-links/doc-uri.rkt") (lib "frog/private/upgrade/template-frog.rkt") (lib "frog/enhance-body.rkt") (lib "frog/private/non-posts.rkt") (lib "frog/private/enhance-body/syntax-highlight/pygments.rkt") (lib "frog/private/watch-dir.rkt") (lib "frog/config/private/test.rkt") (lib "frog/verbosity.rkt") (lib "frog/private/paths.rkt") (lib "frog/private/upgrade/old-config.rkt") (lib "frog/private/verbosity.rkt") (lib "frog/scribble.rkt") (lib "frog/config/private/load.rkt") (lib "frog/private/post-struct.rkt") (lib "frog/main.rkt") (lib "frog/private/xexpr-map.rkt") (lib "frog/private/html.rkt") (lib "frog/private/template.rkt"))) (name . "frog") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (author:racket@greghendershott.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "http://github.com/greghendershott/frog/tree/master") (tags . ("app" "blog" "markdown" "scribble" "web")) (versions . #hash((default . #hasheq((checksum . "8fc8fc7ae323bdfc3208669c526703c8a0b3e000") (source . "git://github.com/greghendershott/frog") (source_url . "http://github.com/greghendershott/frog/tree/master"))))))) ("from-template" . #hasheq((author . "phdumaresq@protonmail.com") (authors . ("phdumaresq@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "from-template" "doc/from-template@from-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/from-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/from-template.txt"))) (checksum . "fd1085ff2c21b876e2b6d05ae8f0e934d274f4df") (checksum-error . #f) (collection . "from-template") (conflicts . ()) (date-added . 1597943518) (dependencies . ("base" "readline" "http-easy" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Download template apps to get started building new projects with Racket") (implies . ()) (modules . ((lib "from-template/scribblings/from-template.scrbl") (lib "from-template/main.rkt"))) (name . "from-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:phdumaresq@protonmail.com . #t) (cli . #t) (git . #t) (raco . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/nixin72/from-template.git") (tags . ("cli" "git" "raco" "template")) (versions . #hash((default . #hasheq((checksum . "fd1085ff2c21b876e2b6d05ae8f0e934d274f4df") (source . "https://github.com/nixin72/from-template.git") (source_url . "https://github.com/nixin72/from-template.git"))))))) ("ftree" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ftree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ftree.txt"))) (checksum . "7e8f67c00359728e3f0ec75c410317bac4e82f07") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Finger Trees") (implies . ()) (modules . ((lib "orderedseq/orderedseq.rkt") (lib "tests/pqueue-tests.rkt") (lib "ftree/main.rkt") (lib "orderedseq/main.rkt") (lib "tests/ftree-tests.rkt") (lib "raseq/raseq.rkt") (lib "doc/ftree.scrbl") (lib "pqueue/main.rkt") (lib "tests/itree-tests.rkt") (lib "tests/oseq-tests.rkt") (lib "tests/raseq-tests.rkt") (lib "ftree/ftree.rkt") (lib "intervaltree/main.rkt") (lib "pqueue/pqueue.rkt") (lib "raseq/main.rkt") (lib "intervaltree/intervaltree.rkt"))) (name . "ftree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/stchang/ftree/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "7e8f67c00359728e3f0ec75c410317bac4e82f07") (source . "github://github.com/stchang/ftree/master") (source_url . "http://github.com/stchang/ftree/tree/master"))))))) ("fulmar" . #hasheq((author . "earl.christopher@gmail.com") (authors . ("earl.christopher@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fulmar-doc" "doc/fulmar-doc@fulmar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fulmar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fulmar.txt"))) (checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (checksum-error . #f) (collection . "fulmar") (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "rackunit-lib" "sandbox-lib" "at-exp-lib" "at-exp-lib")) (description . "Generate C++ code from S-expressions") (implies . ()) (modules . ((lib "fulmar/doc.rkt") (lib "fulmar/private/doc/doc-gen.rkt") (lib "fulmar/generate.rkt") (lib "fulmar/private/fulmar-core.rkt") (lib "fulmar/tests/core-chunk-tests.rkt") (lib "fulmar/main.rkt") (lib "fulmar/private/core-chunk.rkt") (lib "fulmar/tests/standard-chunk-tests.rkt") (lib "fulmar/version.rkt") (lib "fulmar/private/doc/doc-scraper.rkt") (lib "fulmar/private/utility.rkt") (lib "fulmar/doc/fulmar-doc.scrbl") (lib "fulmar/meta.rkt") (lib "fulmar/private/generate.rkt") (lib "fulmar/private/doc/document.rkt") (lib "fulmar/tests/main.rkt") (lib "fulmar/verify.rkt") (lib "fulmar/FulmarAbbreviations.rkt") (lib "fulmar/standard-chunk.rkt") (lib "fulmar/tests/fulmar-core-tests.rkt") (lib "fulmar/type-decls.rkt") (lib "fulmar/apply.rkt"))) (name . "fulmar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:earl.christopher@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/cwearl/fulmar.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (source . "git://github.com/cwearl/fulmar.git") (source_url . "http://github.com/cwearl/fulmar.git/tree/master"))))))) ("functional" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-lib" "functional-doc")) (description . "generic interfaces and data structures for functional programming") (implies . ("functional-lib" "functional-doc")) (modules . ()) (name . "functional") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/functional/tree/master?path=functional") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional"))))))) ("functional-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional" "doc/functional@functional-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-doc.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-doc" "collections-lib" "functional-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “functional”") (implies . ()) (modules . ((lib "scribblings/data/functional.scrbl"))) (name . "functional-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional-doc") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc"))))))) ("functional-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-lib.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "curly-fn-lib" "static-rename-lib")) (description . "implementation (no documentation) for “functional”") (implies . ()) (modules . ((lib "data/maybe.rkt") (lib "data/either.rkt") (lib "data/monad.rkt") (lib "data/functor.rkt") (lib "data/applicative.rkt"))) (name . "functional-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional-lib") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib"))))))) ("fuse" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fuse" "doc/fuse@fuse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fuse.txt") (test-failure-log . "server/built/test-fail/fuse.txt") (test-success-log . #f))) (checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (checksum-error . #f) (collection . "fuse") (conflicts . ()) (dependencies . ("scribble-lib" "base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Library for creating user-space filesystems with FUSE") (implies . ()) (modules . ((lib "fuse/private/data.rkt") (lib "fuse/main.rkt") (lib "fuse/scribblings/fuse.scrbl") (lib "fuse/examples/hello.rkt") (lib "fuse/private/errno.rkt") (lib "fuse/private/filesystem.rkt"))) (name . "fuse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (filesystem . #t) (linux . #t) (ring:1 . #t) (systems . #t) (unix . #t))) (source . "https://github.com/thinkmoore/racket-fuse.git") (tags . ("filesystem" "linux" "systems" "unix")) (versions . #hash((default . #hasheq((checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (source . "https://github.com/thinkmoore/racket-fuse.git") (source_url . "https://github.com/thinkmoore/racket-fuse.git"))))))) ("futil" . #hasheq((author . "sgt43@cornell.edu") (authors . ("sgt43@cornell.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/futil.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b2de29a6e8c1d54100cc6967ecb9fa1fe80223c5") (checksum-error . "git-checkout: won't extract a link with an up-directory element\n  path: #<path:../.flake8>\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:776:3\n   [repeats 1 more time]\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:167:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   ...\n") (collection . #f) (conflicts . ()) (date-added . 1565734435) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "gui-lib" "graph-lib" "threading-lib")) (description . "An intermediate language designed for Fuse.") (implies . ()) (modules . ((lib "futil/ast.rkt") (lib "futil/futil-syntax.rkt") (lib "futil/component.rkt") (lib "futil/futil-prims.rkt") (lib "futil/stdlib.rkt") (lib "futil/futil-syntax-2.rkt") (lib "futil/json.rkt") (lib "futil/test/unit-tests.rkt") (lib "futil/port.rkt") (lib "futil/test/playground.rkt") (lib "futil/cmdline.rkt") (lib "futil/test/test.rkt") (lib "futil/state-dict.rkt") (lib "futil/util.rkt") (lib "futil/grid-gui.rkt") (lib "futil/visualizer.rkt") (lib "futil/main.rkt") (lib "futil/interpret.rkt"))) (name . "futil") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:sgt43@cornell.edu . #t) (ring:1 . #t))) (source . "https://github.com/cucapra/futil.git?path=futil") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b2de29a6e8c1d54100cc6967ecb9fa1fe80223c5") (source . "https://github.com/cucapra/futil.git?path=futil") (source_url . "https://github.com/cucapra/futil.git?path=futil"))))))) ("future-visualizer-pict" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "671d32970eef64d549a5cdbe5e3d048474c7304a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591707999) (dependencies . ("base" "data-lib" "draw-lib" "pict-lib")) (description . "The drawing and data representation portions of the future visualizer") (implies . ()) (modules . ((lib "future-visualizer/private/visualizer-drawing.rkt") (lib "future-visualizer/private/visualizer-data.rkt") (lib "future-visualizer/trace.rkt") (lib "future-visualizer/private/display.rkt") (lib "future-visualizer/private/constants.rkt") (lib "future-visualizer/private/drawing-helpers.rkt") (lib "future-visualizer/private/graph-drawing.rkt"))) (name . "future-visualizer-pict") (ring . 0) (search-terms . #hasheq((author:samth@ccs.neu.edu . #t) (futures . #t) (ring:0 . #t))) (source . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict") (tags . ("futures")) (versions . #hash((default . #hasheq((checksum . "671d32970eef64d549a5cdbe5e3d048474c7304a") (source . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict") (source_url . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict"))))))) ("futures-sort" . #hasheq((author . "dominik.pantucek@trustica.cz") (authors . ("dominik.pantucek@trustica.cz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "futures-sort" "doc/futures-sort@futures-sort/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/futures-sort.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/futures-sort.txt"))) (checksum . "dc1914f60b192897855989d4b87846eaa95aa777") (checksum-error . #f) (collection . "futures-sort") (conflicts . ()) (date-added . 1570451773) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-math" "at-exp-lib")) (description . "This library leverages futures for implementing parallel merge-sort of vector? and fxvector?. By default it tries to use all available processors as reported by (processor-count).\r\n") (implies . ()) (modules . ((lib "futures-sort/scribblings/futures-sort.scrbl") (lib "futures-sort/main.rkt"))) (name . "futures-sort") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dominik.pantucek@trustica.cz . #t) (futures . #t) (ring:1 . #t) (sorting-algorithm . #t))) (source . "https://github.com/dzoep/futures-sort.git") (tags . ("futures" "sorting-algorithm")) (versions . #hash((default . #hasheq((checksum . "dc1914f60b192897855989d4b87846eaa95aa777") (source . "https://github.com/dzoep/futures-sort.git") (source_url . "https://github.com/dzoep/futures-sort.git"))))))) ("fuzzy-search" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fuzzy-search" "doc/fuzzy-search@fuzzy-search/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fuzzy-search.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fuzzy-search.txt"))) (checksum . "8a55ab77a1c2e2d835c782dff25fbb7d8732fa34") (checksum-error . #f) (collection . "fuzzy-search") (conflicts . ()) (date-added . 1588832809) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Approximate string matching based on Forrest Smith's reverse engineering of Sublime Text.") (implies . ()) (modules . ((lib "fuzzy-search/scribblings/fuzzy-search.scrbl") (lib "fuzzy-search/benchmark.rkt") (lib "fuzzy-search/main.rkt") (lib "fuzzy-search/require.rkt"))) (name . "fuzzy-search") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (fuzzy-search . #t) (ring:1 . #t) (search . #t) (strings . #t))) (source . "https://github.com/zyrolasting/fuzzy-search.git") (tags . ("fuzzy-search" "search" "strings")) (versions . #hash((default . #hasheq((checksum . "8a55ab77a1c2e2d835c782dff25fbb7d8732fa34") (source . "https://github.com/zyrolasting/fuzzy-search.git") (source_url . "https://github.com/zyrolasting/fuzzy-search.git"))))))) ("g-code-tools" . #hasheq((author . "gifan.thada@gmail.com") (authors . ("gifan.thada@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/g-code-tools.txt") (docs . (("main" "g-code-tools" "doc/g-code-tools@g-code-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/g-code-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/g-code-tools.txt"))) (checksum . "8a786ec0608afdc0729c344e7cd58d368fc86ff9") (checksum-error . #f) (collection . "g-code-tools") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A collection of tools for manipulating G-code.") (implies . ()) (modules . ((lib "g-code-tools/main.rkt") (lib "g-code-tools/g-code-tools.rkt") (lib "g-code-tools/scribblings/g-code-tools.scrbl") (lib "g-code-tools/tests.rkt"))) (name . "g-code-tools") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:gifan.thada@gmail.com . #t) (g-code . #t) (ring:1 . #t))) (source . "https://github.com/GThad/g-code-tools.git") (tags . ("g-code")) (versions . #hash((default . #hasheq((checksum . "8a786ec0608afdc0729c344e7cd58d368fc86ff9") (source . "https://github.com/GThad/g-code-tools.git") (source_url . "https://github.com/GThad/g-code-tools.git"))))))) ("gcstats" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gcstats.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gcstats.txt"))) (checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Print summary GC statistics after running a program.") (implies . ()) (modules . ((lib "gcstats/main.rkt") (lib "gcstats/core.rkt"))) (name . "gcstats") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/samth/gcstats/tree/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (source . "github://github.com/samth/gcstats/master") (source_url . "http://github.com/samth/gcstats/tree/master"))))))) ("gemtext" . #hasheq((author . "bctnry@outlook.com") (authors . ("bctnry@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gemtext" "doc/gemtext@gemtext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gemtext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gemtext.txt"))) (checksum . "479172598771b69fbeb199037929c2ce0b37e22b") (checksum-error . #f) (collection . "gemtext") (conflicts . ()) (date-added . 1627123349) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A text/gemini parser for Racket.") (implies . ()) (modules . ((lib "gemtext/parser.rkt") (lib "gemtext/defn.rkt") (lib "gemtext/main.rkt") (lib "gemtext/scribblings/gemtext.scrbl"))) (name . "gemtext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bctnry@outlook.com . #t) (gemini . #t) (gemtext . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/bctnry/gemtext-racket.git#master") (tags . ("gemini" "gemtext" "parser")) (versions . #hash((default . #hasheq((checksum . "479172598771b69fbeb199037929c2ce0b37e22b") (source . "https://github.com/bctnry/gemtext-racket.git#master") (source_url . "https://github.com/bctnry/gemtext-racket.git#master"))))))) ("gen-queue-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gen-queue-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gen-queue-lib.txt"))) (checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984443) (dependencies . ("base" "data-lib")) (description . "Generic interface for some queues. Used by graph-lib") (implies . ()) (modules . ((lib "data/gen-queue/gen-queue.rkt") (lib "data/gen-queue.rkt") (lib "data/gen-queue/priority.rkt") (lib "data/gen-queue/fifo.rkt"))) (name . "gen-queue-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (queue . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=gen-queue-lib") (tags . ("data" "graph" "queue")) (versions . #hash((default . #hasheq((checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (source . "https://github.com/stchang/graph.git?path=gen-queue-lib") (source_url . "https://github.com/stchang/graph.git?path=gen-queue-lib"))))))) ("generator-util" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generator-util" "doc/generator-util@generator-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generator-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generator-util.txt"))) (checksum . "2de885130984bd6880a5e1017d0b3783e64b3877") (checksum-error . #f) (collection . "generator-util") (conflicts . ()) (date-added . 1587611542) (dependencies . ("base" "collections-lib" "relation" "social-contract" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "sandbox-lib" "cover" "cover-coveralls" "collections-doc")) (description . "Utilities for working with generators") (implies . ()) (modules . ((lib "generator-util/private/util.rkt") (lib "generator-util/tests/generator-util.rkt") (lib "generator-util/main.rkt") (lib "generator-util/scribblings/generator-util.scrbl"))) (name . "generator-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (generators . #t) (lazy . #t) (ring:1 . #t))) (source . "https://github.com/countvajhula/generator-util.git") (tags . ("generators" "lazy")) (versions . #hash((default . #hasheq((checksum . "2de885130984bd6880a5e1017d0b3783e64b3877") (source . "https://github.com/countvajhula/generator-util.git") (source_url . "https://github.com/countvajhula/generator-util.git"))))))) ("generic-bind" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-bind" "doc/generic-bind@generic-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-bind.txt"))) (checksum . "d8bd9b76b792c6ebdc32d05db9545274f2ab5053") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "math-lib" "compatibility-lib")) (description . "Generic binding forms.") (implies . ()) (modules . ((lib "generic-bind/main.rkt") (lib "generic-bind/tests/for-tests/for-util.rkt") (lib "generic-bind/as-rkt-names.rkt") (lib "generic-bind/generic-bind.scrbl") (lib "generic-bind/version-utils.rkt") (lib "generic-bind/syntax-parse-utils.rkt") (lib "generic-bind/generic-bind.rkt") (lib "generic-bind/tests/for-tests/run-for-tests.rkt") (lib "generic-bind/tests/maze.rkt") (lib "generic-bind/stx-utils.rkt") (lib "generic-bind/nested-binds-helper.rkt") (lib "generic-bind/tests/generic-bind-tests.rkt"))) (name . "generic-bind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/stchang/generic-bind/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d8bd9b76b792c6ebdc32d05db9545274f2ab5053") (source . "github://github.com/stchang/generic-bind/master") (source_url . "http://github.com/stchang/generic-bind/tree/master"))))))) ("generic-flonum" . #hasheq((author . "bksaiki@gmail.com") (authors . ("bksaiki@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-flonum" "doc/generic-flonum@generic-flonum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-flonum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-flonum.txt"))) (checksum . "490cd103437876ff98413f34f2b8c845f89fa2ea") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1610083877) (dependencies . ("math-lib" "base" "scribble-lib" "rackunit-lib" "racket-doc" "math-doc")) (description . "Alternative MPFR interface for emulating IEEE-754 floating-point numbers") (implies . ()) (modules . ((lib "generic-flonum/scribblings/generic-flonum.scrbl") (lib "generic-flonum/main.rkt") (lib "generic-flonum/tests/test.rkt") (lib "generic-flonum/private/mpfr.rkt") (lib "generic-flonum/private/gfl-interface.rkt") (lib "generic-flonum/private/gfl-consts.rkt") (lib "generic-flonum/private/gfl.rkt"))) (name . "generic-flonum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bksaiki@gmail.com . #t) (floating-point . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/bksaiki/generic-flonum.git") (tags . ("floating-point" "math")) (versions . #hash((default . #hasheq((checksum . "490cd103437876ff98413f34f2b8c845f89fa2ea") (source . "https://github.com/bksaiki/generic-flonum.git") (source_url . "https://github.com/bksaiki/generic-flonum.git"))))))) ("generic-syntax-expanders" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-syntax-expanders" "doc/generic-syntax-expanders@generic-syntax-expanders/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-syntax-expanders.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-syntax-expanders.txt"))) (checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (checksum-error . #f) (collection . "generic-syntax-expanders") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "reprovide-lang" "lens" "point-free" "predicates" "scribble-lib" "scribble-text-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Allows definition of macros which include expander-definition forms, like match expanders") (implies . ()) (modules . ((lib "generic-syntax-expanders/private/doc-util.rkt") (lib "generic-syntax-expanders/private/expander-types.scrbl") (lib "generic-syntax-expanders/private/with-identifiers.rkt") (lib "generic-syntax-expanders/test/test-foo-mixin-expander-predicate.rkt") (lib "generic-syntax-expanders/private/scoped-transformers.scrbl") (lib "generic-syntax-expanders/private/define-scoped-transformers.rkt") (lib "generic-syntax-expanders/private/reqprov.scrbl") (lib "generic-syntax-expanders/private/expander-types.rkt") (lib "generic-syntax-expanders/main.rkt") (lib "generic-syntax-expanders/test/test-call-with-dotted-last.rkt") (lib "generic-syntax-expanders/private/expanders.rkt") (lib "generic-syntax-expanders/private/scoped-transformers.rkt") (lib "generic-syntax-expanders/private/define-expanders.scrbl") (lib "generic-syntax-expanders/private/define-expanders.rkt") (lib "generic-syntax-expanders/test/test-define-x-expander-use-site-scope-simple.rkt") (lib "generic-syntax-expanders/private/define-scoped-transformers.scrbl") (lib "generic-syntax-expanders/test/test-arrows.rkt") (lib "generic-syntax-expanders/private/expanders.scrbl") (lib "generic-syntax-expanders/main.scrbl") (lib "generic-syntax-expanders/private/reqprov.rkt"))) (name . "generic-syntax-expanders") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/jackfirth/generic-syntax-expanders/tree/master") (tags . ("experimental" "syntax")) (versions . #hash((default . #hasheq((checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (source . "git://github.com/jackfirth/generic-syntax-expanders") (source_url . "http://github.com/jackfirth/generic-syntax-expanders/tree/master"))))))) ("geoid" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "geoid" "doc/geoid@geoid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoid.txt"))) (checksum . "0831c6902959bef860bb9565c9af5a860e1cd324") (checksum-error . #f) (collection . "geoid") (conflicts . ()) (date-added . 1599289911) (dependencies . ("base" "math-lib" "rackunit-lib" "typed-racket-lib" "racket-doc" "scribble-lib" "al2-test-runner")) (description . "work efficiently with geographic data") (implies . ()) (modules . ((lib "geoid/private/tiling.rkt") (lib "geoid/tools/map-tools.rkt") (lib "geoid/private/waypoint-alignment.rkt") (lib "geoid/private/geoid-tests.rkt") (lib "geoid/waypoint-alignment.rkt") (lib "geoid/private/geodesy.rkt") (lib "geoid/main.rkt") (lib "geoid/private/geoid.rkt") (lib "geoid/geodesy.rkt") (lib "geoid/scribblings/geoid.scrbl") (lib "geoid/tiling.rkt") (lib "geoid/private/vmath.rkt"))) (name . "geoid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/geoid.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0831c6902959bef860bb9565c9af5a860e1cd324") (source . "https://github.com/alex-hhh/geoid.git") (source_url . "https://github.com/alex-hhh/geoid.git"))))))) ("geoip" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("geoip-doc" "geoip-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (docs and implementation)") (implies . ("geoip-doc" "geoip-lib")) (modules . ()) (name . "geoip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip"))))))) ("geoip-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "geoip" "doc/geoip@geoip-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip-doc.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "geoip-lib" "racket-doc" "scribble-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (docs only)") (implies . ()) (modules . ((lib "geoip/geoip.scrbl"))) (name . "geoip-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc"))))))) ("geoip-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip-lib.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (implementation only)") (implies . ()) (modules . ((lib "geoip/private/decoder.rkt") (lib "geoip/private/encoder.rkt") (lib "geoip/main.rkt"))) (name . "geoip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib"))))))) ("get-bonus" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-bonus.txt") (test-failure-log . "server/built/test-fail/get-bonus.txt") (test-success-log . #f))) (checksum . "d9bb88d2940263641c35ad98912c5a2b3136cc96") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("3s" "openal" "lux" "dos" "fector" "opengl" "base" "compatibility-lib" "data-lib" "data-enumerate-lib" "draw-lib" "eli-tester" "gui-lib" "htdp-lib" "math" "pfds" "plot" "rackunit-lib" "redex-lib" "mode-lambda" "apse" "slideshow-lib" "typed-racket-lib" "racket-doc")) (description . "Get Bonus is a project about discovering the best way to program video games.") (implies . ()) (modules . ((lib "gb/gui/world.rkt") (lib "gb/graphics/main.rkt") (lib "gb/lib/component.rkt") (lib "gb/lib/random.rkt") (lib "gb/data/lifo-heap.rkt") (lib "gb/data/fvector.rkt") (lib "gb/data/ltq.rkt") (lib "gb/lib/skal.rkt") (lib "games/rpswar/random.rkt") (lib "gb/lib/gzip.rkt") (lib "gb/lib/godel-seq.rkt") (lib "gb/sys/menu-lib.rkt") (lib "gb/physics/cd-broad.rkt") (lib "games/maze/main.rkt") (lib "gb/lib/ffi.rkt") (lib "gb/lib/evector.rkt") (lib "gb/data/mvector.rkt") (lib "gb/input/keyboard.rkt") (lib "gb/lib/math.rkt") (lib "gb/lib/meta-q.rkt") (lib "gb/meta-help.rkt") (lib "games/rpswar/fst.rkt") (lib "gb/art.rkt") (lib "gb/gui/os.rkt") (lib "gb/ai/path-finding.rkt") (lib "gb/lib/ffi/vector.rkt") (lib "gb/data/fmatrix.rkt") (lib "gb/lib/performance-log.rkt") (lib "gb/main.rkt") (lib "exp/bsp-space.rkt") (lib "gb/lib/fstree.rkt") (lib "games/rpswar/main.rkt") (lib "exp/fern.rkt") (lib "gb/data/psn.rkt") (lib "gb/input/joystick.rkt") (lib "tools/log-display.rkt") (lib "gb/input/controller.rkt") (lib "games/maze/map.rkt") (lib "gb/lib/tr-cheat.rkt") (lib "gb/lib/srs.rkt") (lib "games/tennis/main.rkt") (lib "exp/des.rkt") (lib "games/rpswar/graph.rkt") (lib "gb/graphics/font-lib.rkt") (lib "gb/sys/menu.rkt") (lib "gb/physics/cd-narrow.rkt") (lib "gb/meta.rkt"))) (name . "get-bonus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "http://github.com/get-bonus/get-bonus/tree/master/") (tags . ("app" "audio" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "d9bb88d2940263641c35ad98912c5a2b3136cc96") (source . "github://github.com/get-bonus/get-bonus/master/") (source_url . "http://github.com/get-bonus/get-bonus/tree/master/"))))))) ("get-pass" . #hasheq((author . "smitchell556@gmail.com") (authors . ("smitchell556@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "get-pass" "doc/get-pass@get-pass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-pass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/get-pass.txt"))) (checksum . "6733b1094c57bb9d6e1e5e4a415fd4e2d0878d99") (checksum-error . #f) (collection . "get-pass") (conflicts . ()) (date-added . 1552253657) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Utility to get passwords from the command line without echoing input.") (implies . ()) (modules . ((lib "get-pass/main.rkt") (lib "get-pass/scribblings/get-pass.scrbl"))) (name . "get-pass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:smitchell556@gmail.com . #t) (commandline . #t) (get-pass . #t) (getpass . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/smitchell556/get-pass.git") (tags . ("commandline" "get-pass" "getpass" "password")) (versions . #hash((default . #hasheq((checksum . "6733b1094c57bb9d6e1e5e4a415fd4e2d0878d99") (source . "https://github.com/smitchell556/get-pass.git") (source_url . "https://github.com/smitchell556/get-pass.git"))))))) ("get-primitive" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-primitive.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/get-primitive.txt"))) (checksum . "c69044511178cd544f5ce0c3d672c1e077030282") (checksum-error . #f) (collection . "get-primitive") (conflicts . ()) (dependencies . ("base")) (description . "Extract low-level primitives") (implies . ()) (modules . ((lib "get-primitive/main.rkt"))) (name . "get-primitive") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (linklet . #t) (ring:1 . #t))) (source . "https://github.com/samth/get-primitive.git") (tags . ("linklet")) (versions . #hash((default . #hasheq((checksum . "c69044511178cd544f5ce0c3d672c1e077030282") (source . "https://github.com/samth/get-primitive.git") (source_url . "https://github.com/samth/get-primitive.git"))))))) ("gettext" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gettext" "doc/gettext@gettext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gettext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gettext.txt"))) (checksum . "c7ef1a8567e284108d8620198c98a49ccab5b7b8") (checksum-error . #f) (collection . "gettext") (conflicts . ()) (date-added . 1567420335) (dependencies . ("base" "srfi-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "GNU gettext compatible library for internationalization with BSD license") (implies . ()) (modules . ((lib "gettext/main.rkt") (lib "gettext/scribblings/gettext.scrbl"))) (name . "gettext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (internationalization . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/free-gettext.git") (tags . ("internationalization")) (versions . #hash((default . #hasheq((checksum . "c7ef1a8567e284108d8620198c98a49ccab5b7b8") (source . "https://github.com/Kalimehtar/free-gettext.git") (source_url . "https://github.com/Kalimehtar/free-gettext.git"))))))) ("gg" . #hasheq((author . "siraaj@khandkar.net") (authors . ("siraaj@khandkar.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gg" "doc/gg@gg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gg.txt"))) (checksum . "9f9f777a95c13aeb3eee81112cf0eef3f8f164c2") (checksum-error . #f) (collection . "gg") (conflicts . ()) (date-added . 1643576862) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A tool to discover, catalogue and compare git repos across N machines.") (implies . ()) (modules . ((lib "gg/doc/gg.scrbl") (lib "gg/main.rkt"))) (name . "gg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:siraaj@khandkar.net . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/xandkar/gg.git#0.0.0") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "9f9f777a95c13aeb3eee81112cf0eef3f8f164c2") (source . "https://github.com/xandkar/gg.git#0.0.0") (source_url . "https://github.com/xandkar/gg.git#0.0.0"))))))) ("gillette" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gillette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gillette.txt"))) (checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625029010) (dependencies . ("gillette-lib" "gillette-doc")) (description . "XPath for Racket") (implies . ("gillette-lib" "gillette-doc")) (modules . ()) (name . "gillette") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git?path=gillette") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (source . "https://github.com/jessealama/gillette.git?path=gillette") (source_url . "https://github.com/jessealama/gillette.git?path=gillette"))))))) ("gillette-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gillette" "doc/gillette@gillette-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gillette-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gillette-doc.txt"))) (checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (checksum-error . #f) (collection . "gillette") (conflicts . ()) (date-added . 1625029197) (dependencies . ("base" "gillette-lib" "scribble-lib" "racket-doc")) (description . "Docs for Gillette") (implies . ()) (modules . ((lib "gillette/scribblings/limitations.scrbl") (lib "gillette/scribblings/gillette.scrbl"))) (name . "gillette-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git?path=gillette-doc") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (source . "https://github.com/jessealama/gillette.git?path=gillette-doc") (source_url . "https://github.com/jessealama/gillette.git?path=gillette-doc"))))))) ("gillette-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gillette-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gillette-lib.txt"))) (checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625029132) (dependencies . ("base" "typed-racket-lib" "syntax-classes-lib" "txexpr" "http-easy" "laramie-lib" "rackunit-lib" "rackunit-typed")) (description . "Implementation for Gillette") (implies . ()) (modules . ((lib "gillette/types.rkt") (lib "gillette/convert.rkt") (lib "gillette/xpath.rkt") (lib "gillette/axes.rkt") (lib "gillette/xml.rkt") (lib "gillette/main.rkt") (lib "gillette/xdm.rkt") (lib "gillette/equality.rkt") (lib "gillette/accessors.rkt") (lib "gillette/parameters.rkt"))) (name . "gillette-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git?path=gillette-lib") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (source . "https://github.com/jessealama/gillette.git?path=gillette-lib") (source_url . "https://github.com/jessealama/gillette.git?path=gillette-lib"))))))) ("gillette-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gillette-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gillette-test.txt"))) (checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1625029250) (dependencies . ("base" "rackunit-lib" "gillette-lib")) (description . "Tests for Gillette") (implies . ()) (modules . ((lib "tests/gillette/wikipedia.rkt"))) (name . "gillette-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git?path=gillette-test") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "0f574df183aa91762697f1bce3961c3d425896ea") (source . "https://github.com/jessealama/gillette.git?path=gillette-test") (source_url . "https://github.com/jessealama/gillette.git?path=gillette-test"))))))) ("gir" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gir" "doc/gir@gir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gir.txt"))) (checksum . "b0934a0c2d00933e7f0cc17b7f59a51ee5f841c1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "GTK/GLib/GIO/... GObjectIntrospection FFI binding") (implies . ()) (modules . ((lib "gir/loadlib.rkt") (lib "gir/translator.rkt") (lib "gir/test.rkt") (lib "gir/enum.rkt") (lib "gir/minimal-test.rkt") (lib "gir/struct.rkt") (lib "gir/function.rkt") (lib "gir/field.rkt") (lib "gir/main.rkt") (lib "gir/signal.rkt") (lib "gir/object.rkt") (lib "gir/gtype.rkt") (lib "gir/contract.rkt") (lib "gir/utils.rkt") (lib "gir/glib.rkt") (lib "gir/gir.scrbl") (lib "gir/interface.rkt") (lib "gir/const.rkt") (lib "gir/property.rkt") (lib "gir/base.rkt"))) (name . "gir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/gir/tree/master") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "b0934a0c2d00933e7f0cc17b7f59a51ee5f841c1") (source . "git://github.com/Kalimehtar/gir") (source_url . "http://github.com/Kalimehtar/gir/tree/master"))))))) ("git-slice" . #hasheq((author . "samth@ccs.neu.edu mflatt@cs.utah.edu") (authors . ("samth@ccs.neu.edu" "mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/git-slice.txt") (test-failure-log . "server/built/test-fail/git-slice.txt") (test-success-log . #f))) (checksum . "110b361425280e61abf8de99e5d41865afc5cddb") (checksum-error . #f) (collection . "git-slice") (conflicts . ()) (dependencies . ("base" "remote-shell" "rackunit-lib")) (description . "For slicing git repositories into pieces") (implies . ()) (modules . ((lib "git-slice/git.rkt") (lib "git-slice/chop.rkt") (lib "git-slice/compute.rkt") (lib "git-slice/tests/test.rkt") (lib "git-slice/main.rkt") (lib "git-slice/filter.rkt") (lib "git-slice/prune.rkt") (lib "git-slice/commit.rkt"))) (name . "git-slice") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (author:samth@ccs.neu.edu . #t) (git . #t) (ring:1 . #t))) (source . "http://github.com/samth/git-slice/tree/master") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "110b361425280e61abf8de99e5d41865afc5cddb") (source . "git://github.com/samth/git-slice") (source_url . "http://github.com/samth/git-slice/tree/master"))))))) ("github" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github.txt") (test-failure-log . "server/built/test-fail/github.txt") (test-success-log . #f))) (checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (checksum-error . #f) (collection . "github") (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib")) (description . "Github Bindings") (implies . ()) (modules . ((lib "github/gui.rkt") (lib "github/tool.rkt") (lib "github/main.rkt"))) (name . "github") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:samth@ccs.neu.edu . #t) (github . #t) (ring:1 . #t))) (source . "http://github.com/samth/github.rkt/tree/master") (tags . ("api" "github")) (versions . #hash((default . #hasheq((checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (source . "git://github.com/samth/github.rkt") (source_url . "http://github.com/samth/github.rkt/tree/master"))))))) ("github-api" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "github-api" "doc/github-api@github-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github-api.txt") (test-failure-log . "server/built/test-fail/github-api.txt") (test-success-log . #f))) (checksum . "2079df4a8a61d6f71722d9e7eb0aff4043995018") (checksum-error . #f) (collection . "github-api") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for the GitHub API") (implies . ()) (modules . ((lib "github-api/scribblings/github-api.scrbl") (lib "github-api/functional_tests/utils.rkt") (lib "github-api/functional_tests/events.rkt") (lib "github-api/git.rkt") (lib "github-api/events.rkt") (lib "github-api/issues.rkt") (lib "github-api/users.rkt") (lib "github-api/functional_tests/issues.rkt") (lib "github-api/main.rkt") (lib "github-api/functional_tests/gists.rkt") (lib "github-api/functional_tests/identity.rkt") (lib "github-api/gists.rkt") (lib "github-api/functional_tests/webhooks.rkt") (lib "github-api/utils.rkt") (lib "github-api/orgs.rkt") (lib "github-api/webhooks.rkt") (lib "github-api/pull.rkt"))) (name . "github-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (github . #t) (ring:1 . #t))) (source . "http://github.com/eu90h/racket-github-api/tree/master") (tags . ("github")) (versions . #hash((default . #hasheq((checksum . "2079df4a8a61d6f71722d9e7eb0aff4043995018") (source . "git://github.com/eu90h/racket-github-api") (source_url . "http://github.com/eu90h/racket-github-api/tree/master"))))))) ("glass" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glass" "doc/glass@glass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glass.txt"))) (checksum . "a5b25ed7716598b49ccdb5b6917d0eacd95764cf") (checksum-error . #f) (collection . "glass") (conflicts . ()) (date-added . 1596367396) (dependencies . ("base" "fancy-app" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An optics (lenses, prisms, traversals, etc.) library.") (implies . ()) (modules . ((lib "glass/indexed-traversal.rkt") (lib "glass/lens.scrbl") (lib "glass/main.rkt") (lib "glass/traversal.scrbl") (lib "glass/prism.scrbl") (lib "glass/lens.rkt") (lib "glass/private/scribble-evaluator-factory.rkt") (lib "glass/traversal.rkt") (lib "glass/main.scrbl") (lib "glass/prism.rkt") (lib "glass/private/scribble-cross-document-tech.rkt"))) (name . "glass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (lens . #t) (optics . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/glass.git") (tags . ("lens" "optics")) (versions . #hash((default . #hasheq((checksum . "a5b25ed7716598b49ccdb5b6917d0eacd95764cf") (source . "https://github.com/jackfirth/glass.git") (source_url . "https://github.com/jackfirth/glass.git"))))))) ("glc" . #hasheq((author . "byatt.griffin@gmail.com") (authors . ("byatt.griffin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glc" "doc/glc@glc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glc.txt"))) (checksum . "22fd96aa0a11b092cd8aaaeb049e03bea05764d3") (checksum-error . #f) (collection . "glc") (conflicts . ()) (date-added . 1600562503) (dependencies . ("lazy" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A lambda calculus #lang") (implies . ()) (modules . ((lib "glc/shared/cond.rkt") (lib "glc/scratch.rkt") (lib "glc/lib/expander.rkt") (lib "glc/main.rkt") (lib "glc/base/lang/reader.rkt") (lib "glc/shared/numbers.rkt") (lib "glc/lib/reader.rkt") (lib "glc/simply-typed/lang/reader.rkt") (lib "glc/base/expander.rkt") (lib "glc/simply-typed/expander.rkt") (lib "glc/simply-typed/base/expander.rkt") (lib "glc/scribblings/glc.scrbl") (lib "glc/simply-typed/base/lang/reader.rkt") (lib "glc/shared/list.rkt") (lib "glc/shared/core.rkt"))) (name . "glc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:byatt.griffin@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/GriffinMB/glc.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "22fd96aa0a11b092cd8aaaeb049e03bea05764d3") (source . "https://github.com/GriffinMB/glc.git") (source_url . "https://github.com/GriffinMB/glc.git"))))))) ("glfw3" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glfw3" "doc/glfw3@glfw3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glfw3.txt") (test-failure-log . "server/built/test-fail/glfw3.txt") (test-success-log . #f))) (checksum . "e52613f60f25aeac7f035b1f11a79401a770af35") (checksum-error . #f) (collection . "glfw3") (conflicts . ()) (dependencies . ("base" "disposable" "fixture" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "GLFW wrapper for Racket") (implies . ()) (modules . ((lib "glfw3/main.rkt") (lib "glfw3/example.rkt") (lib "glfw3/scribblings/glfw3.scrbl") (lib "glfw3/glfw-test.rkt"))) (name . "glfw3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (glfw . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/rkt-glfw.git") (tags . ("glfw")) (versions . #hash((default . #hasheq((checksum . "e52613f60f25aeac7f035b1f11a79401a770af35") (source . "https://github.com/BourgondAries/rkt-glfw.git") (source_url . "https://github.com/BourgondAries/rkt-glfw.git"))))))) ("glm" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glm" "doc/glm@glm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glm.txt"))) (checksum . "9ab93fe8549f6ce8da29ce651a175bf35a4d996d") (checksum-error . #f) (collection . "glm") (conflicts . ()) (date-added . 1568847749) (dependencies . ("base" "math-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "OpenGL Mathematics") (implies . ()) (modules . ((lib "glm/private/reprovide.rkt") (lib "glm/private/vector.rkt") (lib "glm/mat.rkt") (lib "glm/ivec.rkt") (lib "glm/swizzle-syntax.rkt") (lib "glm/scribblings/glm-core.scrbl") (lib "glm/private/matrix.rkt") (lib "glm/scribblings/glm-matrix-types.scrbl") (lib "glm/dmat.rkt") (lib "glm/vec.rkt") (lib "glm/vector-types.rkt") (lib "glm/bvec.rkt") (lib "glm/swizzle.rkt") (lib "glm/scribblings/glm.scrbl") (lib "glm/main.rkt") (lib "glm/matrix-types.rkt") (lib "glm/dvec.rkt") (lib "glm/scribblings/glm-vector-types.scrbl") (lib "glm/uvec.rkt") (lib "glm/scribblings/glm-includes.rkt"))) (name . "glm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (GLSL . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-glm.git") (tags . ("GLSL" "math" "OpenGL")) (versions . #hash((default . #hasheq((checksum . "9ab93fe8549f6ce8da29ce651a175bf35a4d996d") (source . "https://github.com/dedbox/racket-glm.git") (source_url . "https://github.com/dedbox/racket-glm.git"))))))) ("glob" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glob" "doc/glob@glob/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glob.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glob.txt"))) (checksum . "e4cc1bf39587ec1037fc67651d22ad353c7ef381") (checksum-error . #f) (collection . "glob") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Deprecated. Use file/glob instead.") (implies . ()) (modules . ((lib "glob/main.rkt") (lib "glob/private/in-new-directory.rkt") (lib "glob/typed.rkt") (lib "glob/private/glob.rkt") (lib "glob/scribblings/glob.scrbl"))) (name . "glob") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (deprecated . #t) (iterable . #t) (ring:1 . #t) (scripting . #t) (string . #t))) (source . "http://github.com/bennn/glob/tree/master") (tags . ("deprecated" "iterable" "scripting" "string")) (versions . #hash((default . #hasheq((checksum . "e4cc1bf39587ec1037fc67651d22ad353c7ef381") (source . "git://github.com/bennn/glob") (source_url . "http://github.com/bennn/glob/tree/master"))))))) ("global" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "global" "doc/global@global/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/global.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/global.txt"))) (checksum . "842bcbe8f1a6e6f21cdd0db6d853acab97c14afd") (checksum-error . #f) (collection . "global") (conflicts . ()) (date-added . 1605284647) (dependencies . ("text-table" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Define global variables and automatically generate a command line parser.") (implies . ()) (modules . ((lib "global/tests/define-global-stress-test.rkt") (lib "global/tests/out-of-scope.rkt") (lib "global/main.rkt") (lib "global/examples/minimal.rkt") (lib "global/scribblings/global.scrbl") (lib "global/examples/example.rkt"))) (name . "global") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (command-line . #t) (commandline . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/global.git") (tags . ("command-line" "commandline")) (versions . #hash((default . #hasheq((checksum . "842bcbe8f1a6e6f21cdd0db6d853acab97c14afd") (source . "https://github.com/Metaxal/global.git") (source_url . "https://github.com/Metaxal/global.git"))))))) ("glossolalia" . #hasheq((author . "rob.kleffner@gmail.com gamecodeshark@gmail.com") (authors . ("rob.kleffner@gmail.com" "gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glossolalia" "doc/glossolalia@glossolalia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glossolalia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glossolalia.txt"))) (checksum . "528eefa533d4f06b29b73c35a8ad294aafd35db2") (checksum-error . #f) (collection . "glossolalia") (conflicts . ()) (dependencies . ("beautiful-racket-macro" "base" "rackunit-lib" "math-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for generating words according to sound and syllable rules. Has features for cross-syllable rules and phoneme occurence frequency.") (implies . ()) (modules . ((lib "glossolalia/examples/hawaiian-like.rkt") (lib "glossolalia/tokenize-only.rkt") (lib "glossolalia/scribblings/glossolalia.scrbl") (lib "glossolalia/tokenizer.rkt") (lib "glossolalia/examples/rotokas-like.rkt") (lib "glossolalia/parser.rkt") (lib "glossolalia/examples/japanese-like.rkt") (lib "glossolalia/examples/test.rkt") (lib "glossolalia/examples/finnish-like.rkt") (lib "glossolalia/parser-only.rkt") (lib "glossolalia/generator.rkt") (lib "glossolalia/to-html.rkt") (lib "glossolalia/main.rkt") (lib "glossolalia/lexer.rkt") (lib "glossolalia/entry.rkt") (lib "glossolalia/colorer.rkt") (lib "glossolalia/examples/german-like.rkt") (lib "glossolalia/roulette-wheel.rkt"))) (name . "glossolalia") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (author:rob.kleffner@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/robertkleffner/glossolalia/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "528eefa533d4f06b29b73c35a8ad294aafd35db2") (source . "git://github.com/robertkleffner/glossolalia") (source_url . "http://github.com/robertkleffner/glossolalia/tree/master"))))))) ("gls" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gls" "doc/gls@gls/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gls.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gls.txt"))) (checksum . "82f2f504a3ccf534126020baedb406f813863143") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Generic Little (Object, Type, Anything, ...) System - multiple dispatch on types") (implies . ()) (modules . ((lib "gls/types.rkt") (lib "gls/test.rkt") (lib "gls/callables.rkt") (lib "gls/utils.rkt") (lib "gls/util-macros.rkt") (lib "gls/callable-macros.rkt") (lib "gls/main.rkt") (lib "gls/gls.scrbl"))) (name . "gls") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/gls/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "82f2f504a3ccf534126020baedb406f813863143") (source . "github://github.com/Kalimehtar/gls/master") (source_url . "http://github.com/Kalimehtar/gls/tree/master"))))))) ("glsl" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/glsl.txt") (docs . (("main" "glsl" "doc/glsl@glsl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glsl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glsl.txt"))) (checksum . "6853bcb4324a10deb2cec70e59fb8b401a45e9f3") (checksum-error . #f) (collection . "glsl") (conflicts . ()) (date-added . 1571851283) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "The OpenGL Shader Language 4.5 (GLSL)") (implies . ()) (modules . ((lib "glsl/private.rkt") (lib "glsl/scribblings/glsl.scrbl") (lib "glsl/main.rkt") (lib "glsl/scribblings/glsl-includes.rkt"))) (name . "glsl") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (lang . #t) (ring:1 . #t) (shader . #t))) (source . "https://github.com/dedbox/racket-glsl.git") (tags . ("lang" "OpenGL" "shader")) (versions . #hash((default . #hasheq((checksum . "6853bcb4324a10deb2cec70e59fb8b401a45e9f3") (source . "https://github.com/dedbox/racket-glsl.git") (source_url . "https://github.com/dedbox/racket-glsl.git"))))))) ("glu-tessellate" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glu-tessellate" "doc/glu-tessellate@glu-tessellate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glu-tessellate.txt") (test-failure-log . "server/built/test-fail/glu-tessellate.txt") (test-success-log . #f))) (checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (checksum-error . #f) (collection . "glu-tessellate") (conflicts . ()) (dependencies . ("base" "draw-doc" "gui-lib" "racket-doc" "scribble-lib")) (description . "Converts a set of closed paths to a set of covering triangles covering the region enclosed by the curves") (implies . ()) (modules . ((lib "glu-tessellate/main.rkt") (lib "glu-tessellate/glu-tessellate.scrbl"))) (name . "glu-tessellate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/glu-tessellate/tree/master") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (source . "git://github.com/mflatt/glu-tessellate") (source_url . "http://github.com/mflatt/glu-tessellate/tree/master"))))))) ("gmp" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gmp" "doc/gmp@gmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp.txt"))) (checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (checksum-error . #f) (collection . "gmp") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "binaryio-lib" "gmp-lib" "racket-doc" "scribble-lib")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ("gmp-lib")) (modules . ((lib "gmp/tests/bytes.rkt") (lib "gmp/tests/util.rkt") (lib "gmp/tests/misc.rkt") (lib "gmp/gmp.scrbl"))) (name . "gmp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp"))))))) ("gmp-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp-lib.txt"))) (checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (checksum-error . #f) (collection . "gmp") (conflicts . ()) (dependencies . ("base")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ()) (modules . ((lib "gmp/private/gmp.rkt") (lib "gmp/unsafe.rkt") (lib "gmp/main.rkt"))) (name . "gmp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp-lib") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp-lib") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp-lib"))))))) ("gnal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gnal-lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b63298a6609102894a9482c1ccc562f61ac89054") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "a #lang that allows relative module paths for reader languages") (implies . ()) (modules . ((lib "gnal/tests/test-fish-rel.rkt") (lib "gnal/tests/test-case-insensitive.rkt") (lib "gnal/tests/test-turtle-rel.rkt") (lib "gnal/tests/case-insensitive.rkt") (lib "gnal/tests/test-fish.rkt") (lib "gnal/tests/test-turtle.rkt") (lib "gnal/lang/reader.rkt"))) (name . "gnal-lang") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/gnal-lang/tree/master") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "b63298a6609102894a9482c1ccc562f61ac89054") (source . "git://github.com/AlexKnauth/gnal-lang") (source_url . "http://github.com/AlexKnauth/gnal-lang/tree/master"))))))) ("gnucash" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gnucash" "doc/gnucash@gnucash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gnucash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gnucash.txt"))) (checksum . "e15cf377a1c9665734d4962f89bf0f94c984e0b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sxml" "srfi-lib" "srfi-lite-lib" "memoize" "rackunit-lib" "typed-racket-lib" "rackunit-typed" "racket-doc" "scribble-lib")) (description . "parses gnucash XML files") (implies . ()) (modules . ((lib "gnucash/examples/example.rkt") (lib "gnucash/parse.rkt") (lib "gnucash/libs.rkt") (lib "gnucash/scribblings/gnucash.scrbl") (lib "gnucash/typed-libs.rkt") (lib "gnucash/wrapped-parse.rkt") (lib "gnucash/main.rkt"))) (name . "gnucash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/gnucash/tree/master") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "e15cf377a1c9665734d4962f89bf0f94c984e0b6") (source . "git://github.com/jbclements/gnucash") (source_url . "http://github.com/jbclements/gnucash/tree/master"))))))) ("goblins" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/goblins.txt") (docs . (("main" "goblins" "doc/goblins@goblins/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/goblins.txt") (test-failure-log . "server/built/test-fail/goblins.txt") (test-success-log . #f))) (checksum . "88a5663a82e28899465258a593f80b3d0018b8a0") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1583354199) (dependencies . ("base" "crypto" "syrup" "pk" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "Goblins is a transactional, distributed actor model environment") (implies . ()) (modules . ((lib "goblins/actor-lib/common.rkt") (lib "goblins/actor-lib/await.rkt") (lib "goblins/scribblings/intro.scrbl") (lib "goblins/ocapn/netlayer/onion-socks.rkt") (lib "goblins/actor-lib/env.rkt") (lib "goblins/actor-lib/pubsub.rkt") (lib "goblins/utils/install-factory.rkt") (lib "goblins/actor-lib/rall.rkt") (lib "goblins/actor-lib/add-sub.rkt") (lib "goblins/actor-lib/pushdown.rkt") (lib "goblins/actor-lib/revokeable.rkt") (lib "goblins/scribblings/api.scrbl") (lib "goblins/main.rkt") (lib "goblins/utils/simple-dispatcher.rkt") (lib "goblins/hash-contracts.rkt") (lib "goblins/actor-lib/methods.rkt") (lib "goblins/actor-lib/facet.rkt") (lib "goblins/actor-lib/hash-st8.rkt") (lib "goblins/scribblings/captp.scrbl") (lib "goblins/utils/url-base64.rkt") (lib "goblins/actor-lib/ticker2.rkt") (lib "goblins/scribblings/tutorial.scrbl") (lib "goblins/message.rkt") (lib "goblins/actor-lib/nonce-registry.rkt") (lib "goblins/actor-lib/cell.rkt") (lib "goblins/actor-lib/select-swear.rkt") (lib "goblins/actor-lib/bootstrap.rkt") (lib "goblins/actor-lib/ticker.rkt") (lib "goblins/actor-lib/define-actor.rkt") (lib "goblins/scribblings/actor-lib.scrbl") (lib "goblins/utils/simple-sealers.rkt") (lib "goblins/core.rkt") (lib "goblins/scribblings/goblins.scrbl") (lib "goblins/ocapn/netlayer/onion.rkt") (lib "goblins/utils/values-to-list.rkt") (lib "goblins/actor-lib/actor-sealers.rkt") (lib "goblins/scribblings/eval.rkt") (lib "goblins/utils/modyule.rkt") (lib "goblins/actor-lib/let-on.rkt") (lib "goblins/ocapn/captp-test.rkt") (lib "goblins/ocapn.rkt") (lib "goblins/eventspace-vat.rkt") (lib "goblins/actor-lib/imply-method.rkt") (lib "goblins/actor-lib/sleep-pr.rkt") (lib "goblins/actor-lib/sync-pr.rkt") (lib "goblins/vat.rkt") (lib "goblins/actor-lib/swappable.rkt") (lib "goblins/ocapn/captp.rkt") (lib "goblins/actor-lib/simple-mint.rkt") (lib "goblins/errors.rkt") (lib "goblins/ocapn/netlayer/fake-intarwebs.rkt") (lib "goblins/ocapn/structs-urls.rkt") (lib "goblins/actor-lib/joiners.rkt") (lib "goblins/ocapn/define-recordable-struct.rkt") (lib "goblins/actor-lib/ward.rkt") (lib "goblins/actor-lib/selfish-spawn.rkt"))) (name . "goblins") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (actors . #t) (asynchronous . #t) (author:cwebber@dustycloud.org . #t) (ring:1 . #t))) (source . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.9") (tags . ("actors" "asynchronous")) (versions . #hash((default . #hasheq((checksum . "88a5663a82e28899465258a593f80b3d0018b8a0") (source . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.9") (source_url . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.9"))))))) ("google" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google.txt"))) (checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "rackunit-lib")) (description . "Google APIs (Drive, Plus, ...) for Racket.") (implies . ()) (modules . ((lib "google/exn.rkt") (lib "google/profile.rkt") (lib "google/calendar.rkt") (lib "google/main.rkt") (lib "google/generic-api.rkt") (lib "google/oauth/cli.rkt") (lib "google/simple-token-store.rkt") (lib "google/json-utils.rkt") (lib "google/drive.rkt") (lib "google/oauth.rkt"))) (name . "google") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:tonygarnockjones@gmail.com . #t) (google . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/tonyg/racket-google/tree/master") (tags . ("api" "google" "web")) (versions . #hash((default . #hasheq((checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (source . "github://github.com/tonyg/racket-google/master") (source_url . "http://github.com/tonyg/racket-google/tree/master"))))))) ("google-spreadsheet-api" . #hasheq((author . "car.margiotta@icloud.com") (authors . ("car.margiotta@icloud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "google-spreadsheet-api" "doc/google-spreadsheet-api@google-spreadsheet-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google-spreadsheet-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google-spreadsheet-api.txt"))) (checksum . "081c8a9543b5d1f0a5329de62c87eec5f12e8b9c") (checksum-error . #f) (collection . "google-spreadsheet-api") (conflicts . ()) (date-added . 1588504127) (dependencies . ("base" "crypto" "net-jwt" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-code-examples")) (description . "Racket interface for Google Spreadsheet APIs") (implies . ()) (modules . ((lib "google-spreadsheet-api/core/oauth2.rkt") (lib "google-spreadsheet-api/docs/google-spreadsheet-api.scrbl") (lib "google-spreadsheet-api/interface.rkt") (lib "google-spreadsheet-api/main.rkt"))) (name . "google-spreadsheet-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:car.margiotta@icloud.com . #t) (google . #t) (google-spreadsheet . #t) (ring:1 . #t) (spreadsheet . #t))) (source . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git") (tags . ("api" "google" "google-spreadsheet" "spreadsheet")) (versions . #hash((default . #hasheq((checksum . "081c8a9543b5d1f0a5329de62c87eec5f12e8b9c") (source . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git") (source_url . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git"))))))) ("gradual-typing-bib" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gradual-typing-bib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gradual-typing-bib.txt"))) (checksum . "044828e011c1e5efaf6ba74ee1541a978393ad24") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "") (implies . ()) (modules . ((lib "gradual-typing-bib/main.rkt"))) (name . "gradual-typing-bib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/gradual-typing-bib.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "044828e011c1e5efaf6ba74ee1541a978393ad24") (source . "https://github.com/samth/gradual-typing-bib.git") (source_url . "https://github.com/samth/gradual-typing-bib.git"))))))) ("graph" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph.txt"))) (checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984263) (dependencies . ("base" "graph-lib" "graph-doc" "graph-test")) (description . "Generic graph library.") (implies . ("graph-lib" "graph-doc" "graph-test")) (modules . ()) (name . "graph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph") (tags . ("data" "graph")) (versions . #hash((default . #hasheq((checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (source . "https://github.com/stchang/graph.git?path=graph") (source_url . "https://github.com/stchang/graph.git?path=graph"))))))) ("graph-doc" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graph" "doc/graph@graph-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph-doc.txt"))) (checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984352) (dependencies . ("base" "graph-lib" "racket-doc" "math-doc" "math-lib" "scribble-lib")) (description . "Documentation for graph-lib") (implies . ()) (modules . ((lib "graph/scribblings/graph.scrbl"))) (name . "graph-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (docs . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph-doc") (tags . ("data" "docs" "graph")) (versions . #hash((default . #hasheq((checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (source . "https://github.com/stchang/graph.git?path=graph-doc") (source_url . "https://github.com/stchang/graph.git?path=graph-doc"))))))) ("graph-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph-lib.txt"))) (checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984308) (dependencies . ("base" "gen-queue-lib" "data-lib" "math-lib")) (description . "main graph package") (implies . ()) (modules . ((lib "graph/graph-property.rkt") (lib "graph/adjlist-utils.rkt") (lib "graph/hash-utils.rkt") (lib "graph/graph-weighted.rkt") (lib "graph/graph-fns-allpairs-shortestpaths.rkt") (lib "graph/main.rkt") (lib "graph/graph-fns-graphviz.rkt") (lib "graph/graph-unweighted.rkt") (lib "graph/graph-fns-minspantree.rkt") (lib "graph/graph-fns-maxflow.rkt") (lib "graph/graph-matrix.rkt") (lib "graph/graph-fns-singlesource-shortestpaths.rkt") (lib "graph/utils.rkt") (lib "graph/gen-graph.rkt") (lib "graph/graph-fns-spantree.rkt") (lib "graph/graph-fns-coloring.rkt") (lib "graph/graph-fns-basic.rkt"))) (name . "graph-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph-lib") (tags . ("data" "graph")) (versions . #hash((default . #hasheq((checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (source . "https://github.com/stchang/graph.git?path=graph-lib") (source_url . "https://github.com/stchang/graph.git?path=graph-lib"))))))) ("graph-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph-test.txt"))) (checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984380) (dependencies . ("base" "graph-lib" "rackunit-lib")) (description . "Tests for graph-lib") (implies . ()) (modules . ((lib "tests/graph/graphviz.rkt") (lib "tests/graph/argcontracts.rkt") (lib "tests/graph/pr48bipartite.rkt") (lib "tests/graph/timing-test-in-neighbors.rkt") (lib "tests/graph/graph-fns-singlesource-shortestpaths-tests.rkt") (lib "tests/graph/graph-fns-maxflow-tests.rkt") (lib "tests/graph/graph-fns-spantree-tests.rkt") (lib "tests/graph/graph-fns-coloring-tests.rkt") (lib "tests/graph/timing-tests.rkt") (lib "tests/graph/graph-fns-allpairs-shortestpaths-tests.rkt") (lib "tests/graph/timing-test-scc.rkt") (lib "tests/graph/test-utils.rkt") (lib "tests/graph/graph-fns-basic-tests.rkt") (lib "tests/graph/boost-examples.rkt"))) (name . "graph-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/stchang/graph.git?path=graph-test") (tags . ("data" "graph" "tests")) (versions . #hash((default . #hasheq((checksum . "f06848871ed7b4b488341fdd73e9f640b4788733") (source . "https://github.com/stchang/graph.git?path=graph-test") (source_url . "https://github.com/stchang/graph.git?path=graph-test"))))))) ("graphic-block" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphic-block.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphic-block.txt"))) (checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (checksum-error . #f) (collection . "graphic-block") (conflicts . ()) (date-added . 1605555242) (dependencies . ("drracket-plugin-lib" "gui-lib" "string-constants-lib" "base" "scribble-lib" "racket-doc")) (description . "A plug-in that prevents inserting non-text content into the editor (can be configured through the general editing panel).") (implies . ()) (modules . ((lib "graphic-block/graphic-block.rkt"))) (name . "graphic-block") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:djholtby@uwaterloo.ca . #t) (plugin . #t) (ring:1 . #t) (wxme . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block") (tags . ("plugin" "wxme")) (versions . #hash((default . #hasheq((checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block"))))))) ("graphics" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "png") ("none" "colorspace") ("none" "bitmap"))) (failure-log . "server/built/fail/graphics.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8467ef612b7f58064140f410f963c1a8491fcd2b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "digimon" "math-lib" "draw-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "w3s")) (description . "Essential computer graphics for Typed Racket") (implies . ()) (modules . ((lib "bitmap/digitama/misc.rkt") (lib "bitmap/effect.rkt") (lib "colorspace/tamer/colorspace.scrbl") (lib "bitmap/digitama/unsafe/constants.rkt") (lib "bitmap/tamer/font.rkt") (lib "bitmap/tamer/composite/composite.rkt") (lib "bitmap/digitama/unsafe/pixman.rkt") (lib "bitmap/tamer/bridge/color.rkt") (lib "bitmap/tamer/composite/heap.rkt") (lib "bitmap/digitama/unsafe/image.rkt") (lib "png/tamer/schaik/zlib.rkt") (lib "bitmap/tamer/cairo/curve.rkt") (lib "bitmap/digitama/unsafe/pangocairo.rkt") (lib "bitmap/tamer/composite/table.rkt") (lib "bitmap/main.rkt") (lib "bitmap/digitama/source.rkt") (lib "png/tamer/png.scrbl") (lib "bitmap/tamer/cairo/pango.rkt") (lib "bitmap/digitama/unsafe/source.rkt") (lib "png/digitama/stdin.rkt") (lib "png/digitama/chunk.rkt") (lib "bitmap/tamer/cairo/clip.rkt") (lib "bitmap/tamer/cairo/gradient.rkt") (lib "bitmap/tamer/resize.rkt") (lib "bitmap/tamer/zero.rkt") (lib "bitmap/paint.rkt") (lib "bitmap/digitama/unsafe/paint.rkt") (lib "bitmap/digitama/unsafe/effect.rkt") (lib "bitmap/tamer/polygon.rkt") (lib "bitmap/base.rkt") (lib "png/digitama/huffman.rkt") (lib "png/digitama/enum.rkt") (lib "colorspace/main.rkt") (lib "bitmap/tamer/cairo/path.rkt") (lib "bitmap/tamer/composite/table/font.rkt") (lib "bitmap/tamer/density.rkt") (lib "png/base.rkt") (lib "bitmap/digivice/wisemon/path.rkt") (lib "colorspace/digitama/hsb.rkt") (lib "png/digitama/png.rkt") (lib "bitmap/digitama/parser/number.rkt") (lib "bitmap/digitama/unsafe/font.rkt") (lib "bitmap/digitama/color.rkt") (lib "bitmap/tamer/cairo/rectangle.rkt") (lib "bitmap/digitama/unsafe/version.rkt") (lib "bitmap/font.rkt") (lib "bitmap/misc.rkt") (lib "bitmap/digitama/dot.rkt") (lib "bitmap/composite.rkt") (lib "bitmap/digitama/parser/stream.rkt") (lib "bitmap/resize.rkt") (lib "bitmap/tamer/font.scrbl") (lib "png/digitama/zlib.rkt") (lib "bitmap/track.rkt") (lib "bitmap/color.rkt") (lib "bitmap/digitama/paint.rkt") (lib "png/tamer/hexdump.rkt") (lib "bitmap/tamer/composite/table/hue.rkt") (lib "colorspace/hsb.rkt") (lib "colorspace/misc.rkt") (lib "png/digitama/filtering.rkt") (lib "png/digitama/crc.rkt") (lib "bitmap/tamer/grayscale.rkt") (lib "bitmap/tamer/color.scrbl") (lib "bitmap/digitama/parser/exn.rkt") (lib "bitmap/tamer/cairo/mesh.rkt") (lib "bitmap/tamer/cairo/text.rkt") (lib "bitmap/digitama/font.rkt") (lib "bitmap/digitama/composite.rkt") (lib "bitmap/tamer/composite/multiple-composite.rkt") (lib "bitmap/constructor.rkt") (lib "bitmap/digivice/wisemon/phony/save-as.rkt") (lib "bitmap/digitama/unsafe/shape.rkt") (lib "bitmap/digitama/base.rkt") (lib "bitmap/tamer/cellophane.rkt") (lib "bitmap/digitama/track.rkt") (lib "bitmap/digitama/unsafe/path.rkt") (lib "bitmap/tamer/chess.rkt") (lib "bitmap/digitama/unsafe/resize.rkt") (lib "bitmap/tamer/bridge/font.rkt") (lib "bitmap/tamer/invalid.rkt") (lib "bitmap/digitama/unsafe/invalid.rkt") (lib "bitmap/tamer/track.rkt") (lib "bitmap/stdio.rkt") (lib "colorspace/tamer/hsb.rkt") (lib "bitmap/tamer/composite/pin.rkt") (lib "bitmap/constants.rkt") (lib "bitmap/tamer/cairo/image.rkt") (lib "bitmap/tamer/misc.scrbl") (lib "bitmap/digitama/resize.rkt") (lib "bitmap/digitama/unsafe/convert.rkt") (lib "bitmap/digitama/stdio.rkt") (lib "bitmap/invalid.rkt") (lib "bitmap/digitama/unsafe/composite.rkt") (lib "bitmap/tamer/composite/pyramid.rkt") (lib "bitmap/tamer/bitmap.scrbl") (lib "bitmap/digitama/unsafe/text.rkt") (lib "bitmap/tamer/cairo/misc.rkt") (lib "png/digitama/interlace.rkt"))) (name . "graphics") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (colorspace . #t) (graphics . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "http://github.com/wargrey/graphics/tree/master") (tags . ("colorspace" "graphics" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "8467ef612b7f58064140f410f963c1a8491fcd2b") (source . "git://github.com/wargrey/graphics") (source_url . "http://github.com/wargrey/graphics/tree/master"))))))) ("graphics-engine" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphics-engine" "doc/graphics-engine@graphics-engine/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphics-engine.txt") (test-failure-log . "server/built/test-fail/graphics-engine.txt") (test-success-log . #f))) (checksum . "94d492f057e1fa712ceab1823afca31ffc80f04d") (checksum-error . #f) (collection . "graphics-engine") (conflicts . ()) (date-added . 1573518396) (dependencies . ("base" "opengl" "glm" "glsl" "gui-lib" "reprovide-lang-lib" "racket-doc" "scribble-lib")) (description . "An accelerated graphics programming environment.") (implies . ()) (modules . ((lib "graphics-engine/application.rkt") (lib "graphics-engine/scribblings/graphics-engine.scrbl") (lib "graphics-engine/examples/legacy/01-hello-world.rkt") (lib "graphics-engine/examples/legacy/10-triangle.rkt") (lib "graphics-engine/canvas.rkt") (lib "graphics-engine/examples/legacy/09-points.rkt") (lib "graphics-engine/examples/legacy/05-hide-cursor.rkt") (lib "graphics-engine/examples/legacy/04-clear-screen.rkt") (lib "graphics-engine/shader.rkt") (lib "graphics-engine/main.rkt") (lib "graphics-engine/the-lang.rkt") (lib "graphics-engine/vector.rkt") (lib "graphics-engine/examples/legacy/06-trap-cursor.rkt") (lib "graphics-engine/examples/legacy/08-point.rkt") (lib "graphics-engine/examples/legacy/11-shader.rkt") (lib "graphics-engine/drawable.rkt") (lib "graphics-engine/examples/legacy/07-toggle-cursor.rkt") (lib "graphics-engine/private.rkt") (lib "graphics-engine/examples/core/01-triangles.rkt") (lib "graphics-engine/vertex.rkt") (lib "graphics-engine/examples/legacy/02-nothing.rkt") (lib "graphics-engine/color.rkt") (lib "graphics-engine/examples/legacy/03-fps-counter.rkt"))) (name . "graphics-engine") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (environment . #t) (graphics . #t) (prog . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-graphics-engine.git") (tags . ("environment" "graphics" "OpenGL" "prog")) (versions . #hash((default . #hasheq((checksum . "94d492f057e1fa712ceab1823afca31ffc80f04d") (source . "https://github.com/dedbox/racket-graphics-engine.git") (source_url . "https://github.com/dedbox/racket-graphics-engine.git"))))))) ("graphite" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621281750) (dependencies . ("graphite-lib" "graphite-doc" "graphite-tutorial")) (description . "A ggplot2-inspired data visualization library") (implies . ("graphite-lib" "graphite-doc" "graphite-tutorial")) (modules . ()) (name . "graphite") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite") (source_url . "https://github.com/ralsei/graphite.git?path=graphite"))))))) ("graphite-doc" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphite" "doc/graphite@graphite-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-doc.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-doc") (conflicts . ()) (date-added . 1621281673) (dependencies . ("base" "loess" "draw-doc" "plot-gui-lib" "simple-polynomial" "data-frame" "graphite-lib" "graphite-tutorial" "pict-doc" "pict-lib" "plot-doc" "plot-lib" "sandbox-lib" "scribble-lib" "racket-doc" "gregor")) (description . "Documentation for Graphite") (implies . ()) (modules . ((lib "graphite-doc/graphite.scrbl"))) (name . "graphite-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-doc") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-doc") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-doc"))))))) ("graphite-lib" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-lib.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite") (conflicts . ()) (date-added . 1621281561) (dependencies . ("base" "colormaps" "data-frame" "ddict" "fancy-app" "loess" "math-lib" "pict-lib" "plot-gui-lib" "plot-lib" "threading-lib" "simple-polynomial")) (description . "A ggplot2-inspired data visualization library (no documentation)") (implies . ()) (modules . ((lib "graphite/transforms.rkt") (lib "graphite/renderer.rkt") (lib "graphite/boxplot.rkt") (lib "graphite/points.rkt") (lib "graphite/col.rkt") (lib "graphite/error-bars.rkt") (lib "graphite/main.rkt") (lib "graphite/extern/box-and-whiskers.rkt") (lib "graphite/util.rkt") (lib "graphite/qualitative.rkt") (lib "graphite/titles.rkt") (lib "graphite/aes.rkt") (lib "graphite/lines.rkt") (lib "graphite/bar.rkt") (lib "graphite/faceting.rkt") (lib "graphite/fit.rkt") (lib "graphite/density.rkt") (lib "graphite/with-area.rkt") (lib "graphite/themes.rkt") (lib "graphite/parameters.rkt") (lib "graphite/histogram.rkt"))) (name . "graphite-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-lib") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-lib") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-lib"))))))) ("graphite-test" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-test.txt") (test-failure-log . "server/built/test-fail/graphite-test.txt") (test-success-log . #f))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-test") (conflicts . ()) (date-added . 1621281720) (dependencies . ("draw-lib" "plot-gui-lib" "base" "data-frame" "graphite-lib" "plot-lib" "pict-lib" "rackunit-lib")) (description . "Tests for Graphite") (implies . ()) (modules . ((lib "graphite-test/aes.rkt") (lib "graphite-test/transform.rkt") (lib "graphite-test/faceting.rkt") (lib "graphite-test/renderers.rkt") (lib "graphite-test/util.rkt"))) (name . "graphite-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-test") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-test") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-test"))))))) ("graphite-tutorial" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphite-tutorial" "doc/graphite-tutorial@graphite-tutorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-tutorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-tutorial.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-tutorial") (conflicts . ()) (date-added . 1621281619) (dependencies . ("base" "plot-doc" "data-frame" "graphite-doc" "graphite-lib" "racket-doc" "sandbox-lib" "sawzall-doc" "sawzall-lib" "scribble-lib" "threading-doc" "threading-lib")) (description . "A guided tour for Graphite") (implies . ()) (modules . ((lib "graphite-tutorial/graphite-tutorial.scrbl"))) (name . "graphite-tutorial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-tutorial") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-tutorial") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-tutorial"))))))) ("gregor" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor.txt"))) (checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535924) (dependencies . ("gregor-lib" "gregor-doc" "base")) (description . "Date and time library") (implies . ("gregor-lib" "gregor-doc")) (modules . ()) (name . "gregor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (source . "https://github.com/97jaz/gregor.git?path=gregor") (source_url . "https://github.com/97jaz/gregor.git?path=gregor"))))))) ("gregor-doc" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gregor" "doc/gregor@gregor-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-doc.txt"))) (checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535947) (dependencies . ("base" "base" "racket-doc" "data-doc" "data-lib" "gregor-lib" "scribble-lib" "sandbox-lib" "tzinfo")) (description . "Documentation part of gregor library") (implies . ()) (modules . ((lib "gregor/scribblings/datetime.scrbl") (lib "gregor/scribblings/datetime-provider.scrbl") (lib "gregor/scribblings/gregor.scrbl") (lib "gregor/scribblings/timezone.scrbl") (lib "gregor/scribblings/time.scrbl") (lib "gregor/scribblings/date-provider.scrbl") (lib "gregor/scribblings/format.scrbl") (lib "gregor/scribblings/clock.scrbl") (lib "gregor/scribblings/time-arithmetic-provider.scrbl") (lib "gregor/scribblings/moment-provider.scrbl") (lib "gregor/scribblings/datetime-arithmetic-provider.scrbl") (lib "gregor/scribblings/moment.scrbl") (lib "gregor/scribblings/date-arithmetic-provider.scrbl") (lib "gregor/scribblings/period.scrbl") (lib "gregor/scribblings/date.scrbl") (lib "gregor/scribblings/query.scrbl") (lib "gregor/scribblings/exceptions.scrbl") (lib "gregor/scribblings/time-provider.scrbl"))) (name . "gregor-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-doc") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (source . "https://github.com/97jaz/gregor.git?path=gregor-doc") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-doc"))))))) ("gregor-lib" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-lib.txt"))) (checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535964) (dependencies . ("base" "data-lib" "memoize-lib" "parser-tools-lib" "tzinfo" "cldr-core" "cldr-bcp47" "cldr-numbers-modern" "cldr-dates-modern" "cldr-localenames-modern")) (description . "Code part of the gregor date and time library") (implies . ()) (modules . ((lib "gregor/private/pattern/l10n/numbers.rkt") (lib "gregor/private/period.rkt") (lib "gregor/private/pattern/l10n/zone-util.rkt") (lib "gregor/private/pattern/ast/era.rkt") (lib "gregor/private/pattern/ast/second.rkt") (lib "gregor/private/pattern/l10n/gmt-offset.rkt") (lib "gregor/private/pattern/ast/hour.rkt") (lib "gregor/private/pattern/ast/minute.rkt") (lib "gregor/private/pattern/l10n/named-trie.rkt") (lib "gregor/private/core/compare.rkt") (lib "gregor/private/pattern/ast/week.rkt") (lib "gregor/private/iso8601-parse.rkt") (lib "gregor/main.rkt") (lib "gregor/private/pattern/l10n/l10n-week.rkt") (lib "gregor/private/pattern/l10n/iso-offset.rkt") (lib "gregor/private/pattern/l10n/trie.rkt") (lib "gregor/private/exn.rkt") (lib "gregor/private/pattern/l10n/zone-id.rkt") (lib "gregor/time.rkt") (lib "gregor/private/pattern/lexer.rkt") (lib "gregor/private/clock.rkt") (lib "gregor/private/pattern/l10n/zone-loc.rkt") (lib "gregor/private/pattern/ast.rkt") (lib "gregor/private/pattern/l10n/symbols.rkt") (lib "gregor/private/pattern/ast/year.rkt") (lib "gregor/private/pattern/ast/zone.rkt") (lib "gregor/private/pattern/parse-state.rkt") (lib "gregor/private/pattern/ast/literal.rkt") (lib "gregor/private/difference.rkt") (lib "gregor/private/core/math.rkt") (lib "gregor/private/pattern/ast/month.rkt") (lib "gregor/private/time.rkt") (lib "gregor/private/pattern/ast/period.rkt") (lib "gregor/private/pattern/ast/weekday.rkt") (lib "gregor/private/datetime.rkt") (lib "gregor/private/moment-base.rkt") (lib "gregor/private/pattern/ast/day.rkt") (lib "gregor/private/parse.rkt") (lib "gregor/private/date.rkt") (lib "gregor/private/moment.rkt") (lib "gregor/private/format.rkt") (lib "gregor/private/pattern/l10n/zone-nonloc.rkt") (lib "gregor/private/generics.rkt") (lib "gregor/period.rkt") (lib "gregor/private/pattern/ast/separator.rkt") (lib "gregor/private/core/structs.rkt") (lib "gregor/private/core/hmsn.rkt") (lib "gregor/private/pattern/l10n/metazone.rkt") (lib "gregor/private/pattern/ast/quarter.rkt") (lib "gregor/private/core/ymd.rkt") (lib "gregor/private/offset-resolvers.rkt"))) (name . "gregor-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-lib") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (source . "https://github.com/97jaz/gregor.git?path=gregor-lib") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-lib"))))))) ("gregor-test" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-test.txt"))) (checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535977) (dependencies . ("base" "gregor-lib" "rackunit-lib")) (description . "Tests for the gregor library") (implies . ()) (modules . ((lib "gregor/tests/moment-provider.rkt") (lib "gregor/tests/moment.rkt") (lib "gregor/tests/query.rkt") (lib "gregor/tests/format.rkt") (lib "gregor/tests/date.rkt") (lib "gregor/tests/date-provider.rkt") (lib "gregor/tests/datetime-arithmetic.rkt") (lib "gregor/tests/parse.rkt") (lib "gregor/tests/datetime-provider.rkt") (lib "gregor/tests/time.rkt") (lib "gregor/tests/clock.rkt") (lib "gregor/tests/all-tests.rkt") (lib "gregor/tests/time-provider.rkt") (lib "gregor/tests/time-arithmetic.rkt") (lib "gregor/tests/period.rkt") (lib "gregor/tests/date-arithmetic.rkt") (lib "gregor/tests/datetime.rkt"))) (name . "gregor-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2d20192e8795e01a1671869dddaf1984f0cbafee") (source . "https://github.com/97jaz/gregor.git?path=gregor-test") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-test"))))))) ("gsl-integration" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gsl-integration" "doc/gsl-integration@gsl-integration/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gsl-integration.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gsl-integration.txt"))) (checksum . "09a045e3bb451c82a52b3a155a07d112fcb6b688") (checksum-error . #f) (collection . "gsl-integration") (conflicts . ()) (date-added . 1558744012) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-math")) (description . "Interface to GNU GSL Numerical Integration.\r\n\r\n") (implies . ()) (modules . ((lib "gsl-integration/integration.rkt") (lib "gsl-integration/scribblings/gsl-integration.scrbl") (lib "gsl-integration/test.rkt") (lib "gsl-integration/pointer.rkt") (lib "gsl-integration/main.rkt") (lib "gsl-integration/example.rkt") (lib "gsl-integration/wrap.rkt"))) (name . "gsl-integration") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:petter.pripp@yahoo.com . #t) (gnu . #t) (gsl . #t) (integration . #t) (math . #t) (numerical . #t) (ring:1 . #t) (science . #t))) (source . "https://github.com/petterpripp/gsl-integration.git") (tags . ("gnu" "gsl" "integration" "math" "numerical" "science")) (versions . #hash((default . #hasheq((checksum . "09a045e3bb451c82a52b3a155a07d112fcb6b688") (source . "https://github.com/petterpripp/gsl-integration.git") (source_url . "https://github.com/petterpripp/gsl-integration.git"))))))) ("gsl-rng" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gsl-rng" "doc/gsl-rng@gsl-rng/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gsl-rng.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gsl-rng.txt"))) (checksum . "915227b889c1056c7b1e2e208a922ffeaa2d1615") (checksum-error . #f) (collection . "gsl-rng") (conflicts . ()) (date-added . 1560043493) (dependencies . ("base" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Interface to GNU GSL Random Number Generation") (implies . ()) (modules . ((lib "gsl-rng/main.rkt") (lib "gsl-rng/private/rng.rkt") (lib "gsl-rng/scribblings/gsl-rng.scrbl") (lib "gsl-rng/private/test.rkt") (lib "gsl-rng/private/example.rkt"))) (name . "gsl-rng") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:petter.pripp@yahoo.com . #t) (gnu . #t) (gsl . #t) (math . #t) (random . #t) (ring:1 . #t) (rng . #t))) (source . "https://github.com/petterpripp/gsl-rng.git") (tags . ("gnu" "gsl" "math" "random" "rng")) (versions . #hash((default . #hasheq((checksum . "915227b889c1056c7b1e2e208a922ffeaa2d1615") (source . "https://github.com/petterpripp/gsl-rng.git") (source_url . "https://github.com/petterpripp/gsl-rng.git"))))))) ("gtp-benchmarks" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-benchmarks" "doc/gtp-benchmarks@gtp-benchmarks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-benchmarks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-benchmarks.txt"))) (checksum . "b7f5100d77ea2f52b2a7ca8098cb41dbc147abd5") (checksum-error . #f) (collection . "gtp-benchmarks") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "require-typed-check" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc" "at-exp-lib" "gtp-util" "pict-lib" "scribble-abbrevs" "syntax-sloc" "with-cache")) (description . "gradual typing performance benchmarks") (implies . ()) (modules . ((lib "gtp-benchmarks/benchmarks/lnm/typed/bitstring.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/card-pool.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/strategy.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/aux.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/ymd.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/measure.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/measure.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/player.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/time.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/helper.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/helper.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/hash-utils.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/grid.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/bytevectors-6-typed.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/main.rkt") (lib "gtp-benchmarks/utilities/count-chaperones.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/lnm-plot.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-utils.rkt") (lib "gtp-benchmarks/benchmarks/acquire/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/source.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/both/population-adapted.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/utils.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/csp.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/csp.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/exif.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/problem.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/problem.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/stack-types.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/drum.rkt") (lib "gtp-benchmarks/benchmarks/lnm/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/utils.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/deck.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/tree-adapted.rkt") (lib "gtp-benchmarks/benchmarks/sieve/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/typed-zo-structs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/difference.rkt") (lib "gtp-benchmarks/utilities/sample-gtp-measure-manifest.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/bit-ports.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/bset.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/ukkonen.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/clock.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/basics.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/morse-code-table.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/levenshtein.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/utilities.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/card-pool-types.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/const.rkt") (lib "gtp-benchmarks/scribblings/util.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/jfif.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/windows.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/utils.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/utils.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/utilities.rkt") (lib "gtp-benchmarks/benchmarks/acquire/base/types.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/cell.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/state-adapted.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/board-adapted.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-string.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/unsafe.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/compiler-zo-parse.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/ocm.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/huffman.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/base/cell-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/core.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/core.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/core.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/stack.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-basic.rkt") (lib "gtp-benchmarks/utilities/copy-configuration.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/mutable-array.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/typedefs.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/core-structs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/hmsn.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/denotable.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/gen-graph.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/motion-help.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/base/kcfa-typed.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/admin.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/tetras.rkt") (lib "gtp-benchmarks/utilities/type-info.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/render.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/render.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/moment.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/constraint.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/constraint.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/benv.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/date.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/utilities.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-transform.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/compiler-zo-structs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/offset-resolvers.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/population.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/label.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/benchmark-util.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/morse-code-table.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/env.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/file.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/structs.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/t-view.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/scribblings/tzinfo.scrbl") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-unweighted.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/board.rkt") (lib "gtp-benchmarks/benchmarks/quadU/both/penalty-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadT/both/penalty-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/bitstring.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/datetime.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/zoneinfo-search.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/t-view.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/priority.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/both/automata-adapted.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/core-adapter.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/card.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/time-adapted.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/deck-types.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/image.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/gen-queue.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/structs-adapted.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/windows-registry.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/collide.rkt") (lib "gtp-benchmarks/utilities/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quads.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quads.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/test/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/zombie.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/automata.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/card-adapted.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/synth/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/tetris/both/base-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/structs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/hmsn.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/message-queue.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/main.rkt") (lib "gtp-benchmarks/benchmarks/fsm/both/benchmark-util.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/main.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-shell.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/sequencer.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/auxiliaries.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/benv-adapted.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-mutable-array.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/sequencer.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/math.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/state.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/player.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/tzfile-parser.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/wrap.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/wrap.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph.scrbl") (lib "gtp-benchmarks/benchmarks/tetris/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-syntax.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/summary.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/base/base-constants.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/grid.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/exception.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/population.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/gregor-structs.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/pict-adapted.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/cell.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-transform.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/basics.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-transition.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/exif.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/morse-code-strings.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/measure.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/measure.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-transform.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/for-each.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/utilities.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/automata.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/command.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/summary.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/core-structs.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-sequence.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/block.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-utils.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/population.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/ai.rkt") (lib "gtp-benchmarks/scribblings/gtp-benchmarks.scrbl") (lib "gtp-benchmarks/benchmarks/take5/typed/card-pool.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-find.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/clock.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/adjlist-utils.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/gregor-adapter.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/modulegraph-adapted.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-weighted.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/const.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/offset-resolvers.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/card.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/bit-ports.rkt") (lib "gtp-benchmarks/benchmarks/zombie/both/image-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/wrap.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/wrap.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/drum.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/my-graph.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/eval.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/domain.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/domain.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/player-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/gregor-structs.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/mixer.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/population.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/parameters.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/collide.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/take5/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/core-types.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/core-types.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/sieve/typed/streams.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/aux.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/quadU/both/ocm-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadT/both/ocm-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/ymd.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/motion-help.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/image.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-sequence.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/ui.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/denotable-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/levenshtein.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/tree.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/ui.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/structs.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/structs.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/synth.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/basics-types.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/jfif.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/state.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/array.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/fsm/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/time.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/utils.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-struct.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/date.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/quad.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/basics.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-utils.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/run-t.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/tzinfo-adapter.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/moment-base.rkt") (lib "gtp-benchmarks/benchmarks/fsm/both/automata-adapted.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/dealer.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/inline-sort.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/board.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/syntax-utils.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/dealer-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/types.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-shell.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/tetras.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-matrix.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/motion.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/player.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/synth.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/datetime.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/dealer.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/eval.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/label.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/lcs.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/sieve/untyped/streams.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/tabfile-parser.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-transition.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/bset.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/cut-tail.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/cut-tail.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/fifo.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quads.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quads.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/automata.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/spreadsheet.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-graphviz.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/sieve/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/quad-types.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/quad-types.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/command-types.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/t-graph-types.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/tree.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-find.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/moment-base.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/unix.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-string.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/base/base-random.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/command.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/player.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/variable.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/variable.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/handlers.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/ai.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/generics.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-property.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-allpairs-shortestpaths.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/run-t.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/block.rkt") (lib "gtp-benchmarks/benchmarks/snake/both/data-adaptor.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/denotable.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/motion.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/consts.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-transform.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/t-graph.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-minspantree.rkt") (lib "gtp-benchmarks/benchmarks/zombie/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/structs.rkt") (lib "gtp-benchmarks/benchmarks/synth/both/typed-data.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/time.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/scribblings/cldr-core.scrbl") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/ukkonen.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/consts.rkt") (lib "gtp-benchmarks/utilities/make-configurations.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/basics.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-coloring.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/math.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/stack.rkt") (lib "gtp-benchmarks/utilities/process-helper.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/morse-code-strings.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-comprehension.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/lcs.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/summary-adapted.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/admin.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/mixer.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/benv.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/likely-subtags.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/huffman.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/stack.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/make-history.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/deck.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/solver.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/solver.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/automata.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/render.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/render.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/time.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/t-graph.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-maxflow.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/stack.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-singlesource-shortestpaths.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/both/typed-data.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/elim.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/utils.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/difference.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/elim.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/lnm-plot.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/spreadsheet.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/message-queue.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/auxiliaries.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/base/un-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/moment.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/t-view-types.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/strategy.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/zombie.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/handlers.rkt"))) (name . "gtp-benchmarks") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (benchmarking . #t) (gtp . #t) (ring:1 . #t))) (source . "https://github.com/bennn/gtp-benchmarks.git") (tags . ("benchmarking" "gtp")) (versions . #hash((default . #hasheq((checksum . "b7f5100d77ea2f52b2a7ca8098cb41dbc147abd5") (source . "https://github.com/bennn/gtp-benchmarks.git") (source_url . "https://github.com/bennn/gtp-benchmarks.git"))))))) ("gtp-checkup" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-checkup" "doc/gtp-checkup@gtp-checkup/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-checkup.txt") (test-failure-log . "server/built/test-fail/gtp-checkup.txt") (test-success-log . #f))) (checksum . "5ebfd6a37646f09eb451ffe051e8ca8277a6e0c2") (checksum-error . #f) (collection . "gtp-checkup") (conflicts . ()) (dependencies . ("base" "basedir" "data-lib" "draw-lib" "gregor" "gtp-util" "math-lib" "memoize" "pict-lib" "plot-lib" "rackunit-lib" "require-typed-check" "sandbox-lib" "typed-racket-lib" "typed-racket-more" "zo-lib" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc" "pict-abbrevs")) (description . "Test correctness of typed/untyped interaction.") (implies . ()) (modules . ((lib "gtp-checkup/benchmarks/morsecode/untyped/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-unweighted.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/utilities.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/strategy.rkt") (lib "gtp-checkup/benchmarks/quadT/base/core.rkt") (lib "gtp-checkup/scribblings/plot.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/data.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/summary.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/file.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/population.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/base/untyped.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-find.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/run-t.rkt") (lib "gtp-checkup/benchmarks/snake/typed/handlers.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/typed/synth.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/stack.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/deck.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/parameters.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-transition.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quads.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/date.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/clock.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/world.rkt") (lib "gtp-checkup/benchmarks/sieve/untyped/streams.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/datetime.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/wrap.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/cell.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-graph-types.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-transition.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/time.rkt") (lib "gtp-checkup/benchmarks/synth/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ui.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ai.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/main.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-property.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/eval.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/structs.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/lcs.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/datetime.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/stack-types.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/const.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/message-queue.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/player.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/bit-ports.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/t-graph.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/cut-tail.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/wrap.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/main.rkt") (lib "gtp-checkup/benchmarks/forth/typed/eval.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/array.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-allpairs-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/benv.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/typed-data.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/moment.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/bitstring.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-sequence.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population-adapted.rkt") (lib "gtp-checkup/data/definition.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/scribblings/tzinfo.scrbl") (lib "gtp-checkup/benchmarks/quadT/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/sequencer.rkt") (lib "gtp-checkup/benchmarks/synth/typed/sequencer.rkt") (lib "gtp-checkup/benchmarks/zombie/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quads.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/basics.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-graph.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/time.rkt") (lib "gtp-checkup/benchmarks/gregor/base/types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/gen-queue.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/measure.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/measure.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/motion.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/main.rkt") (lib "gtp-checkup/benchmarks/acquire/base/types.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/math.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quads.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/levenshtein.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/board-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-parse.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/clock.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/math.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/bset.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/cell-types.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/quadT/base/quad.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/grid.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player.rkt") (lib "gtp-checkup/benchmarks/fsm/base/untyped.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/sequencer.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/player.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/hmsn.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-transition.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/main.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/datetime.rkt") (lib "gtp-checkup/private/logger.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/render.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/render.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/label.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/label.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/ocm.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/measure.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/measure.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/levenshtein.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/typedefs.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/bitstring.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/automata.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/env.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion-help.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/world.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/mixer.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/utilities.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/fifo.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/ukkonen.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/main.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/eval.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/player.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/admin.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/state.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/motion-help.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/render.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-string.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/unix.rkt") (lib "gtp-checkup/benchmarks/forth/typed/stack.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/basics.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/stack.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/render.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/grid.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/population.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quads.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/automata.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-struct.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/cell.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/synth/typed/data.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/block.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/summary.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/run-t.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/handlers.rkt") (lib "gtp-checkup/benchmarks/synth/base/untyped.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/main.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/tree.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/adjlist-utils.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/image.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/huffman.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/bset.rkt") (lib "gtp-checkup/benchmarks/quadT/base/untyped.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-coloring.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/tetras.rkt") (lib "gtp-checkup/benchmarks/acquire/base/untyped.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-basic.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo-search.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-transform.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/card-pool.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/mutable-array.rkt") (lib "gtp-checkup/benchmarks/snake/typed/collide.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/time-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/main.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/card.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/test/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-graphviz.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/player.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/main.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/tetras.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/syntax-utils.rkt") (lib "gtp-checkup/benchmarks/sieve/untyped/main.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-view.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/main.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/aux.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-transform.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/strategy.rkt") (lib "gtp-checkup/benchmarks/quadU/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/quadT/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/core-adapter.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/zombie.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/elim.rkt") (lib "gtp-checkup/benchmarks/forth/typed/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/ukkonen.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/t-view.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/hmsn.rkt") (lib "gtp-checkup/benchmarks/gregor/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadU/base/core-types.rkt") (lib "gtp-checkup/benchmarks/quadT/base/core-types.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/bit-ports.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/exception.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/structs.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/huffman.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/ymd.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/typed-zo-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-singlesource-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/benv.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-struct.rkt") (lib "gtp-checkup/benchmarks/suffixtree/base/kcfa-typed.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows-registry.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/base/base-constants.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/scribblings/cldr-core.scrbl") (lib "gtp-checkup/benchmarks/quadU/untyped/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/sugar-list.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/moment-base.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/stack.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadU/base/core.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-comprehension.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/block.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-matrix.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/player-types.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/synth.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/board.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/admin.rkt") (lib "gtp-checkup/benchmarks/sieve/typed-worst-case/streams.rkt") (lib "gtp-checkup/benchmarks/forth/base/command-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/main.rkt") (lib "gtp-checkup/scribblings/gtp-checkup.scrbl") (lib "gtp-checkup/benchmarks/acquire/untyped/admin.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/automata.rkt") (lib "gtp-checkup/benchmarks/snake/typed/const.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/time.rkt") (lib "gtp-checkup/benchmarks/lnm/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/measure.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-transform.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/bset.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/data.rkt") (lib "gtp-checkup/data/parse.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-transform.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-shell.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/world.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-find.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/hyphenate.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/bytevectors-6-typed.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/world.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/zombie.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/dealer.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/player.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/aux.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/main.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/priority.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/run-t.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/automata.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/block.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/structs.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/main.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-string.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/structs.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/structs.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-string.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/population-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/consts.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-transform.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/source.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/modulegraph.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-weighted.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/population.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/main.rkt") (lib "gtp-checkup/main.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/bit-ports.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/drum.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/modulegraph.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/jfif.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/data.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/consts.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/image-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/denotable.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tzfile-parser.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-maxflow.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/board.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/image.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/inline-sort.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/jfif.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/exif.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/grid.rkt") (lib "gtp-checkup/benchmarks/suffixtree/base/untyped.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-utils.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/deck.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/clock.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/bitstring.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/main.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/collide.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/t-view.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/basics.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/world.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-pool.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/moment.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/drum.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/stack.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-mutable-array.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/tree.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/lcs.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/message-queue.rkt") (lib "gtp-checkup/benchmarks/forth/base/untyped.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-find.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/cell.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/base/base-random.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/exif.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tabfile-parser.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/measure.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/math.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-syntax.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/basics-types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/hash-utils.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment-base.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack-types.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/ukkonen.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/population.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/huffman.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/date.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/collide.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/moment-base.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/dealer-types.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/data.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/denotable.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/command.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/hmsn.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-view-types.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/jfif.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/for-each.rkt") (lib "gtp-checkup/benchmarks/snake/typed/main.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/date.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/lcs.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/basics.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/ocm.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/levenshtein.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-struct.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/base-types.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/cut-tail.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/ui.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/ai.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/untyped.rkt") (lib "gtp-checkup/benchmarks/forth/typed/command.rkt") (lib "gtp-checkup/benchmarks/sieve/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/motion-help.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/likely-subtags.rkt") (lib "gtp-checkup/benchmarks/synth/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/elim.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/core-structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/time.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/synth.rkt") (lib "gtp-checkup/benchmarks/synth/typed/drum.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/ymd.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/ymd.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/population.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quick-sample.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/mixer.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/quadU/base/untyped.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/aux.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/dealer.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer-types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/label.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph.scrbl") (lib "gtp-checkup/benchmarks/jpeg/typed/exif.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quads.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quads.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/unsafe.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/t-graph.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-structs.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/data.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/consts.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/render.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/command.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/state-adapted.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/message-queue.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quick-sample.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/elim.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/difference.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/core.rkt") (lib "gtp-checkup/nightly.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/data.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/gen-graph.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/handlers.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-struct.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/un-types.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/base-types.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/state.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-minspantree.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card.rkt") (lib "gtp-checkup/benchmarks/synth/typed/mixer.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/untyped.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/difference.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-shell.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/sugar-list.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/sugar-list.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/zombie.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/wrap.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/wrap.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/ui.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/ai.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/typed-data.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/main.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/render.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/deck-types.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/utilities.rkt") (lib "gtp-checkup/benchmarks/forth/base/make-history.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/const.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/strategy.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/motion.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/world.rkt") (lib "gtp-checkup/benchmarks/morsecode/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/generics.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/streams.rkt") (lib "gtp-checkup/benchmarks/mbta/base/my-graph.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/tetras.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-utils.rkt") (lib "gtp-checkup/benchmarks/snake/typed/cut-tail.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-sequence.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/time.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/basics.rkt") (lib "gtp-checkup/benchmarks/fsmoo/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/utils.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-shell.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/difference.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/core-structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/main.rkt"))) (name . "gtp-checkup") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (tests . #t) (typed-racket . #t))) (source . "http://github.com/bennn/gtp-checkup/tree/master") (tags . ("tests" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "5ebfd6a37646f09eb451ffe051e8ca8277a6e0c2") (source . "git://github.com/bennn/gtp-checkup") (source_url . "http://github.com/bennn/gtp-checkup/tree/master"))))))) ("gtp-measure" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-measure" "doc/gtp-measure@gtp-measure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-measure.txt") (test-failure-log . "server/built/test-fail/gtp-measure.txt") (test-success-log . #f))) (checksum . "84fbdac7ea336b903df1e961acfda67ca364a069") (checksum-error . #f) (collection . "gtp-measure") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "basedir" "gtp-util" "lang-file" "scribble-lib" "sandbox-lib" "rackunit-lib" "racket-doc" "scribble-doc" "basedir" "require-typed-check" "typed-racket-doc" "typed-racket-lib")) (description . "Runs programs, collects timing info") (implies . ()) (modules . ((lib "gtp-measure/private/test/sample-typed-untyped-target/typed/a1.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/morse-code-table.rkt") (lib "gtp-measure/scribblings/gtp-measure.scrbl") (lib "gtp-measure/private/test/infinite-loop-file-target.rkt") (lib "gtp-measure/private/test/sample-task/24/manifest.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-strings.rkt") (lib "gtp-measure/private/test/manifest1.rkt") (lib "gtp-measure/private/test/sample-file-target.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/levenshtein.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/main.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/base/untyped.rkt") (lib "gtp-measure/output/test/typed-untyped-0.rkt") (lib "gtp-measure/private/task.rkt") (lib "gtp-measure/parse.rkt") (lib "gtp-measure/private/configure.rkt") (lib "gtp-measure/output/test/typed-untyped-2.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/levenshtein.rkt") (lib "gtp-measure/private/raco.rkt") (lib "gtp-measure/output/test/typed-untyped-1.rkt") (lib "gtp-measure/private/parse.rkt") (lib "gtp-measure/private/test/manifest2.rkt") (lib "gtp-measure/private/test/sample-manifest-target-bin.rkt") (lib "gtp-measure/private/test/sample-manifest-target.rkt") (lib "gtp-measure/manifest.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/morse-code-strings.rkt") (lib "gtp-measure/private/measure.rkt") (lib "gtp-measure/private/check-pkg-deps.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/manifest.rkt") (lib "gtp-measure/private/test/manifest-empty.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-table.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/a1.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/typed/main.rkt") (lib "gtp-measure/configure.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/main.rkt") (lib "gtp-measure/private/test/sample-task/38/manifest.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/main.rkt") (lib "gtp-measure/output/file.rkt") (lib "gtp-measure/private/test/sample-manifest-target-config.rkt") (lib "gtp-measure/output/typed-untyped.rkt") (lib "gtp-measure/private/util.rkt") (lib "gtp-measure/output/test/typed-untyped-3.rkt"))) (name . "gtp-measure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (benchmarking . #t) (gtp . #t) (ring:1 . #t))) (source . "https://github.com/bennn/gtp-measure.git") (tags . ("benchmarking" "gtp")) (versions . #hash((default . #hasheq((checksum . "84fbdac7ea336b903df1e961acfda67ca364a069") (source . "https://github.com/bennn/gtp-measure.git") (source_url . "https://github.com/bennn/gtp-measure.git"))))))) ("gtp-paper" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-paper" "doc/gtp-paper@gtp-paper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-paper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-paper.txt"))) (checksum . "4a276d3b71d0ff1921718442b350d2c29134255b") (checksum-error . #f) (collection . "gtp-paper") (conflicts . ()) (dependencies . ("base" "scribble-abbrevs" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Quick-start for SIGPLAN Scribble papers") (implies . ()) (modules . ((lib "gtp-paper/template/appendix.scrbl") (lib "gtp-paper/template/parameters.rkt") (lib "gtp-paper/template/bib.rkt") (lib "gtp-paper/template/main.rkt") (lib "gtp-paper/main.rkt") (lib "gtp-paper/template/reader.rkt") (lib "gtp-paper/scribblings/gtp-paper.scrbl") (lib "gtp-paper/template/introduction.scrbl") (lib "gtp-paper/template/paper.scrbl"))) (name . "gtp-paper") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (latex . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "http://github.com/bennn/gtp-paper/tree/master") (tags . ("latex" "scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "4a276d3b71d0ff1921718442b350d2c29134255b") (source . "git://github.com/bennn/gtp-paper") (source_url . "http://github.com/bennn/gtp-paper/tree/master"))))))) ("gtp-pict" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-pict" "doc/gtp-pict@gtp-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-pict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-pict.txt"))) (checksum . "7de896b161fea193b72adb255deff4f44241e97d") (checksum-error . #f) (collection . "gtp-pict") (conflicts . ()) (dependencies . ("base" "math-lib" "pict-lib" "draw-lib" "images-lib" "pict-abbrevs" "ppict" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-doc" "rackunit-abbrevs" "pict-doc" "draw-doc" "images-doc")) (description . "Picts related to gradual typing / performance") (implies . ()) (modules . ((lib "gtp-pict/private/gtp-pict.rkt") (lib "gtp-pict/scribblings/gtp-pict.scrbl") (lib "gtp-pict/main.rkt"))) (name . "gtp-pict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (pict . #t) (ring:1 . #t) (util . #t))) (source . "https://gitlab.com/gradual-typing-performance/gtp-pict.git") (tags . ("gtp" "pict" "util")) (versions . #hash((default . #hasheq((checksum . "7de896b161fea193b72adb255deff4f44241e97d") (source . "https://gitlab.com/gradual-typing-performance/gtp-pict.git") (source_url . "https://gitlab.com/gradual-typing-performance/gtp-pict.git"))))))) ("gtp-plot" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-plot" "doc/gtp-plot@gtp-plot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-plot.txt"))) (checksum . "939c39dc7f355063eaa1b8759fe622b7280a9406") (checksum-error . #f) (collection . "gtp-plot") (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-abbrevs" "scribble-lib" "math-lib" "pict-lib" "plot-lib" "reprovide-lang" "gtp-util" "rackunit-lib" "racket-doc" "scribble-doc" "pict-lib" "pict-doc" "plot-doc" "rackunit-abbrevs" "typed-racket-doc" "gtp-util")) (description . "Plots for gradual typing performance") (implies . ()) (modules . ((lib "gtp-plot/private/configuration-info.rkt") (lib "gtp-plot/sample-info.rkt") (lib "gtp-plot/typed-racket-info.rkt") (lib "gtp-plot/private/reticulated-info.rkt") (lib "gtp-plot/scribblings/supporting.scrbl") (lib "gtp-plot/performance-info.rkt") (lib "gtp-plot/system.rkt") (lib "gtp-plot/private/util.rkt") (lib "gtp-plot/private/raco.rkt") (lib "gtp-plot/plot.rkt") (lib "gtp-plot/main.rkt") (lib "gtp-plot/scribblings/gtp-plot.scrbl") (lib "gtp-plot/private/system.rkt") (lib "gtp-plot/private/performance-info.rkt") (lib "gtp-plot/scribblings/data-definition.scrbl") (lib "gtp-plot/configuration-info.rkt") (lib "gtp-plot/scribblings/parsing.scrbl") (lib "gtp-plot/util.rkt") (lib "gtp-plot/private/typed-racket-info.rkt") (lib "gtp-plot/reticulated-info.rkt") (lib "gtp-plot/private/plot.rkt") (lib "gtp-plot/scribblings/plotting.scrbl") (lib "gtp-plot/private/sample-info.rkt"))) (name . "gtp-plot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (plot . #t) (ring:1 . #t) (util . #t))) (source . "http://github.com/bennn/gtp-plot/tree/master") (tags . ("gtp" "plot" "util")) (versions . #hash((default . #hasheq((checksum . "939c39dc7f355063eaa1b8759fe622b7280a9406") (source . "git://github.com/bennn/gtp-plot") (source_url . "http://github.com/bennn/gtp-plot/tree/master"))))))) ("gtp-util" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-util" "doc/gtp-util@gtp-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-util.txt") (test-failure-log . "server/built/test-fail/gtp-util.txt") (test-success-log . #f))) (checksum . "d20f0487699a471bb1823b949fd3bfe74a1f0aa0") (checksum-error . #f) (collection . "gtp-util") (conflicts . ()) (dependencies . ("base" "math-lib" "pict-lib" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-doc" "rackunit-abbrevs" "pict-doc")) (description . "37 helper functions you won't find anywhere else") (implies . ()) (modules . ((lib "gtp-util/system.rkt") (lib "gtp-util/scribblings/gtp-util.scrbl") (lib "gtp-util/main.rkt"))) (name . "gtp-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/bennn/gtp-util.git") (tags . ("gtp" "util")) (versions . #hash((default . #hasheq((checksum . "d20f0487699a471bb1823b949fd3bfe74a1f0aa0") (source . "https://github.com/bennn/gtp-util.git") (source_url . "https://github.com/bennn/gtp-util.git"))))))) ("gui-easy" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-easy" "doc/gui-easy@gui-easy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-easy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-easy.txt"))) (checksum . "5095d2fd921f025846620c2c1ae0722dc8cd7425") (checksum-error . #f) (collection . "racket") (conflicts . ()) (date-added . 1627758799) (dependencies . ("base" "gui-easy-lib" "draw-doc" "gui-doc" "gui-lib" "gui-easy-lib" "pict-doc" "pict-lib" "racket-doc" "scribble-lib")) (description . "A declarative API on top of racket/gui. (docs & implementation)") (implies . ("gui-easy-lib")) (modules . ((lib "racket/gui/easy/scribblings/quickstart.scrbl") (lib "racket/gui/easy/scribblings/geometry.scrbl") (lib "racket/gui/easy/scribblings/reference.scrbl") (lib "racket/gui/easy/scribblings/custom-views.scrbl") (lib "racket/gui/easy/scribblings/escape-hatches.scrbl") (lib "racket/gui/easy/scribblings/gui-easy.scrbl"))) (name . "gui-easy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "5095d2fd921f025846620c2c1ae0722dc8cd7425") (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy") (source_url . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy"))))))) ("gui-easy-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-easy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-easy-lib.txt"))) (checksum . "5095d2fd921f025846620c2c1ae0722dc8cd7425") (checksum-error . #f) (collection . "racket") (conflicts . ()) (date-added . 1624518658) (dependencies . ("base" "box-extra-lib" "draw-lib" "gui-lib" "pict-lib" "rackunit-lib")) (description . "A declarative API on top of racket/gui. (implementation)") (implies . ()) (modules . ((lib "racket/gui/easy/private/view/window.rkt") (lib "racket/gui/easy.rkt") (lib "racket/gui/easy/private/view/table.rkt") (lib "racket/gui/easy/private/executor.rkt") (lib "racket/gui/easy/private/view/view.rkt") (lib "racket/gui/easy/private/view/image.rkt") (lib "racket/gui/easy/private/view/keymap.rkt") (lib "racket/gui/easy/view.rkt") (lib "racket/gui/easy/font.rkt") (lib "racket/gui/easy/private/view/choice.rkt") (lib "racket/gui/easy/private/view/canvas.rkt") (lib "racket/gui/easy/operator.rkt") (lib "racket/gui/easy/private/view/button.rkt") (lib "racket/gui/easy/private/view/spacer.rkt") (lib "racket/gui/easy/color.rkt") (lib "racket/gui/easy/private/view/container.rkt") (lib "racket/gui/easy/private/view/dyn.rkt") (lib "racket/gui/easy/private/view/text.rkt") (lib "racket/gui/easy/private/view/if.rkt") (lib "racket/gui/easy/private/view/slider.rkt") (lib "racket/gui/easy/private/observable.rkt") (lib "racket/gui/easy/private/renderer.rkt") (lib "racket/gui/easy/private/logger.rkt") (lib "racket/gui/easy/debugger.rkt") (lib "racket/gui/easy/private/view/list.rkt") (lib "racket/gui/easy/renderer.rkt") (lib "racket/gui/easy/private/view/tabs.rkt") (lib "racket/gui/easy/private/view/progress.rkt") (lib "racket/gui/easy/private/view/menu.rkt") (lib "racket/gui/easy/contract.rkt") (lib "racket/gui/easy/private/view/checkbox.rkt") (lib "racket/gui/easy/private/view/common.rkt") (lib "racket/gui/easy/private/view/snip.rkt") (lib "racket/gui/easy/private/view/radios.rkt") (lib "racket/gui/easy/private/view/proxy.rkt") (lib "racket/gui/easy/private/view/input.rkt") (lib "racket/gui/easy/observable.rkt") (lib "racket/gui/easy/private/view.rkt") (lib "racket/gui/easy/private/view/panel.rkt"))) (name . "gui-easy-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "5095d2fd921f025846620c2c1ae0722dc8cd7425") (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib") (source_url . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib"))))))) ("gui-pkg-manager" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc" "gui-lib" "base")) (description . "Graphical tool for managing Racket package installations") (implies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc")) (modules . ((lib "pkg/gui/start.rkt"))) (name . "gui-pkg-manager") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager") (tags . ()) (versions . #hash((default . #hasheq((checksum . "70cc90538c5dffb722e17cabb769aeadfef32ec4") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager"))))))) ("gui-pkg-manager-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-pkg-manager" "doc/gui-pkg-manager@gui-pkg-manager-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "documentation part of \"gui-pkg-manager\"") (implies . ()) (modules . ((lib "pkg/gui/scribblings/gui-pkg-manager.scrbl"))) (name . "gui-pkg-manager-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "70cc90538c5dffb722e17cabb769aeadfef32ec4") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc"))))))) ("gui-widget-mixins" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-widget-mixins" "doc/gui-widget-mixins@gui-widget-mixins/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-widget-mixins.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-widget-mixins.txt"))) (checksum . "81f02a227337afcaff434d4c4a5846dcee098b78") (checksum-error . #f) (collection . "gui-widget-mixins") (conflicts . ()) (date-added . 1551414475) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "Tool tips, cue text and validation for text-field% GUI widgets in Racket ") (implies . ()) (modules . ((lib "gui-widget-mixins/private/validate-mixin.rkt") (lib "gui-widget-mixins/private/tooltip-mixin.rkt") (lib "gui-widget-mixins/private/cue-mixin.rkt") (lib "gui-widget-mixins/private/decorate-mixin.rkt") (lib "gui-widget-mixins/scribblings/gui-widget-mixins.scrbl") (lib "gui-widget-mixins/main.rkt"))) (name . "gui-widget-mixins") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/gui-widget-mixins.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "81f02a227337afcaff434d4c4a5846dcee098b78") (source . "https://github.com/alex-hhh/gui-widget-mixins.git") (source_url . "https://github.com/alex-hhh/gui-widget-mixins.git"))))))) ("hackett" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924769) (dependencies . ("hackett-doc" "hackett-lib")) (description . "") (implies . ("hackett-doc" "hackett-lib")) (modules . ()) (name . "hackett") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett"))))))) ("hackett-demo" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-demo.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924807) (dependencies . ("base" "draw-lib" "hackett-lib" "htdp-lib" "pict-lib" "threading-lib" "web-server-lib")) (description . "") (implies . ()) (modules . ((lib "hackett/demo/web-server.rkt") (lib "hackett/demo/pict/universe.rkt") (lib "hackett/demo/pict.rkt"))) (name . "hackett-demo") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo"))))))) ("hackett-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "hackett"))) (failure-log . "server/built/fail/hackett-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924821) (dependencies . ("base" "hackett-lib" "scribble-lib" "at-exp-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "scribble/manual/hackett.rkt") (lib "scribblings/hackett/guide.scrbl") (lib "scribble/manual/hackett/private/manual-bind.rkt") (lib "scribblings/hackett/private/util.rkt") (lib "scribblings/hackett/main.scrbl") (lib "scribblings/hackett/reference.scrbl"))) (name . "hackett-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc"))))))) ("hackett-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924837) (dependencies . ("base" "curly-fn-lib" "data-lib" "syntax-classes-lib" "threading-lib")) (description . "") (implies . ()) (modules . ((lib "hackett/data/either.rkt") (lib "hackett/private/prim/type-provide.rkt") (lib "hackett/monad/trans/error.rkt") (lib "hackett/private/toplevel.rkt") (lib "hackett/private/pattern-alias.rkt") (lib "hackett/monad/reader.rkt") (lib "hackett/private/type-language.rkt") (lib "hackett/monad/trans/signatures.rkt") (lib "hackett/private/infix.rkt") (lib "hackett/private/expand+elaborate.rkt") (lib "hackett/private/prim/base.rkt") (lib "hackett/prelude.rkt") (lib "hackett/private/adt.rkt") (lib "hackett/private/prim/op.rkt") (lib "hackett/private/kernel.rkt") (lib "hackett/private/util/stx.rkt") (lib "hackett/private/util/require.rkt") (lib "hackett/todo.rkt") (lib "hackett/private/type-reqprov.rkt") (lib "hackett/private/util/contract.rkt") (lib "hackett/private/provide.rkt") (lib "hackett/private/base.rkt") (lib "hackett/private/util/list.rkt") (lib "hackett/monad/trans.rkt") (lib "hackett/private/type-alias.rkt") (lib "hackett/private/typecheck.rkt") (lib "hackett/private/prop-case-pattern-expander.rkt") (lib "hackett/monad/error.rkt") (lib "hackett/base.rkt") (lib "hackett/data/identity.rkt") (lib "hackett/private/typeclass.rkt") (lib "hackett/main.rkt") (lib "hackett/monad/base.rkt") (lib "hackett/monad/trans/reader.rkt") (lib "hackett/private/util/cond-expand.rkt") (lib "hackett/private/reader.rkt") (lib "hackett/private/deferred-transformer.rkt") (lib "hackett/data/list.rkt") (lib "hackett/private/prim/type.rkt") (lib "hackett/data/maybe.rkt") (lib "hackett/private/class.rkt") (lib "hackett/private/prim.rkt"))) (name . "hackett-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib"))))))) ("hackett-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924852) (dependencies . ("base" "hackett-lib" "rackunit-lib" "sandbox-lib" "testing-util-lib")) (description . "") (implies . ()) (modules . ((lib "tests/hackett/integration/recursive-unannotated-definition.rkt") (lib "tests/hackett/integration/pattern-app.rkt") (lib "tests/hackett/regression/github-issue-63.rkt") (lib "hackett/private/test.rkt") (lib "tests/hackett/integration/fundeps-arithmetic.rkt") (lib "tests/hackett/regression/lazy-case.rkt") (lib "tests/hackett/integration/type-alias.rkt") (lib "tests/hackett/integration/generalize.rkt") (lib "tests/hackett/regression/github-issue-46.rkt") (lib "tests/hackett/typecheck.rkt") (lib "tests/hackett/integration/laar-lens.rkt") (lib "tests/hackett/integration/pattern-alias.rkt") (lib "tests/hackett/integration/multi-param-typeclasses.rkt") (lib "tests/hackett/integration/top-level-recursive-def.rkt") (lib "tests/hackett/regression/github-issue-85.rkt") (lib "tests/hackett/integration/str-pattern.rkt") (lib "tests/hackett/integration/scoped-type-variables.rkt") (lib "tests/hackett/integration/int-pattern.rkt") (lib "tests/hackett/integration/variadic-list.rkt") (lib "tests/hackett/regression/github-issue-36.rkt") (lib "tests/hackett/integration/typeclass-instance-context-reduction.rkt") (lib "tests/hackett/regression/github-issue-60.rkt"))) (name . "hackett-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test"))))))) ("haiku-enum" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doc" "doc/doc@haiku-enum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/haiku-enum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/haiku-enum.txt"))) (checksum . "6856c4c6bf3c82e30ac453cee9b57bb5ef717888") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1562608272) (dependencies . ("at-exp-lib" "base" "math-lib" "data-enumerate-lib" "data-doc" "racket-doc" "scribble-doc" "scribble-lib")) (description . "A language designed for generating Haiku") (implies . ()) (modules . ((lib "haiku-enum/main.rkt") (lib "haiku-enum/haiku.rkt") (lib "haiku-enum/very-simple-haiku.rkt") (lib "haiku-enum/simple-haiku.rkt") (lib "haiku-enum/doc.scrbl"))) (name . "haiku-enum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rfindler/haiku-enum.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6856c4c6bf3c82e30ac453cee9b57bb5ef717888") (source . "https://github.com/rfindler/haiku-enum.git") (source_url . "https://github.com/rfindler/haiku-enum.git"))))))) ("hamt" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hamt" "doc/hamt@hamt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hamt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hamt.txt"))) (checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "collections-lib" "racket-doc" "rackunit-lib" "scribble-lib" "collections-lib")) (description . "Hash array mapped tries") (implies . ()) (modules . ((lib "data/hamt.rkt") (lib "data/hamt/array.rkt") (lib "data/hamt/fast.rkt") (lib "tests/data/hamt/hamt.rkt") (lib "tests/data/hamt/perf.rkt") (lib "data/hamt/hamt.scrbl") (lib "data/hamt/popcount.rkt") (lib "data/hamt/syntax.rkt"))) (name . "hamt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/hamt/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (source . "github://github.com/97jaz/hamt/master") (source_url . "http://github.com/97jaz/hamt/tree/master"))))))) ("handin" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "handin-server" "doc/handin-server@handin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handin.txt") (test-failure-log . "server/built/test-fail/handin.txt") (test-success-log . #f))) (checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "net-lib" "pconvert-lib" "sandbox-lib" "rackunit-lib" "web-server-lib" "gui-doc" "racket-doc" "scribble-lib")) (description . "Handin server and client template") (implies . ()) (modules . ((lib "handin-server/scribblings/server-client.scrbl") (lib "handin-server/scribblings/utils.scrbl") (lib "handin-client/this-collection.rkt") (lib "handin-server/scribblings/wheres-the-collection.scrbl") (lib "handin-server/scribblings/checker.scrbl") (lib "handin-server/utils.rkt") (lib "handin-server/run-servlet.rkt") (lib "handin-server/sandbox.rkt") (lib "handin-server/scribblings/updater.scrbl") (lib "handin-server/private/reloadable.rkt") (lib "handin-client/updater.rkt") (lib "handin-server/main.rkt") (lib "handin-server/private/config.rkt") (lib "handin-server/scribblings/server-setup.scrbl") (lib "handin-server/scribblings/common.rkt") (lib "handin-server/private/logger.rkt") (lib "handin-client/client.rkt") (lib "handin-server/private/md5.rkt") (lib "handin-server/private/hooker.rkt") (lib "handin-server/scribblings/other-utils.scrbl") (lib "handin-client/client-gui.rkt") (lib "handin-server/grading-utils.rkt") (lib "handin-server/scribblings/multifile.scrbl") (lib "handin-server/overridden-collects/teachpack/htdp/master.rkt") (lib "handin-server/private/run-status.rkt") (lib "handin-server/scribblings/quick-start.scrbl") (lib "handin-server/web-status-server.rkt") (lib "handin-server/overridden-collects/teachpack/htdp/guess.rkt") (lib "handin-server/scribblings/checker-utils.scrbl") (lib "handin-server/checker.rkt") (lib "handin-server/scribblings/grading-utils.scrbl") (lib "handin-server/scribblings/handin-server.scrbl") (lib "handin-server/scribblings/sandbox.scrbl") (lib "handin-server/private/lock.rkt") (lib "handin-server/scribblings/hook-dummy.rkt") (lib "handin-server/scribblings/client-customization.scrbl") (lib "handin-client/handin-multi.rkt"))) (name . "handin") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:0 . #t))) (source . "http://github.com/plt/handin/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "97cbf555bc129240fb6824494189a9ee6a10c51b") (source . "github://github.com/plt/handin/master") (source_url . "http://github.com/plt/handin/tree/master"))))))) ("happy-app" . #hasheq((author . "crystal@panix.com") (authors . ("crystal@panix.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "happy-app" "doc/happy-app@happy-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/happy-app.txt") (test-failure-log . "server/built/test-fail/happy-app.txt") (test-success-log . #f))) (checksum . "b14ad656e3f326881adf958bde846073c14d5e5f") (checksum-error . #f) (collection . "happy-app") (conflicts . ()) (date-added . 1621927530) (dependencies . ("base" "ugly-app-lib" "syntax-classes-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A Toolbox of Syntactic Shortcuts") (implies . ()) (modules . ((lib "happy-app/tests/infix.rkt") (lib "happy-app/tests/infix-placeholder.rkt") (lib "happy-app/tests/curry-ref.rkt") (lib "happy-app/main.rkt") (lib "happy-app/private/happy-app.rkt") (lib "happy-app/tests/arrow-lambda.rkt") (lib "happy-app/happy-app.scrbl") (lib "happy-app/tests/placeholder.rkt") (lib "happy-app/tests/thunk.rkt"))) (name . "happy-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:crystal@panix.com . #t) (ring:1 . #t))) (source . "https://github.com/plane/happy-app.git") (tags . ("app-syntax")) (versions . #hash((default . #hasheq((checksum . "b14ad656e3f326881adf958bde846073c14d5e5f") (source . "https://github.com/plane/happy-app.git") (source_url . "https://github.com/plane/happy-app.git"))))))) ("happy-names" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/happy-names.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/happy-names.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/happy-names.txt"))) (checksum . "3a74d689059e77106318b751e65b113233008d19") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("memoize")) (description . "Simple generator for Heroku-like names (random adj + random noun)") (implies . ()) (modules . ((lib "happy-names/adjectives.rkt") (lib "happy-names/main.rkt") (lib "happy-names/nouns.rkt") (lib "happy-names/combiners.rkt"))) (name . "happy-names") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/happy-names.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3a74d689059e77106318b751e65b113233008d19") (source . "https://github.com/thoughtstem/happy-names.git") (source_url . "https://github.com/thoughtstem/happy-names.git"))))))) ("hash-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hash-lambda-toc" "doc/hash-lambda-toc@hash-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-lambda.txt"))) (checksum . "0f7a89d7056c8d9f86497e0eff159d142f74aed7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "unstable-list-lib" "kw-utils" "mutable-match-lambda" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "using hash-tables for rest-arguments that include keyword-arguments") (implies . ()) (modules . ((lib "hash-lambda/all.rkt") (lib "hash-lambda/docs/hash-lambda-toc.scrbl") (lib "keyword-lambda/kw-apply.rkt") (lib "hash-lambda/mutable-match-lambda.rkt") (lib "hash-lambda/docs/mutable-match-lambda.scrbl") (lib "keyword-lambda/docs/keyword-case-lambda.scrbl") (lib "hash-lambda/main.rkt") (lib "keyword-lambda/docs/keyword-lambda.scrbl") (lib "keyword-lambda/keyword-apply-sort.rkt") (lib "keyword-lambda/arity+keywords.rkt") (lib "hash-lambda/prop-object-name.rkt") (lib "hash-lambda/docs/hash-lambda.scrbl") (lib "keyword-lambda/main.rkt") (lib "keyword-lambda/keyword-case-lambda.rkt") (lib "keyword-lambda/keyword-lambda.rkt"))) (name . "hash-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (keywords . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/hash-lambda/tree/master") (tags . ("deprecated" "keywords")) (versions . #hash((default . #hasheq((checksum . "0f7a89d7056c8d9f86497e0eff159d142f74aed7") (source . "git://github.com/AlexKnauth/hash-lambda") (source_url . "http://github.com/AlexKnauth/hash-lambda/tree/master"))))))) ("hash-view" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hash-view" "doc/hash-view@hash-view/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-view.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-view.txt"))) (checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (checksum-error . #f) (collection . "hash-view") (conflicts . ()) (date-added . 1612252731) (dependencies . ("base" "rackunit-lib" "hash-view-lib" "racket-doc" "scribble-lib")) (description . "Struct-like view for hashes") (implies . ("hash-view-lib")) (modules . ((lib "hash-view/hash-view.scrbl") (lib "hash-view/test.rkt"))) (name . "hash-view") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (hash . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view") (tags . ("hash")) (versions . #hash((default . #hasheq((checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view") (source_url . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view"))))))) ("hash-view-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-view-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-view-lib.txt"))) (checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (checksum-error . #f) (collection . "hash-view") (conflicts . ()) (date-added . 1612252634) (dependencies . ("base")) (description . "Struct-like view for hashes") (implies . ()) (modules . ((lib "hash-view/main.rkt"))) (name . "hash-view-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (hash . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib") (tags . ("hash")) (versions . #hash((default . #hasheq((checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib") (source_url . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib"))))))) ("hdf5" . #hasheq((author . "petersamarin@gmail.com") (authors . ("petersamarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hdf5.txt") (test-failure-log . "server/built/test-fail/hdf5.txt") (test-success-log . #f))) (checksum . "5836fc438ee36f94c80362b7da79b252a6429009") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "math")) (description . "FFI bindings to the hdf5 library") (implies . ()) (modules . ((lib "examples/hl-open.rkt") (lib "hdf5/unsafe.rkt") (lib "examples/h5ex_d_unlimgzip.rkt") (lib "examples/h5ex_t_commit.rkt") (lib "examples/getting-data-format.rkt") (lib "hdf5/unsafe/h5spublic.rkt") (lib "hdf5/unsafe/h5opublic.rkt") (lib "hdf5/unsafe/hdf5.rkt") (lib "hdf5/hl.rkt") (lib "hdf5/unsafe/h5mmpublic.rkt") (lib "examples/h5ex_g_traverse.rkt") (lib "examples/h5ex_t_vlen.rkt") (lib "examples/h5ex_t_enum.rkt") (lib "hdf5/hl/hdf5.rkt") (lib "hdf5/hl/utilities.rkt") (lib "hdf5/unsafe/h5dpublic.rkt") (lib "hdf5/unsafe/h5public.rkt") (lib "examples/h5ex_d_unlimadd.rkt") (lib "hdf5/unsafe/utilities.rkt") (lib "hdf5/unsafe/h5fdpublic.rkt") (lib "hdf5/unsafe/h5cpublic.rkt") (lib "examples/h5ex_t_cmpd.rkt") (lib "hdf5/unsafe/h5ppublic.rkt") (lib "hdf5/unsafe/h5tpublic.rkt") (lib "hdf5/unsafe/h5fpublic.rkt") (lib "hdf5/unsafe/h5acpublic.rkt") (lib "hdf5/unsafe/h5rpublic.rkt") (lib "examples/h5ex_t_array.rkt") (lib "hdf5/unsafe/h5gpublic.rkt") (lib "examples/h5ex_t_int.rkt") (lib "hdf5/unsafe/h5epublic.rkt") (lib "hdf5/unsafe/h5apublic.rkt") (lib "examples/h5ex_t_opaque.rkt") (lib "hdf5/unsafe/h5zpublic.rkt") (lib "hdf5/unsafe/h5lpublic.rkt") (lib "hdf5/unsafe/h5-utilities.rkt") (lib "hdf5/unsafe/h5epubgen.rkt") (lib "hdf5/hl/h5file.rkt") (lib "examples/h5ex_g_iterate.rkt") (lib "examples/h5ex_t_string.rkt") (lib "examples/h5ex_t_cpxcmpd.rkt") (lib "hdf5/unsafe/h5ipublic.rkt"))) (name . "hdf5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:petersamarin@gmail.com . #t) (data . #t) (ffi . #t) (hdf5 . #t) (ring:1 . #t))) (source . "https://github.com/oetr/racket-hdf5.git") (tags . ("data" "ffi" "hdf5")) (versions . #hash((default . #hasheq((checksum . "5836fc438ee36f94c80362b7da79b252a6429009") (source . "https://github.com/oetr/racket-hdf5.git") (source_url . "https://github.com/oetr/racket-hdf5.git"))))))) ("heresy" . #hasheq((author . "jarcane@gmail.com") (authors . ("jarcane@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "heresy" "doc/heresy@heresy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/heresy.txt") (test-failure-log . "server/built/test-fail/heresy.txt") (test-success-log . #f))) (checksum . "5b7a6c6eb9c2aebf0f2f6e10ae9e56f5f9c7ac48") (checksum-error . #f) (collection . "heresy") (conflicts . ()) (dependencies . ("base" "unstable-lib" "rackjure" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A functional Lisp dialect with BASIC-inspired syntax") (implies . ()) (modules . ((lib "heresy/lib/math.rkt") (lib "heresy/examples/brainfuck.rkt") (lib "heresy/lib/things.rkt") (lib "heresy/private/base.rkt") (lib "heresy/examples/99bottles.rkt") (lib "heresy/examples/hole-test.rkt") (lib "heresy/tests/things.rkt") (lib "heresy/examples/collatz.rkt") (lib "heresy/tests/app.rkt") (lib "heresy/examples/cards.rkt") (lib "heresy/tests/Y.rkt") (lib "heresy/examples/id-do.rkt") (lib "heresy/lib/list.rkt") (lib "heresy/lib/theory.rkt") (lib "heresy/tests/infix-math.rkt") (lib "heresy/lang/reader.rkt") (lib "heresy/examples/fizzbuzz.rkt") (lib "heresy/docs/heresy.scrbl") (lib "heresy/lib/identity.rkt") (lib "heresy/lib/string.rkt") (lib "heresy/lib/monadology.rkt") (lib "heresy/lib/require-stuff.rkt") (lib "heresy/private/io.rkt") (lib "heresy/private/random.rkt") (lib "heresy/main.rkt") (lib "heresy/lib/maybe.rkt") (lib "heresy/lib/hole.rkt") (lib "heresy/examples/option-type.rkt") (lib "heresy/lib/pipes.rkt") (lib "heresy/examples/fact.rkt") (lib "heresy/examples/celebrate.rkt") (lib "heresy/examples/do-action.rkt") (lib "heresy/examples/cons-things.rkt") (lib "heresy/examples/pipeland.rkt") (lib "heresy/examples/list-do.rkt") (lib "heresy/lib/infix-math.rkt"))) (name . "heresy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jarcane@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/jarcane/heresy/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "5b7a6c6eb9c2aebf0f2f6e10ae9e56f5f9c7ac48") (source . "git://github.com/jarcane/heresy") (source_url . "http://github.com/jarcane/heresy/tree/master"))))))) ("hidapi" . #hasheq((author . "jpathy@lazycons.xyz jiten@lazycons.xyz") (authors . ("jpathy@lazycons.xyz" "jiten@lazycons.xyz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hidapi" "doc/hidapi@hidapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hidapi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hidapi.txt"))) (checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (checksum-error . #f) (collection . "hidapi") (conflicts . ()) (date-added . 1612849578) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Racket bindings to hidapi library.") (implies . ()) (modules . ((lib "hidapi/private/ffi.rkt") (lib "hidapi/scribblings/hidapi.scrbl") (lib "hidapi/main.rkt"))) (name . "hidapi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jiten@lazycons.xyz . #t) (author:jpathy@lazycons.xyz . #t) (ffi . #t) (hid . #t) (hidapi . #t) (ring:1 . #t) (usb . #t))) (source . "https://github.com/jpathy/hidapi.git") (tags . ("ffi" "hid" "hidapi" "usb")) (versions . #hash((default . #hasheq((checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (source . "https://github.com/jpathy/hidapi.git") (source_url . "https://github.com/jpathy/hidapi.git"))))))) ("hive-client" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-client.txt"))) (checksum . "605dd70cdeb4bcc88e9c79d744bcca6fc89c611d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "gui-lib" "racket-doc")) (description . "Hive: client-server framework. This is client package.") (implies . ()) (modules . ((lib "hive/client.rkt") (lib "hive/client/receiver.rkt") (lib "hive/client/receivers.rkt") (lib "hive/client/string-constants-en.rkt") (lib "hive/client/defaults.rkt") (lib "hive/client/string-constants.rkt") (lib "hive/client/string-constants-ru.rkt") (lib "hive/client/users.rkt") (lib "hive/client/commands.rkt"))) (name . "hive-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (client . #t) (ipc . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/hive-client/tree/master") (tags . ("client" "ipc")) (versions . #hash((default . #hasheq((checksum . "605dd70cdeb4bcc88e9c79d744bcca6fc89c611d") (source . "git://github.com/Kalimehtar/hive-client") (source_url . "http://github.com/Kalimehtar/hive-client/tree/master"))))))) ("hive-common" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hive-common" "doc/hive-common@hive-common/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-common.txt"))) (checksum . "38d5bffacf8ddc6b8e0680997d23bf0502153bb7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "thread-utils" "racket-doc")) (description . "Hive: client-server framework. This is library for both client and server.") (implies . ()) (modules . ((lib "hive/common/read-write.rkt") (lib "hive/common/users.rkt") (lib "hive/common/serialize.rkt") (lib "hive/common/hive-common.scrbl"))) (name . "hive-common") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ipc . #t) (ring:1 . #t))) (source . "http://github.com/Kalimehtar/hive-common/tree/master") (tags . ("ipc")) (versions . #hash((default . #hasheq((checksum . "38d5bffacf8ddc6b8e0680997d23bf0502153bb7") (source . "git://github.com/Kalimehtar/hive-common") (source_url . "http://github.com/Kalimehtar/hive-common/tree/master"))))))) ("hive-server" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-server.txt"))) (checksum . "b60f588e9f214faa7b0767047ff20ba962ce935a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "rackunit-lib" "srfi-lib" "racket-doc")) (description . "Hive: client-server framework. This is server-side package.") (implies . ()) (modules . ((lib "hive/server/make-next.rkt") (lib "hive/server/file-store.rkt") (lib "hive/server.rkt") (lib "hive/server/commands.rkt") (lib "hive/server/session.rkt") (lib "hive/server/users.rkt") (lib "hive/server/catalog.rkt"))) (name . "hive-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (ipc . #t) (ring:1 . #t) (server . #t))) (source . "https://github.com/Kalimehtar/hive-server.git") (tags . ("ipc" "server")) (versions . #hash((default . #hasheq((checksum . "b60f588e9f214faa7b0767047ff20ba962ce935a") (source . "https://github.com/Kalimehtar/hive-server.git") (source_url . "https://github.com/Kalimehtar/hive-server.git"))))))) ("honu" . #hash((author . "mflatt@racket-lang.org rafkind@racket-lang.org") (authors . ("mflatt@racket-lang.org" "rafkind@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "honu" "doc/honu@honu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/honu.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/honu.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "macro-debugger" "base" "parser-tools-lib" "rackunit-lib" "racket-index" "scribble-lib" "at-exp-lib" "sandbox-lib" "racket-doc")) (description . "The implementation of the Honu language") (implies . ()) (modules . ((lib "honu/tests/test-docs-complete.rkt") (lib "honu/private/lang/reader.rkt") (lib "honu-parse/syntax.rkt") (lib "honu/debug.rkt") (lib "honu-parse/wrap.rkt") (lib "honu-parse/operator.rkt") (lib "honu/syntax-parse.rkt") (lib "honu/core/private/macro.rkt") (lib "honu/core/runtime.rkt") (lib "honu/private/common.rkt") (lib "honu/core/api.rkt") (lib "honu/core/private/struct.rkt") (lib "honu/main.rkt") (lib "honu/tests/linq.rkt") (lib "honu-parse/debug.rkt") (lib "honu/syntax.rkt") (lib "honu-parse/literals.rkt") (lib "honu-parse/macro.rkt") (lib "honu/core/lang/reader.rkt") (lib "honu-parse/transformer.rkt") (lib "honu/lang/reader.rkt") (lib "honu-parse/arithmetic.rkt") (lib "honu-parse/define.rkt") (lib "honu/core/private/honu-top.rkt") (lib "honu/private/main.rkt") (lib "honu-parse/template.rkt") (lib "honu/core/read.rkt") (lib "honu/core/main.rkt") (lib "honu/core/private/util.rkt") (lib "honu/core/private/literals.rkt") (lib "honu-parse/unparsed-begin.rkt") (lib "honu/core/private/honu.rkt") (lib "honu-parse/main.rkt") (lib "honu-parse/old-literals.rkt") (lib "honu/tests/xml.rkt") (lib "honu/scribblings/honu.scrbl") (lib "honu-parse/compile.rkt") (lib "honu/core/private/class.rkt") (lib "honu-parse/parse.rkt") (lib "honu/core/private/operator.rkt") (lib "honu/core/language.rkt") (lib "honu/tests/macros.rkt") (lib "honu/tests/check.rkt"))) (name . "honu") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:rafkind@racket-lang.org . #t) (ring:0 . #t))) (source . "http://github.com/racket/honu/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b36b9aeda8be22bf7fda177e831f42ac1a1de79b") (source . "git://github.com/racket/honu") (source_url . "http://github.com/racket/honu/tree/master"))))))) ("htdp-json" . #hasheq((author . "samth@ccs.neu.edu ccshan@indiana.edu") (authors . ("samth@ccs.neu.edu" "ccshan@indiana.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-json" "doc/htdp-json@htdp-json/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/htdp-json.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/htdp-json.txt"))) (checksum . "4685de829cfc51b41b010ab0563ef24b9bcbdf5a") (checksum-error . #f) (collection . "2htdp") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "htdp-lib")) (description . "A library for teaching with JSON") (implies . ()) (modules . ((lib "2htdp/json.rkt") (lib "2htdp/scribblings/htdp-json.scrbl"))) (name . "htdp-json") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:ccshan@indiana.edu . #t) (author:samth@ccs.neu.edu . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/samth/htdp-json.git") (tags . ("2htdp" "json")) (versions . #hash((default . #hasheq((checksum . "4685de829cfc51b41b010ab0563ef24b9bcbdf5a") (source . "https://github.com/samth/htdp-json.git") (source_url . "https://github.com/samth/htdp-json.git"))))))) ("htdp-trace" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-trace" "doc/htdp-trace@htdp-trace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/htdp-trace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/htdp-trace.txt"))) (checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (checksum-error . #f) (collection . "htdp-trace") (conflicts . ()) (date-added . 1605545342) (dependencies . ("base" "htdp-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Wrapper for racket/trace that allows it to be used in HtDP Languages like Beginning Student, where functions cannot be used as first class values.") (implies . ()) (modules . ((lib "htdp-trace/tests/bsl-test.rkt") (lib "htdp-trace/scribblings/htdp-trace.scrbl") (lib "htdp-trace/main.rkt") (lib "htdp-trace/tests/main.rkt") (lib "htdp-trace/tests/isl-test.rkt"))) (name . "htdp-trace") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:djholtby@uwaterloo.ca . #t) (htdp . #t) (ring:1 . #t) (traces . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace") (tags . ("htdp" "traces")) (versions . #hash((default . #hasheq((checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace"))))))) ("html-examples" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-examples" "doc/html-examples@html-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-examples.txt"))) (checksum . "bc364205280c08eb3d8239596a516c468a26237f") (checksum-error . #f) (collection . "html-examples") (conflicts . ()) (date-added . 1590907129) (dependencies . ("scribble-lib" "txexpr" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Generate an HTML part out of Scribble Examples") (implies . ()) (modules . ((lib "html-examples/main.rkt") (lib "html-examples/scribblings/html-examples.scrbl"))) (name . "html-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (examples . #t) (html . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/pmatos/html-examples.git") (tags . ("examples" "html" "scribble")) (versions . #hash((default . #hasheq((checksum . "bc364205280c08eb3d8239596a516c468a26237f") (source . "https://github.com/pmatos/html-examples.git") (source_url . "https://github.com/pmatos/html-examples.git"))))))) ("http" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http" "doc/http@http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http.txt"))) (checksum . "4d03fb68eaf04dfae3fdcefb4d970f6d085e83e9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "html-lib" "rackunit-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Support for HTTP 1.1 including automatic connection pooling.") (implies . ()) (modules . ((lib "http/request.rkt") (lib "http/main.rkt") (lib "http/http.scrbl") (lib "http/head.rkt") (lib "http/util.rkt"))) (name . "http") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/greghendershott/http/tree/master") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "4d03fb68eaf04dfae3fdcefb4d970f6d085e83e9") (source . "git://github.com/greghendershott/http") (source_url . "http://github.com/greghendershott/http/tree/master"))))))) ("http-easy" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http-easy" "doc/http-easy@http-easy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-easy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http-easy.txt"))) (checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (checksum-error . #f) (collection . "net") (conflicts . ()) (date-added . 1591628489) (dependencies . ("base" "http-easy-lib" "net-cookies-doc" "net-cookies-lib" "net-doc" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "A high-level HTTP client. (docs & implementation)") (implies . ("http-easy-lib")) (modules . ((lib "net/http-easy.scrbl"))) (name . "http-easy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy") (tags . ("client" "http" "https")) (versions . #hash((default . #hasheq((checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy") (source_url . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy"))))))) ("http-easy-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-easy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http-easy-lib.txt"))) (checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (checksum-error . #f) (collection . "net") (conflicts . ("http-easy")) (date-added . 1661272932) (dependencies . ("base" "net-cookies-lib" "resource-pool-lib" "unix-socket-lib")) (description . "A high-level HTTP client. (implementation)") (implies . ()) (modules . ((lib "net/http-easy/private/common.rkt") (lib "net/http-easy/private/auth.rkt") (lib "net/http-easy/private/url.rkt") (lib "net/http-easy/private/reflect.rkt") (lib "net/http-easy/private/payload.rkt") (lib "net/http-easy/private/logger.rkt") (lib "net/http-easy/private/user-agent.rkt") (lib "net/http-easy/private/session.rkt") (lib "net/http-easy/private/proxy.rkt") (lib "net/http-easy/private/timeout.rkt") (lib "net/http-easy/private/contract.rkt") (lib "net/http-easy.rkt") (lib "net/http-easy/private/port.rkt") (lib "net/http-easy/private/error.rkt") (lib "net/http-easy/private/pool.rkt") (lib "net/http-easy/private/response.rkt"))) (name . "http-easy-lib") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (https . #t) (ring:2 . #t))) (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-lib") (tags . ("client" "http" "https")) (versions . #hash((default . #hasheq((checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-lib") (source_url . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-lib"))))))) ("http-easy-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-easy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http-easy-test.txt"))) (checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1591628548) (dependencies . ("base" "http-easy" "net-cookies-lib" "rackunit-lib" "resource-pool-lib" "web-server-lib")) (description . "A high-level HTTP client. (tests only)") (implies . ()) (modules . ((lib "tests/net/http-easy/private/common.rkt") (lib "tests/net/http-easy/private/response.rkt") (lib "tests/net/http-easy/private/payload.rkt") (lib "tests/net/http-easy/private/pool.rkt") (lib "tests/net/http-easy/http-easy.rkt") (lib "tests/net/http-easy/private/url.rkt"))) (name . "http-easy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test") (tags . ("client" "http" "https")) (versions . #hash((default . #hasheq((checksum . "630a982a282a51fd7fd85dc5e2f3f581c564b5e4") (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test") (source_url . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test"))))))) ("http11" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http11" "doc/http11@http11/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http11.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http11.txt"))) (checksum . "5d9a2f182168c01ca366cdd45c7bcf78cf8037be") (checksum-error . #f) (collection . "http11") (conflicts . ()) (dependencies . ("uri" "date" "opt" "string-util" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib")) (description . "HTTP v1.1  low level protocol library in Typed Racket.") (implies . ()) (modules . ((lib "http11/http/param.rkt") (lib "http11/http/encoding.rkt") (lib "http11/http/header.rkt") (lib "http11/main.rkt") (lib "http11/http/proxy.rkt") (lib "http11/http/heading.rkt") (lib "http11/http/cookie.rkt") (lib "http11/http/encode.rkt") (lib "http11/scribblings/http11.scrbl") (lib "http11/http/mimetype.rkt") (lib "http11/http/parse.rkt") (lib "http11/http/mimetype-const.rkt"))) (name . "http11") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (http . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/http11.git") (tags . ("http")) (versions . #hash((default . #hasheq((checksum . "5d9a2f182168c01ca366cdd45c7bcf78cf8037be") (source . "https://gitlab.com/RayRacine/http11.git") (source_url . "https://gitlab.com/RayRacine/http11.git"))))))) ("http11-server" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http11-server" "doc/http11-server@http11-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http11-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http11-server.txt"))) (checksum . "f45e745600995225fb492adc86bc31597b6b9b3d") (checksum-error . #f) (collection . "http11-server") (conflicts . ()) (dependencies . ("http11" "string-util" "uri" "base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-lib" "typed-racket-more")) (description . "Minimal low level routines in Typed Racket sufficient to handle a RPC/API HTTP(S) endpoint server.  It is NOT a full blown HTTP Content Server.  Simple endpoint server.") (implies . ()) (modules . ((lib "http11-server/main.rkt") (lib "http11-server/scribblings/http11-server.scrbl") (lib "http11-server/endpoint.rkt") (lib "http11-server/types.rkt"))) (name . "http11-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (endpoint . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/http11-server.git") (tags . ("endpoint" "http" "https")) (versions . #hash((default . #hasheq((checksum . "f45e745600995225fb492adc86bc31597b6b9b3d") (source . "https://gitlab.com/RayRacine/http11-server.git") (source_url . "https://gitlab.com/RayRacine/http11-server.git"))))))) ("http123" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http123" "doc/http123@http123/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http123.txt") (test-failure-log . "server/built/test-fail/http123.txt") (test-success-log . #f))) (checksum . "2f17657c1ab058ec1b6c04f2c964cae42b54833e") (checksum-error . #f) (collection . "http123") (conflicts . ()) (date-added . 1626950834) (dependencies . ("base" "http123-lib" "racket-doc" "rackunit-lib" "scribble-lib" "net-doc" "net-cookies-lib" "net-cookies-doc" "web-server-lib")) (description . "HTTP client with support for HTTP/1.1 and HTTP/2.") (implies . ("http123-lib")) (modules . ((lib "http123/scribblings/internal.scrbl") (lib "http123/scribblings/util.scrbl") (lib "http123/scribblings/header.scrbl") (lib "http123/tests/web-server.rkt") (lib "http123/scribblings/exn.scrbl") (lib "http123/scribblings/notes.scrbl") (lib "http123/tests/test11.rkt") (lib "http123/scribblings/http123.scrbl") (lib "http123/scribblings/util.rkt") (lib "http123/scribblings/client-api.scrbl") (lib "http123/tests/concurrent.rkt") (lib "http123/tests/test2.rkt") (lib "http123/scribblings/request.scrbl") (lib "http123/tests/test-web.rkt") (lib "http123/scribblings/intro.scrbl") (lib "http123/tests/test.rkt") (lib "http123/scribblings/response.scrbl"))) (name . "http123") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (http . #t) (http2 . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-http123.git?path=http123") (tags . ("http" "http2" "net")) (versions . #hash((default . #hasheq((checksum . "2f17657c1ab058ec1b6c04f2c964cae42b54833e") (source . "https://github.com/rmculpepper/racket-http123.git?path=http123") (source_url . "https://github.com/rmculpepper/racket-http123.git?path=http123"))))))) ("http123-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http123-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http123-lib.txt"))) (checksum . "2f17657c1ab058ec1b6c04f2c964cae42b54833e") (checksum-error . #f) (collection . "http123") (conflicts . ()) (date-added . 1626950771) (dependencies . ("base" "binaryio-lib" "scramble-lib" "net-cookies-lib" "rackunit-lib")) (description . "HTTP client with support for HTTP/1.1 and HTTP/2.") (implies . ()) (modules . ((lib "http123/private/h2-frame.rkt") (lib "http123/util/request.rkt") (lib "http123/private/http11.rkt") (lib "http123/private/hpack.rkt") (lib "http123/util/header.rkt") (lib "http123/private/request.rkt") (lib "http123/private/h2-client-app.rkt") (lib "http123/private/h2-stream.rkt") (lib "http123/private/header.rkt") (lib "http123/private/regexp.rkt") (lib "http123/main.rkt") (lib "http123/util/url.rkt") (lib "http123/private/response.rkt") (lib "http123/internal.rkt") (lib "http123/private/header-base.rkt") (lib "http123/private/interfaces.rkt") (lib "http123/private/connection.rkt") (lib "http123/private/http2.rkt") (lib "http123/private/client.rkt") (lib "http123/private/util.rkt"))) (name . "http123-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (http . #t) (http2 . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib") (tags . ("http" "http2" "net")) (versions . #hash((default . #hasheq((checksum . "2f17657c1ab058ec1b6c04f2c964cae42b54833e") (source . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib") (source_url . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib"))))))) ("http2" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http2" "doc/http2@http2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http2.txt"))) (checksum . "aafdea48a4f1e6f8579531350aee3691f4060129") (checksum-error . #f) (collection . "http2") (conflicts . ()) (date-added . 1572144809) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A (wildly unimplemented) http2 client and server for Racket") (implies . ()) (modules . ((lib "http2/base.rkt") (lib "http2/main.scrbl") (lib "http2/main.rkt"))) (name . "http2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (http . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/http2.git") (tags . ("http")) (versions . #hash((default . #hasheq((checksum . "aafdea48a4f1e6f8579531350aee3691f4060129") (source . "https://github.com/jackfirth/http2.git") (source_url . "https://github.com/jackfirth/http2.git"))))))) ("hygienic-quote-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-quote" "doc/hygienic-quote@hygienic-quote-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-quote-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-quote-lang.txt"))) (checksum . "54bd504575b13399c6a1425b7e34dc697b81e14e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "hygienic versions of quote-like racket reader macros") (implies . ()) (modules . ((lib "hygienic-quote/reader.rkt") (lib "hygienic-quote/private/make-quote-proc.rkt") (lib "hygienic-quote/tests/test.rkt") (lib "hygienic-quote/scribblings/hygienic-quote.scrbl") (lib "hygienic-quote/lang/reader.rkt"))) (name . "hygienic-quote-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/AlexKnauth/hygienic-quote-lang/tree/master") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "54bd504575b13399c6a1425b7e34dc697b81e14e") (source . "git://github.com/AlexKnauth/hygienic-quote-lang") (source_url . "http://github.com/AlexKnauth/hygienic-quote-lang/tree/master"))))))) ("hygienic-reader-extension" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-reader-extension" "doc/hygienic-reader-extension@hygienic-reader-extension/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-reader-extension.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-reader-extension.txt"))) (checksum . "24a254f3d32875aaab2c9faf9ee84b6a26800479") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "adding hygiene to racket reader extensions") (implies . ()) (modules . ((lib "lang-reader/syntax-module-reader.rkt") (lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/test.rkt") (lib "lang-reader/syntax-module-reader/lang/reader.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/lang/reader.rkt") (lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/lang/reader.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/test.rkt") (lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/unhygienic-macro.rkt") (lib "lang-reader/lang-reader-lang.rkt") (lib "lang-extension/meta-reader-util.rkt") (lib "lang-extension/lang/reader.rkt") (lib "hygienic-reader-extension/extend-reader.rkt") (lib "hygienic-reader-extension/scribblings/hygienic-reader-extension.scrbl") (lib "hygienic-reader-extension/tests/hygienic-quote/test.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/lang/reader.rkt") (lib "lang-reader/lang-reader.rkt") (lib "lang-extension/lang-extension-lang.rkt") (lib "lang-reader/lang/reader.rkt"))) (name . "hygienic-reader-extension") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/hygienic-reader-extension/tree/master") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "24a254f3d32875aaab2c9faf9ee84b6a26800479") (source . "git://github.com/AlexKnauth/hygienic-reader-extension") (source_url . "http://github.com/AlexKnauth/hygienic-reader-extension/tree/master"))))))) ("hyper-literate" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "test2.hl" "doc/test2.hl@hyper-literate/index.html") ("main" "test.hl" "doc/test.hl@hyper-literate/index.html") ("main" "hyper-literate" "doc/hyper-literate@hyper-literate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyper-literate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyper-literate.txt"))) (checksum . "24fd9ca7ca9b96e3072d37306dc79edf24ba4ef1") (checksum-error . #f) (collection . "hyper-literate") (conflicts . ()) (date-added . 1614799480) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "scheme-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "sexp-diff" "tr-immutable" "typed-map-lib" "debug-scopes" "syntax-color-lib" "scribble-lib" "racket-doc" "rackunit-doc" "scribble-doc" "rackunit-doc")) (description . "Some tools which help build hyper-literate programs. For now, this only contains a few changes from scribble/lp2, including support for typed/racket literate programs.") (implies . ()) (modules . ((lib "hyper-literate/private/common.rkt") (lib "hyper-literate/test/comments/same-syntax-typed.rkt") (lib "hyper-literate/comments/syntax-properties.rkt") (lib "hyper-literate/test/test.hl.rkt") (lib "hyper-literate/test/test-doc.rkt") (lib "hyper-literate/private/no-auto-require.rkt") (lib "hyper-literate/test/test2.hl.rkt") (lib "hyper-literate/comments/syntax-properties-typed.rkt") (lib "hyper-literate/spoiler1.rkt") (lib "hyper-literate/test/comments/annotate-syntax-typed.rkt") (lib "hyper-literate/test/comments/annotate-syntax.rkt") (lib "hyper-literate/test/comments/same-syntax.rkt") (lib "hyper-literate/comments/restore-comments.rkt") (lib "hyper-literate/lang.rkt") (lib "hyper-literate/comments/hide-comments.rkt") (lib "hyper-literate/diff1.rkt") (lib "hyper-literate/lang/first-line-utils.rkt") (lib "hyper-literate/comment-reader.rkt") (lib "hyper-literate/test/test-chunks-order.rkt") (lib "hyper-literate/comments/restore-comments-typed.rkt") (lib "hyper-literate/scribblings/diff1-example.hl.rkt") (lib "hyper-literate/main.rkt") (lib "hyper-literate/lang/reader.rkt") (lib "hyper-literate/scribblings/hyper-literate.scrbl") (lib "hyper-literate/comments/hide-comments-typed.rkt") (lib "hyper-literate/test/comments/test-comments-round-trip.rkt") (lib "hyper-literate/private/lp.rkt") (lib "hyper-literate/restore-comments.rkt") (lib "hyper-literate/lang/meta-first-line.rkt") (lib "hyper-literate/private/chunks-toc-prefix.rkt"))) (name . "hyper-literate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (documentation . #t) (lang . #t) (language . #t) (literate-programming . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/hyper-literate.git#main") (tags . ("documentation" "lang" "language" "literate-programming")) (versions . #hash((default . #hasheq((checksum . "24fd9ca7ca9b96e3072d37306dc79edf24ba4ef1") (source . "https://github.com/jsmaniac/hyper-literate.git#main") (source_url . "https://github.com/jsmaniac/hyper-literate.git#main"))))))) ("hyphenate" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hyphenate" "doc/hyphenate@hyphenate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyphenate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyphenate.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1640964786) (dependencies . ("base" "sugar" "txexpr" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Hyphenate X-expressions with the Knuth–Liang hyphenation algorithm") (implies . ()) (modules . ((lib "hyphenate/us.rkt") (lib "hyphenate/tests.rkt") (lib "hyphenate/us/exceptions.rkt") (lib "hyphenate/private/bootstrap.rkt") (lib "hyphenate/fr.rkt") (lib "hyphenate/scribblings/hyphenate.scrbl") (lib "hyphenate/private/core.rkt") (lib "hyphenate/fr/exceptions.rkt") (lib "hyphenate/private/exception-prep.rkt") (lib "hyphenate/post-installer.rkt") (lib "hyphenate/private/pattern-prep.rkt") (lib "hyphenate/us/patterns.rkt") (lib "hyphenate/fr/patterns.rkt") (lib "hyphenate/main.rkt"))) (name . "hyphenate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=hyphenate#main") (tags . ("scribble" "web")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=hyphenate#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=hyphenate#main"))))))) ("icfp-2014-contracts-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp-2014-contracts-talk.txt") (test-failure-log . "server/built/test-fail/icfp-2014-contracts-talk.txt") (test-success-log . #f))) (checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("plot-lib" "base" "draw-lib" "gui-lib" "pict-lib" "plot-gui-lib" "rackunit-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "Slideshow implementation of ICFP 2014 Contracts Keynote Talk") (implies . ()) (modules . ((lib "icfp-2014-contracts-talk/heap.rkt") (lib "icfp-2014-contracts-talk/function-machine.rkt") (lib "icfp-2014-contracts-talk/faces.rkt") (lib "icfp-2014-contracts-talk/counts/contracts-vs-commits.rkt") (lib "icfp-2014-contracts-talk/dep.rkt") (lib "icfp-2014-contracts-talk/code-combine.rkt") (lib "icfp-2014-contracts-talk/boundaries-not-projections.rkt") (lib "icfp-2014-contracts-talk/title-lib.rkt") (lib "icfp-2014-contracts-talk/counts/time-vs-contracts.rkt") (lib "icfp-2014-contracts-talk/equations.rkt") (lib "icfp-2014-contracts-talk/random-generation.rkt") (lib "icfp-2014-contracts-talk/intro.rkt") (lib "icfp-2014-contracts-talk/util.rkt") (lib "icfp-2014-contracts-talk/title.rkt") (lib "icfp-2014-contracts-talk/render-bytes.rkt") (lib "icfp-2014-contracts-talk/color.rkt") (lib "icfp-2014-contracts-talk/takeaways.rkt") (lib "icfp-2014-contracts-talk/heap-slides.rkt") (lib "icfp-2014-contracts-talk/redex-model.rkt") (lib "icfp-2014-contracts-talk/talk.rkt") (lib "icfp-2014-contracts-talk/boundary.rkt") (lib "icfp-2014-contracts-talk/redex-typeset.rkt") (lib "icfp-2014-contracts-talk/main.rkt") (lib "icfp-2014-contracts-talk/model-lib.rkt"))) (name . "icfp-2014-contracts-talk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/rfindler/icfp-2014-contracts-talk/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (source . "git://github.com/rfindler/icfp-2014-contracts-talk") (source_url . "http://github.com/rfindler/icfp-2014-contracts-talk/tree/master"))))))) ("icfp2017-minikanren" . #hasheq((author . "alexander@knauth.org greg.weiqi@gmail.com") (authors . ("alexander@knauth.org" "greg.weiqi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp2017-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/icfp2017-minikanren.txt"))) (checksum . "ff9eca58487ec393fc2d8580e5d1aafedcd20808") (checksum-error . #f) (collection . "icfp2017-minikanren") (conflicts . ()) (date-added . 1629226458) (dependencies . ("base" "r6rs-lib")) (description . "A racket port of the version of minikanren from the artifact of the ICFP 2017 Pearl, A Unified Approach to Solving Seven Programming Problems by William E. Byrd, Michael Ballantyne, Gregory Rosenblatt, and Matthew Might. Includes evalo-optimized.") (implies . ()) (modules . ((lib "icfp2017-minikanren/mk/test-type-infer.rkt") (lib "icfp2017-minikanren/mk/test-all.rkt") (lib "icfp2017-minikanren/mk/test-quines.rkt") (lib "icfp2017-minikanren/intro-examples.rkt") (lib "icfp2017-minikanren/mk/test-arithmetic.rkt") (lib "icfp2017-minikanren/mk/type-infer.rkt") (lib "icfp2017-minikanren/mk/mk.rkt") (lib "icfp2017-minikanren/evalo-standard.rkt") (lib "icfp2017-minikanren/mk/test-check.rkt") (lib "icfp2017-minikanren/evalo-scoping.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/specialized-scheme-compat.rkt") (lib "icfp2017-minikanren/evalo-small.rkt") (lib "icfp2017-minikanren/evalo-optimized.rkt") (lib "icfp2017-minikanren/mk/evalo.rkt") (lib "icfp2017-minikanren/mk/test-interp.rkt") (lib "icfp2017-minikanren/mk/arithmetic.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/lang/reader.rkt"))) (name . "icfp2017-minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:greg.weiqi@gmail.com . #t) (logic . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket") (tags . ("logic" "miniKanren")) (versions . #hash((default . #hasheq((checksum . "ff9eca58487ec393fc2d8580e5d1aafedcd20808") (source . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket") (source_url . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket"))))))) ("icns" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "icns" "doc/icns@icns/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icns.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/icns.txt"))) (checksum . "979cbc32e1d1e245f970e53c2098fbad0f538629") (checksum-error . #f) (collection . "icns") (conflicts . ()) (dependencies . ("base" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc")) (description . "A Racket library for working with Apple's .icns icon file format.") (implies . ()) (modules . ((lib "icns/main.rkt") (lib "icns/scribblings/icns.scrbl"))) (name . "icns") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/icns.git") (tags . ("graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "979cbc32e1d1e245f970e53c2098fbad0f538629") (source . "https://github.com/LiberalArtist/icns.git") (source_url . "https://github.com/LiberalArtist/icns.git"))))))) ("identikon" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "identikon" "doc/identikon@identikon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/identikon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/identikon.txt"))) (checksum . "d8908ee6955e69466270692599eb9076adc6a28b") (checksum-error . #f) (collection . "identikon") (conflicts . ()) (dependencies . ("draw-lib" "gui-lib" "base" "sugar" "css-tools" "htdp-lib" "quickcheck" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Tiny framework for generating identicons") (implies . ()) (modules . ((lib "identikon/rules/angles.rkt") (lib "identikon/rules/qbert.rkt") (lib "identikon/scribblings/identikon.scrbl") (lib "identikon/utils.rkt") (lib "identikon/main.rkt") (lib "identikon/rules/nineblock.rkt") (lib "identikon/rules/default.rkt") (lib "identikon/transforms.rkt") (lib "identikon/rules/angles2.rkt") (lib "identikon/rules/stars.rkt") (lib "identikon/rules/squares.rkt") (lib "identikon/rules/circles.rkt") (lib "identikon/rules/rings.rkt"))) (name . "identikon") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (graphics . #t) (identicon . #t) (ring:1 . #t))) (source . "http://github.com/DarrenN/identikon.git/tree/master") (tags . ("2htdp" "graphics" "identicon")) (versions . #hash((default . #hasheq((checksum . "d8908ee6955e69466270692599eb9076adc6a28b") (source . "git://github.com/DarrenN/identikon.git") (source_url . "http://github.com/DarrenN/identikon.git/tree/master"))))))) ("iloveck101" . #hasheq((author . "Dendoh@gmail.com") (authors . ("Dendoh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/iloveck101.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A command-line tool to download images from ck101 threads.") (implies . ()) (modules . ((lib "iloveck101/iloveck101.rkt"))) (name . "iloveck101") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:Dendoh@gmail.com . #t) (ck101 . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/Domon/iloveck101/tree/master") (tags . ("ck101" "web")) (versions . #hash((default . #hasheq((checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (source . "github://github.com/Domon/iloveck101/master") (source_url . "http://github.com/Domon/iloveck101/tree/master"))))))) ("image-coloring" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/image-coloring.txt") (docs . (("main" "image-colors" "doc/image-colors@image-coloring/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/image-coloring.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/image-coloring.txt"))) (checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (checksum-error . #f) (collection . "image-coloring") (conflicts . ()) (date-added . 1570042591) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "For doing bitmap operations on 2htdp/image objects") (implies . ()) (modules . ((lib "image-coloring/test.rkt") (lib "image-coloring/main.rkt") (lib "image-coloring/scribblings/image-colors.scrbl"))) (name . "image-coloring") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/image-coloring.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (source . "https://github.com/thoughtstem/image-coloring.git") (source_url . "https://github.com/thoughtstem/image-coloring.git"))))))) ("image-colors" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/image-colors.txt") (docs . (("extract" "image-colors" "doc/image-colors@image-colors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/image-colors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/image-colors.txt"))) (checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (checksum-error . #f) (collection . "image-coloring") (conflicts . ("image-coloring")) (date-added . 1569792608) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "For doing basic pixel operations on 2htdp/image objects") (implies . ()) (modules . ((lib "image-coloring/test.rkt") (lib "image-coloring/main.rkt") (lib "image-coloring/scribblings/image-colors.scrbl"))) (name . "image-colors") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/image-colors.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (source . "https://github.com/thoughtstem/image-colors.git") (source_url . "https://github.com/thoughtstem/image-colors.git"))))))) ("impl-excl" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/impl-excl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/impl-excl.txt"))) (checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (checksum-error . #f) (collection . "impl-excl") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "set-extras")) (description . "Pre-compute procedures for fast checking of transitive implication and exclusion between simple predicates") (implies . ()) (modules . ((lib "impl-excl/main.rkt") (lib "impl-excl/tests.rkt"))) (name . "impl-excl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (source_url . "https://github.com/philnguyen/impl-excl.git?path=impl-excl"))))))) ("import-profiler" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/import-profiler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/import-profiler.txt"))) (checksum . "aada80a7816ea8d7c19a776d7d7b0f939f0c2996") (checksum-error . #f) (collection . "pkg") (conflicts . ()) (date-added . 1657697748) (dependencies . ("base")) (description . "A raco command for profiling module dependency import times.") (implies . ()) (modules . ((lib "pkg/import-profiler.rkt") (lib "pkg/import-profiler/profiler.rkt") (lib "pkg/import-profiler/worker.rkt"))) (name . "import-profiler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (pkg . #t) (profiling . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-import-profiler.git") (tags . ("pkg" "profiling")) (versions . #hash((default . #hasheq((checksum . "aada80a7816ea8d7c19a776d7d7b0f939f0c2996") (source . "https://github.com/Bogdanp/racket-import-profiler.git") (source_url . "https://github.com/Bogdanp/racket-import-profiler.git"))))))) ("in-covid" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-covid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-covid.txt"))) (checksum . "69475f04fa150050dc955f8cca1ddcf49536a78d") (checksum-error . #f) (collection . "in-covid") (conflicts . ()) (date-added . 1647279819) (dependencies . ("fancy-app" "threading-lib" "graphite-lib" "gregor-lib" "plot-gui-lib" "plot-lib" "sawzall-lib" "data-frame" "http-easy" "math-lib" "pict-lib" "base")) (description . "Indiana COVID data analysis") (implies . ()) (modules . ((lib "in-covid/wastewater.rkt") (lib "in-covid/covid-data.rkt"))) (name . "in-covid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/in-covid.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "69475f04fa150050dc955f8cca1ddcf49536a78d") (source . "https://github.com/samth/in-covid.git#main") (source_url . "https://github.com/samth/in-covid.git#main"))))))) ("in-new-directory" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "in-new-directory" "doc/in-new-directory@in-new-directory/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-new-directory.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-new-directory.txt"))) (checksum . "f7020748288df28ed8371a521781a5d0986582a6") (checksum-error . #f) (collection . "file") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scribble-lib")) (description . "Run things in new directories") (implies . ()) (modules . ((lib "file/in-new-directory.rkt") (lib "file/in-new-directory.scrbl"))) (name . "in-new-directory") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/samth/in-new-directory/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "f7020748288df28ed8371a521781a5d0986582a6") (source . "git://github.com/samth/in-new-directory") (source_url . "http://github.com/samth/in-new-directory/tree/master"))))))) ("in-out-logged" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "in-out-logged" "doc/in-out-logged@in-out-logged/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-out-logged.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-out-logged.txt"))) (checksum . "51203f9448f520277d2a5bd1946b425d11e37b90") (checksum-error . #f) (collection . "in-out-logged") (conflicts . ()) (date-added . 1631132222) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Wraps a chunk of code in \"entering\" and \"leaving\" log messages and returns the result(s) of the code.") (implies . ()) (modules . ((lib "in-out-logged/scribblings/in-out-logged.scrbl") (lib "in-out-logged/main.rkt"))) (name . "in-out-logged") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (logger . #t) (logging . #t) (logs . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/in-out-logged.git") (tags . ("logger" "logging" "logs")) (versions . #hash((default . #hasheq((checksum . "51203f9448f520277d2a5bd1946b425d11e37b90") (source . "https://github.com/dstorrs/in-out-logged.git") (source_url . "https://github.com/dstorrs/in-out-logged.git"))))))) ("inexact-number-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "inexact-number-lang" "doc/inexact-number-lang@inexact-number-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/inexact-number-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/inexact-number-lang.txt"))) (checksum . "d92a6dcef0f8b38fc1368fb9d62a7f9966934039") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548025992) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A lang-extension that reads every number as inexact") (implies . ()) (modules . ((lib "inexact-number/scribblings/inexact-number-lang.scrbl") (lib "inexact-number/test/inexact-number-racket.rkt") (lib "inexact-number/lang/reader.rkt") (lib "inexact-number/lang/readtable.rkt"))) (name . "inexact-number-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/inexact-number-lang.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "d92a6dcef0f8b38fc1368fb9d62a7f9966934039") (source . "https://github.com/AlexKnauth/inexact-number-lang.git") (source_url . "https://github.com/AlexKnauth/inexact-number-lang.git"))))))) ("infix" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-manual" "doc/infix-manual@infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix.txt"))) (checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scheme-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "Infix Expressions") (implies . ()) (modules . ((lib "infix/parser.rkt") (lib "infix/scribblings/util.rkt") (lib "infix/main.rkt") (lib "infix/scribblings/infix-manual.scrbl") (lib "infix/parse-string-lexeme.rkt") (lib "infix/parameter.rkt") (lib "infix/scribblings/while.rkt") (lib "infix/tests/example.rkt") (lib "infix/tests/test-dollar.rkt"))) (name . "infix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (infix . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/infix/tree/master") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (source . "git://github.com/soegaard/infix") (source_url . "http://github.com/soegaard/infix/tree/master"))))))) ("infix-syntax" . #hasheq((author . "mrmyers.random.suffix@gmail.com") (authors . ("mrmyers.random.suffix@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-syntax" "doc/infix-syntax@infix-syntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix-syntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix-syntax.txt"))) (checksum . "8886395e31dc0b5d0db3a77a75255df15492806c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Expansion-time parsing of infix expressions.") (implies . ()) (modules . ((lib "infix-syntax/private/operator/id-tools.rkt") (lib "infix-syntax/test/core/private/stx.rkt") (lib "infix-syntax/scribblings/infix-syntax.scrbl") (lib "infix-syntax/private/core.rkt") (lib "infix-syntax/private/core/parse.rkt") (lib "infix-syntax/test/core/private/util.rkt") (lib "infix-syntax/test/operator/private/stx.rkt") (lib "infix-syntax/test/core/base-test.rkt") (lib "infix-syntax/test/core/op-parse.rkt") (lib "infix-syntax/private/reprovide.rkt") (lib "infix-syntax/private/operator/make.rkt") (lib "infix-syntax/test/operator/private/macro.rkt") (lib "infix-syntax/main.rkt") (lib "infix-macro/main.rkt") (lib "infix-syntax/private/infix/token.rkt") (lib "infix-syntax/test/core/private/base.rkt") (lib "infix-syntax/test/scratch/scratch-test.rkt") (lib "infix-syntax/private/core/scope.rkt") (lib "infix-syntax/private/operator.rkt") (lib "infix-syntax/test/check.rkt") (lib "infix-syntax/private/infix.rkt") (lib "infix-syntax/private/core/props.rkt") (lib "infix-syntax/private/infix/sugar.rkt") (lib "infix-syntax/test/operator/op-proc.rkt") (lib "infix-syntax/test/core/private/macro.rkt") (lib "infix-syntax/private/operator/sugar.rkt") (lib "infix-syntax/test/operator/parse.rkt") (lib "infix-syntax/test/operator/id-test.rkt") (lib "infix-syntax/test/core/props.rkt") (lib "infix-syntax/private/operator/util.rkt"))) (name . "infix-syntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mrmyers.random.suffix@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/mromyers/infix-syntax.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "8886395e31dc0b5d0db3a77a75255df15492806c") (source . "https://github.com/mromyers/infix-syntax.git") (source_url . "https://github.com/mromyers/infix-syntax.git"))))))) ("ini" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ini.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ini.txt"))) (checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659569872) (dependencies . ("base" "ini-doc" "ini-lib" "ini-test" "typed-ini-lib")) (description . "Racket parser for Ini and UNIX Conf files. Metapackage.") (implies . ()) (modules . ()) (name . "ini") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (conf . #t) (ini . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini") (tags . ("conf" "ini")) (versions . #hash((default . #hasheq((checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini") (source_url . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini"))))))) ("ini-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ini" "doc/ini@ini-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ini-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ini-doc.txt"))) (checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659569842) (dependencies . ("base" "racket-doc" "scribble-lib" "ini-lib")) (description . "Racket parser for Ini and UNIX Conf files. Documentation.") (implies . ()) (modules . ((lib "ini/scribblings/main.scrbl") (lib "ini/scribblings/structs.scrbl") (lib "ini/scribblings/reading.scrbl") (lib "ini/scribblings/converting.scrbl") (lib "ini/scribblings/writing.scrbl"))) (name . "ini-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (conf . #t) (ini . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-doc") (tags . ("conf" "ini")) (versions . #hash((default . #hasheq((checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-doc") (source_url . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-doc"))))))) ("ini-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ini-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ini-lib.txt"))) (checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659569714) (dependencies . ("base")) (description . "Racket parser for Ini and UNIX Conf files. Core library.") (implies . ()) (modules . ((lib "ini/structs.rkt") (lib "ini/read.rkt") (lib "ini/main.rkt") (lib "ini/parse.rkt") (lib "ini/convert.rkt") (lib "ini/write.rkt"))) (name . "ini-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (conf . #t) (ini . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-lib") (tags . ("conf" "ini")) (versions . #hash((default . #hasheq((checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-lib") (source_url . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-lib"))))))) ("ini-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ini-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ini-test.txt"))) (checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659569782) (dependencies . ("base" "rackunit-lib" "ini-lib")) (description . "Racket parser for Ini and UNIX Conf files. Tests.") (implies . ()) (modules . ((lib "ini/tests/unit/string-write-test.rkt") (lib "ini/tests/unit/string-read-test.rkt"))) (name . "ini-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (conf . #t) (ini . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-test") (tags . ("conf" "ini")) (versions . #hash((default . #hasheq((checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-test") (source_url . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Fini-test"))))))) ("intellij" . #hasheq((author . "aymano.osman@gmail.com") (authors . ("aymano.osman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/intellij.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/intellij.txt"))) (checksum . "22e52e0cc36472cd967e3e463f4d583cde0c2c0b") (checksum-error . #f) (collection . "intellij") (conflicts . ()) (date-added . 1617857425) (dependencies . ("base" "macro-debugger-text-lib")) (description . "Support IntelliJ editor features") (implies . ()) (modules . ((lib "intellij/analysis/unused-requires.rkt") (lib "intellij/analysis/lint-with-expand/find-matching-module-path.rkt") (lib "intellij/lint-with-expand.rkt") (lib "intellij/analysis/lint-with-expand.rkt") (lib "intellij/analysis/find-requires.rkt") (lib "intellij/unused-requires.rkt"))) (name . "intellij") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:aymano.osman@gmail.com . #t) (intellij . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/aymanosman/racket-intellij.git") (tags . ("intellij" "tools")) (versions . #hash((default . #hasheq((checksum . "22e52e0cc36472cd967e3e463f4d583cde0c2c0b") (source . "https://github.com/aymanosman/racket-intellij.git") (source_url . "https://github.com/aymanosman/racket-intellij.git"))))))) ("interactive-brokers-api" . #hasheq((author . "evdubs@gmail.com") (authors . ("evdubs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "interactive-brokers-api" "doc/interactive-brokers-api@interactive-brokers-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interactive-brokers-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interactive-brokers-api.txt"))) (checksum . "ef4431cee97d7835af4cc1cbe35dd913abc76a57") (checksum-error . #f) (collection . "interactive-brokers-api") (conflicts . ()) (date-added . 1565405340) (dependencies . ("base" "binaryio" "gregor-lib" "racket-doc" "scribble-lib")) (description . "Client API for Interactive Brokers' Trader Workstation") (implies . ()) (modules . ((lib "interactive-brokers-api/main.rkt") (lib "interactive-brokers-api/response-messages.rkt") (lib "interactive-brokers-api/request-messages.rkt") (lib "interactive-brokers-api/interactive-brokers-api.scrbl") (lib "interactive-brokers-api/base-structs.rkt"))) (name . "interactive-brokers-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:evdubs@gmail.com . #t) (client-api . #t) (ibkr . #t) (interactive-brokers . #t) (ring:1 . #t))) (source . "https://github.com/evdubs/interactive-brokers-api.git") (tags . ("api" "client-api" "ibkr" "interactive-brokers")) (versions . #hash((default . #hasheq((checksum . "ef4431cee97d7835af4cc1cbe35dd913abc76a57") (source . "https://github.com/evdubs/interactive-brokers-api.git") (source_url . "https://github.com/evdubs/interactive-brokers-api.git"))))))) ("interactive-syntax" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interactive-syntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interactive-syntax.txt"))) (checksum . "8c13d83ac0f5dbd624d59083b32f765952d1d440") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "data-lib" "drracket-plugin-lib" "gui-lib" "images-lib" "math-lib" "syntax-color-lib" "wxme-lib" "scribble-lib" "racket-doc")) (description . "(Early) Prototype for Interactive Syntax") (implies . ()) (modules . ((lib "editor/private/read-editor.rkt") (lib "editor/base.rkt") (lib "editor/private/context-text.rkt") (lib "editor/test.rkt") (lib "editor/private/stdlib.rkt") (lib "editor/private/log.rkt") (lib "editor/main.rkt") (lib "editor/private/background.rkt") (lib "editor/test/raco.rkt") (lib "editor/private/lang.rkt") (lib "editor/lang.rkt") (lib "editor/private/editselect.rkt") (lib "editor/private/editor.rkt") (lib "editor/private/fallback.rkt") (lib "editor/private/event.rkt") (lib "editor/private/surrogate-base.rkt") (lib "editor/private/surrogate.rkt") (lib "editor/private/list.rkt") (lib "editor-test/forge-identifier.rkt") (lib "editor/examples/matrix.rkt") (lib "editor/private/context.rkt") (lib "editor/private/serialize.rkt"))) (name . "interactive-syntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "https://github.com/videolang/interactive-syntax.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c13d83ac0f5dbd624d59083b32f765952d1d440") (source . "https://github.com/videolang/interactive-syntax.git") (source_url . "https://github.com/videolang/interactive-syntax.git"))))))) ("interconfection" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection.txt"))) (checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1579217826) (dependencies . ("interconfection-doc" "interconfection-lib")) (description . "A library for building extensible systems, especially module systems.") (implies . ("interconfection-doc" "interconfection-lib")) (modules . ()) (name . "interconfection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main"))))))) ("interconfection-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "interconfection" "doc/interconfection@interconfection-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-doc.txt"))) (checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217734) (dependencies . ("base" "interconfection-lib" "lathe-comforts-doc" "lathe-comforts-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A library for building extensible systems, especially module systems. (doc)") (implies . ()) (modules . ((lib "interconfection/scribblings/interconfection.scrbl"))) (name . "interconfection-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main"))))))) ("interconfection-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-lib.txt"))) (checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217666) (dependencies . ("base" "lathe-comforts-lib" "reprovide-lang-lib" "parendown-lib")) (description . "A library for building extensible systems, especially module systems. (lib)") (implies . ()) (modules . ((lib "interconfection/order.rkt") (lib "interconfection/extensibility/base.rkt") (lib "interconfection/private/order.rkt") (lib "interconfection/private/codebasewide-requires.rkt") (lib "interconfection/extensibility/unsafe.rkt") (lib "interconfection/order/base.rkt") (lib "interconfection/private/order-unsafe.rkt") (lib "interconfection/private/getfx.rkt") (lib "interconfection/order/unsafe.rkt") (lib "interconfection/private/shim.rkt"))) (name . "interconfection-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main"))))))) ("interconfection-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-test.txt"))) (checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217771) (dependencies . ("base" "interconfection-lib" "lathe-comforts-lib" "rackunit-lib" "parendown-lib")) (description . "A library for building extensible systems, especially module systems. (test)") (implies . ()) (modules . ((lib "interconfection/tests.rkt"))) (name . "interconfection-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "fc28969ac94ab3d7277b4b8771ecdc6c9bffc513") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main"))))))) ("intern" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/intern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/intern.txt"))) (checksum . "e2b46f803fe9d83368bde168fca8559f1210cfe3") (checksum-error . #f) (collection . "intern") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Type-safe interning of datatype in Typed Racket as a new sub-type of Index") (implies . ()) (modules . ((lib "intern/main.rkt") (lib "intern/tests.rkt"))) (name . "intern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/philnguyen/intern/tree/master?path=intern") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "e2b46f803fe9d83368bde168fca8559f1210cfe3") (source . "git://github.com/philnguyen/intern?path=intern") (source_url . "http://github.com/philnguyen/intern/tree/master?path=intern"))))))) ("io" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/io.txt") (test-failure-log . "server/built/test-fail/io.txt") (test-success-log . #f))) (checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "in-new-directory" "compatibility-lib" "rackunit-gui" "rackunit-lib")) (description . "I/O utilities from dherman's io.plt Planet package") (implies . ()) (modules . ((lib "io/private/tests/tests.rkt") (lib "io/main.rkt") (lib "io/file.rkt") (lib "io/private/tests/file.rkt") (lib "io/private/tests/io.rkt"))) (name . "io") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/samth/io.rkt/tree/master") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (source . "git://github.com/samth/io.rkt") (source_url . "http://github.com/samth/io.rkt/tree/master"))))))) ("iracket" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "iracket" "doc/iracket@iracket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iracket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iracket.txt"))) (checksum . "9af0e87d61565a9ecb41119c481e7e36c0c5287d") (checksum-error . #f) (collection . "iracket") (conflicts . ()) (date-added . 1573059234) (dependencies . ("base" "zeromq-r-lib" "sandbox-lib" "uuid" "sha" "racket-doc" "scribble-lib" "scribble-doc")) (description . "Jupyter kernel for Racket") (implies . ()) (modules . ((lib "iracket/iracket.rkt") (lib "iracket/private/jupyter.rkt") (lib "iracket/private/kernel.rkt") (lib "iracket/lang.rkt") (lib "iracket/install.rkt") (lib "iracket/iracket.scrbl"))) (name . "iracket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/iracket.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9af0e87d61565a9ecb41119c481e7e36c0c5287d") (source . "https://github.com/rmculpepper/iracket.git") (source_url . "https://github.com/rmculpepper/iracket.git"))))))) ("irandom" . #hasheq((author . "hari@hkrish.com") (authors . ("hari@hkrish.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irandom" "doc/irandom@irandom/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irandom.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irandom.txt"))) (checksum . "f38e03c69fce7462b81106f567c32ce34f0ed830") (checksum-error . #f) (collection . "irandom") (conflicts . ()) (date-added . 1618674247) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket implementation of Bob Jenkins' ISAAC pseudorandom number generator (Indirection, Shift, Accumulate, Add, and Count).") (implies . ()) (modules . ((lib "irandom/test/dieharder-stdout.rkt") (lib "irandom/isaac.rkt") (lib "irandom/test/irandout.rkt") (lib "irandom/main.rkt") (lib "irandom/test/test.rkt") (lib "irandom/scribblings/irandom.scrbl") (lib "irandom/uuid.rkt"))) (name . "irandom") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hari@hkrish.com . #t) (generators . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/hkrish/irandom.git") (tags . ("generators" "random")) (versions . #hash((default . #hasheq((checksum . "f38e03c69fce7462b81106f567c32ce34f0ed830") (source . "https://github.com/hkrish/irandom.git") (source_url . "https://github.com/hkrish/irandom.git"))))))) ("irc" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc" "doc/irc@irc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc.txt") (test-failure-log . "server/built/test-fail/irc.txt") (test-success-log . #f))) (checksum . "ba160652e59b57e132ff9155509295484abe656b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An IRC client library.") (implies . ()) (modules . ((lib "irc/private/numeric-replies.rkt") (lib "irc/main.rkt") (lib "irc/ctcp.rkt") (lib "irc/examples/disconnect-test.rkt") (lib "irc/irc.scrbl") (lib "irc/examples/echobot.rkt"))) (name . "irc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (irc . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/schuster/racket-irc/tree/master") (tags . ("irc" "net")) (versions . #hash((default . #hasheq((checksum . "ba160652e59b57e132ff9155509295484abe656b") (source . "git://github.com/schuster/racket-irc") (source_url . "http://github.com/schuster/racket-irc/tree/master"))))))) ("irc-client" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc-client" "doc/irc-client@irc-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irc-client.txt"))) (checksum . "dc3958adf0d8e7a8bf34820cb7bc6630eb18d622") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "irc" "typed-racket-lib" "typed-racket-more" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "A higher-level, typed wrapper around the irc package") (implies . ("irc")) (modules . ((lib "irc-client/scribblings/irc-client.scrbl") (lib "irc-client/private/typed/irc.rkt") (lib "irc-client/main.rkt"))) (name . "irc-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (irc . #t) (net . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/lexi-lambda/racket-irc-client/tree/master") (tags . ("irc" "net" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "dc3958adf0d8e7a8bf34820cb7bc6630eb18d622") (source . "git://github.com/lexi-lambda/racket-irc-client") (source_url . "http://github.com/lexi-lambda/racket-irc-client/tree/master"))))))) ("irregex" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irregex" "doc/irregex@irregex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irregex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irregex.txt"))) (checksum . "4836ccd6b7febb98270822c9993f2e44ed9b16e4") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1624614993) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Alex Shinn's IrRegular Expressions package. Includes both a character-based syntax and Olin Shivers' SRE regexp syntax.") (implies . ()) (modules . ((lib "irregex/irregex.scrbl") (lib "irregex/main.rkt") (lib "irregex/chibi-test.rkt"))) (name . "irregex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (SRE . #t) (author:clements@racket-lang.org . #t) (regex . #t) (regular-expressions . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/irregex.git#racket") (tags . ("regex" "regular-expressions" "SRE")) (versions . #hash((default . #hasheq((checksum . "4836ccd6b7febb98270822c9993f2e44ed9b16e4") (source . "https://github.com/jbclements/irregex.git#racket") (source_url . "https://github.com/jbclements/irregex.git#racket"))))))) ("iswim" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iswim.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iswim.txt"))) (checksum . "7d6fe87391475b22828a39b344fd7b983f7018f7") (checksum-error . #f) (collection . "iswim") (conflicts . ()) (dependencies . ("draw-lib" "gui-lib" "pict-lib" "base")) (description . "iswim implementation") (implies . ()) (modules . ((lib "iswim/main.rkt") (lib "iswim/t/lc.rkt") (lib "iswim/t/basic.rkt"))) (name . "iswim") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/iswim.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "7d6fe87391475b22828a39b344fd7b983f7018f7") (source . "https://github.com/jeapostrophe/iswim.git") (source_url . "https://github.com/jeapostrophe/iswim.git"))))))) ("iu-pict" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/iu-pict.txt") (docs . (("main" "iu-pict" "doc/iu-pict@iu-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iu-pict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iu-pict.txt"))) (checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (checksum-error . #f) (collection . "iu-pict") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "iu-pict/scribblings/iu-pict.scrbl") (lib "iu-pict/main.rkt"))) (name . "iu-pict") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "http://github.com/david-christiansen/iu-pict/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (source . "git://github.com/david-christiansen/iu-pict") (source_url . "http://github.com/david-christiansen/iu-pict/tree/master"))))))) ("j" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "j" "doc/j@j/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/j.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/j.txt"))) (checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (checksum-error . #f) (collection . "j") (conflicts . ()) (dependencies . ("base" "data-lib" "math-lib" "parser-tools-lib" "math-doc" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Racket implementation of J language and related concepts") (implies . ()) (modules . ((lib "j/private/parse.rkt") (lib "j/lang/reader.rkt") (lib "j/private/read.rkt") (lib "j/private/module.rkt") (lib "j/rank/private/frame.rkt") (lib "j/rank.rkt") (lib "j/private/vocab/nouns.rkt") (lib "j/scribblings/j.scrbl") (lib "j/lib/conjunctions.rkt") (lib "j/rank/private/verb.rkt") (lib "j/main.rkt") (lib "j/private/vocab/verbs.rkt") (lib "j/private/parameters.rkt") (lib "j/private/locale.rkt") (lib "j/private/vocab/adverbs.rkt") (lib "j/obverse.rkt") (lib "j/private/executor.rkt") (lib "j/scribblings/number.scrbl") (lib "j/private/vocabulary.rkt") (lib "j/rank/base.rkt") (lib "j/number.rkt") (lib "j/private/type.rkt") (lib "j/rank/item.rkt") (lib "j/scribblings/lib.scrbl") (lib "j/private/lex.rkt") (lib "j/scribblings/main.scrbl") (lib "j/private/bindings.rkt") (lib "j/lib/nouns.rkt") (lib "j/lib/verbs.rkt") (lib "j/private/verb.rkt") (lib "j/private/word.rkt") (lib "j/private/coupla.rkt") (lib "j/private/vocab/conjunctions.rkt") (lib "j/lib/adverbs.rkt") (lib "j/rank/main.rkt") (lib "j/rank/private/noun.rkt") (lib "j/scribblings/rank.scrbl") (lib "j/console.rkt") (lib "j/customize.rkt") (lib "j/private/sentence.rkt") (lib "j/private/eval.rkt"))) (name . "j") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (array . #t) (author:leo@lwh.jp . #t) (j . #t) (language . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "http://github.com/lwhjp/racket-jlang/tree/master") (tags . ("array" "j" "language" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (source . "git://github.com/lwhjp/racket-jlang") (source_url . "http://github.com/lwhjp/racket-jlang/tree/master"))))))) ("j-notation" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "j-notation" "doc/j-notation@j-notation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/j-notation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/j-notation.txt"))) (checksum . "7110bc3dfab535e193337756b76e3b5d8fd03033") (checksum-error . #f) (collection . "j-notation") (conflicts . ()) (date-added . 1646967777) (dependencies . ("brag-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An exploration into an alternate surface syntax.") (implies . ()) (modules . ((lib "j-notation/examples/attribute.rkt") (lib "j-notation/examples/stream.rkt") (lib "j-notation/main.rkt") (lib "j-notation/grammar.rkt") (lib "j-notation/examples/name-qualification.rkt") (lib "j-notation/lexer.rkt") (lib "j-notation/examples/examples.rkt") (lib "j-notation/examples/dependency-injection.rkt") (lib "j-notation/main.scrbl"))) (name . "j-notation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (language . #t) (ring:1 . #t) (surface-syntax . #t))) (source . "https://github.com/jackfirth/j-notation.git") (tags . ("experimental" "language" "surface-syntax")) (versions . #hash((default . #hasheq((checksum . "7110bc3dfab535e193337756b76e3b5d8fd03033") (source . "https://github.com/jackfirth/j-notation.git") (source_url . "https://github.com/jackfirth/j-notation.git"))))))) ("jack-ease" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ease" "doc/ease@jack-ease/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-ease.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-ease.txt"))) (checksum . "3a7149ded68be348611e346742feac85fca6d74f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "lens" "fancy-app" "rackunit-lib" "cover" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for easing things between start and stop values fluidly") (implies . ()) (modules . ((lib "ease/private/polynomial.rkt") (lib "ease/private/base.scrbl") (lib "ease/private/main.rkt") (lib "ease/main.rkt") (lib "ease/private/polynomial.scrbl") (lib "ease/private/util/scribble-include-no-subsection.rkt") (lib "ease/private/invert.rkt") (lib "ease/private/lens.scrbl") (lib "ease/private/tests/doc-coverage.rkt") (lib "ease/private/lens.rkt") (lib "ease/private/invert.scrbl") (lib "ease/main.scrbl") (lib "ease/private/base.rkt") (lib "ease/private/util/doc.rkt"))) (name . "jack-ease") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/racket-ease/tree/master") (tags . ("experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "3a7149ded68be348611e346742feac85fca6d74f") (source . "git://github.com/jackfirth/racket-ease") (source_url . "http://github.com/jackfirth/racket-ease/tree/master"))))))) ("jack-posn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "posn" "doc/posn@jack-posn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-posn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-posn.txt"))) (checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "fancy-app" "cover" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for working with points in 2d space") (implies . ()) (modules . ((lib "posn/private/rotate.rkt") (lib "posn/private/scale.scrbl") (lib "posn/private/add.rkt") (lib "posn/private/scale.rkt") (lib "posn/private/multiply.scrbl") (lib "posn/private/base.rkt") (lib "posn/main.rkt") (lib "posn/private/util/doc.rkt") (lib "posn/tests/doc-coverage.rkt") (lib "posn/private/degrees.rkt") (lib "posn/private/base.scrbl") (lib "posn/private/util/scribble-include-no-subsection.rkt") (lib "posn/private/rotate.scrbl") (lib "posn/private/main.rkt") (lib "posn/main.scrbl") (lib "posn/private/relative.rkt") (lib "posn/private/add.scrbl") (lib "posn/private/multiply.rkt") (lib "posn/private/relative.scrbl"))) (name . "jack-posn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/racket-posn/tree/master") (tags . ("data" "experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (source . "git://github.com/jackfirth/racket-posn") (source_url . "http://github.com/jackfirth/racket-posn/tree/master"))))))) ("jack-scribble-example" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-example" "doc/scribble-example@jack-scribble-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-scribble-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-scribble-example.txt"))) (checksum . "8ea8ae06d859b607fd3600a68a806513580e1867") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp-lib" "reprovide-lang-lib" "fancy-app" "scribble-doc" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Deprecated. Use the built in scribble/example instead.") (implies . ()) (modules . ((lib "scribble-example/private/base.scrbl") (lib "scribble-example/main.rkt") (lib "scribble-example/private/base.rkt") (lib "scribble-example/private/tests/doc-coverage.rkt") (lib "scribble-example/private/util/doc.rkt") (lib "scribble-example/main.scrbl") (lib "scribble-example/private/util/scribble-include-no-subsection.rkt") (lib "scribble-example/private/main.rkt"))) (name . "jack-scribble-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/jackfirth/scribble-example/tree/master") (tags . ("deprecated" "scribble")) (versions . #hash((default . #hasheq((checksum . "8ea8ae06d859b607fd3600a68a806513580e1867") (source . "git://github.com/jackfirth/scribble-example") (source_url . "http://github.com/jackfirth/scribble-example/tree/master"))))))) ("java" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "java" "doc/java@java/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java.txt"))) (checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("dherman-struct" "io" "base" "compatibility-lib" "parser-tools-lib" "srfi-lite-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A port of David Herman's java.plt PLaneT package, without the PLaneT dependencies.") (implies . ()) (modules . ((lib "java/semantics/class-resolver.rkt") (lib "java/syntax/parser.rkt") (lib "java/semantics/resolve-binary.rkt") (lib "java/main.rkt") (lib "java/semantics/standard-resolver.rkt") (lib "java/semantics/utils.rkt") (lib "java/tools/javap.rkt") (lib "java/syntax/lexer.rkt") (lib "java/tests/tests.rkt") (lib "java/semantics/semantic-object.rkt") (lib "java/path-params.rkt") (lib "java/syntax/ast.rkt") (lib "java/inspector/inspector.rkt") (lib "java/java.scrbl") (lib "java/semantics/resolve-source.rkt") (lib "java/syntax/class-file.rkt") (lib "java/contract-utils.rkt"))) (name . "java") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/java/tree/master") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (source . "git://github.com/jbclements/java") (source_url . "http://github.com/jbclements/java/tree/master"))))))) ("java-array-list" . #hasheq((author . "odonnell_johnny@yahoo.com") (authors . ("odonnell_johnny@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-array-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-array-list.txt"))) (checksum . "530c76031abb521e0ac6782053f6555c0e9e9590") (checksum-error . #f) (collection . "java-array-list") (conflicts . ()) (date-added . 1649030301) (dependencies . ("base")) (description . "Clone of Java's ArrayList") (implies . ()) (modules . ((lib "java-array-list/main.rkt"))) (name . "java-array-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:odonnell_johnny@yahoo.com . #t) (java . #t) (ring:1 . #t))) (source . "https://github.com/johnnyodonnell/java-array-list.git#master") (tags . ("java")) (versions . #hash((default . #hasheq((checksum . "530c76031abb521e0ac6782053f6555c0e9e9590") (source . "https://github.com/johnnyodonnell/java-array-list.git#master") (source_url . "https://github.com/johnnyodonnell/java-array-list.git#master"))))))) ("java-lexer" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-lexer.txt"))) (checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "profj" "scribble-lib")) (description . "Java syntax highlighting for Scribble.") (implies . ()) (modules . ((lib "java-lexer/main.rkt") (lib "java-lexer/lang/reader.rkt"))) (name . "java-lexer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (java . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/stamourv/java-lexer/tree/master") (tags . ("java" "scribble")) (versions . #hash((default . #hasheq((checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (source . "git://github.com/stamourv/java-lexer") (source_url . "http://github.com/stamourv/java-lexer/tree/master"))))))) ("java-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/java-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-processing.txt"))) (checksum . "8a232dac0405edf13067397364c9dbd702addca6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "The minimal amount of code necessary to write processing code in DrRacket (so I don't have to switch students to a different IDE in my classes).") (implies . ()) (modules . ((lib "java-processing/main.rkt") (lib "java-processing/processing-module.rkt"))) (name . "java-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/java-processing.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a232dac0405edf13067397364c9dbd702addca6") (source . "https://github.com/thoughtstem/java-processing.git") (source_url . "https://github.com/thoughtstem/java-processing.git"))))))) ("javascript" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "javascript" "doc/javascript@javascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/javascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/javascript.txt"))) (checksum . "327c2de5e09f885b682f80524ff3c12ef6c47543") (checksum-error . #f) (collection . "javascript") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "parameter" "parser-tools-lib" "planet-lib" "scheme-lib" "set" "srfi-lite-lib" "string-constants-lib" "unstable-contract-lib" "pprint" "in-new-directory" "parser-tools-doc" "racket-doc" "rackunit-lib" "scribble-lib" "unstable-doc")) (description . "An implementation of JavaScript") (implies . ()) (modules . ((lib "javascript/debug.rkt") (lib "javascript/private/evector.rkt") (lib "javascript/lang/lang.rkt") (lib "javascript/lang/module.rkt") (lib "javascript/scribblings/utils.rkt") (lib "javascript/private/syntax/ast-utils.rkt") (lib "javascript/private/runtime/object.rkt") (lib "javascript/private/tests/parse.rkt") (lib "javascript/scribblings/config.scrbl") (lib "javascript/private/runtime/runtime.rkt") (lib "javascript/scribblings/eval.scrbl") (lib "javascript/print.rkt") (lib "javascript/private/runtime/exceptions.rkt") (lib "javascript/private/compiler/compile.rkt") (lib "javascript/drscheme/syntax-color.rkt") (lib "javascript/private/tests/pretty-print.rkt") (lib "javascript/private/syntax/cursor.rkt") (lib "javascript/scribblings/intro.scrbl") (lib "javascript/private/runtime/standard-library.rkt") (lib "javascript/private/runtime/namespace.rkt") (lib "javascript/scribblings/javascript.scrbl") (lib "javascript/drscheme/debug-console.rkt") (lib "javascript/private/syntax/regexps.rkt") (lib "javascript/main.rkt") (lib "javascript/scribblings/compile.scrbl") (lib "javascript/config.rkt") (lib "javascript/private/runtime/operator.rkt") (lib "javascript/private/compiler/hoist-monad.rkt") (lib "javascript/compile.rkt") (lib "javascript/private/runtime/value.rkt") (lib "javascript/drscheme/tool.rkt") (lib "javascript/private/compiler/context.rkt") (lib "javascript/private/syntax/syntax.rkt") (lib "javascript/pjs.rkt") (lib "javascript/scribblings/pjs.scrbl") (lib "javascript/lang/reader.rkt") (lib "javascript/private/syntax/exceptions.rkt") (lib "javascript/private/config.rkt") (lib "javascript/private/syntax/token.rkt") (lib "javascript/ast.rkt") (lib "javascript/private/syntax/lex.rkt") (lib "javascript/private/syntax/parse.rkt") (lib "javascript/private/tests/test.rkt") (lib "javascript/private/syntax/input.rkt") (lib "javascript/runtime.rkt") (lib "javascript/scribblings/print.scrbl") (lib "javascript/scribblings/runtime.scrbl") (lib "javascript/private/runtime/gui-library.rkt") (lib "javascript/scribblings/parse.scrbl") (lib "javascript/drscheme/module-forms.rkt") (lib "javascript/private/runtime/native.rkt") (lib "javascript/private/tests/eval.rkt") (lib "javascript/scribblings/ast.scrbl") (lib "javascript/parse.rkt") (lib "javascript/private/tests/util.rkt") (lib "javascript/eval.rkt") (lib "javascript/private/syntax/abstract-regexps.rkt") (lib "javascript/private/compiler/helpers.rkt") (lib "javascript/private/syntax/ast-core.rkt") (lib "javascript/scribblings/history.scrbl") (lib "javascript/private/tests/array.rkt") (lib "javascript/private/compiler/hoist.rkt") (lib "javascript/private/planet.rkt"))) (name . "javascript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/samth/javascript.plt/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "327c2de5e09f885b682f80524ff3c12ef6c47543") (source . "git://github.com/samth/javascript.plt") (source_url . "http://github.com/samth/javascript.plt/tree/master"))))))) ("jen" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen.txt"))) (checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1577590435) (dependencies . ("jen-lib" "jen-doc" "jen-samples")) (description . "procedural generation DSL embedded in Racket [UNSTABLE]") (implies . ("jen-lib")) (modules . ()) (name . "jen") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable"))))))) ("jen-doc" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jen" "doc/jen@jen-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-doc.txt"))) (checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005497) (dependencies . ("base" "jen-lib" "racket-doc" "scribble-lib")) (description . "procedural generation DSL embedded in Racket (doc) [UNSTABLE]") (implies . ()) (modules . ((lib "jen/scribblings/jen.scrbl") (lib "jen/scribblings/reference.scrbl") (lib "jen/scribblings/guide.scrbl"))) (name . "jen-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable"))))))) ("jen-lib" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-lib.txt"))) (checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005480) (dependencies . ("base")) (description . "procedural generation DSL embedded in Racket (lib) [UNSTABLE]") (implies . ()) (modules . ((lib "jen/sequential.rkt") (lib "jen/preconditions.rkt") (lib "jen/base.rkt") (lib "jen/syntax.rkt") (lib "jen/main.rkt"))) (name . "jen-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable"))))))) ("jen-samples" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-samples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-samples.txt"))) (checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005525) (dependencies . ("base" "jen-lib" "pict-lib")) (description . "procedural generation DSL embedded in Racket (samples) [UNSTABLE]") (implies . ()) (modules . ((lib "jen/samples/cat-sentences.rkt") (lib "jen/samples/rectangles.rkt"))) (name . "jen-samples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "32973ae449bc7a0065e224c57d1072ea8f7c323b") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable"))))))) ("jni" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jni" "doc/jni@jni/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jni.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jni.txt"))) (checksum . "9573a3ae8832d53e19dd9bfe63a4a27f7e978384") (checksum-error . #f) (collection . "jni") (conflicts . ()) (date-added . 1644293697) (dependencies . ("base" "parser-tools-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Access the Java Native Interface with Racket") (implies . ()) (modules . ((lib "jni/private/signature.rkt") (lib "jni/private/interface.rkt") (lib "jni/private/env.rkt") (lib "jni/scribblings/jni.scrbl") (lib "jni/example/native-greet.rkt") (lib "jni/unsafe.rkt") (lib "jni/private/mutf8.rkt") (lib "jni/private/object.rkt") (lib "jni/private/jni.rkt") (lib "jni/main.rkt") (lib "jni/private/types.rkt") (lib "jni/private/error.rkt"))) (name . "jni") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (ffi . #t) (java . #t) (jni . #t) (ring:1 . #t))) (source . "https://github.com/lwhjp/racket-jni.git") (tags . ("ffi" "java" "jni")) (versions . #hash((default . #hasheq((checksum . "9573a3ae8832d53e19dd9bfe63a4a27f7e978384") (source . "https://github.com/lwhjp/racket-jni.git") (source_url . "https://github.com/lwhjp/racket-jni.git"))))))) ("job-queue" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base" "job-queue-lib" "job-queue-doc")) (description . "A library for managing sets of workers and their jobs.") (implies . ()) (modules . ()) (name . "job-queue") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue"))))))) ("job-queue-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "job-queue" "doc/job-queue@job-queue-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-doc.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base" "job-queue-lib" "racket-doc" "scribble-lib")) (description . "A library for managing sets of workers and their jobs. (doc)") (implies . ()) (modules . ((lib "job-queue/job-queue.scrbl"))) (name . "job-queue-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-doc") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-doc") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-doc"))))))) ("job-queue-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-lib.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base")) (description . "A library for managing sets of workers and their jobs. (lib)") (implies . ()) (modules . ((lib "job-queue/main.rkt"))) (name . "job-queue-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-lib") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-lib") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-lib"))))))) ("js-voxel" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "voxel" "doc/voxel@js-voxel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/js-voxel.txt") (test-failure-log . "server/built/test-fail/js-voxel.txt") (test-success-log . #f))) (checksum . "661d75489af339dba515a972c6e66db8525ab4c9") (checksum-error . #f) (collection . "voxel") (conflicts . ()) (date-added . 1570642534) (dependencies . ("base" "glm" "rfc6455" "web-server-lib" "racket-doc" "scribble-lib")) (description . "A general-purpose voxel programming environment") (implies . ()) (modules . ((lib "voxel/main.rkt") (lib "voxel/line.rkt") (lib "voxel/run.rkt") (lib "voxel/the-lang.rkt") (lib "voxel/web-server.rkt") (lib "voxel/cuboid.rkt") (lib "voxel/examples/lines-and-cuboids.rkt") (lib "voxel/draw.rkt") (lib "voxel/color.rkt") (lib "voxel/scribblings/voxel.scrbl") (lib "voxel/vector.rkt") (lib "voxel/web-socket-server.rkt") (lib "voxel/examples/axes-cube.rkt") (lib "voxel/examples/axes.rkt") (lib "voxel/examples/lines.rkt") (lib "voxel/voxel.rkt"))) (name . "js-voxel") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (graphics . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-js-voxel.git") (tags . ("3D" "graphics" "lang")) (versions . #hash((default . #hasheq((checksum . "661d75489af339dba515a972c6e66db8525ab4c9") (source . "https://github.com/dedbox/racket-js-voxel.git") (source_url . "https://github.com/dedbox/racket-js-voxel.git"))))))) ("json-pointer" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "json-pointer" "doc/json-pointer@json-pointer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-pointer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-pointer.txt"))) (checksum . "73e97e426eff151ffd705059771c5c92f2da4697") (checksum-error . #f) (collection . "json-pointer") (conflicts . ()) (date-added . 1607664669) (dependencies . ("base" "rackunit-lib" "ejs" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Parse, render, and evaluate JSON Pointers (RFC 6901).") (implies . ()) (modules . ((lib "json-pointer/scribblings/eval.scrbl") (lib "json-pointer/escape.rkt") (lib "json-pointer/scribblings/json-pointer.scrbl") (lib "json-pointer/scribblings/parse.scrbl") (lib "json-pointer/scribblings/expr.scrbl") (lib "json-pointer/json.rkt") (lib "json-pointer/eval.rkt") (lib "json-pointer/scribblings/license.scrbl") (lib "json-pointer/parser.rkt") (lib "json-pointer/expr.rkt") (lib "json-pointer/main.rkt"))) (name . "json-pointer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/json-pointer.git") (tags . ("json")) (versions . #hash((default . #hasheq((checksum . "73e97e426eff151ffd705059771c5c92f2da4697") (source . "https://github.com/jessealama/json-pointer.git") (source_url . "https://github.com/jessealama/json-pointer.git"))))))) ("json-socket" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-socket.txt"))) (checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "JSON-Talking TCP Sockets") (implies . ()) (modules . ((lib "json-socket/main.rkt"))) (name . "json-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (tcp . #t))) (source . "http://github.com/mordae/racket-json-socket/tree/master") (tags . ("tcp")) (versions . #hash((default . #hasheq((checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (source . "github://github.com/mordae/racket-json-socket/master") (source_url . "http://github.com/mordae/racket-json-socket/tree/master"))))))) ("json-sourcery-lib" . #hasheq((author . "adjkant@gmail.com") (authors . ("adjkant@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-sourcery-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-sourcery-lib.txt"))) (checksum . "b8f98e44a2c98266315f9c8f78156972f6bc649d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1564280548) (dependencies . ("base" "syntax-classes")) (description . "library package for json-sourcery") (implies . ()) (modules . ()) (name . "json-sourcery-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:adjkant@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b8f98e44a2c98266315f9c8f78156972f6bc649d") (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d") (source_url . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d"))))))) ("json-type-provider" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-type-provider.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-type-provider.txt"))) (checksum . "f96d3f212519f4ff2aef828e7b891971b82babb8") (checksum-error . #f) (collection . "json-comb") (conflicts . ()) (date-added . 1565841512) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "json-type-provider")) (description . "A well-typed JSON parser for Typed Racket inspired by Type Provider") (implies . ()) (modules . ((lib "json-comb/main.rkt") (lib "json-comb/read.rkt") (lib "json-comb/test/coords.rkt") (lib "json-comb/test/cards.rkt") (lib "json-comb/test/complex.rkt") (lib "json-comb/test/london_weather.rkt"))) (name . "json-type-provider") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (json . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider") (tags . ("json" "parser" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "f96d3f212519f4ff2aef828e7b891971b82babb8") (source . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider") (source_url . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider"))))))) ("jsond" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jsond" "doc/jsond@jsond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jsond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jsond.txt"))) (checksum . "0250aafa207c1520a000b700346419940776a181") (checksum-error . #f) (collection . "jsond") (conflicts . ()) (date-added . 1628276920) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A #lang for JSON data") (implies . ()) (modules . ((lib "jsond/scribblings/jsond.scrbl") (lib "jsond/main.rkt") (lib "jsond/examples/data.rkt") (lib "jsond/examples/lisp.rkt"))) (name . "jsond") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (data . #t) (json . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/benknoble/jsond.git#main") (tags . ("data" "json" "lang")) (versions . #hash((default . #hasheq((checksum . "0250aafa207c1520a000b700346419940776a181") (source . "https://github.com/benknoble/jsond.git#main") (source_url . "https://github.com/benknoble/jsond.git#main"))))))) ("jsonic-jf" . #hasheq((author . "Jonas_Fey@web.de") (authors . ("Jonas_Fey@web.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/jsonic-jf.txt") (docs . (("main" "jsonic" "doc/jsonic@jsonic-jf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jsonic-jf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jsonic-jf.txt"))) (checksum . "de1a5a3b39f6f511536e2e53419a7deee2114641") (checksum-error . #f) (collection . "jsonic") (conflicts . ()) (date-added . 1647725469) (dependencies . ("base" "beautiful-racket-lib" "brag" "draw-lib" "gui-lib" "br-parser-tools-lib" "rackunit-lib" "syntax-color-lib" "scribble-lib")) (description . "great jsonic generator") (implies . ()) (modules . ((lib "jsonic/tokenizer.rkt") (lib "jsonic/test.rkt") (lib "jsonic/parser.rkt") (lib "jsonic/scribblings/jsonic.scrbl") (lib "jsonic/jsonic-test.rkt") (lib "jsonic/parser-test.rkt") (lib "jsonic/main.rkt") (lib "jsonic/reader.rkt") (lib "jsonic/buttons.rkt") (lib "jsonic/indenter.rkt") (lib "jsonic/expander.rkt") (lib "jsonic/colorer.rkt"))) (name . "jsonic-jf") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:Jonas_Fey@web.de . #t) (ring:1 . #t))) (source . "https://github.com/ErwinKotz/test_racket_package.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "de1a5a3b39f6f511536e2e53419a7deee2114641") (source . "https://github.com/ErwinKotz/test_racket_package.git") (source_url . "https://github.com/ErwinKotz/test_racket_package.git"))))))) ("k" . #hasheq((author . "dannypsnl@gmail.com racket@racket.tw cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "racket@racket.tw" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/k.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1629126585) (dependencies . ("k-core" "k-lib" "k-test" "k-example" "k-doc")) (description . "k theorem prover") (implies . ("k-core" "k-lib")) (modules . ()) (name . "k") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (proofs . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git?path=k#develop") (tags . ("proofs")) (versions . #hash((default . #hasheq((checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (source . "https://github.com/racket-tw/k.git?path=k#develop") (source_url . "https://github.com/racket-tw/k.git?path=k#develop"))))))) ("k-core" . #hasheq((author . "dannypsnl@gmail.com cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/k-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/k-core.txt"))) (checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641318308) (dependencies . ("base" "syntax-classes-lib" "rackunit")) (description . "core of k theorem prover") (implies . ()) (modules . ((lib "k/check.rkt") (lib "k/bindings.rkt") (lib "k/base.rkt") (lib "k/data.rkt") (lib "k/builtin.rkt") (lib "k/type.rkt") (lib "k/def.rkt") (lib "k/helper/stx-util.rkt") (lib "k/helper/id-hash.rkt") (lib "k/main.rkt") (lib "k/core.rkt"))) (name . "k-core") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (proofs . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git?path=k-core#develop") (tags . ("proofs")) (versions . #hash((default . #hasheq((checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (source . "https://github.com/racket-tw/k.git?path=k-core#develop") (source_url . "https://github.com/racket-tw/k.git?path=k-core#develop"))))))) ("k-doc" . #hasheq((author . "dannypsnl@gmail.com cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "k"))) (failure-log . "server/built/fail/k-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641318346) (dependencies . ("base" "scribble-lib" "racket-doc" "k-core" "k-lib")) (description . "documentation of k theorem prover") (implies . ()) (modules . ((lib "k/pages/library.scrbl") (lib "k/pages/language.scrbl") (lib "k/k.scrbl") (lib "k/pages/helper.rkt"))) (name . "k-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (docs . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git?path=k-doc#develop") (tags . ("docs")) (versions . #hash((default . #hasheq((checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (source . "https://github.com/racket-tw/k.git?path=k-doc#develop") (source_url . "https://github.com/racket-tw/k.git?path=k-doc#develop"))))))) ("k-example" . #hasheq((author . "dannypsnl@gmail.com cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/k-example.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641318390) (dependencies . ("base" "k-core" "k-lib")) (description . "examples of using k theorem prover") (implies . ()) (modules . ()) (name . "k-example") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (examples . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git?path=k-example#develop") (tags . ("examples")) (versions . #hash((default . #hasheq((checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (source . "https://github.com/racket-tw/k.git?path=k-example#develop") (source_url . "https://github.com/racket-tw/k.git?path=k-example#develop"))))))) ("k-infix" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "k-infix" "doc/k-infix@k-infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/k-infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/k-infix.txt"))) (checksum . "ce32c918dd9c96c8366270a3127f5a42e3d2638f") (checksum-error . #f) (collection . "k-infix") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc" "memoize")) (description . "Simple but versatile infix parsing for arbitrary expressions. Fully customizable. Comes with basic math expressions implemented.") (implies . ()) (modules . ((lib "k-infix/define.rkt") (lib "k-infix/test.rkt") (lib "k-infix/private/parse-lookup-entry.rkt") (lib "k-infix/custom.rkt") (lib "k-infix/private/default-parse-table.rkt") (lib "k-infix/main.rkt") (lib "k-infix/private/helper.rkt") (lib "k-infix/private/primitive.rkt") (lib "k-infix/scribblings/k-infix.scrbl"))) (name . "k-infix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (infix . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/k-infix.git") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "ce32c918dd9c96c8366270a3127f5a42e3d2638f") (source . "https://github.com/BourgondAries/k-infix.git") (source_url . "https://github.com/BourgondAries/k-infix.git"))))))) ("k-lib" . #hasheq((author . "dannypsnl@gmail.com cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/k-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641318325) (dependencies . ("base" "k-core" "rackunit-lib")) (description . "libraries of k theorem prover") (implies . ()) (modules . ((lib "k/data/list.rkt") (lib "k/data/bool.rkt") (lib "k/data/vec.rkt") (lib "k/data/fin.rkt") (lib "k/data/nat.rkt") (lib "k/equality.rkt") (lib "k/sigma.rkt") (lib "k/dec.rkt"))) (name . "k-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (proofs . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git?path=k-lib#develop") (tags . ("proofs")) (versions . #hash((default . #hasheq((checksum . "2b5f5066806a5bbd0733b781a2ed5fce6956a4f5") (source . "https://github.com/racket-tw/k.git?path=k-lib#develop") (source_url . "https://github.com/racket-tw/k.git?path=k-lib#develop"))))))) ("kafka" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kafka" "doc/kafka@kafka/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kafka.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kafka.txt"))) (checksum . "c00a0baf93bde170d5e841a2d7acafb97f58b5af") (checksum-error . #f) (collection . "kafka") (conflicts . ()) (date-added . 1646996479) (dependencies . ("base" "kafka-lib" "racket-doc" "sasl-doc" "sasl-lib" "scribble-lib")) (description . "A client for Apache Kafka. (docs & implementation)") (implies . ("kafka-lib")) (modules . ((lib "kafka/scribblings/kafka.scrbl"))) (name . "kafka") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (distributed-log . #t) (kafka . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-kafka.git?path=kafka") (tags . ("distributed-log" "kafka" "net")) (versions . #hash((default . #hasheq((checksum . "c00a0baf93bde170d5e841a2d7acafb97f58b5af") (source . "https://github.com/Bogdanp/racket-kafka.git?path=kafka") (source_url . "https://github.com/Bogdanp/racket-kafka.git?path=kafka"))))))) ("kafka-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kafka-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kafka-lib.txt"))) (checksum . "c00a0baf93bde170d5e841a2d7acafb97f58b5af") (checksum-error . #f) (collection . "kafka") (conflicts . ()) (date-added . 1646996453) (dependencies . ("base" "binfmt" "box-extra-lib" "sasl-lib" "rackunit-lib")) (description . "A client for Apache Kafka. (implementation only)") (implies . ()) (modules . ((lib "kafka/private/serde/join-group.rkt") (lib "kafka/private/serde/sasl-authenticate.rkt") (lib "kafka/main.rkt") (lib "kafka/private/serde/leave-group.rkt") (lib "kafka/private/common.rkt") (lib "kafka/private/serde/metadata.rkt") (lib "kafka/private/serde/heartbeat.rkt") (lib "kafka/private/serde/delete-topics.rkt") (lib "kafka/private/serde/core.rkt") (lib "kafka/private/crc.rkt") (lib "kafka/private/connection.rkt") (lib "kafka/private/error.rkt") (lib "kafka/private/client.rkt") (lib "kafka/private/serde.rkt") (lib "kafka/private/serde/group.rkt") (lib "kafka/private/serde/list-offsets.rkt") (lib "kafka/private/serde/produce.rkt") (lib "kafka/private/serde/commit.rkt") (lib "kafka/private/batch-native.rkt") (lib "kafka/private/serde/fetch-offsets.rkt") (lib "kafka/private/serde/list-groups.rkt") (lib "kafka/producer.rkt") (lib "kafka/private/serde/fetch.rkt") (lib "kafka/private/protocol-native.rkt") (lib "kafka/private/serde/find-coordinator.rkt") (lib "kafka/private/help.rkt") (lib "kafka/private/assignor.rkt") (lib "kafka/private/serde/sync-group.rkt") (lib "kafka/private/serde/sasl-handshake.rkt") (lib "kafka/private/serde/contract.rkt") (lib "kafka/private/serde/describe-groups.rkt") (lib "kafka/consumer.rkt") (lib "kafka/private/batch.rkt") (lib "kafka/private/serde/create-topics.rkt") (lib "kafka/private/record.rkt"))) (name . "kafka-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (distributed-log . #t) (kafka . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-kafka.git?path=kafka-lib") (tags . ("distributed-log" "kafka" "net")) (versions . #hash((default . #hasheq((checksum . "c00a0baf93bde170d5e841a2d7acafb97f58b5af") (source . "https://github.com/Bogdanp/racket-kafka.git?path=kafka-lib") (source_url . "https://github.com/Bogdanp/racket-kafka.git?path=kafka-lib"))))))) ("kernel" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kernel.txt") (test-failure-log . "server/built/test-fail/kernel.txt") (test-success-log . #f))) (checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "rtnl" "sysfs")) (description . "Interface to Linux kernel runtime configuration.") (implies . ()) (modules . ((lib "kernel/private/socket.rkt") (lib "kernel/private/ffi.rkt") (lib "kernel/private/sysfs-util.rkt") (lib "kernel/link.rkt") (lib "kernel/main.rkt") (lib "kernel/private/sysfs-net.rkt") (lib "kernel/address.rkt"))) (name . "kernel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-kernel/tree/master") (tags . ("linux" "net")) (versions . #hash((default . #hasheq((checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (source . "github://github.com/mordae/racket-kernel/master") (source_url . "http://github.com/mordae/racket-kernel/tree/master"))))))) ("keyring" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "keyring" "doc/keyring@keyring/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602014818) (dependencies . ("base" "keyring-lib" "base" "keyring-lib" "racket-doc" "scribble-lib")) (description . "a library for uniformly accessing secrets") (implies . ("keyring-lib")) (modules . ((lib "keyring/scribblings/keyring.scrbl"))) (name . "keyring") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release"))))))) ("keyring-get-pass-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-get-pass-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-get-pass-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602109435) (dependencies . ("base" "get-pass" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using get-pass") (implies . ()) (modules . ((lib "keyring/backend/get-pass.rkt"))) (name . "keyring-get-pass-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (get-pass . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release") (tags . ("get-pass" "keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release"))))))) ("keyring-keychain-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-keychain-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-keychain-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1614388060) (dependencies . ("base" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using MacOS Keychain") (implies . ()) (modules . ((lib "keyring/backend/keychain.rkt") (lib "keyring/backend/private/keychain.rkt"))) (name . "keyring-keychain-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keychain . #t) (keyring . #t) (macos . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release") (tags . ("keychain" "keyring" "macos" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release"))))))) ("keyring-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602014647) (dependencies . ("base" "base" "rackunit-lib")) (description . "Implementation of the keyring package.") (implies . ()) (modules . ((lib "keyring/cli.rkt") (lib "keyring/main.rkt") (lib "keyring/backend/env.rkt") (lib "keyring/backend/test-no-constr.rkt") (lib "keyring/interface.rkt") (lib "keyring/private/backends.rkt") (lib "keyring/private/interface.rkt") (lib "keyring/backend/test.rkt") (lib "keyring/private/error.rkt"))) (name . "keyring-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release"))))))) ("keyring-secret-service-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-secret-service-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-secret-service-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602109371) (dependencies . ("base" "dbus" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using Freedesktop Secret Service") (implies . ()) (modules . ((lib "keyring/backend/private/secret-service.rkt") (lib "keyring/backend/secret-service.rkt"))) (name . "keyring-secret-service-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (linux . #t) (password . #t) (ring:1 . #t) (secretservice . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release") (tags . ("keyring" "linux" "password" "secretservice")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release"))))))) ("khoury-gradescope" . #hasheq((author . "t.sachleben@northeastern.edu") (authors . ("t.sachleben@northeastern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/khoury-gradescope.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bf69e9dd5c0e98a41b4a4119b79fe88258419509") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1648224151) (dependencies . ()) (description . "") (implies . ()) (modules . ((lib "khoury-gradescope/grade-two-funs.rkt") (lib "khoury-gradescope/grade-macros.rkt") (lib "khoury-gradescope/tests/two-funs/s3/code.rkt") (lib "khoury-gradescope/tests/two-funs/s1/code.rkt") (lib "khoury-gradescope/tests/sq/s9/defs.rkt") (lib "khoury-gradescope/tests/sq/s8/defs.rkt") (lib "khoury-gradescope/tests/sq/s6/defs.rkt") (lib "khoury-gradescope/tests/sq/s5/defs.rkt") (lib "khoury-gradescope/tests/sq/s4/defs.rkt") (lib "khoury-gradescope/tests/sq/s3/defs.rkt") (lib "khoury-gradescope/tests/sq/s2/defs.rkt") (lib "khoury-gradescope/tests/sq/s1/defs.rkt") (lib "khoury-gradescope/tests/sq/s7/definitions.rkt") (lib "khoury-gradescope/lib-grade.rkt") (lib "khoury-gradescope/tests/macros/s1/student-code.rkt") (lib "khoury-gradescope/grade-sq.rkt") (lib "khoury-gradescope/grade-template.rkt"))) (name . "khoury-gradescope") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:t.sachleben@northeastern.edu . #t) (autograding . #t) (gradescope . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/northeastern-khoury/gradescope-racket.git") (tags . ("autograding" "gradescope" "testing")) (versions . #hash((default . #hasheq((checksum . "bf69e9dd5c0e98a41b4a4119b79fe88258419509") (source . "https://github.com/northeastern-khoury/gradescope-racket.git") (source_url . "https://github.com/northeastern-khoury/gradescope-racket.git"))))))) ("kinda-ferpy" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kinda-ferpy" "doc/kinda-ferpy@kinda-ferpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kinda-ferpy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kinda-ferpy.txt"))) (checksum . "1523284752332fa0379a0c25798551e5db760b28") (checksum-error . #f) (collection . "kinda-ferpy") (conflicts . ()) (date-added . 1580076427) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An implicit functional reactive model based on MaiaVictor's PureState library") (implies . ()) (modules . ((lib "kinda-ferpy/main.rkt") (lib "kinda-ferpy/scribblings/kinda-ferpy.scrbl"))) (name . "kinda-ferpy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (frp . #t) (functional . #t) (functional-reactive . #t) (reactive . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/kinda-ferpy.git") (tags . ("frp" "functional" "functional-reactive" "reactive")) (versions . #hash((default . #hasheq((checksum . "1523284752332fa0379a0c25798551e5db760b28") (source . "https://github.com/zyrolasting/kinda-ferpy.git") (source_url . "https://github.com/zyrolasting/kinda-ferpy.git"))))))) ("kittle-buffer" . #hasheq((author . "zhuoql@zoho.com") (authors . ("zhuoql@zoho.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kittle-buffer.txt") (test-failure-log . "server/built/test-fail/kittle-buffer.txt") (test-success-log . #f))) (checksum . "7ab19798d07fde81f3d378867b5ae794821d49aa") (checksum-error . #f) (collection . "kittle-buffer") (conflicts . ()) (date-added . 1616041864) (dependencies . ("base" "gui" "draw" "srfi")) (description . "An extended Brainf**k implementation.") (implies . ()) (modules . ((lib "kittle-buffer/kbf.rkt") (lib "kittle-buffer/res/logo-drawing.rkt") (lib "kittle-buffer/kbf-cli.rkt") (lib "kittle-buffer/main.rkt") (lib "kittle-buffer/interpreter.rkt") (lib "kittle-buffer/ui.rkt"))) (name . "kittle-buffer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zhuoql@zoho.com . #t) (bf . #t) (brainfuck . #t) (ring:1 . #t))) (source . "https://github.com/KDr2/kittle-buffer.git#main") (tags . ("bf" "brainfuck")) (versions . #hash((default . #hasheq((checksum . "7ab19798d07fde81f3d378867b5ae794821d49aa") (source . "https://github.com/KDr2/kittle-buffer.git#main") (source_url . "https://github.com/KDr2/kittle-buffer.git#main"))))))) ("koyo-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-lib.txt"))) (checksum . "9f47d067c514075c3a7f9c040e1da51d9d51ff6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1559472268) (dependencies . ("base" "compatibility-lib" "component-lib" "crontab-lib" "crypto-lib" "db-lib" "errortrace-lib" "gregor-lib" "html-lib" "mime-type-lib" "net-lib" "raco-invoke" "srfi-lite-lib" "unix-socket-lib" "web-server-lib" "at-exp-lib")) (description . "A web application toolkit (implementation only).") (implies . ()) (modules . ((lib "koyo/hasher/error.rkt") (lib "koyo/database-url.rkt") (lib "koyo/mime.rkt") (lib "koyo/private/zo.rkt") (lib "blueprints/minimal/app-name-here/config.rkt") (lib "koyo/util.rkt") (lib "koyo/hasher/argon2id-place.rkt") (lib "koyo/job/serialize.rkt") (lib "koyo/job/broker.rkt") (lib "blueprints/standard/app-name-here/pages/forms.rkt") (lib "koyo/session.rkt") (lib "blueprints/standard/app-name-here/config.rkt") (lib "koyo/private/filesystem.rkt") (lib "koyo/job/admin.rkt") (lib "koyo/hasher/generic.rkt") (lib "koyo/http.rkt") (lib "koyo/runner.rkt") (lib "koyo/job/query.rkt") (lib "koyo/profiler.rkt") (lib "koyo/job/schema.rkt") (lib "koyo/url.rkt") (lib "blueprints/standard/app-name-here/dynamic.rkt") (lib "koyo/hasher.rkt") (lib "koyo/preload.rkt") (lib "blueprints/minimal/app-name-here/pages/common.rkt") (lib "blueprints/minimal/app-name-here/pages/home.rkt") (lib "blueprints/standard/app-name-here/pages/dashboard.rkt") (lib "koyo/mail.rkt") (lib "koyo/flash.rkt") (lib "koyo/l10n.rkt") (lib "koyo/continuation.rkt") (lib "blueprints/minimal/app-name-here/components/template.rkt") (lib "koyo/config.rkt") (lib "blueprints/standard/app-name-here/pages/all.rkt") (lib "blueprints/standard/app-name-here/components/auth.rkt") (lib "koyo/haml.rkt") (lib "koyo/job/registry.rkt") (lib "koyo/database.rkt") (lib "koyo/hasher/argon2id.rkt") (lib "koyo/job/worker.rkt") (lib "blueprints/minimal/app-name-here/dynamic.rkt") (lib "koyo/private/term.rkt") (lib "koyo/error.rkt") (lib "koyo/csrf.rkt") (lib "blueprints/minimal/app-name-here/components/app.rkt") (lib "koyo/cors.rkt") (lib "koyo/private/mod.rkt") (lib "blueprints/standard/app-name-here/components/mail.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/user.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/auth.rkt") (lib "koyo/testing.rkt") (lib "koyo/generator.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/mail.rkt") (lib "koyo/main.rkt") (lib "blueprints/standard/app-name-here/pages/auth.rkt") (lib "blueprints/standard/app-name-here/components/user.rkt") (lib "koyo/static.rkt") (lib "koyo/cli.rkt") (lib "koyo/job.rkt") (lib "koyo/contract.rkt") (lib "koyo/xexpr.rkt") (lib "koyo/logging.rkt") (lib "blueprints/standard/app-name-here/components/app.rkt") (lib "koyo/json.rkt") (lib "koyo/job/job.rkt") (lib "koyo/dispatch.rkt") (lib "koyo/console.rkt") (lib "blueprints/standard/app-name-here/components/template.rkt") (lib "blueprints/standard/app-name-here/pages/common.rkt") (lib "koyo/crontab.rkt") (lib "koyo/server.rkt") (lib "koyo/private/tool.rkt") (lib "koyo/random.rkt") (lib "blueprints/minimal/app-name-here/pages/all.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/common.rkt"))) (name . "koyo-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (web . #t) (web-framework . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/koyo.git?path=koyo-lib") (tags . ("web" "web-framework" "web-server")) (versions . #hash((default . #hasheq((checksum . "9f47d067c514075c3a7f9c040e1da51d9d51ff6c") (source . "https://github.com/Bogdanp/koyo.git?path=koyo-lib") (source_url . "https://github.com/Bogdanp/koyo.git?path=koyo-lib"))))))) ("koyo-north" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-north.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-north.txt"))) (checksum . "a552fe709655a15d1a1382a909fe2466f173f27c") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1582191143) (dependencies . ("base" "component-lib" "db-lib" "koyo-lib" "north")) (description . "A north migrator component for koyo.") (implies . ()) (modules . ((lib "koyo/database/migrator.rkt"))) (name . "koyo-north") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (migrations . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/koyo-north.git") (tags . ("database" "migrations" "web")) (versions . #hash((default . #hasheq((checksum . "a552fe709655a15d1a1382a909fe2466f173f27c") (source . "https://github.com/Bogdanp/koyo-north.git") (source_url . "https://github.com/Bogdanp/koyo-north.git"))))))) ("koyo-sentry" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "koyo-sentry" "doc/koyo-sentry@koyo-sentry/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-sentry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-sentry.txt"))) (checksum . "f04efd69d239347bc44cba1587deb1bc3d5ba8c7") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1562741692) (dependencies . ("base" "koyo-lib" "sentry-lib" "web-server-lib" "racket-doc" "scribble-lib" "sentry-doc" "web-server-doc")) (description . "Integrates koyo and racket-sentry.") (implies . ()) (modules . ((lib "koyo/sentry.rkt") (lib "koyo/koyo-sentry.scrbl"))) (name . "koyo-sentry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/koyo-sentry.git") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "f04efd69d239347bc44cba1587deb1bc3d5ba8c7") (source . "https://github.com/Bogdanp/koyo-sentry.git") (source_url . "https://github.com/Bogdanp/koyo-sentry.git"))))))) ("kw-make-struct" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-make-struct" "doc/kw-make-struct@kw-make-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct.txt"))) (checksum . "1d377d6be64d848b945fdce5e618ca3eef95395a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563255061) (dependencies . ("base" "kw-make-struct-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Naming struct fields with keywords for constructing and matching") (implies . ("kw-make-struct-lib")) (modules . ((lib "kw-make-struct/docs/kw-make-struct.scrbl"))) (name . "kw-make-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t) (structs . #t))) (source . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct") (tags . ("keywords" "structs")) (versions . #hash((default . #hasheq((checksum . "1d377d6be64d848b945fdce5e618ca3eef95395a") (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct") (source_url . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct"))))))) ("kw-make-struct-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct-lib.txt"))) (checksum . "1d377d6be64d848b945fdce5e618ca3eef95395a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563255031) (dependencies . ("base" "syntax-classes-lib" "rackunit-lib")) (description . "Naming struct fields with keywords for constructing and matching") (implies . ()) (modules . ((lib "kw-make-struct/main.rkt"))) (name . "kw-make-struct-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t) (structs . #t))) (source . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct-lib") (tags . ("keywords" "structs")) (versions . #hash((default . #hasheq((checksum . "1d377d6be64d848b945fdce5e618ca3eef95395a") (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct-lib") (source_url . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct-lib"))))))) ("kw-utils" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-utils" "doc/kw-utils@kw-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-utils.txt"))) (checksum . "99b1fc4cb7f28defb04d8d0504ee4eff1540eb28") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackjure")) (description . "misc kw utils") (implies . ()) (modules . ((lib "kw-utils/kw-map.rkt") (lib "kw-utils/docs/keyword-hash.scrbl") (lib "kw-utils/docs/kw-utils.scrbl") (lib "kw-utils/kw-hash-lambda.rkt") (lib "kw-utils/docs/lambda-kwrest.scrbl") (lib "kw-utils/mapper.rkt") (lib "kw-utils/docs/keyword-lists.scrbl") (lib "kw-utils/docs/keyword-apply-sort.scrbl") (lib "kw-utils/docs/higher-order-functions.scrbl") (lib "kw-utils/keyword-app.rkt") (lib "kw-utils/arity+keywords.rkt") (lib "kw-utils/docs/arity+keywords.scrbl") (lib "kw-utils/keyword-lambda.rkt") (lib "kw-utils/docs/partial.scrbl") (lib "kw-utils/keyword-apply-sort.rkt") (lib "kw-utils/partial.rkt") (lib "kw-utils/kw-apply.rkt") (lib "kw-utils/docs/mapper.scrbl") (lib "kw-utils/arity+keywords/syntax.rkt") (lib "kw-utils/kw-lists-lambda.rkt") (lib "kw-utils/kw-hash.rkt") (lib "kw-utils/kw-hash/contract.rkt") (lib "kw-utils/lambda-kwrest.rkt") (lib "kw-utils/docs/kw-hash.scrbl") (lib "kw-utils/docs/kw-lists-lambda.scrbl") (lib "kw-utils/docs/kw-map.scrbl") (lib "kw-utils/docs/keyword-lambda.scrbl"))) (name . "kw-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/kw-utils/tree/master") (tags . ("keywords")) (versions . #hash((default . #hasheq((checksum . "99b1fc4cb7f28defb04d8d0504ee4eff1540eb28") (source . "git://github.com/AlexKnauth/kw-utils") (source_url . "http://github.com/AlexKnauth/kw-utils/tree/master"))))))) ("lambda-calculus" . #hasheq((author . "oran.simhony@gmail.com") (authors . ("oran.simhony@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lambda-calculus" "doc/lambda-calculus@lambda-calculus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambda-calculus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lambda-calculus.txt"))) (checksum . "9111401749ef9be7f162eec79961b448024522af") (checksum-error . #f) (collection . "lambda-calculus") (conflicts . ()) (date-added . 1555331717) (dependencies . ("beautiful-racket-lib" "rackunit-lib" "base" "brag" "beautiful-racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A lambda-calculus DSL in Racket") (implies . ()) (modules . ((lib "lambda-calculus/reader.rkt") (lib "lambda-calculus/main.rkt") (lib "lambda-calculus/lexer.rkt") (lib "lambda-calculus/expander.rkt") (lib "lambda-calculus/tokenizer.rkt") (lib "lambda-calculus/lc-test.rkt") (lib "lambda-calculus/scribblings/lambda-calculus.scrbl") (lib "lambda-calculus/parser.rkt"))) (name . "lambda-calculus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:oran.simhony@gmail.com . #t) (dsl . #t) (functional . #t) (lambda-calculus . #t) (ring:1 . #t))) (source . "https://github.com/oransimhony/lambda-calculus.git") (tags . ("dsl" "functional" "lambda-calculus")) (versions . #hash((default . #hasheq((checksum . "9111401749ef9be7f162eec79961b448024522af") (source . "https://github.com/oransimhony/lambda-calculus.git") (source_url . "https://github.com/oransimhony/lambda-calculus.git"))))))) ("lambda-sh" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "tasn1") ("none" "tssh"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambda-sh.txt") (test-failure-log . "server/built/test-fail/lambda-sh.txt") (test-success-log . #f))) (checksum . "3918cc1c3f0a52487f5ccf1b8f742386d57704ff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552095762) (dependencies . ("base" "digimon" "typed-racket-lib" "typed-racket-more" "scribble-lib" "pict-lib" "math-lib" "digimon" "scribble-lib" "pict-lib" "math-lib" "racket-doc")) (description . "Do we really need a \"Typed Shell\"? Nevertheless, Unix Shell and Powershell are not friends.") (implies . ()) (modules . ((lib "ssh/digitama/algorithm/pkcs1/primitive.rkt") (lib "ssh/digitama/assignment/connection.rkt") (lib "ssh/tamer/confidentiality.scrbl") (lib "ssh/tamer/tSSH.scrbl") (lib "asni/der.rkt") (lib "asni/digitama/der/sequence.rkt") (lib "ssh/digitama/userauth.rkt") (lib "asni/digitama/der/octets.rkt") (lib "ssh/digitama/authentication/message.rkt") (lib "ssh/digitama/session.rkt") (lib "ssh/digitama/authentication.rkt") (lib "ssh/digitama/algorithm/crypto/aes/pretty.rkt") (lib "ssh/tamer/transport.rkt") (lib "ssh/digitama/connection/chid.rkt") (lib "asni/tamer/der/primitive.rkt") (lib "ssh/digitama/algorithm/rsa.rkt") (lib "ssh/digitama/assignment/application.rkt") (lib "asni/base/der.rkt") (lib "ssh/digitama/algorithm/kex/diffie-hellman.rkt") (lib "ssh/session.rkt") (lib "ssh/digitama/message/connection.rkt") (lib "ssh/tamer/tamer.rkt") (lib "ssh/digitama/transport/newkeys.rkt") (lib "ssh/digitama/fsio/authorized-keys.rkt") (lib "ssh/digitama/assignment/kex.rkt") (lib "ssh/userauth.rkt") (lib "ssh/service.rkt") (lib "ssh/digitama/algorithm/crypto/aes/state.rkt") (lib "ssh/digitama/connection/channel/session.rkt") (lib "ssh/digitama/transport/identification.rkt") (lib "asni/digitama/der/base.rkt") (lib "ssh/configuration.rkt") (lib "ssh/digitama/message/disconnection.rkt") (lib "ssh/kex.rkt") (lib "ssh/digitama/algorithm/hostkey/rsa.rkt") (lib "ssh/digitama/assignment/message.rkt") (lib "ssh/digitama/algorithm/pkcs1/hash.rkt") (lib "ssh/main.rkt") (lib "ssh/digitama/assignment/mac.rkt") (lib "ssh/tamer/confidentiality/inc/aes.rkt") (lib "ssh/digitama/transport/kex.rkt") (lib "ssh/tamer/walkthrough.scrbl") (lib "ssh/tamer/performace/aes-ctr.rkt") (lib "ssh/digitama/fsio/pem.rkt") (lib "ssh/transport.rkt") (lib "ssh/base.rkt") (lib "ssh/digivice/keygen/rsa/keygen.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/s-box.rkt") (lib "asni/digitama/der/dissection.rkt") (lib "ssh/authentication.rkt") (lib "ssh/digitama/algorithm/hmac.rkt") (lib "ssh/digitama/assignment/channel.rkt") (lib "ssh/digivice/keygen/rsa/cmdenv.rkt") (lib "ssh/digitama/algorithm/kex/oakley-group.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/pi-box.rkt") (lib "ssh/connection.rkt") (lib "ssh/tamer/confidentiality/aes.rkt") (lib "ssh/digitama/authentication/publickey.rkt") (lib "asni/digitama/der/enumerated.rkt") (lib "asni/digitama/der/real.rkt") (lib "ssh/digitama/message/authentication.rkt") (lib "ssh/digitama/assignment/authentication.rkt") (lib "ssh/channel.rkt") (lib "ssh/tamer/performace/blowfish-cbc.rkt") (lib "ssh/datatype.rkt") (lib "ssh/digitama/algorithm/crypto/utility.rkt") (lib "asni/digitama/der/primitive.rkt") (lib "ssh/digivice/keygen.rkt") (lib "ssh/tamer/authentication.rkt") (lib "ssh/digitama/transport.rkt") (lib "ssh/tamer/message.rkt") (lib "ssh/digitama/diagnostics.rkt") (lib "asni/tamer/der/real.rkt") (lib "ssh/digitama/message/condition.rkt") (lib "ssh/digitama/connection/channel.rkt") (lib "ssh/tamer/architecture.rkt") (lib "shmon/stone/unsafe/user.rkt") (lib "ssh/digitama/transport/message.rkt") (lib "ssh/digitama/assignment/compression.rkt") (lib "ssh/message.rkt") (lib "ssh/digitama/datatype.rkt") (lib "asni/tamer/der/sequence.rkt") (lib "ssh/digitama/connection/channel/tcpip.rkt") (lib "ssh/digitama/algorithm/random.rkt") (lib "asni/tamer/tASN1.scrbl") (lib "ssh/digitama/connection/service.rkt") (lib "ssh/digitama/connection/application.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish.rkt") (lib "ssh/digivice/ssh.rkt") (lib "ssh/digitama/assignment/hostkey.rkt") (lib "ssh/digitama/service.rkt") (lib "ssh/digitama/connection/message.rkt") (lib "ssh/tamer/confidentiality/blowfish.rkt") (lib "ssh/digitama/algorithm/pkcs1/key.rkt") (lib "ssh/daemon.rkt") (lib "ssh/digivice/sshd.rkt") (lib "ssh/digitama/algorithm/fingerprint.rkt") (lib "ssh/digitama/assignment/service.rkt") (lib "ssh/digitama/stdio.rkt") (lib "ssh/digitama/kex.rkt") (lib "ssh/tamer/confidentiality/inc/misc.rkt") (lib "asni/tamer/der.scrbl") (lib "ssh/digitama/message/name.rkt") (lib "ssh/digivice/scp/path.rkt") (lib "asni/tamer/der/enumerated.rkt") (lib "ssh/digitama/connection/channel/application.rkt") (lib "ssh/digitama/fsio/exception.rkt") (lib "asni/digitama/der/metatype.rkt") (lib "ssh/digitama/assignment.rkt") (lib "ssh/digivice/scp.rkt") (lib "ssh/digitama/algorithm/kex/diffie-hellman-group.rkt") (lib "ssh/digivice/scp/application.rkt") (lib "ssh/digitama/algorithm/pkcs1/emsa-v1_5.rkt") (lib "ssh/digivice/keygen/cmdenv.rkt") (lib "ssh/digitama/message/channel.rkt") (lib "ssh/digitama/assignment/cipher.rkt") (lib "ssh/digitama/algorithm/crypto/aes.rkt") (lib "ssh/digitama/algorithm/crypto/aes/s-box.rkt") (lib "ssh/digitama/algorithm/crypto/aes/math.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/encryption.rkt") (lib "ssh/digitama/message.rkt") (lib "ssh/digitama/authentication/option.rkt") (lib "ssh/assignment.rkt") (lib "ssh/digitama/fsio/rsa.rkt") (lib "ssh/digitama/transport/packet.rkt") (lib "ssh/digitama/assignment/disconnection.rkt") (lib "ssh/digitama/transport/prompt.rkt") (lib "ssh/digitama/authentication/user.rkt") (lib "ssh/digitama/message/transport.rkt") (lib "ssh/digitama/connection/chport.rkt") (lib "ssh/digitama/daemon.rkt"))) (name . "lambda-sh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (lang . #t) (parser . #t) (ring:1 . #t) (shell . #t) (ssh . #t) (unsafe . #t) (unstable . #t))) (source . "https://github.com/wargrey/lambda-shell.git") (tags . ("lang" "parser" "shell" "ssh" "unsafe" "unstable")) (versions . #hash((default . #hasheq((checksum . "3918cc1c3f0a52487f5ccf1b8f742386d57704ff") (source . "https://github.com/wargrey/lambda-shell.git") (source_url . "https://github.com/wargrey/lambda-shell.git"))))))) ("lambdajam-2015-racket-pl-pl" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambdajam-2015-racket-pl-pl.txt") (test-failure-log . "server/built/test-fail/lambdajam-2015-racket-pl-pl.txt") (test-success-log . #f))) (checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "parser-tools-lib" "rackunit-lib" "scheme-lib" "schemeunit" "slideshow-lib" "typed-racket-lib" "lang-slide")) (description . "") (implies . ()) (modules . ((lib "mini-hdl/gc/lang/reader.rkt") (lib "mini-hdl/parser.rkt") (lib "mini-hdl/rca-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/or.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fibs.rkt") (lib "lambdajam-2015-racket-pl-pl/salad-bar.rkt") (lib "mini-hdl/lang/reader.rkt") (lib "lambdajam-2015-racket-pl-pl/util.rkt") (lib "mini-hdl/gc-runtime.rkt") (lib "lambdajam-2015-racket-pl-pl/title-lib.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fib.scrbl") (lib "lambdajam-2015-racket-pl-pl/enum.rkt") (lib "lambdajam-2015-racket-pl-pl/lang-slide.rkt") (lib "lambdajam-2015-racket-pl-pl/main.rkt") (lib "lambdajam-2015-racket-pl-pl/hdl-ex.rkt") (lib "mini-hdl/runtime.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/lazy.rkt") (lib "lambdajam-2015-racket-pl-pl/title.rkt") (lib "lambdajam-2015-racket-pl-pl/thanks.rkt") (lib "mini-hdl/rca-2-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/open-compiler.rkt"))) (name . "lambdajam-2015-racket-pl-pl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/rfindler/lambdajam-2015-racket-pl-pl/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (source . "git://github.com/rfindler/lambdajam-2015-racket-pl-pl") (source_url . "http://github.com/rfindler/lambdajam-2015-racket-pl-pl/tree/master"))))))) ("lang" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ("zaoqil")) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "lang") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:2 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("lang-file" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "read-lang-file" "doc/read-lang-file@lang-file/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-file.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang-file.txt"))) (checksum . "69993f73dab8382796be37998ec47ded7883faf7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563236811) (dependencies . ("base" "lang-file-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Functions for dealing with #lang files") (implies . ("lang-file-lib")) (modules . ((lib "lang-file/scribblings/read-lang-file.scrbl"))) (name . "lang-file") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (file . #t) (lang . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file") (tags . ("file" "lang")) (versions . #hash((default . #hasheq((checksum . "69993f73dab8382796be37998ec47ded7883faf7") (source . "git://github.com/AlexKnauth/lang-file?path=lang-file") (source_url . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file"))))))) ("lang-file-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-file-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang-file-lib.txt"))) (checksum . "69993f73dab8382796be37998ec47ded7883faf7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563236788) (dependencies . ("base" "rackunit-lib")) (description . "Functions for dealing with #lang files") (implies . ()) (modules . ((lib "lang-file/test/literal.rkt") (lib "lang-file/test/tuvalu.rkt") (lib "lang-file/read-lang-file.rkt") (lib "lang-file/test/interp.rkt"))) (name . "lang-file-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (file . #t) (lang . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file-lib") (tags . ("file" "lang")) (versions . #hash((default . #hasheq((checksum . "69993f73dab8382796be37998ec47ded7883faf7") (source . "git://github.com/AlexKnauth/lang-file?path=lang-file-lib") (source_url . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file-lib"))))))) ("lang-slide" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lang-slide" "doc/lang-slide@lang-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-slide.txt") (test-failure-log . "server/built/test-fail/lang-slide.txt") (test-success-log . #f))) (checksum . "ea86af49c3d7fe2fe0e80c1c9488b3447a0efbdd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "scheme-lib" "slideshow-lib" "unstable-lib" "scribble-lib" "racket-doc" "pict-doc")) (description . "A picture showing all the languages used to implement Racket.") (implies . ()) (modules . ((lib "lang-slide/orig-colors.rkt") (lib "lang-slide/main.rkt") (lib "lang-slide/mk-img.rkt") (lib "lang-slide/pictures.rkt") (lib "lang-slide/scribblings/lang-slide.scrbl") (lib "lang-slide/find.rkt") (lib "lang-slide/draw-plain.rkt") (lib "lang-slide/hudak-quote.rkt"))) (name . "lang-slide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/samth/lang-slide/tree/master") (tags . ("language" "slideshow")) (versions . #hash((default . #hasheq((checksum . "ea86af49c3d7fe2fe0e80c1c9488b3447a0efbdd") (source . "github://github.com/samth/lang-slide/master") (source_url . "http://github.com/samth/lang-slide/tree/master"))))))) ("laramie" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/laramie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/laramie.txt"))) (checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625168628) (dependencies . ("laramie-lib" "laramie-doc")) (description . "HTML5 parser") (implies . ("laramie-lib" "laramie-doc")) (modules . ()) (name . "laramie") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git?path=laramie") (tags . ("html" "parser")) (versions . #hash((default . #hasheq((checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (source . "https://github.com/jessealama/laramie.git?path=laramie") (source_url . "https://github.com/jessealama/laramie.git?path=laramie"))))))) ("laramie-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "laramie" "doc/laramie@laramie-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/laramie-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/laramie-doc.txt"))) (checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (checksum-error . #f) (collection . "laramie") (conflicts . ()) (date-added . 1625168696) (dependencies . ("base" "scribble-lib" "racket-doc" "laramie-lib")) (description . "Documentation for Laramie") (implies . ()) (modules . ((lib "laramie/scribblings/laramie.scrbl"))) (name . "laramie-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (docs . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git?path=laramie-doc") (tags . ("docs" "html" "parser")) (versions . #hash((default . #hasheq((checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (source . "https://github.com/jessealama/laramie.git?path=laramie-doc") (source_url . "https://github.com/jessealama/laramie.git?path=laramie-doc"))))))) ("laramie-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/laramie-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/laramie-lib.txt"))) (checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625168665) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "txexpr" "http-easy" "rackunit-lib" "rackunit-typed" "http-easy")) (description . "Implementation for Laramie") (implies . ()) (modules . ((lib "laramie/tokenizer/types.rkt") (lib "laramie/tokenizer/stream.rkt") (lib "laramie/tokenizer/tests/characters.rkt") (lib "laramie/parser/parameters.rkt") (lib "laramie/tokenizer/tests/rcdata.rkt") (lib "laramie/tokenizer/character-data.rkt") (lib "laramie/tokenizer/infrastructure.rkt") (lib "laramie/html/convert.rkt") (lib "laramie/tokenizer/tokenize.rkt") (lib "laramie/parser/convert.rkt") (lib "laramie/parser/dom.rkt") (lib "laramie/tokenizer/parameters.rkt") (lib "laramie/main.rkt") (lib "laramie/tokenizer/plaintext.rkt") (lib "laramie/tokenizer/tokens.rkt") (lib "laramie/tokenizer/data.rkt") (lib "laramie/html/main.rkt") (lib "laramie/tokenizer/generate-character-data.rkt") (lib "laramie/tokenizer/tests/script.rkt") (lib "laramie/tokenizer/main.rkt") (lib "laramie/tokenizer/tests/rawtext.rkt") (lib "laramie/tokenizer/tests/cdata.rkt") (lib "laramie/private/todo.rkt") (lib "laramie/tokenizer/tests/plaintext.rkt") (lib "laramie/tokenizer/tests/doctype.rkt") (lib "laramie/tokenizer/tag.rkt") (lib "laramie/tokenizer/script.rkt") (lib "laramie/parser/parser.rkt") (lib "laramie/parser/main.rkt") (lib "laramie/tokenizer/characters.rkt") (lib "laramie/tokenizer/rawtext.rkt") (lib "laramie/tokenizer/doctype.rkt") (lib "laramie/parser/types.rkt") (lib "laramie/tokenizer/comment.rkt") (lib "laramie/tokenizer/network.rkt") (lib "laramie/tokenizer/cdata.rkt") (lib "laramie/tokenizer/rcdata.rkt") (lib "laramie/tokenizer/predicates.rkt") (lib "laramie/html/util.rkt") (lib "laramie/private/xml.rkt") (lib "laramie/html/types.rkt") (lib "laramie/tokenizer/tests/tag.rkt") (lib "laramie/tokenizer/tests/comment.rkt") (lib "laramie/tokenizer/tests/data.rkt"))) (name . "laramie-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git?path=laramie-lib") (tags . ("html" "parser")) (versions . #hash((default . #hasheq((checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (source . "https://github.com/jessealama/laramie.git?path=laramie-lib") (source_url . "https://github.com/jessealama/laramie.git?path=laramie-lib"))))))) ("laramie-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/laramie-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/laramie-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/laramie-test.txt"))) (checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1625168727) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "laramie-lib")) (description . "Tests for Laramie") (implies . ()) (modules . ((lib "tests/laramie/issue-24.rkt") (lib "tests/laramie/issue-47.rkt") (lib "tests/laramie/issue-13.rkt") (lib "tests/laramie/issue-36.rkt") (lib "tests/laramie/issue-14.rkt") (lib "tests/laramie/issue-09.rkt") (lib "tests/laramie/util.rkt") (lib "tests/laramie/issue-17.rkt") (lib "tests/laramie/issue-37.rkt") (lib "tests/laramie/issue-38.rkt") (lib "tests/laramie/issue-41.rkt") (lib "tests/laramie/parser.rkt"))) (name . "laramie-test") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jessealama/laramie.git?path=laramie-test") (tags . ("html" "parser" "tests")) (versions . #hash((default . #hasheq((checksum . "2cd69828bd11ebdb0df570780e2a65ca62bc99ff") (source . "https://github.com/jessealama/laramie.git?path=laramie-test") (source_url . "https://github.com/jessealama/laramie.git?path=laramie-test"))))))) ("latex-pict" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "latex-pict" "doc/latex-pict@latex-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/latex-pict.txt") (test-failure-log . "server/built/test-fail/latex-pict.txt") (test-success-log . #f))) (checksum . "847bd5f42903fa1b357125cee67b9a2addf240c6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566486953) (dependencies . ("base" "pict-lib" "racket-poppler" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Render LaTeX formulas as picts. The picts are vector based, so you can scale them without problems. The conversion uses pdflatex.") (implies . ()) (modules . ((lib "latex-pict/main.rkt") (lib "latex-pict/tex.rkt") (lib "latex-pict/scribblings/latex-pict.scrbl"))) (name . "latex-pict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (formula . #t) (latex . #t) (math . #t) (pict . #t) (ring:1 . #t) (tex . #t))) (source . "https://github.com/soegaard/latex-pict.git") (tags . ("formula" "latex" "math" "pict" "tex")) (versions . #hash((default . #hasheq((checksum . "847bd5f42903fa1b357125cee67b9a2addf240c6") (source . "https://github.com/soegaard/latex-pict.git") (source_url . "https://github.com/soegaard/latex-pict.git"))))))) ("latex-utils" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "utils" "doc/utils@latex-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/latex-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/latex-utils.txt"))) (checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (checksum-error . #f) (collection . "latex-utils") (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib" "seq-no-order" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Some utilities for generating LaTeX markup of various descriptions.") (implies . ()) (modules . ((lib "latex-utils/scribble.rkt") (lib "latex-utils/scribble/utils.rkt") (lib "latex-utils/scribble/references.rkt") (lib "latex-utils/scribble/math.rkt") (lib "latex-utils/scribble/private/math.rkt") (lib "latex-utils/scribble/private/theorem.rkt") (lib "latex-utils/scribble/homework.rkt") (lib "latex-utils/scribble/theorem.rkt") (lib "latex-utils/scribble/private/unmap.rkt") (lib "latex-utils/scribblings/utils.scrbl") (lib "latex-utils/scribble/private/utils.rkt") (lib "latex-utils/scribble/unmap.rkt") (lib "latex-utils/scribble/private/syntax.rkt"))) (name . "latex-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (author:matias@fortlogic.net . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/dented42/latex-utils.git/tree/master#master") (tags . ("LaTeX" "scribble")) (versions . #hash((default . #hasheq((checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (source . "git://github.com/dented42/latex-utils.git#master") (source_url . "http://github.com/dented42/latex-utils.git/tree/master#master"))))))) ("lathe-comforts" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts.txt"))) (checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519690) (dependencies . ("lathe-comforts-doc" "lathe-comforts-lib")) (description . "A collection of utilities.") (implies . ("lathe-comforts-doc" "lathe-comforts-lib")) (modules . ()) (name . "lathe-comforts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main"))))))) ("lathe-comforts-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-comforts" "doc/lathe-comforts@lathe-comforts-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-doc.txt"))) (checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519671) (dependencies . ("base" "lathe-comforts-lib" "parendown-doc" "parendown-lib" "racket-doc" "reprovide-lang-lib" "scribble-lib")) (description . "A collection of utilities. (doc)") (implies . ()) (modules . ((lib "lathe-comforts/scribblings/lathe-comforts/own-contract.scrbl") (lib "lathe-comforts/scribblings/private/codebasewide-requires.rkt") (lib "lathe-comforts/scribblings/private/shim.rkt") (lib "lathe-comforts/scribblings/lathe-comforts.scrbl"))) (name . "lathe-comforts-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main"))))))) ("lathe-comforts-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-lib.txt"))) (checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519659) (dependencies . ("base" "reprovide-lang-lib" "parendown-lib")) (description . "A collection of utilities. (lib)") (implies . ()) (modules . ((lib "lathe-comforts/string.rkt") (lib "lathe-comforts/maybe.rkt") (lib "lathe-comforts/hash.rkt") (lib "lathe-comforts/private/shim.rkt") (lib "lathe-comforts/private/experimental/match.rkt") (lib "lathe-comforts/trivial.rkt") (lib "lathe-comforts/match.rkt") (lib "lathe-comforts/private.rkt") (lib "lathe-comforts/main.rkt") (lib "lathe-comforts/private/codebasewide-requires.rkt") (lib "lathe-comforts/struct.rkt") (lib "lathe-comforts/list.rkt") (lib "lathe-comforts/contract.rkt") (lib "lathe-comforts/own-contract.rkt"))) (name . "lathe-comforts-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main"))))))) ("lathe-comforts-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-test.txt"))) (checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519648) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib" "rackunit-lib")) (description . "A collection of utilities. (test)") (implies . ()) (modules . ((lib "lathe-comforts/tests/experimental/cross-phase-utils.rkt") (lib "lathe-comforts/tests/experimental/cross-phase-utils-b.rkt") (lib "lathe-comforts/tests.rkt"))) (name . "lathe-comforts-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "43829a1613140d6b12ee1d078ea1d08f9f0c1827") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main"))))))) ("lathe-morphisms" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms.txt"))) (checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1578532357) (dependencies . ("lathe-morphisms-doc" "lathe-morphisms-lib")) (description . "Interfaces for category theory concepts.") (implies . ("lathe-morphisms-doc" "lathe-morphisms-lib")) (modules . ()) (name . "lathe-morphisms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main"))))))) ("lathe-morphisms-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-morphisms" "doc/lathe-morphisms@lathe-morphisms-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-doc.txt"))) (checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532226) (dependencies . ("base" "lathe-comforts-doc" "lathe-comforts-lib" "lathe-morphisms-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "Interfaces for category theory concepts. (doc)") (implies . ()) (modules . ((lib "lathe-morphisms/scribblings/lathe-morphisms.scrbl"))) (name . "lathe-morphisms-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main"))))))) ("lathe-morphisms-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-lib.txt"))) (checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532146) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib")) (description . "Interfaces for category theory concepts. (lib)") (implies . ()) (modules . ((lib "lathe-morphisms/private/algebra/morphisms-as-values.rkt") (lib "lathe-morphisms/in-fp/set.rkt") (lib "lathe-morphisms/in-fp/category.rkt") (lib "lathe-morphisms/in-fp/mediary/set.rkt") (lib "lathe-morphisms/private/algebra/conceptual.rkt") (lib "lathe-morphisms/private/logic.rkt") (lib "lathe-morphisms/private/in-fp/in-fp.rkt") (lib "lathe-morphisms/private/shim.rkt"))) (name . "lathe-morphisms-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main"))))))) ("lathe-morphisms-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-test.txt"))) (checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532284) (dependencies . ("base" "rackunit-lib" "parendown-lib")) (description . "Interfaces for category theory concepts. (test)") (implies . ()) (modules . ((lib "lathe-morphisms/tests.rkt"))) (name . "lathe-morphisms-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "07e4a0c299e1f015e531acf51393e6f8fd8d7354") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main"))))))) ("lathe-ordinals" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals.txt"))) (checksum . "7968ab73b43990ff6607239c742a816b0703612c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519584) (dependencies . ("lathe-ordinals-doc" "lathe-ordinals-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation.") (implies . ("lathe-ordinals-doc" "lathe-ordinals-lib")) (modules . ()) (name . "lathe-ordinals") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "7968ab73b43990ff6607239c742a816b0703612c") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main"))))))) ("lathe-ordinals-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-ordinals" "doc/lathe-ordinals@lathe-ordinals-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-doc.txt"))) (checksum . "7968ab73b43990ff6607239c742a816b0703612c") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519572) (dependencies . ("base" "lathe-comforts-lib" "lathe-ordinals-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (doc)") (implies . ()) (modules . ((lib "lathe-ordinals/scribblings/lathe-ordinals.scrbl"))) (name . "lathe-ordinals-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "7968ab73b43990ff6607239c742a816b0703612c") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main"))))))) ("lathe-ordinals-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-lib.txt"))) (checksum . "7968ab73b43990ff6607239c742a816b0703612c") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519559) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (lib)") (implies . ()) (modules . ((lib "lathe-ordinals/olist-codata.rkt") (lib "lathe-ordinals/olist.rkt") (lib "lathe-ordinals/main.rkt"))) (name . "lathe-ordinals-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "7968ab73b43990ff6607239c742a816b0703612c") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main"))))))) ("lathe-ordinals-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-test.txt"))) (checksum . "7968ab73b43990ff6607239c742a816b0703612c") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519547) (dependencies . ("base" "lathe-ordinals-lib" "rackunit-lib" "parendown-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (test)") (implies . ()) (modules . ((lib "lathe-ordinals/tests.rkt"))) (name . "lathe-ordinals-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "7968ab73b43990ff6607239c742a816b0703612c") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main"))))))) ("laundry" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laundry.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (checksum-error . #f) (collection . "laundry") (conflicts . ()) (date-added . 1632084577) (dependencies . ("rackunit-lib" "base" "brag")) (description . "Org mode for Racket.") (implies . ()) (modules . ((lib "laundry/grammar/plain-list.rkt") (lib "laundry/lex-abbrev.rkt") (lib "laundry/parameters.rkt") (lib "laundry/grammar/heading.rkt") (lib "laundry/grammar/timestamp.rkt") (lib "laundry/colorer.rkt") (lib "laundry/grammar/planning.rkt") (lib "laundry/grammar/org.rkt") (lib "laundry/grammar/paragraph.rkt") (lib "laundry/grammar/table.rkt") (lib "laundry/tokenizer.rkt") (lib "laundry/expander.rkt") (lib "laundry/grammar/block.rkt"))) (name . "laundry") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tgbugs@gmail.com . #t) (org . #t) (org-mode . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=laundry#master") (tags . ("org" "org-mode")) (versions . #hash((default . #hasheq((checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (source . "https://github.com/tgbugs/laundry.git?path=laundry#master") (source_url . "https://github.com/tgbugs/laundry.git?path=laundry#master"))))))) ("laundry-test" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laundry-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (checksum-error . #f) (collection . "laundry-test") (conflicts . ()) (date-added . 1653891695) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "laundry" "org" "gui-lib")) (description . "Tests for laundry.") (implies . ()) (modules . ((lib "laundry-test/test-colorer.rkt") (lib "laundry-test/perf.rkt") (lib "laundry-test/test.rkt") (lib "laundry-test/cli.rkt"))) (name . "laundry-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tgbugs@gmail.com . #t) (laundry . #t) (org . #t) (org-mode . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=laundry-test#master") (tags . ("laundry" "org" "org-mode")) (versions . #hash((default . #hasheq((checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (source . "https://github.com/tgbugs/laundry.git?path=laundry-test#master") (source_url . "https://github.com/tgbugs/laundry.git?path=laundry-test#master"))))))) ("layout" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/layout.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/layout.txt"))) (checksum . "88126ffb4b6bd164b5ce9b07d1336f402dffc9e7") (checksum-error . #f) (collection . "layout") (conflicts . ()) (date-added . 1591036257) (dependencies . ("base" "draw-lib" "pict-lib" "reprovide-lang-lib" "rackunit-chk")) (description . "racket library for creating and rendering layouts, filling them with data, optionally generate example data") (implies . ()) (modules . ((lib "layout/base/private/drawoutline.rkt") (lib "layout/base/primitives/rect.rkt") (lib "layout/base/modifiers.rkt") (lib "layout/base/containers/box.rkt") (lib "layout/base/modifiers/outline.rkt") (lib "layout/base/primitives/text.rkt") (lib "layout/base/types.rkt") (lib "layout/base/mode/mode.rkt") (lib "layout/base/types/piece/bounds.rkt") (lib "layout/base/primitives/nothing.rkt") (lib "layout/base/private/parameter.rkt") (lib "layout/base/containers.rkt") (lib "layout/base/types/piece/spacer.rkt") (lib "layout/base/mode/generator.rkt") (lib "layout/base/types/piece/size.rkt") (lib "layout/base/utils/bounds.rkt") (lib "layout/base/mode/patch.rkt") (lib "layout/example.rkt") (lib "layout/base/types/piece/pos.rkt") (lib "layout/base/modifiers/debug.rkt") (lib "layout/base/types/anchor.rkt") (lib "layout/base/mode/ref.rkt") (lib "layout/base/types/direction.rkt") (lib "layout/base/types/pixelratiovec2.rkt") (lib "layout/base/renderers.rkt") (lib "layout/base/private/color.rkt") (lib "layout/base/data/data.rkt") (lib "layout/base/modifiers/singlepage.rkt") (lib "layout/base/modifiers/clip.rkt") (lib "layout/base.rkt") (lib "layout/base/data/path.rkt") (lib "layout/base/types/pixelratio.rkt") (lib "layout/base/mode/reference.rkt") (lib "layout/base/mode.rkt") (lib "layout/base/types/piece/sizeable.rkt") (lib "layout/base/modifiers/effect.rkt") (lib "layout/base/mode/resolve.rkt") (lib "layout/base/types/piece.rkt") (lib "layout/base/containers/grid.rkt") (lib "layout/base/renderers/pdf.rkt") (lib "layout/base/private/debug.rkt") (lib "layout/base/primitives/image.rkt") (lib "layout/base/data/reference.rkt") (lib "layout/base/types/piece/piece.rkt") (lib "layout/base/mode/wrap.rkt") (lib "layout/base/types/vec2-variant.rkt") (lib "layout/base/containers/anchored.rkt") (lib "layout/base/mode/debug.rkt") (lib "layout/base/mode/current.rkt") (lib "layout/base/modifiers/inset.rkt") (lib "layout/base/primitives/line.rkt") (lib "layout/base/modifiers/style.rkt") (lib "layout/base/mode/layout.rkt") (lib "layout/base/data.rkt") (lib "layout/base/types/vec2.rkt") (lib "layout/base/mode/private/syntax.rkt") (lib "layout/base/primitives.rkt"))) (name . "layout") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schlee.simon@gmail.com . #t) (drawing . #t) (drawing-context . #t) (geometry . #t) (layout . #t) (pdf . #t) (ring:1 . #t) (svg . #t))) (source . "https://github.com/SimonLSchlee/layout.git") (tags . ("drawing" "drawing-context" "geometry" "layout" "pdf" "svg")) (versions . #hash((default . #hasheq((checksum . "88126ffb4b6bd164b5ce9b07d1336f402dffc9e7") (source . "https://github.com/SimonLSchlee/layout.git") (source_url . "https://github.com/SimonLSchlee/layout.git"))))))) ("layout-interactive" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/layout-interactive.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/layout-interactive.txt"))) (checksum . "bf245c3ecbc2c93cc236fd27ea7b37bb8560eccd") (checksum-error . #f) (collection . "layout-interactive") (conflicts . ()) (date-added . 1591044147) (dependencies . ("base" "layout" "gui-lib")) (description . "interact utility for use with 'layout' library ") (implies . ()) (modules . ((lib "layout-interactive/interactive.rkt"))) (name . "layout-interactive") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schlee.simon@gmail.com . #t) (drawing . #t) (geometry . #t) (gui . #t) (layout . #t) (ring:1 . #t))) (source . "https://github.com/SimonLSchlee/layout-interactive.git") (tags . ("drawing" "geometry" "gui" "layout")) (versions . #hash((default . #hasheq((checksum . "bf245c3ecbc2c93cc236fd27ea7b37bb8560eccd") (source . "https://github.com/SimonLSchlee/layout-interactive.git") (source_url . "https://github.com/SimonLSchlee/layout-interactive.git"))))))) ("lazytree" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lazytree" "doc/lazytree@lazytree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lazytree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lazytree.txt"))) (checksum . "96fde82bd59b60f8c1e006669efdb733168da7e4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586998869) (dependencies . ("base" "collections-lib" "relation" "social-contract" "scribble-lib" "scribble-abbrevs" "racket-doc" "collections-doc" "functional-doc" "rackunit-lib" "pict-lib" "cover" "cover-coveralls" "sandbox-lib")) (description . "Lightweight, general-purpose utilities for working with tree-structured data.") (implies . ()) (modules . ((lib "data/lazytree.rkt") (lib "data/lazytree/scribblings/lazytree.scrbl") (lib "data/lazytree/private/util.rkt"))) (name . "lazytree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (functional . #t) (lazy . #t) (ring:1 . #t) (tree . #t))) (source . "https://github.com/countvajhula/lazytree.git") (tags . ("functional" "lazy" "tree")) (versions . #hash((default . #hasheq((checksum . "96fde82bd59b60f8c1e006669efdb733168da7e4") (source . "https://github.com/countvajhula/lazytree.git") (source_url . "https://github.com/countvajhula/lazytree.git"))))))) ("ldap" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap" "doc/ldap@ldap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap.txt") (test-failure-log . "server/built/test-fail/ldap.txt") (test-success-log . #f))) (checksum . "e7440a2632f01563182f277135ab066c41157639") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to LDAP authentication.") (implies . ()) (modules . ((lib "net/ldap/ldap.scrbl") (lib "tests/net/test.rkt") (lib "net/ldap.rkt"))) (name . "ldap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/ldap/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "e7440a2632f01563182f277135ab066c41157639") (source . "github://github.com/jeapostrophe/ldap/master") (source_url . "http://github.com/jeapostrophe/ldap/tree/master"))))))) ("ldap-ffi" . #hasheq((author . "kalimehtar@mail.ru dmitryhertz@gmail.com") (authors . ("kalimehtar@mail.ru" "dmitryhertz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap-ffi" "doc/ldap-ffi@ldap-ffi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap-ffi.txt") (test-failure-log . "server/built/test-fail/ldap-ffi.txt") (test-success-log . #f))) (checksum . "87803b347b15b510874c5cf5c405d63d1fd6717a") (checksum-error . #f) (collection . "ldap-ffi") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "ldap-ffi: a Racket LDAP client built on top of libldap C API") (implies . ()) (modules . ((lib "ldap-ffi/ldap.rkt") (lib "ldap-ffi/main.rkt") (lib "ldap-ffi/scribblings/ldap-ffi.scrbl") (lib "ldap-ffi/test.rkt") (lib "ldap-ffi/ffi.rkt"))) (name . "ldap-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dmitryhertz@gmail.com . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (ldap . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/DmHertz/ldap-ffi/tree/master") (tags . ("ffi" "ldap" "net")) (versions . #hash((default . #hasheq((checksum . "87803b347b15b510874c5cf5c405d63d1fd6717a") (source . "git://github.com/DmHertz/ldap-ffi") (source_url . "http://github.com/DmHertz/ldap-ffi/tree/master"))))))) ("learn-to-type" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/learn-to-type.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/learn-to-type.txt"))) (checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "images-lib")) (description . "A very simple GUI program to learn to type by copying a text.") (implies . ()) (modules . ((lib "learn-to-type/main.rkt") (lib "learn-to-type/ltt-gui.rkt"))) (name . "learn-to-type") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/Metaxal/learn-to-type/tree/master") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (source . "github://github.com/Metaxal/learn-to-type/master") (source_url . "http://github.com/Metaxal/learn-to-type/tree/master"))))))) ("left-pad" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "left-pad" "doc/left-pad@left-pad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/left-pad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/left-pad.txt"))) (checksum . "12446d16786708ec7448bacd308923a2afdd2ab9") (checksum-error . #f) (collection . "left-pad") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "String left pad") (implies . ()) (modules . ((lib "left-pad/tests/untyped.rkt") (lib "left-pad/main.rkt") (lib "left-pad/typed.rkt") (lib "left-pad/tests/typed.rkt") (lib "left-pad/private/left-pad.rkt") (lib "left-pad/docs/left-pad.scrbl") (lib "left-pad/docs/typed-left-pad.scrbl"))) (name . "left-pad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "http://github.com/bennn/racket-left-pad/tree/master") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "12446d16786708ec7448bacd308923a2afdd2ab9") (source . "git://github.com/bennn/racket-left-pad") (source_url . "http://github.com/bennn/racket-left-pad/tree/master"))))))) ("leftist-tree" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "leftist-tree" "doc/leftist-tree@leftist-tree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/leftist-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/leftist-tree.txt"))) (checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "data-enumerate-lib")) (description . "Functional priority queues") (implies . ()) (modules . ((lib "data/leftist-tree/leftist-tree.scrbl") (lib "data/leftist-tree.rkt"))) (name . "leftist-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/97jaz/leftist-tree/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (source . "git://github.com/97jaz/leftist-tree") (source_url . "http://github.com/97jaz/leftist-tree/tree/master"))))))) ("lens" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (description . "Composable, functional lenses") (implies . ("lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (modules . ()) (name . "lens") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens"))))))) ("lens-common" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-common.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket" "base" "fancy-app" "rackunit-lib" "reprovide-lang-lib" "lens-data" "sweet-exp-lib")) (description . "Base lens constructors and additional combinators") (implies . ()) (modules . ((lib "lens/private/test-util/test-multi.rkt") (lib "lens/private/compound/lazy.rkt") (lib "lens/private/compound/identity.rkt") (lib "lens/private/base/contract.rkt") (lib "lens/private/compound/compose.rkt") (lib "lens/private/common/applicable.rkt") (lib "lens/private/compound/arrow.rkt") (lib "lens/private/util/rest-contract.rkt") (lib "lens/private/base/gen-lens.rkt") (lib "lens/private/test-util/test-lens.rkt") (lib "lens/private/compound/thrush.rkt") (lib "lens/private/base/main.rkt") (lib "lens/private/isomorphism/base.rkt") (lib "lens/private/compound/define-nested.rkt") (lib "lens/private/base/view-set.rkt") (lib "lens/private/util/id-append.rkt") (lib "lens/private/base/base.rkt") (lib "lens/private/compound/if.rkt") (lib "lens/common.rkt") (lib "lens/private/compound/main.rkt") (lib "lens/private/base/transform.rkt") (lib "lens/private/compound/zoom.rkt") (lib "lens/private/util/list-pair-contract.rkt") (lib "lens/private/isomorphism/compound.rkt") (lib "lens/private/base/make-lens.rkt"))) (name . "lens-common") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens-common") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-common") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-common"))))))) ("lens-data" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-data.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-data.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket" "base" "lens-common" "rackunit-lib" "fancy-app" "syntax-classes-lib" "struct-update-lib" "kw-make-struct-lib" "reprovide-lang-lib" "sweet-exp-lib")) (description . "Lens constructors for various Racket data structures") (implies . ()) (modules . ((lib "lens/private/match.rkt") (lib "lens/private/util/functional-set.rkt") (lib "lens/private/list/car-cdr.rkt") (lib "lens/private/hash/join-hash.rkt") (lib "lens/private/vector/nested.rkt") (lib "lens/private/stream/stream.rkt") (lib "lens/private/string/substring.rkt") (lib "lens/private/vector/pick.rkt") (lib "lens/private/struct/struct-list.rkt") (lib "lens/private/set/set-filterer.rkt") (lib "lens/data/hash.rkt") (lib "lens/private/dict/dict-nested.rkt") (lib "lens/private/util/functional-dict.rkt") (lib "lens/private/struct/field.rkt") (lib "lens/private/view-set/set-all.rkt") (lib "lens/private/vector/join-vector.rkt") (lib "lens/data/struct.rkt") (lib "lens/private/hash/main.rkt") (lib "lens/private/util/improper-list-length.rkt") (lib "lens/private/struct/struct-nested.rkt") (lib "lens/private/list/multi.rkt") (lib "lens/private/isomorphism/main.rkt") (lib "lens/private/list/main.rkt") (lib "lens/private/list/list-ref-take-drop.rkt") (lib "lens/private/list/join-assoc.rkt") (lib "lens/private/string/join-string.rkt") (lib "lens/private/syntax/main.rkt") (lib "lens/private/string/string-split.rkt") (lib "lens/private/list/join-list.rkt") (lib "lens/private/string/main.rkt") (lib "lens/private/struct/struct.rkt") (lib "lens/private/hash/nested.rkt") (lib "lens/private/list/assoc.rkt") (lib "lens/private/list/append.rkt") (lib "lens/private/hash/ref.rkt") (lib "lens/private/syntax/syntax.rkt") (lib "lens/private/hash/pick.rkt") (lib "lens/private/syntax/srcloc.rkt") (lib "lens/private/syntax/syntax-keyword.rkt") (lib "lens/private/hash/hash-filterer.rkt") (lib "lens/private/vector/main.rkt") (lib "lens/private/tests/gen-lens-fallback-loop.rkt") (lib "lens/data/string.rkt") (lib "lens/data/dict.rkt") (lib "lens/private/struct/struct-join.rkt") (lib "lens/data/vector.rkt") (lib "lens/private/list/flatten.rkt") (lib "lens/private/list/sublist.rkt") (lib "lens/private/struct/main.rkt") (lib "lens/data/stream.rkt") (lib "lens/private/string/string.rkt") (lib "lens/private/list/reverse.rkt") (lib "lens/private/list/map.rkt") (lib "lens/data/list.rkt") (lib "lens/private/isomorphism/data.rkt") (lib "lens/private/vector/ref.rkt") (lib "lens/private/dict/dict.rkt") (lib "lens/private/set/set-member.rkt") (lib "lens/private/list/cadr-etc.rkt") (lib "lens/data.rkt") (lib "lens/private/util/alternating-list.rkt") (lib "lens/private/util/immutable.rkt") (lib "lens/private/syntax/stx.rkt"))) (name . "lens-data") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens-data") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-data") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-data"))))))) ("lens-doc" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lens" "doc/lens@lens-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-doc.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-lib" "lens-unstable" "scribble-lib" "reprovide-lang-lib" "jack-scribble-example" "at-exp-lib" "doc-coverage" "racket-doc" "sweet-exp-lib")) (description . "Documentation for the lens libraries") (implies . ()) (modules . ((lib "lens/private/scribblings/reference.scrbl") (lib "unstable/lens/sublist.scrbl") (lib "lens/private/scribblings/guide/built-in/ordered.scrbl") (lib "lens/private/doc-util/other-reference.rkt") (lib "lens/private/scribblings/guide/built-in.scrbl") (lib "lens/private/scribblings/guide.scrbl") (lib "unstable/lens/dict-nested.scrbl") (lib "lens/private/list/list-ref-take-drop.scrbl") (lib "lens/private/string/main.scrbl") (lib "lens/private/struct/struct.scrbl") (lib "lens/private/hash/pick.scrbl") (lib "lens/private/list/assoc.scrbl") (lib "unstable/lens/syntax.scrbl") (lib "unstable/lens/struct-provide.scrbl") (lib "lens/private/hash/nested.scrbl") (lib "unstable/lens/set-filterer.scrbl") (lib "unstable/lens/set-all.scrbl") (lib "lens/private/doc-util/deflenses.rkt") (lib "lens/private/base/laws.scrbl") (lib "lens/private/list/flatten.scrbl") (lib "lens/private/hash/main.scrbl") (lib "lens/private/syntax/stx.scrbl") (lib "lens/private/list/multi.scrbl") (lib "lens/private/base/view-set.scrbl") (lib "lens/private/scribblings/reference/common.scrbl") (lib "lens/private/string/string.scrbl") (lib "lens/private/compound/compose.scrbl") (lib "unstable/lens/tests/doc-coverage.rkt") (lib "unstable/lens/match.scrbl") (lib "lens/private/vector/pick.scrbl") (lib "lens/main.scrbl") (lib "lens/private/scribblings/guide/built-in/key-value.scrbl") (lib "lens/private/doc-util/scribble-include-no-subsection.rkt") (lib "lens/private/compound/main.scrbl") (lib "lens/private/vector/join-vector.scrbl") (lib "unstable/lens/zoom.scrbl") (lib "unstable/lens/isomorphism.scrbl") (lib "lens/private/base/base.scrbl") (lib "lens/private/list/main.scrbl") (lib "lens/private/scribblings/guide/user-defined/custom.scrbl") (lib "lens/private/tests/doc-coverage.rkt") (lib "unstable/lens/string-split.scrbl") (lib "lens/private/doc-util/lenses-examples.rkt") (lib "lens/private/string/join-string.scrbl") (lib "unstable/lens/arrow.scrbl") (lib "lens/private/list/car-cdr.scrbl") (lib "lens/private/dict/dict.scrbl") (lib "lens/private/scribblings/guide/user-defined.scrbl") (lib "lens/private/struct/main.scrbl") (lib "lens/private/hash/ref.scrbl") (lib "unstable/lens/main.scrbl") (lib "unstable/lens/lazy.scrbl") (lib "lens/private/stream/stream.scrbl") (lib "unstable/lens/if.scrbl") (lib "lens/private/doc-util/main.rkt") (lib "unstable/lens/substring.scrbl") (lib "lens/private/scribblings/guide/introduction.scrbl") (lib "lens/private/list/join-list.scrbl") (lib "unstable/lens/define-nested.scrbl") (lib "lens/private/vector/main.scrbl") (lib "lens/private/struct/field.scrbl") (lib "unstable/lens/hash-filterer.scrbl") (lib "unstable/lens/struct-list.scrbl") (lib "lens/private/base/transform.scrbl") (lib "lens/private/vector/ref.scrbl") (lib "unstable/lens/set-member.scrbl") (lib "lens/private/scribblings/guide/user-defined/struct.scrbl") (lib "lens/private/vector/nested.scrbl") (lib "lens/private/base/contract.scrbl") (lib "lens/applicable.scrbl") (lib "lens/private/scribblings/reference/data.scrbl") (lib "lens/private/doc-util/include-sections.rkt") (lib "lens/private/doc-util/lens-tech.rkt") (lib "unstable/lens/join-assoc.scrbl") (lib "lens/private/hash/join-hash.scrbl") (lib "unstable/lens/struct-join.scrbl") (lib "unstable/lens/map.scrbl") (lib "lens/private/doc-util/stability-notice.rkt") (lib "lens/private/syntax/srcloc.scrbl") (lib "lens/private/base/main.scrbl") (lib "lens/private/compound/thrush.scrbl") (lib "unstable/lens/struct-nested.scrbl"))) (name . "lens-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens-doc") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-doc") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-doc"))))))) ("lens-lib" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-lib.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "reprovide-lang-lib" "rackunit-lib" "sweet-exp-lib")) (description . "Implementation (no docs) of the lens library, includes lens-data and lens-common") (implies . ("lens-common" "lens-data")) (modules . ((lib "lens/main.rkt") (lib "lens/applicable.rkt"))) (name . "lens-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens-lib") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-lib") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-lib"))))))) ("lens-unstable" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-unstable.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-lib" "reprovide-lang-lib" "sweet-exp-lib")) (description . "Unstable and experimental features for lenses") (implies . ()) (modules . ((lib "unstable/lens/map.rkt") (lib "unstable/lens/struct-provide.rkt") (lib "unstable/lens/string-split.rkt") (lib "unstable/lens/syntax/srcloc.rkt") (lib "unstable/lens/set-member.rkt") (lib "unstable/lens/main.rkt") (lib "unstable/lens/flatten.rkt") (lib "unstable/lens/sublist.rkt") (lib "unstable/lens/struct-nested.rkt") (lib "unstable/lens/reverse.rkt") (lib "unstable/lens.rkt") (lib "unstable/lens/set-all.rkt") (lib "unstable/lens/struct-join.rkt") (lib "unstable/lens/syntax.rkt") (lib "unstable/lens/if.rkt") (lib "unstable/lens/isomorphism.rkt") (lib "unstable/lens/substring.rkt") (lib "unstable/lens/lazy.rkt") (lib "unstable/lens/syntax/stx.rkt") (lib "unstable/lens/struct-list.rkt") (lib "unstable/lens/set-filterer.rkt") (lib "unstable/lens/match.rkt") (lib "unstable/lens/dict-nested.rkt") (lib "unstable/lens/hash-filterer.rkt") (lib "unstable/lens/zoom.rkt") (lib "unstable/lens/define-nested.rkt") (lib "unstable/lens/arrow.rkt") (lib "unstable/lens/join-assoc.rkt"))) (name . "lens-unstable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t) (unstable . #t))) (source . "http://github.com/jackfirth/lens/tree/master?path=lens-unstable") (tags . ("data" "functional" "lens" "unstable")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-unstable") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-unstable"))))))) ("lex-yacc-example" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lex-yacc-example" "doc/lex-yacc-example@lex-yacc-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lex-yacc-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lex-yacc-example.txt"))) (checksum . "f88e1fef14ebf82a2225a517cd05bf74d21de557") (checksum-error . #f) (collection . "lex-yacc-example") (conflicts . ()) (date-added . 1630705959) (dependencies . ("rackunit-lib" "base" "parser-tools-lib" "racket-doc" "scribble-lib" "parser-tools-doc" "sandbox-lib")) (description . "Examples for lexer and yacc") (implies . ()) (modules . ((lib "lex-yacc-example/mfcalc/lexer-test.rkt") (lib "lex-yacc-example/calc/lexer-test.rkt") (lib "lex-yacc-example/rpcalc/lexer-test.rkt") (lib "lex-yacc-example/rpcalc/lexer.rkt") (lib "lex-yacc-example/mfcalc/mfcalc-test.rkt") (lib "lex-yacc-example/calc/lexer.rkt") (lib "lex-yacc-example/calc.rkt") (lib "lex-yacc-example/calc/reader.rkt") (lib "lex-yacc-example/rpcalc/parser.rkt") (lib "lex-yacc-example/calc/calc-test.rkt") (lib "lex-yacc-example/test/test.rkt") (lib "lex-yacc-example/scribblings/lex-yacc-example.scrbl") (lib "lex-yacc-example/rpcalc/main.rkt") (lib "lex-yacc-example/mfcalc/reader.rkt") (lib "lex-yacc-example/rpcalc/parser-test.rkt") (lib "lex-yacc-example/mfcalc/funs.rkt") (lib "lex-yacc-example/mfcalc.rkt") (lib "lex-yacc-example/calc/parser.rkt") (lib "lex-yacc-example/mfcalc/parser-test.rkt") (lib "lex-yacc-example/rpcalc/rpcalc-test.rkt") (lib "lex-yacc-example/mfcalc/parser.rkt") (lib "lex-yacc-example/mfcalc/main.rkt") (lib "lex-yacc-example/calc/main.rkt") (lib "lex-yacc-example/mfcalc/lexer.rkt") (lib "lex-yacc-example/rpcalc.rkt") (lib "lex-yacc-example/mfcalc/expander.rkt") (lib "lex-yacc-example/mfcalc/s-exp-test.rkt") (lib "lex-yacc-example/rpcalc/reader.rkt") (lib "lex-yacc-example/calc/parser-test.rkt"))) (name . "lex-yacc-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:petter.pripp@yahoo.com . #t) (dsl . #t) (lex . #t) (parse . #t) (ring:1 . #t) (yacc . #t))) (source . "https://github.com/petterpripp/lex-yacc-example.git#master") (tags . ("dsl" "lex" "parse" "yacc")) (versions . #hash((default . #hasheq((checksum . "f88e1fef14ebf82a2225a517cd05bf74d21de557") (source . "https://github.com/petterpripp/lex-yacc-example.git#master") (source_url . "https://github.com/petterpripp/lex-yacc-example.git#master"))))))) ("libansilove" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libansilove" "doc/libansilove@libansilove/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libansilove.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libansilove.txt"))) (checksum . "187edd41af6e76ae80c184a07f5ef6ba0e1f361b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1631573465) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "FFI to Libansilove") (implies . ()) (modules . ((lib "libansilove/main.rkt") (lib "libansilove/scribblings/low.scrbl") (lib "libansilove/scribblings/libansilove.scrbl") (lib "libansilove/private/define.rkt") (lib "libansilove/libansilove.rkt") (lib "libansilove/ansilove.rkt") (lib "libansilove/scribblings/high.scrbl") (lib "libansilove/examples/example.rkt"))) (name . "libansilove") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (ansilove . #t) (author:xgqt@riseup.net . #t) (bindings . #t) (ffi . #t) (libansilove . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-libansilove.git") (tags . ("ansi" "ansilove" "bindings" "ffi" "libansilove")) (versions . #hash((default . #hasheq((checksum . "187edd41af6e76ae80c184a07f5ef6ba0e1f361b") (source . "https://gitlab.com/xgqt/racket-libansilove.git") (source_url . "https://gitlab.com/xgqt/racket-libansilove.git"))))))) ("libbzip3" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libbzip3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libbzip3.txt"))) (checksum . "07c2b52bc4d54ba915cd63840ceb865f3f3ba0ce") (checksum-error . #f) (collection . "libbzip3") (conflicts . ()) (date-added . 1662081851) (dependencies . ("base")) (description . "FFI to libbzip3") (implies . ()) (modules . ((lib "libbzip3/main.rkt"))) (name . "libbzip3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (bindings . #t) (bzip3 . #t) (ffi . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-libbzip3.git") (tags . ("bindings" "bzip3" "ffi")) (versions . #hash((default . #hasheq((checksum . "07c2b52bc4d54ba915cd63840ceb865f3f3ba0ce") (source . "https://gitlab.com/xgqt/racket-libbzip3.git") (source_url . "https://gitlab.com/xgqt/racket-libbzip3.git"))))))) ("libgit2" . #hasheq((author . "clements@racket-lang.org bradley.busching@gmail.com") (authors . ("clements@racket-lang.org" "bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libgit2" "doc/libgit2@libgit2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2.txt") (test-failure-log . "server/built/test-fail/libgit2.txt") (test-success-log . #f))) (checksum . "6d6a007543900eb7a6fbbeba55850288665bdde5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "libgit2-x86_64-linux-natipkg" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for the Libgit2 library.") (implies . ()) (modules . ((lib "libgit2/scribblings/message.scrbl") (lib "libgit2/include/oidarray.rkt") (lib "libgit2/include/filter.rkt") (lib "libgit2/scribblings/signature.scrbl") (lib "libgit2/include/buffer.rkt") (lib "libgit2/include/trace.rkt") (lib "libgit2/include/blame.rkt") (lib "libgit2/scribblings/treebuilder.scrbl") (lib "libgit2/scribblings/stash.scrbl") (lib "libgit2/include/errors.rkt") (lib "libgit2/scribblings/fetch.scrbl") (lib "libgit2/include/checkout.rkt") (lib "libgit2/include/transaction.rkt") (lib "libgit2/scribblings/revert.scrbl") (lib "libgit2/include/branch.rkt") (lib "libgit2/scribblings/errors.scrbl") (lib "libgit2/scribblings/merge.scrbl") (lib "libgit2/scribblings/libgit2.scrbl") (lib "libgit2/scribblings/filter.scrbl") (lib "libgit2/include/net.rkt") (lib "libgit2/test/test-libgit2.rkt") (lib "libgit2/include/pack.rkt") (lib "libgit2/include/indexer.rkt") (lib "libgit2/scribblings/odb.scrbl") (lib "libgit2/include/revert.rkt") (lib "libgit2/scribblings/describe.scrbl") (lib "libgit2/include/describe.rkt") (lib "libgit2/include/strarray.rkt") (lib "libgit2/scribblings/note.scrbl") (lib "libgit2/include/refspec.rkt") (lib "libgit2/scribblings/ignore.scrbl") (lib "libgit2/scribblings/oid_array.scrbl") (lib "libgit2/include/cred_helpers.rkt") (lib "libgit2/scribblings/reset.scrbl") (lib "libgit2/include/revwalk.rkt") (lib "libgit2/scribblings/clone.scrbl") (lib "libgit2/include/odb_backend.rkt") (lib "libgit2/scribblings/patch.scrbl") (lib "libgit2/include/cherrypick.rkt") (lib "libgit2/scribblings/proxy.scrbl") (lib "libgit2/scribblings/commit.scrbl") (lib "libgit2/include/status.rkt") (lib "libgit2/scribblings/tree.scrbl") (lib "libgit2/scribblings/repository.scrbl") (lib "libgit2/include/submodule.rkt") (lib "libgit2/scribblings/tag.scrbl") (lib "libgit2/scribblings/remote.scrbl") (lib "libgit2/scribblings/object.scrbl") (lib "libgit2/scribblings/revparse.scrbl") (lib "libgit2/scribblings/cherrypick.scrbl") (lib "libgit2/scribblings/oid.scrbl") (lib "libgit2/include/reflog.rkt") (lib "libgit2/include/reset.rkt") (lib "libgit2/scribblings/refdb.scrbl") (lib "libgit2/scribblings/global.scrbl") (lib "libgit2/include/index.rkt") (lib "libgit2/scribblings/config.scrbl") (lib "libgit2/scribblings/diff.scrbl") (lib "libgit2/include/define.rkt") (lib "libgit2/include/ignore.rkt") (lib "libgit2/include/types.rkt") (lib "libgit2/include/oid.rkt") (lib "libgit2/include/clone.rkt") (lib "libgit2/scribblings/refs.scrbl") (lib "libgit2/scribblings/refspec.scrbl") (lib "libgit2/scribblings/cherrpick.scrbl") (lib "libgit2/scribblings/indexer.scrbl") (lib "libgit2/scribblings/buffer.scrbl") (lib "libgit2/include/rebase.rkt") (lib "libgit2/scribblings/pathspec.scrbl") (lib "libgit2/include/pathspec.rkt") (lib "libgit2/include/graph.rkt") (lib "libgit2/scribblings/cred.scrbl") (lib "libgit2/include/remote.rkt") (lib "libgit2/include/stash.rkt") (lib "libgit2/scribblings/blob.scrbl") (lib "libgit2/include/merge.rkt") (lib "libgit2/scribblings/push.scrbl") (lib "libgit2/include/signature.rkt") (lib "libgit2/scribblings/branch.scrbl") (lib "libgit2/scribblings/index.scrbl") (lib "libgit2/scribblings/packbuilder.scrbl") (lib "libgit2/scribblings/revwalk.scrbl") (lib "libgit2/include/config.rkt") (lib "libgit2/include/blob.rkt") (lib "libgit2/main.rkt") (lib "libgit2/include/patch.rkt") (lib "libgit2/scribblings/status.scrbl") (lib "libgit2/include/diff.rkt") (lib "libgit2/include/odb.rkt") (lib "libgit2/include/refs.rkt") (lib "libgit2/scribblings/trace.scrbl") (lib "libgit2/include/proxy.rkt") (lib "libgit2/scribblings/rebase.scrbl") (lib "libgit2/include/notes.rkt") (lib "libgit2/include/tag.rkt") (lib "libgit2/include/transport.rkt") (lib "libgit2/include/refdb.rkt") (lib "libgit2/include/utils.rkt") (lib "libgit2/scribblings/submodule.scrbl") (lib "libgit2/scribblings/annotated_commit.scrbl") (lib "libgit2/include/tree.rkt") (lib "libgit2/scribblings/checkout.scrbl") (lib "libgit2/scribblings/strarray.scrbl") (lib "libgit2/scribblings/functions.scrbl") (lib "libgit2/include/repository.rkt") (lib "libgit2/include/revparse.rkt") (lib "libgit2/scribblings/graph.scrbl") (lib "libgit2/include/message.rkt") (lib "libgit2/scribblings/blame.scrbl") (lib "libgit2/scribblings/reflog.scrbl") (lib "libgit2/include/commit.rkt") (lib "libgit2/include/global.rkt") (lib "libgit2/include/object.rkt") (lib "libgit2/include/annotated_commit.rkt"))) (name . "libgit2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bradley.busching@gmail.com . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/bbusching/libgit2.git") (tags . ("ffi" "git")) (versions . #hash((default . #hasheq((checksum . "6d6a007543900eb7a6fbbeba55850288665bdde5") (source . "https://github.com/bbusching/libgit2.git") (source_url . "https://github.com/bbusching/libgit2.git"))))))) ("libgit2-aarch64-macosx" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-aarch64-macosx.txt"))) (checksum . "4de6aab0e77e99a17d989178beccf3d8ca8ca351") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1646449200) (dependencies . ("base")) (description . "native libraries for \"libgit2\" on \"aarch64-macosx\"") (implies . ()) (modules . ()) (name . "libgit2-aarch64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#aarch64-macosx") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "4de6aab0e77e99a17d989178beccf3d8ca8ca351") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#aarch64-macosx") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#aarch64-macosx"))))))) ("libgit2-i386-win32" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-i386-win32.txt"))) (checksum . "e994e294f07c6e4e1a16ff17105c1088d38d3a8f") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1635076199) (dependencies . ("base")) (description . "native libraries for \"libgit2\" on \"i386-win32\"") (implies . ()) (modules . ()) (name . "libgit2-i386-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#i386-win32") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "e994e294f07c6e4e1a16ff17105c1088d38d3a8f") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#i386-win32") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#i386-win32"))))))) ("libgit2-native-libs" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-native-libs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-native-libs.txt"))) (checksum . "e687c6e8549e11a221f06a4c318f1d8b8ebf7c6a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1635065723) (dependencies . ("base" "libgit2-x86_64-linux" "libgit2-aarch64-macosx" "libgit2-x86_64-macosx" "libgit2-i386-win32" "libgit2-x86_64-win32")) (description . "native libraries for \"libgit2\" (meta-package)") (implies . ()) (modules . ()) (name . "libgit2-native-libs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#native-libs") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "e687c6e8549e11a221f06a4c318f1d8b8ebf7c6a") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#native-libs") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#native-libs"))))))) ("libgit2-x86_64-linux" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-linux.txt"))) (checksum . "6bf18d72ee6f20fabd42bd375a2e50fc036d12be") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1549747129) (dependencies . ("base")) (description . "native libraries for \"libgit2\" on \"x86_64-linux\"") (implies . ()) (modules . ()) (name . "libgit2-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-linux") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "6bf18d72ee6f20fabd42bd375a2e50fc036d12be") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-linux") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-linux"))))))) ("libgit2-x86_64-linux-natipkg" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-linux-natipkg.txt"))) (checksum . "800f798d74af301135f6921bbc914097778b8a20") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "This package contains the x86_64 linux build of the libgit2 library, for use by the libgit2 package.") (implies . ()) (modules . ()) (name . "libgit2-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "800f798d74af301135f6921bbc914097778b8a20") (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (source_url . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux"))))))) ("libgit2-x86_64-macosx" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-macosx.txt"))) (checksum . "886378b0e4e99b52d19bfb73d346deb090ca5d1b") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1549575756) (dependencies . ("base")) (description . "native libraries for \"libgit2\" on \"x86_64-macosx\"") (implies . ()) (modules . ()) (name . "libgit2-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-macosx") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "886378b0e4e99b52d19bfb73d346deb090ca5d1b") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-macosx") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-macosx"))))))) ("libgit2-x86_64-win32" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-win32.txt"))) (checksum . "13d775ae19894f7868c220f454079ada7b4a0b7a") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1635075797) (dependencies . ("base")) (description . "native libraries for \"libgit2\" on \"x86_64-win32\"") (implies . ()) (modules . ()) (name . "libgit2-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-win32") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "13d775ae19894f7868c220f454079ada7b4a0b7a") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-win32") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git#x86_64-win32"))))))) ("libkenji" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libkenji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libkenji.txt"))) (checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("pfds" "typed-racket-lib" "base" "compatibility-lib" "data-lib" "srfi-lib")) (description . "") (implies . ()) (modules . ((lib "libkenji/misc.rkt") (lib "libkenji/control-flow.rkt") (lib "libkenji/ports.rkt") (lib "libkenji/concurrency.rkt") (lib "libkenji/typed.rkt") (lib "libkenji/vector.rkt") (lib "libkenji/wire-struct.rkt") (lib "libkenji/sockets.rkt") (lib "libkenji/main.rkt") (lib "libkenji/logging.rkt") (lib "libkenji/assert.rkt"))) (name . "libkenji") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "http://github.com/quantum1423/libkenji/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (source . "git://github.com/quantum1423/libkenji") (source_url . "http://github.com/quantum1423/libkenji/tree/master"))))))) ("libnotify" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libnotify" "doc/libnotify@libnotify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libnotify.txt") (test-failure-log . "server/built/test-fail/libnotify.txt") (test-success-log . #f))) (checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "racket-doc" "draw-doc")) (description . "FFI bindings for libnotify (desktop notifications)") (implies . ()) (modules . ((lib "libnotify/main.rkt") (lib "libnotify/example.rkt") (lib "libnotify/libnotify.rkt") (lib "libnotify/libnotify.scrbl") (lib "libnotify/ffi-test.rkt") (lib "libnotify/ffi.rkt"))) (name . "libnotify") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-libnotify/tree/master") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (source . "git://github.com/takikawa/racket-libnotify") (source_url . "http://github.com/takikawa/racket-libnotify/tree/master"))))))) ("libopenal-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/libopenal-racket.txt") (docs . (("main" "libopenal-racket" "doc/libopenal-racket@libopenal-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libopenal-racket.txt") (test-failure-log . "server/built/test-fail/libopenal-racket.txt") (test-success-log . #f))) (checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Racket wrapper for the OpenAL library") (implies . ()) (modules . ((lib "libopenal-racket/main.rkt") (lib "libopenal-racket/test/openal-test.rkt") (lib "libopenal-racket/test/test.rkt") (lib "libopenal-racket/doc/libopenal-racket.scrbl") (lib "libopenal-racket/libopenal-racket.rkt"))) (name . "libopenal-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (audio . #t) (author:lehi@tosk.in . #t) (openal . #t) (ring:1 . #t) (wrapper . #t))) (source . "http://github.com/lehitoskin/libopenal-racket/tree/master") (tags . ("audio" "openal" "wrapper")) (versions . #hash((default . #hasheq((checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (source . "git://github.com/lehitoskin/libopenal-racket") (source_url . "http://github.com/lehitoskin/libopenal-racket/tree/master"))))))) ("libquiche" . #hasheq((author . "parnikkapore+rktp@disroot.org") (authors . ("parnikkapore+rktp@disroot.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libquiche" "doc/libquiche@libquiche/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libquiche.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libquiche.txt"))) (checksum . "26aa3ade5feaa8819648c10057ca064c4ec64d85") (checksum-error . #f) (collection . "libquiche") (conflicts . ()) (date-added . 1624329413) (dependencies . ("base" "reprovide-lang-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions and other stuff I wrote to complement the Racket standard library which aren’t significant enough to warrant its own package.") (implies . ()) (modules . ((lib "libquiche/xml.rkt") (lib "libquiche/scribblings/libquiche.scrbl") (lib "libquiche/hash.rkt") (lib "libquiche/main.rkt"))) (name . "libquiche") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:parnikkapore+rktp@disroot.org . #t) (ring:1 . #t) (utils . #t))) (source . "https://github.com/parnikkapore/rkt-libquiche.git") (tags . ("utils")) (versions . #hash((default . #hasheq((checksum . "26aa3ade5feaa8819648c10057ca064c4ec64d85") (source . "https://github.com/parnikkapore/rkt-libquiche.git") (source_url . "https://github.com/parnikkapore/rkt-libquiche.git"))))))) ("libscrypt" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "libscrypt"))) (failure-log . "server/built/fail/libscrypt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "544c692f6d492275002d55fc933049e4abff56d8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable-lib" "racket-doc" "unstable-lib")) (description . "Colin Percival's scrypt bindings for Racket, uses system library.") (implies . ()) (modules . ((lib "libscrypt/libscrypt.scrbl") (lib "libscrypt/private/ffi.rkt") (lib "libscrypt/main.rkt"))) (name . "libscrypt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:mordae@anilinux.org . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-libscrypt/tree/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "544c692f6d492275002d55fc933049e4abff56d8") (source . "github://github.com/mordae/racket-libscrypt/master") (source_url . "http://github.com/mordae/racket-libscrypt/tree/master"))))))) ("libserialport" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libserialport" "doc/libserialport@libserialport/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libserialport.txt") (test-failure-log . "server/built/test-fail/libserialport.txt") (test-success-log . #f))) (checksum . "b0c01e64796ac2306138022f98b0d654907610ca") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc" "unstable-lib")) (description . "FFI bindings for the libserialport library.") (implies . ()) (modules . ((lib "libserialport/libserialport.scrbl") (lib "libserialport/private/ffi.rkt") (lib "libserialport/main.rkt"))) (name . "libserialport") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t) (windows . #t))) (source . "http://github.com/mordae/racket-libserialport/tree/master") (tags . ("ffi" "linux" "windows")) (versions . #hash((default . #hasheq((checksum . "b0c01e64796ac2306138022f98b0d654907610ca") (source . "git://github.com/mordae/racket-libserialport") (source_url . "http://github.com/mordae/racket-libserialport/tree/master"))))))) ("libtoxcore-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libtoxcore-racket" "doc/libtoxcore-racket@libtoxcore-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libtoxcore-racket.txt") (test-failure-log . "server/built/test-fail/libtoxcore-racket.txt") (test-success-log . #f))) (checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket wrapper for the Tox libraries.") (implies . ()) (modules . ((lib "libtoxcore-racket/doc/constants.scrbl") (lib "libtoxcore-racket/doc/functions.scrbl") (lib "libtoxcore-racket/doc/av.scrbl") (lib "libtoxcore-racket/main.rkt") (lib "libtoxcore-racket/encrypt.rkt") (lib "libtoxcore-racket/doc/libtoxcore-racket.scrbl") (lib "libtoxcore-racket/enums.rkt") (lib "libtoxcore-racket/doc/examples.scrbl") (lib "libtoxcore-racket/dns.rkt") (lib "libtoxcore-racket/functions.rkt") (lib "libtoxcore-racket/doc/license.scrbl") (lib "libtoxcore-racket/av.rkt") (lib "libtoxcore-racket/test/test.rkt") (lib "libtoxcore-racket/doc/common.rkt"))) (name . "libtoxcore-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:lehi@tosk.in . #t) (crypto . #t) (ffi . #t) (ring:1 . #t) (wrapper . #t))) (source . "http://github.com/lehitoskin/libtoxcore-racket.git/tree/master") (tags . ("API" "crypto" "ffi" "wrapper")) (versions . #hash((default . #hasheq((checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (source . "git://github.com/lehitoskin/libtoxcore-racket.git") (source_url . "http://github.com/lehitoskin/libtoxcore-racket.git/tree/master"))))))) ("libuuid" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libuuid" "doc/libuuid@libuuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libuuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libuuid.txt"))) (checksum . "c2d169bd1b4dadea867cd276070021be0d235321") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "FFI bindings for the libuuid library.") (implies . ()) (modules . ((lib "libuuid/main.rkt") (lib "libuuid/libuuid.scrbl"))) (name . "libuuid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-libuuid/tree/master") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "c2d169bd1b4dadea867cd276070021be0d235321") (source . "github://github.com/mordae/racket-libuuid/master") (source_url . "http://github.com/mordae/racket-libuuid/tree/master"))))))) ("libvid-i386-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-linux.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Library for Video log messages") (implies . ()) (modules . ()) (name . "libvid-i386-linux") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-linux"))))))) ("libvid-i386-linux-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-linux-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-linux-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "libvid-i386-linux-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux"))))))) ("libvid-i386-macosx-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/libvid-i386-macosx-0-2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: libvid-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:914:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "libvid-i386-macosx-0-2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx"))))))) ("libvid-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-win32.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "32-bit windows build of libvid") (implies . ()) (modules . ()) (name . "libvid-i386-win32") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-win32"))))))) ("libvid-i386-win32-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-win32-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-win32-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "libvid-i386-win32-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32"))))))) ("libvid-x86_64-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-linux.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Libvid for 64-bit linux") (implies . ()) (modules . ()) (name . "libvid-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-linux"))))))) ("libvid-x86_64-linux-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-linux-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-linux-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "libvid-x86_64-linux-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux"))))))) ("libvid-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "An optional helper library for Video, to enable ffmpeg level logging.") (implies . ()) (modules . ()) (name . "libvid-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-macosx") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-macosx"))))))) ("libvid-x86_64-macosx-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-macosx-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-macosx-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "libvid-x86_64-macosx-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx"))))))) ("libvid-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-win32.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "64-bit windows build of the libvid library.") (implies . ()) (modules . ()) (name . "libvid-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-win32"))))))) ("libvid-x86_64-win32-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-win32-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-win32-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "libvid-x86_64-win32-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32"))))))) ("libxml2" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libxml2" "doc/libxml2@libxml2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libxml2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libxml2.txt"))) (checksum . "34f26243e8f35ae84f248e02dfbd7214ec2c619d") (checksum-error . #f) (collection . "libxml2") (conflicts . ()) (dependencies . ("base" "xmllint-win32-x86_64" "libxml2-x86_64-linux-natipkg" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-spec")) (description . "Racket bindings for libxml2") (implies . ()) (modules . ((lib "libxml2/define-fail.rkt") (lib "libxml2/scribblings/libxml2.scrbl") (lib "libxml2/test.rkt") (lib "libxml2/main.rkt"))) (name . "libxml2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/libxml2-ffi.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "34f26243e8f35ae84f248e02dfbd7214ec2c619d") (source . "https://github.com/LiberalArtist/libxml2-ffi.git") (source_url . "https://github.com/LiberalArtist/libxml2-ffi.git"))))))) ("libxml2-x86_64-linux-natipkg" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libxml2-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libxml2-x86_64-linux-natipkg.txt"))) (checksum . "8175b0d1bd6842fb2f1e814f99ad96035e50e734") (checksum-error . #f) (collection . "libxml2-x86_64-linux-natipkg") (conflicts . ()) (dependencies . ("base")) (description . "Packages libxml2 for the package build server") (implies . ()) (modules . ()) (name . "libxml2-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "8175b0d1bd6842fb2f1e814f99ad96035e50e734") (source . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git") (source_url . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git"))))))) ("license-audit" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "license-audit" "doc/license-audit@license-audit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/license-audit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/license-audit.txt"))) (checksum . "b1d7bf223b0eb79279dc7ceeb83d77ca766108e8") (checksum-error . #f) (collection . "license-audit") (conflicts . ()) (date-added . 1654203300) (dependencies . ("base" "text-table" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Audit package licenses (including their dependencies)") (implies . ()) (modules . ((lib "license-audit/scribblings/license-audit.scrbl") (lib "license-audit/raco.rkt") (lib "license-audit/main.rkt"))) (name . "license-audit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audit . #t) (author:sorawee.pwase@gmail.com . #t) (license . #t) (package . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/license-audit.git") (tags . ("audit" "license" "package")) (versions . #hash((default . #hasheq((checksum . "b1d7bf223b0eb79279dc7ceeb83d77ca766108e8") (source . "https://github.com/sorawee/license-audit.git") (source_url . "https://github.com/sorawee/license-audit.git"))))))) ("lindenmayer" . #hasheq((author . "robby@racket-lang.org spencer@florence.io daniel.feltey@eecs.northwestern.edu stamourv@racket-lang.org") (authors . ("robby@racket-lang.org" "spencer@florence.io" "daniel.feltey@eecs.northwestern.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lindenmayer" "doc/lindenmayer@lindenmayer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lindenmayer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lindenmayer.txt"))) (checksum . "2ef7b4535d8ae1eb7cc2e16e2b630c30a4b9a34d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" "htdp-lib" "parser-tools-lib" "pict-lib" "pict3d" "syntax-color-lib" "typed-racket-lib" "math-lib" "2d-lib" "rackunit-lib" "pict-doc" "racket-doc" "scribble-lib" "htdp-doc" "syntax-color-doc" "typed-racket-doc" "typed-racket-more")) (description . "") (implies . ()) (modules . ((lib "lindenmayer/3d-turtle.rkt") (lib "lindenmayer/scribblings/deflsymbol.rkt") (lib "lindenmayer/examples/koch.rkt") (lib "lindenmayer/examples/skew-tree.rkt") (lib "lindenmayer/simple/structs.rkt") (lib "lindenmayer/examples/seaweed.rkt") (lib "lindenmayer/examples/leaf-fern.rkt") (lib "lindenmayer/examples/golden-mean.rkt") (lib "lindenmayer/examples/lily-of-the-valley.rkt") (lib "lindenmayer/simple/lex.rkt") (lib "lindenmayer/scribblings/turtles.scrbl") (lib "lindenmayer/3d.rkt") (lib "lindenmayer/scribblings/util.rkt") (lib "lindenmayer/examples/abop-page25-f.rkt") (lib "lindenmayer/examples/fib.rkt") (lib "lindenmayer/examples/hilbert.rkt") (lib "lindenmayer/examples/leaf.rkt") (lib "lindenmayer/lang.rkt") (lib "lindenmayer/runtime.rkt") (lib "lindenmayer/simple/parse.rkt") (lib "lindenmayer/scribblings/lindenmayer.scrbl") (lib "lindenmayer/configure-runtime.rkt") (lib "lindenmayer/examples/trees.rkt") (lib "lindenmayer/examples/3d-with-leaves.rkt") (lib "lindenmayer/examples/flowery-bush.rkt") (lib "lindenmayer/scribblings/3d-turtle.scrbl") (lib "lindenmayer/simple/run.rkt") (lib "lindenmayer/syntax-properties.rkt") (lib "lindenmayer/private/define-arity.rkt") (lib "lindenmayer/examples/leaf-alternating.rkt") (lib "lindenmayer/examples/abop-page25-f-refactored.rkt") (lib "lindenmayer/simple/compile.rkt") (lib "lindenmayer/examples/wierd-not-really-tree-looking-thing.rkt") (lib "lindenmayer/examples/gaols.rkt") (lib "lindenmayer/private/expression-parse.rkt") (lib "lindenmayer/examples/abop-page25-a.rkt") (lib "lindenmayer/turtle.rkt") (lib "lindenmayer/lexer.rkt") (lib "lindenmayer/examples/abop-page25-d.rkt") (lib "lindenmayer/examples/abop-page-25-d-refactored.rkt") (lib "lindenmayer/examples/serp.rkt") (lib "lindenmayer/main.rkt") (lib "lindenmayer/examples/normal-trees.rkt") (lib "lindenmayer/simple/lang/reader.rkt") (lib "lindenmayer/examples/sunflower.rkt") (lib "lindenmayer/examples/3d-leaf.rkt") (lib "lindenmayer/examples/abop-page25-c.rkt") (lib "lindenmayer/examples/abop-page25-b.rkt") (lib "lindenmayer/scribblings/simple.scrbl") (lib "lindenmayer/examples/better-trees.rkt") (lib "lindenmayer/search.rkt") (lib "lindenmayer/examples/dragon.rkt") (lib "lindenmayer/process-syntax.rkt") (lib "lindenmayer/examples/abop-page25-e.rkt") (lib "lindenmayer/structs.rkt") (lib "lindenmayer/tool.rkt") (lib "lindenmayer/examples/twisty-trees.rkt"))) (name . "lindenmayer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (author:robby@racket-lang.org . #t) (author:spencer@florence.io . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/rfindler/lindenmayer/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2ef7b4535d8ae1eb7cc2e16e2b630c30a4b9a34d") (source . "git://github.com/rfindler/lindenmayer") (source_url . "http://github.com/rfindler/lindenmayer/tree/master"))))))) ("linea" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "linea" "doc/linea@linea/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/linea.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/linea.txt"))) (checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151813) (dependencies . ("base" "udelim" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "line-oriented reader") (implies . ()) (modules . ((lib "linea/private/line-macro-definitions.rkt") (lib "linea/read.rkt") (lib "linea/line-macro.rkt") (lib "linea/private/test/test-lexical-line-macro.rkt") (lib "linea/scribblings/linea.scrbl") (lib "linea/line-macro-prop.rkt") (lib "linea/defaults.rkt") (lib "linea/private/test/test-lang.rkt") (lib "linea/read-syntax-string.rkt") (lib "linea/private/line-macro-detect.rkt") (lib "linea/lang/reader.rkt"))) (name . "linea") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (reader . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=linea") (tags . ("reader")) (versions . #hash((default . #hasheq((checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (source . "https://github.com/willghatch/racket-rash.git?path=linea") (source_url . "https://github.com/willghatch/racket-rash.git?path=linea"))))))) ("linkeddata" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "hello"))) (failure-log . "server/built/fail/linkeddata.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4d59948bb978d6d0abf06ec4de8eb6b946f5f291") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack" "crypto" "rackunit-lib")) (description . "linkeddata is a package that provides various types of linked data tooling, from RDF tooling to json-ld") (implies . ()) (modules . ((lib "linkeddata/date-utils.rkt") (lib "linkeddata/pem.rkt") (lib "linkeddata/rdf.rkt") (lib "linkeddata/ld-sigs.rkt") (lib "linkeddata/jsonld-tests.rkt") (lib "linkeddata/json-ld.rkt") (lib "linkeddata/urdna2015.rkt") (lib "linkeddata/n-quads.rkt") (lib "linkeddata/pk.rkt"))) (name . "linkeddata") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:cwebber@dustycloud.org . #t) (json . #t) (json-ld . #t) (linkeddata . #t) (rdf . #t) (ring:1 . #t))) (source . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata") (tags . ("json" "json-ld" "linkeddata" "rdf")) (versions . #hash((default . #hasheq((checksum . "4d59948bb978d6d0abf06ec4de8eb6b946f5f291") (source . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata") (source_url . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata"))))))) ("linux-shared-libraries" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/linux-shared-libraries.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/linux-shared-libraries.txt"))) (checksum . "f49d1bd6794437482c46d351c71313070e0244d5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591114108) (dependencies . ("base")) (description . "This package contains the shared libraries needed for `flomat` to run on Linux (including the build server).") (implies . ()) (modules . ()) (name . "linux-shared-libraries") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (blas . #t) (cblas . #t) (flomat . #t) (lapack . #t) (linux . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/linux-shared-libraries.git") (tags . ("blas" "cblas" "flomat" "lapack" "linux")) (versions . #hash((default . #hasheq((checksum . "f49d1bd6794437482c46d351c71313070e0244d5") (source . "https://github.com/soegaard/linux-shared-libraries.git") (source_url . "https://github.com/soegaard/linux-shared-libraries.git"))))))) ("lipics" . #hasheq((author . "asumu@ccs.neu.edu stamourv@racket-lang.org") (authors . ("asumu@ccs.neu.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lipics" "doc/lipics@lipics/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lipics.txt") (test-failure-log . "server/built/test-fail/lipics.txt") (test-success-log . #f))) (checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (checksum-error . #f) (collection . "lipics") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "sha" "racket-doc" "scribble-doc")) (description . "Scribble languages for the LIPIcs paper format") (implies . ()) (modules . ((lib "lipics/example-abstract.scrbl") (lib "lipics/main.rkt") (lib "lipics/download.rkt") (lib "lipics/example.scrbl") (lib "lipics/lipics.scrbl"))) (name . "lipics") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/takikawa/lipics-scribble/tree/master") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (source . "git://github.com/takikawa/lipics-scribble") (source_url . "http://github.com/takikawa/lipics-scribble/tree/master"))))))) ("list-plus" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-plus" "doc/list-plus@list-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-plus.txt"))) (checksum . "13767a571439560ad264d3e995228fb35d85895f") (checksum-error . #f) (collection . "list-plus") (conflicts . ()) (date-added . 1591455207) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A form that collects values into a list while supporting internal-definitions") (implies . ()) (modules . ((lib "list-plus/main.rkt") (lib "list-plus/scribblings/list-plus.scrbl"))) (name . "list-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (list . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/list-plus.git") (tags . ("list" "macro")) (versions . #hash((default . #hasheq((checksum . "13767a571439560ad264d3e995228fb35d85895f") (source . "https://github.com/sorawee/list-plus.git") (source_url . "https://github.com/sorawee/list-plus.git"))))))) ("list-util" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-util" "doc/list-util@list-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-util.txt"))) (checksum . "e538fd85b38e7bfcaf2aace75ced7d0183e91073") (checksum-error . #f) (collection . "list-util") (conflicts . ()) (dependencies . ("typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Additional List utilities in Typed Racket.") (implies . ()) (modules . ((lib "list-util/main.rkt") (lib "list-util/scribblings/list-util.scrbl"))) (name . "list-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (list . #t) (ring:1 . #t) (typed . #t))) (source . "https://gitlab.com/RayRacine/list-util.git") (tags . ("list" "typed")) (versions . #hash((default . #hasheq((checksum . "e538fd85b38e7bfcaf2aace75ced7d0183e91073") (source . "https://gitlab.com/RayRacine/list-util.git") (source_url . "https://gitlab.com/RayRacine/list-util.git"))))))) ("list-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-utils" "doc/list-utils@list-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-utils.txt"))) (checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (checksum-error . #f) (collection . "list-utils") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Some additional list-processing functions which I have found useful.") (implies . ()) (modules . ((lib "list-utils/scribblings/list-utils.scrbl") (lib "list-utils/main.rkt"))) (name . "list-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:vincentnys@gmail.com . #t) (lists . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/v-nys/list-utils.git") (tags . ("lists" "utilities")) (versions . #hash((default . #hasheq((checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (source . "https://github.com/v-nys/list-utils.git") (source_url . "https://github.com/v-nys/list-utils.git"))))))) ("literify" . #hasheq((author . "kludev@gmail.com") (authors . ("kludev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/literify.txt") (docs . (("main" "literify" "doc/literify@literify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/literify.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/literify.txt"))) (checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (checksum-error . #f) (collection . "literify") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "racket literate programming in scribble to enable simultaneously display and evaluate code chunks") (implies . ()) (modules . ((lib "literify/scribblings/literify.scrbl") (lib "literify/demo/union-find.scrbl") (lib "literify/main.rkt"))) (name . "literify") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kludev@gmail.com . #t) (documentation . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/kflu/literify/tree/master") (tags . ("documentation" "literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (source . "git://github.com/kflu/literify") (source_url . "http://github.com/kflu/literify/tree/master"))))))) ("liturgical-calendar" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "liturgical-calendar" "doc/liturgical-calendar@liturgical-calendar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/liturgical-calendar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/liturgical-calendar.txt"))) (checksum . "69af60c76b565b5469d94fffe72917e722afdc6a") (checksum-error . #f) (collection . "liturgical-calendar") (conflicts . ()) (date-added . 1622134731) (dependencies . ("base" "adjutor" "typed-racket-lib" "gregor-lib" "scribble-lib" "racket-doc" "adjutor" "gregor-doc" "at-exp-lib" "rackunit-lib")) (description . "Compute the dates of Easter and other feasts") (implies . ()) (modules . ((lib "liturgical-calendar/computus-paschalis.rkt") (lib "liturgical-calendar/typed-demo.rkt") (lib "liturgical-calendar/scribblings/liturgical-calendar.scrbl") (lib "liturgical-calendar/computus-paschalis-typed.rkt") (lib "liturgical-calendar/scribblings/bibliography.rkt") (lib "liturgical-calendar/main.rkt"))) (name . "liturgical-calendar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (calendar . #t) (date . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/liturgical-calendar.git#main") (tags . ("calendar" "date")) (versions . #hash((default . #hasheq((checksum . "69af60c76b565b5469d94fffe72917e722afdc6a") (source . "https://github.com/LiberalArtist/liturgical-calendar.git#main") (source_url . "https://github.com/LiberalArtist/liturgical-calendar.git#main"))))))) ("live-free-or-die" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "live-free-or-die" "doc/live-free-or-die@live-free-or-die/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/live-free-or-die.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/live-free-or-die.txt"))) (checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (checksum-error . #f) (collection . "live-free-or-die") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "Freedom from Typed Racket") (implies . ()) (modules . ((lib "live-free-or-die/live-free-or-die.scrbl") (lib "live-free-or-die/main.rkt") (lib "live-free-or-die/tests/client-safe.rkt") (lib "live-free-or-die/tests/client-unsafe.rkt") (lib "live-free-or-die/tests/server.rkt"))) (name . "live-free-or-die") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (crashing . #t) (performance . #t) (ring:1 . #t) (unsafe . #t))) (source . "http://github.com/jeapostrophe/live-free-or-die/tree/master") (tags . ("crashing" "performance" "unsafe")) (versions . #hash((default . #hasheq((checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (source . "git://github.com/jeapostrophe/live-free-or-die") (source_url . "http://github.com/jeapostrophe/live-free-or-die/tree/master"))))))) ("livefrog" . #hasheq((author . "ebzzry@ebzzry.io") (authors . ("ebzzry@ebzzry.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/livefrog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/livefrog.txt"))) (checksum . "953ff927c1dba43a016dfb4b330429fa8178f6a5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "sxml" "frog" "find-parent-dir")) (description . "Convert ljdump/ljmigrate files for Frog") (implies . ()) (modules . ((lib "livefrog/main.rkt") (lib "livefrog/symbols.rkt") (lib "livefrog/utils.rkt"))) (name . "livefrog") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ebzzry@ebzzry.io . #t) (blog . #t) (ring:1 . #t) (terminal . #t) (web . #t))) (source . "http://github.com/ebzzry/livefrog/tree/master") (tags . ("blog" "terminal" "web")) (versions . #hash((default . #hasheq((checksum . "953ff927c1dba43a016dfb4b330429fa8178f6a5") (source . "git://github.com/ebzzry/livefrog") (source_url . "http://github.com/ebzzry/livefrog/tree/master"))))))) ("loci" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loci" "doc/loci@loci/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loci.txt"))) (checksum . "ce063c7e45d5abb7c187766b3ab7045ef2f84099") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1576672418) (dependencies . ("base" "unix-socket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "unix-socket-lib")) (description . "Loci provides access to locus, an entity similar to a place based on OS processes, instead of threads.") (implies . ()) (modules . ((lib "loci/private/locus-transferable_gen.rkt") (lib "loci/private/locus-local.rkt") (lib "loci/private/locus-channel.rkt") (lib "loci/private/utils.rkt") (lib "test/test_locus-messaging.rkt") (lib "loci/private/path.rkt") (lib "loci/scribblings/loci.scrbl") (lib "test/test_locus-error.rkt") (lib "loci/private/loci-log.rkt") (lib "loci/private/locus_gen.rkt") (lib "test/test_locus-print.rkt") (lib "loci/main.rkt") (lib "test/test_locus-context.rkt"))) (name . "loci") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (parallel . #t) (places . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/racket-loci.git") (tags . ("parallel" "places")) (versions . #hash((default . #hasheq((checksum . "ce063c7e45d5abb7c187766b3ab7045ef2f84099") (source . "https://github.com/pmatos/racket-loci.git") (source_url . "https://github.com/pmatos/racket-loci.git"))))))) ("loess" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loess" "doc/loess@loess/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loess.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loess.txt"))) (checksum . "db88acff8c0265768cbd62072a895ef67dbccf37") (checksum-error . #f) (collection . "loess") (conflicts . ()) (date-added . 1623098128) (dependencies . ("base" "math-lib" "plot-lib" "typed-racket-lib" "plot-doc" "plot-gui-lib" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "Local polynomial regressions for Racket.") (implies . ()) (modules . ((lib "loess/main.rkt") (lib "loess/scribblings/loess.scrbl"))) (name . "loess") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data . #t) (plot . #t) (ring:1 . #t) (statistics . #t))) (source . "https://github.com/ralsei/loess.git") (tags . ("data" "plot" "statistics")) (versions . #hash((default . #hasheq((checksum . "db88acff8c0265768cbd62072a895ef67dbccf37") (source . "https://github.com/ralsei/loess.git") (source_url . "https://github.com/ralsei/loess.git"))))))) ("logger" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "logger" "doc/logger@logger/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/logger.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/logger.txt"))) (checksum . "a4cb492d14d2e65840818ed4fe169011b30be23a") (checksum-error . #f) (collection . "logger") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple logging library with color and 7 log levels.") (implies . ()) (modules . ((lib "logger/scribblings/logger.scrbl") (lib "logger/main.rkt"))) (name . "logger") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (logger . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/logger.git") (tags . ("logger")) (versions . #hash((default . #hasheq((checksum . "a4cb492d14d2e65840818ed4fe169011b30be23a") (source . "https://github.com/BourgondAries/logger.git") (source_url . "https://github.com/BourgondAries/logger.git"))))))) ("logo" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "logo" "doc/logo@logo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/logo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/logo.txt"))) (checksum . "2e9f3f7ffb4b8100aeb52943098f150c1cf7441a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "htdp-lib" "math-lib" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "A #lang for Logo") (implies . ()) (modules . ((lib "logo/parser.rkt") (lib "logo/turtle.rkt") (lib "logo/lang/reader.rkt") (lib "logo/language.rkt") (lib "logo/sierpinski.rkt") (lib "logo/scribblings/logo.scrbl"))) (name . "logo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:leo@lwh.jp . #t) (ring:1 . #t))) (source . "https://github.com/lwhjp/logo.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e9f3f7ffb4b8100aeb52943098f150c1cf7441a") (source . "https://github.com/lwhjp/logo.git") (source_url . "https://github.com/lwhjp/logo.git"))))))) ("loop" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loop" "doc/loop@loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loop.txt"))) (checksum . "10338757e7ef5ce297070b6c2c4a74678430bb9c") (checksum-error . #f) (collection . "loop") (conflicts . ()) (date-added . 1556792786) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Advanced named let") (implies . ()) (modules . ((lib "loop/scribblings/loop.scrbl") (lib "loop/main.rkt"))) (name . "loop") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (loop . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/loop.git") (tags . ("loop")) (versions . #hash((default . #hasheq((checksum . "10338757e7ef5ce297070b6c2c4a74678430bb9c") (source . "https://github.com/sorawee/loop.git") (source_url . "https://github.com/sorawee/loop.git"))))))) ("lti-freq-domain-toolbox" . #hasheq((author . "iastefan@outlook.com") (authors . ("iastefan@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lti-freq-domain-toolbox" "doc/lti-freq-domain-toolbox@lti-freq-domain-toolbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lti-freq-domain-toolbox.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lti-freq-domain-toolbox.txt"))) (checksum . "056fb5aa887474a2ed29a18ba1cb651306fb2477") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1579616400) (dependencies . ("plot-lib" "base" "math-lib" "plot-gui-lib" "racket-doc" "scribble-lib")) (description . "A library for studying LTI dynamical systems - from PID controllers to complex setups") (implies . ()) (modules . ((lib "lti-freq-domain-toolbox/main.rkt") (lib "lti-freq-domain-toolbox/elements/general.rkt") (lib "lti-freq-domain-toolbox/elements/block.rkt") (lib "lti-freq-domain-toolbox/math_library/numerical_analysis.rkt") (lib "lti-freq-domain-toolbox/auxiliary/metrics.rkt") (lib "lti-freq-domain-toolbox/elements/tf.rkt") (lib "lti-freq-domain-toolbox/math_library/general.rkt") (lib "lti-freq-domain-toolbox/circuits.rkt") (lib "lti-freq-domain-toolbox/doc/lti-freq-domain-toolbox.scrbl") (lib "lti-freq-domain-toolbox/functionality/text_generation.rkt") (lib "lti-freq-domain-toolbox/math_library/symbolic_algebra.rkt") (lib "lti-freq-domain-toolbox/functionality/plot_freq_domain.rkt") (lib "lti-freq-domain-toolbox/functionality/plot_time_domain.rkt") (lib "lti-freq-domain-toolbox/elements/adder.rkt") (lib "lti-freq-domain-toolbox/auxiliary/display_modes.rkt"))) (name . "lti-freq-domain-toolbox") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:iastefan@outlook.com . #t) (engineering . #t) (ring:1 . #t))) (source . "https://github.com/istefanis/lti-freq-domain-toolbox.git") (tags . ("engineering")) (versions . #hash((default . #hasheq((checksum . "056fb5aa887474a2ed29a18ba1cb651306fb2477") (source . "https://github.com/istefanis/lti-freq-domain-toolbox.git") (source_url . "https://github.com/istefanis/lti-freq-domain-toolbox.git"))))))) ("lua" . #hasheq((author . "shawsumma@gmail.com") (authors . ("shawsumma@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lua.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lua.txt"))) (checksum . "dd08e81a072899acdd8a5cdf9e759ec4fb2bea72") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1580347480) (dependencies . ("base" "functional-lib" "match-plus" "readline-lib")) (description . "The programming language Lua. Targeting version 5.3.5 (Currently unstable)") (implies . ()) (modules . ((lib "lua/comb/parser.rkt") (lib "lua/lang/reader.rkt") (lib "lua/comb/combinator.rkt") (lib "lua/comb/text.rkt") (lib "lua/main.rkt") (lib "lua/comb/base.rkt") (lib "lua/locals.rkt") (lib "lua/compiler.rkt"))) (name . "lua") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:shawsumma@gmail.com . #t) (language . #t) (lua . #t) (ring:1 . #t))) (source . "https://github.com/shawsumma/lure.git") (tags . ("language" "lua")) (versions . #hash((default . #hasheq((checksum . "dd08e81a072899acdd8a5cdf9e759ec4fb2bea72") (source . "https://github.com/shawsumma/lure.git") (source_url . "https://github.com/shawsumma/lure.git"))))))) ("lux" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux" "doc/lux@lux/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lux.txt"))) (checksum . "23caa1996bde1a88e53ae0e1cf8d650e18dcbc24") (checksum-error . #f) (collection . "lux") (conflicts . ()) (dependencies . ("draw-lib" "drracket" "gui-lib" "htdp-lib" "pict-lib" "base" "rackunit-lib" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "scribble-lib" "racket-doc")) (description . "brilliant interactive programs") (implies . ()) (modules . ((lib "lux/chaos.rkt") (lib "lux/examples/spin.rkt") (lib "lux/chaos/gui/utils.rkt") (lib "lux/chaos/pair.rkt") (lib "lux/word.rkt") (lib "lux/scribblings/lux.scrbl") (lib "lux/main.rkt") (lib "lux/chaos/gui/val.rkt") (lib "lux/chaos/gui.rkt") (lib "lux/examples/val-demo.rkt") (lib "lux/chaos/gui/mouse.rkt") (lib "lux/chaos/gui/key.rkt"))) (name . "lux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/lux/tree/master") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "23caa1996bde1a88e53ae0e1cf8d650e18dcbc24") (source . "git://github.com/jeapostrophe/lux") (source_url . "http://github.com/jeapostrophe/lux/tree/master"))))))) ("lux-charterm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux-charterm" "doc/lux-charterm@lux-charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux-charterm.txt") (test-failure-log . "server/built/test-fail/lux-charterm.txt") (test-success-log . #f))) (checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("lux" "base" "racket-doc" "scribble-lib")) (description . "a lux chaos for terminal programs") (implies . ()) (modules . ((lib "charterm-fork/charterm.rkt") (lib "lux/examples/charterm.rkt") (lib "lux/chaos/lux-charterm.scrbl") (lib "charterm-fork/main.rkt") (lib "lux/chaos/charterm.rkt") (lib "charterm-fork/test-charterm.rkt"))) (name . "lux-charterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "http://github.com/jeapostrophe/lux-charterm/tree/master") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (source . "git://github.com/jeapostrophe/lux-charterm") (source_url . "http://github.com/jeapostrophe/lux-charterm/tree/master"))))))) ("lwc2016" . #hasheq((author . "daniel.feltey@eecs.northwestern.edu") (authors . ("daniel.feltey@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lwc2016.txt") (test-failure-log . "server/built/test-fail/lwc2016.txt") (test-success-log . #f))) (checksum . "8c0a6e11f14af23dcbd72890a51d4fd77350a3d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("2d-lib" "base" "data-lib" "drracket-plugin-lib" "drracket-tool-lib" "gui-lib" "parser-tools-lib" "pict-lib" "rackunit-lib" "scribble-lib" "syntax-color-lib" "draw-lib" "ppict" "slideshow-lib" "unstable-lib" "at-exp-lib")) (description . "PLT submision to the 2016 language workbench challenge") (implies . ()) (modules . ((lib "talk/slides.rkt") (lib "talk/langs.rkt") (lib "editing/property.rkt") (lib "mini-java/tokens.rkt") (lib "mini-java/lexer-unit.rkt") (lib "paper/intro.scrbl") (lib "mini-java/infix-mini-java.rkt") (lib "paper/check-fonts.rkt") (lib "examples/programs/inheritance3.rkt") (lib "examples/even-odd/even-odd.rkt") (lib "mini-java/state-machine-classes.rkt") (lib "paper/racket.scrbl") (lib "editing/context-table.rkt") (lib "paper/mj-examples.rkt") (lib "test/test.rkt") (lib "test/test-examples.rkt") (lib "mini-java/parser-sig.rkt") (lib "examples/programs/even-odd.rkt") (lib "paper/notation.scrbl") (lib "talk/racket-lwc-pict.rkt") (lib "examples/programs/break-example.rkt") (lib "editing/syntax-info.rkt") (lib "paper/evolution.scrbl") (lib "examples/programs/inheritance2.rkt") (lib "paper/setup.rkt") (lib "mini-java/parser-unit.rkt") (lib "examples/programs/ParityMachine.rkt") (lib "examples/programs/typecheck-test.rkt") (lib "talk/mj-code.rkt") (lib "paper/minijava.scrbl") (lib "talk/util.rkt") (lib "examples/even-odd/even-odd-prefix.rkt") (lib "mini-java/prefix-mini-java.rkt") (lib "paper/conclusion.scrbl") (lib "mini-java/error.rkt") (lib "mini-java/typecheck.rkt") (lib "test/parser-test.rkt") (lib "paper/bib.rkt") (lib "paper/editing.scrbl") (lib "examples/programs/receiver-machine.rkt") (lib "editing/if-refactor.rkt") (lib "examples/programs/inheritance.rkt") (lib "examples/even-odd/expanded-even-odd.rkt") (lib "examples/programs/fact.rkt") (lib "examples/programs/state-machine-example.rkt") (lib "mini-java/lexer-sig.rkt") (lib "editing/refactor-tool.rkt") (lib "paper/paper.scrbl") (lib "mini-java/main.rkt"))) (name . "lwc2016") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (ring:1 . #t))) (source . "http://github.com/dfeltey/lwc2016/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c0a6e11f14af23dcbd72890a51d4fd77350a3d7") (source . "git://github.com/dfeltey/lwc2016") (source_url . "http://github.com/dfeltey/lwc2016/tree/master"))))))) ("macrokey" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrokey.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrokey.txt"))) (checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570234) (dependencies . ("base" "macrokey-doc" "macrokey-lib" "macrokey-test")) (description . "MacroKey. Metapackage.") (implies . ()) (modules . ()) (name . "macrokey") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (keybindings . #t) (keyboard-shortcuts . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey") (tags . ("keybindings" "keyboard-shortcuts" "system")) (versions . #hash((default . #hasheq((checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey") (source_url . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey"))))))) ("macrokey-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "macrokey" "doc/macrokey@macrokey-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrokey-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrokey-doc.txt"))) (checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642584883) (dependencies . ("base" "racket-doc" "scribble-lib" "macrokey-lib")) (description . "MacroKey. Documentation.") (implies . ()) (modules . ((lib "macrokey/scribblings/main.scrbl"))) (name . "macrokey-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (keybindings . #t) (keyboard-shortcuts . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-doc") (tags . ("keybindings" "keyboard-shortcuts" "system")) (versions . #hash((default . #hasheq((checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-doc") (source_url . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-doc"))))))) ("macrokey-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrokey-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrokey-lib.txt"))) (checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642584826) (dependencies . ("base" "rackunit-lib")) (description . "MacroKey. Core.") (implies . ()) (modules . ((lib "macrokey/version.rkt") (lib "macrokey/xkbcat.rkt") (lib "macrokey/main.rkt") (lib "macrokey/import.rkt") (lib "macrokey/private/trigger.rkt") (lib "macrokey/keyset.rkt") (lib "macrokey/lang/reader.rkt") (lib "macrokey/private/keyaction.rkt") (lib "macrokey/private/poskey.rkt") (lib "macrokey/lr.rkt"))) (name . "macrokey-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (keybindings . #t) (keyboard-shortcuts . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-lib") (tags . ("keybindings" "keyboard-shortcuts" "system")) (versions . #hash((default . #hasheq((checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-lib") (source_url . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-lib"))))))) ("macrokey-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrokey-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrokey-test.txt"))) (checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570184) (dependencies . ("base" "rackunit-lib" "macrokey-lib")) (description . "MacroKey. Tests.") (implies . ()) (modules . ()) (name . "macrokey-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (keybindings . #t) (keyboard-shortcuts . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-test") (tags . ("keybindings" "keyboard-shortcuts" "system")) (versions . #hash((default . #hasheq((checksum . "4afc521f3b194fc191dd7848f41b3b9eaee3a051") (source . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-test") (source_url . "https://gitlab.com/xgqt/racket-macrokey.git?path=src%2Fmacrokey-test"))))))) ("macrotypes-example" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrotypes-example.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "macrotypes-lib")) (description . "") (implies . ()) (modules . ((lib "macrotypes/examples/stlc+reco+var.rkt") (lib "macrotypes/examples/perfsysf.rkt") (lib "macrotypes/examples/stlc+overloading.rkt") (lib "macrotypes/examples/stlc+rec-iso.rkt") (lib "macrotypes/examples/stlc+cons.rkt") (lib "macrotypes/examples/sysf.rkt") (lib "macrotypes/examples/ext-stlc.rkt") (lib "macrotypes/examples/stlc.rkt") (lib "macrotypes/examples/stlc+occurrence.rkt") (lib "macrotypes/examples/stlc+sub.rkt") (lib "macrotypes/examples/stlc+lit.rkt") (lib "macrotypes/examples/infer.rkt") (lib "macrotypes/examples/fsub.rkt") (lib "macrotypes/examples/stlc+reco+sub.rkt") (lib "macrotypes/examples/stlc+box.rkt") (lib "macrotypes/examples/fomega.rkt") (lib "macrotypes/examples/fomega2.rkt") (lib "macrotypes/examples/exist.rkt") (lib "macrotypes/examples/stlc+effect.rkt") (lib "macrotypes/examples/mlish.rkt") (lib "macrotypes/examples/mlish+adhoc.rkt") (lib "macrotypes/examples/mlish-do.rkt") (lib "macrotypes/examples/perf.rkt") (lib "macrotypes/examples/stlc+tup.rkt"))) (name . "macrotypes-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-example") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-example") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-example"))))))) ("macrotypes-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrotypes-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "\"Types as macros\" core api, used to create Turnstile lang") (implies . ()) (modules . ((lib "macrotypes/typecheck.rkt") (lib "macrotypes/variance-constraints.rkt") (lib "macrotypes/postfix-in.rkt") (lib "macrotypes/type-constraints.rkt") (lib "macrotypes/stx-utils.rkt") (lib "macrotypes/typecheck-core.rkt"))) (name . "macrotypes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib"))))))) ("macrotypes-nonstx" . #hasheq((author . "alexander@knauth.org iitalics@gmail.com") (authors . ("alexander@knauth.org" "iitalics@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "macrotypes-nonstx" "doc/macrotypes-nonstx@macrotypes-nonstx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-nonstx.txt") (test-failure-log . "server/built/test-fail/macrotypes-nonstx.txt") (test-success-log . #f))) (checksum . "b3f9839b6f8dcce4bf3fe9c15d5017214300924d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "agile" "rackunit-lib" "syntax-classes-lib" "racket-doc" "scribble-lib")) (description . "A version of the macrotypes / Turnstile idea where types don't have to be syntax objects") (implies . ()) (modules . ((lib "macrotypes-nonstx/expand-check-info.rkt") (lib "macrotypes-nonstx/example/test/test.rkt") (lib "macrotypes-nonstx/type-prop.rkt") (lib "macrotypes-nonstx/id-transformer.rkt") (lib "macrotypes-nonstx/expand-check-sugar-info.rkt") (lib "macrotypes-nonstx/example/testing.rkt") (lib "macrotypes-nonstx/example/test/vec-thing.rkt") (lib "macrotypes-nonstx/type-macros.rkt") (lib "macrotypes-nonstx/scribblings/macrotypes-nonstx.scrbl") (lib "macrotypes-nonstx/example/example-lang.rkt") (lib "macrotypes-nonstx/example/test/def.rkt") (lib "macrotypes-nonstx/expand-check-sugar.rkt") (lib "macrotypes-nonstx/expand-check.rkt") (lib "macrotypes-nonstx/type-check.rkt") (lib "macrotypes-nonstx/stxparse-match.rkt") (lib "macrotypes-nonstx/example/definition-lang.rkt") (lib "macrotypes-nonstx/prop.rkt") (lib "macrotypes-nonstx/scribblings/docs-example.rkt") (lib "macrotypes-nonstx/expand-stop.rkt") (lib "macrotypes-nonstx/example/vec-thing.rkt"))) (name . "macrotypes-nonstx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/macrotypefunctors/macrotypes-nonstx.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b3f9839b6f8dcce4bf3fe9c15d5017214300924d") (source . "https://github.com/macrotypefunctors/macrotypes-nonstx.git") (source_url . "https://github.com/macrotypefunctors/macrotypes-nonstx.git"))))))) ("macrotypes-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-test.txt") (test-failure-log . "server/built/test-fail/macrotypes-test.txt") (test-success-log . #f))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "macrotypes-example" "rackunit-macrotypes-lib")) (description . "") (implies . ()) (modules . ((lib "tests/macrotypes/rackunit-typechecking.rkt") (lib "tests/macrotypes/stlc+tup-tests.rkt") (lib "tests/macrotypes/mlish-tests.rkt") (lib "tests/macrotypes/fomega2-tests.rkt") (lib "tests/macrotypes/mlish-internal-tests.rkt") (lib "tests/macrotypes/stlc+cons-tests.rkt") (lib "tests/macrotypes/mlish/sweet-map.rkt") (lib "tests/macrotypes/variance-constraints.rkt") (lib "tests/macrotypes/rackunit-kindchecking.rkt") (lib "tests/macrotypes/fomega-tests.rkt") (lib "tests/macrotypes/stlc+reco+var-tests.rkt") (lib "tests/macrotypes/sysf-tests.rkt") (lib "tests/macrotypes/stlc+box-tests.rkt") (lib "tests/macrotypes/stlc+overloading-tests.rkt") (lib "tests/macrotypes/general-tests.rkt") (lib "tests/macrotypes/stlc+effect-tests.rkt") (lib "tests/macrotypes/exist-tests.rkt") (lib "tests/macrotypes/perfsysf.rkt") (lib "tests/macrotypes/do-tests.rkt") (lib "tests/macrotypes/stlc+sub-tests.rkt") (lib "tests/macrotypes/stlc+lit-tests.rkt") (lib "tests/macrotypes/ext-stlc-tests.rkt") (lib "tests/macrotypes/postfix-in.rkt") (lib "tests/macrotypes/perf.rkt") (lib "tests/macrotypes/stlc+occurrence-tests.rkt") (lib "tests/macrotypes/stlc+reco+sub-tests.rkt") (lib "tests/macrotypes/stlc+rec-iso-tests.rkt") (lib "tests/macrotypes/typecheck-core.rkt") (lib "tests/macrotypes/stlc-tests.rkt") (lib "tests/macrotypes/infer-tests.rkt") (lib "tests/macrotypes/fsub-tests.rkt") (lib "tests/macrotypes/issues/issue035.rkt"))) (name . "macrotypes-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-test") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-test"))))))) ("magenc" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "magenc" "doc/magenc@magenc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magenc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magenc.txt"))) (checksum . "f5e011cb3f4fa060623764a4a80860e31ebca9fc") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "crypto-lib" "csexp" "db-lib" "gui-lib" "sql" "web-server-lib" "rackunit-lib" "scribble-lib")) (description . "Symmetric encryption for magnet URIs (code and docs)") (implies . ()) (modules . ((lib "magenc/debug-store.rkt") (lib "magenc/client.rkt") (lib "magenc/sqlite-store.rkt") (lib "magenc/memory-store.rkt") (lib "magenc/hungry-store.rkt") (lib "magenc/errors.rkt") (lib "magenc/get-put.rkt") (lib "magenc/url-base64.rkt") (lib "magenc/sha256d.rkt") (lib "magenc/scribblings/magenc.scrbl") (lib "magenc/web-store.rkt") (lib "magenc/store-interface.rkt") (lib "magenc/install-factory.rkt") (lib "magenc/cas-server.rkt"))) (name . "magenc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cwebber@dustycloud.org . #t) (crypto . #t) (demos . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/magenc.git?path=magenc") (tags . ("crypto" "demos")) (versions . #hash((default . #hasheq((checksum . "f5e011cb3f4fa060623764a4a80860e31ebca9fc") (source . "https://gitlab.com/dustyweb/magenc.git?path=magenc") (source_url . "https://gitlab.com/dustyweb/magenc.git?path=magenc"))))))) ("magic-loader" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/magic-loader.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magic-loader.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magic-loader.txt"))) (checksum . "ed983737b383bc527e54f6db7044df503baf2a14") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("comm-panel")) (description . "We use this at ThoughtSTEM to help kids get demo code into DrRacket quickly.  I don't recommend using this package directly -- but it could be useful as a  demonstration of extending DrRacket.  ") (implies . ()) (modules . ((lib "magic-loader/tool.rkt"))) (name . "magic-loader") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (drracket . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/thoughtstem/magic-loader.git") (tags . ("drracket" "tools")) (versions . #hash((default . #hasheq((checksum . "ed983737b383bc527e54f6db7044df503baf2a14") (source . "https://github.com/thoughtstem/magic-loader.git") (source_url . "https://github.com/thoughtstem/magic-loader.git"))))))) ("magnolisp" . #hasheq((author . "tero@hasu.is") (authors . ("tero@hasu.is")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "magnolisp" "doc/magnolisp@magnolisp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magnolisp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magnolisp.txt"))) (checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "scribble-lib" "unstable-debug-lib" "at-exp-lib" "racket-doc" "rackunit-lib")) (description . "Magnolisp") (implies . ()) (modules . ((lib "magnolisp/tests/test-anno-2.rkt") (lib "magnolisp/tests/lib-declare-1.rkt") (lib "magnolisp/tests/test-names-3.rkt") (lib "magnolisp/util/system.rkt") (lib "magnolisp/tests/test-run-compsys-1.rkt") (lib "magnolisp/tests/test-sum2-3.rkt") (lib "magnolisp/strategy.rkt") (lib "magnolisp/tests/test-type-infer-3.rkt") (lib "magnolisp/tests/test-packages-2.rkt") (lib "magnolisp/tests/test-assign-3.rkt") (lib "magnolisp/core.rkt") (lib "magnolisp/strategy-list.rkt") (lib "magnolisp/type-infer.rkt") (lib "magnolisp/tests/test-for-all-1.rkt") (lib "magnolisp/tests/test-type-infer-a.rkt") (lib "magnolisp/tests/test-type-infer-8.rkt") (lib "magnolisp/strategy-term.rkt") (lib "magnolisp/tests/run-mglc-on-files.rkt") (lib "magnolisp/tests/test-build-1.rkt") (lib "magnolisp/tests/test-literal-1.rkt") (lib "magnolisp/util/syntax-quote-extras.rkt") (lib "magnolisp/tests/test-locals-1.rkt") (lib "magnolisp/tests/test-names-1.rkt") (lib "magnolisp/manual-src/magnolisp.scrbl") (lib "magnolisp/tests/run-cc-on-files.rkt") (lib "magnolisp/tests/test-type-infer-1.rkt") (lib "magnolisp/tests/test-locals-2.rkt") (lib "magnolisp/util/syntax-quote-main.rkt") (lib "magnolisp/backend-build-main.rkt") (lib "magnolisp/tests/test-for-all-5.rkt") (lib "magnolisp/tests/test-lifts-8.rkt") (lib "magnolisp/modbeg.rkt") (lib "magnolisp/2014.rkt") (lib "magnolisp/tests/test-run-simple-1.rkt") (lib "magnolisp/base/main.rkt") (lib "magnolisp/tests/test-sum2-2.rkt") (lib "magnolisp/tests/test-block-expr-3.rkt") (lib "magnolisp/backend-util.rkt") (lib "magnolisp/tests/test-let-expr-2.rkt") (lib "magnolisp/tests/test-lifts-2.rkt") (lib "magnolisp/app-util.rkt") (lib "magnolisp/tests/lib-surface-provide.rkt") (lib "magnolisp/compiler-cli.rkt") (lib "magnolisp/tests/test-sum2-4.rkt") (lib "magnolisp/ast-view.rkt") (lib "magnolisp/tests/lib-modules-3.rkt") (lib "magnolisp/tests/run-view-tests.rkt") (lib "magnolisp/tests/test-literal-3.rkt") (lib "magnolisp/2014/base.rkt") (lib "magnolisp/tests/test-foreign-4.rkt") (lib "magnolisp/tests/test-lifts-6.rkt") (lib "magnolisp/tests/run-stratego-tests.rkt") (lib "magnolisp/tests/run-repr-tests.rkt") (lib "magnolisp/tests/test-foreign-6.rkt") (lib "magnolisp/tests/test-pass-1.rkt") (lib "magnolisp/tests/test-type-infer-2.rkt") (lib "magnolisp/tests/test-sum2-5.rkt") (lib "magnolisp/util.rkt") (lib "magnolisp/tests/test-build-3.rkt") (lib "magnolisp/std/list.rkt") (lib "magnolisp/tests/test-foreign-1.rkt") (lib "magnolisp/tests/test-macro-1.rkt") (lib "magnolisp/tests/test-type-infer-c.rkt") (lib "magnolisp/tests/test-sum2-1.rkt") (lib "magnolisp/tests/test-foreign-3.rkt") (lib "magnolisp/tests/test-block-expr-2.rkt") (lib "magnolisp/tests/test-if-4.rkt") (lib "magnolisp/tests/test-export-1.rkt") (lib "magnolisp/2014/surface.rkt") (lib "magnolisp/tests/test-simple-1.rkt") (lib "magnolisp/tests/test-type-infer-9.rkt") (lib "magnolisp/util/racket-5-compat.rkt") (lib "magnolisp/ir-ast.rkt") (lib "magnolisp/tests/run-misc-tests.rkt") (lib "magnolisp/strategy-stratego.rkt") (lib "magnolisp/tests/lib-modules-2.rkt") (lib "magnolisp/tests/test-run-letrec-1.rkt") (lib "magnolisp/tests/test-if-1.rkt") (lib "magnolisp/tests/test-modules-3.rkt") (lib "magnolisp/2014/reader-ext.rkt") (lib "magnolisp/tests/test-run-lifts-3.rkt") (lib "magnolisp/tests/test-names-2.rkt") (lib "magnolisp/tests/test-pass-2.rkt") (lib "magnolisp/tests/test-surface-1.rkt") (lib "magnolisp/tests/test-macro-4.rkt") (lib "magnolisp/tests/test-run-sum3-1.rkt") (lib "magnolisp/prelude.rkt") (lib "magnolisp/util/module.rkt") (lib "magnolisp/tests/test-assign-2.rkt") (lib "magnolisp/tests/test-macro-2.rkt") (lib "magnolisp/util/let.rkt") (lib "magnolisp/tests/test-run-target-1.rkt") (lib "magnolisp/util/print.rkt") (lib "magnolisp/reader-ext.rkt") (lib "magnolisp/struct.rkt") (lib "magnolisp/tests/lib-cxx-runner.rkt") (lib "magnolisp/tests/test-type-infer-6.rkt") (lib "magnolisp/tests/test-discard-2.rkt") (lib "magnolisp/tests/test-lifts-7.rkt") (lib "magnolisp/backend-cxx-ast.rkt") (lib "magnolisp/tests/test-if-2.rkt") (lib "magnolisp/tests/test-packages-3.rkt") (lib "magnolisp/tests/test-build-2.rkt") (lib "magnolisp/tests/test-macro-5.rkt") (lib "magnolisp/tests/test-type-infer-7.rkt") (lib "magnolisp/ir-id-coll.rkt") (lib "magnolisp/tests/lib-modules-1.rkt") (lib "magnolisp/ast-serialize.rkt") (lib "magnolisp/tests/test-let-expr-3.rkt") (lib "magnolisp/tests/test-match-1.rkt") (lib "magnolisp/tests/test-foreign-5.rkt") (lib "magnolisp/util/assert.rkt") (lib "magnolisp/backend-cxx-print.rkt") (lib "magnolisp/util/struct.rkt") (lib "magnolisp/tests/test-declare-2.rkt") (lib "magnolisp/tests/test-closure-1.rkt") (lib "magnolisp/tests/test-type-infer-5.rkt") (lib "magnolisp/tests/test-for-all-4.rkt") (lib "magnolisp/util/order.rkt") (lib "magnolisp/tests/test-modules-1.rkt") (lib "magnolisp/ast-repr.rkt") (lib "magnolisp/ir-transform.rkt") (lib "magnolisp/tests/run-ast-tests.rkt") (lib "magnolisp/compiler-api.rkt") (lib "magnolisp/lang/reader.rkt") (lib "magnolisp/tests/test-predicate-1.rkt") (lib "magnolisp/tests/lib-names-3.rkt") (lib "magnolisp/util/syntax-quote-macros.rkt") (lib "magnolisp/2014/prelude.rkt") (lib "magnolisp/tests/test-pretty-1.rkt") (lib "magnolisp/tests/test-lifts-5.rkt") (lib "magnolisp/util/debug.rkt") (lib "magnolisp/tests/test-modules-2.rkt") (lib "magnolisp/tests/test-for-all-3.rkt") (lib "magnolisp/tests/test-modules-4.rkt") (lib "magnolisp/util/field.rkt") (lib "magnolisp/tests/test-lifts-1.rkt") (lib "magnolisp/tests/test-type-infer-d.rkt") (lib "magnolisp/tests/test-type-infer-4.rkt") (lib "magnolisp/tests/test-discard-1.rkt") (lib "magnolisp/tests/test-struct-2.rkt") (lib "magnolisp/tests/test-for-all-2.rkt") (lib "magnolisp/parse.rkt") (lib "magnolisp/tests/test-run-lifts-4.rkt") (lib "magnolisp/tests/test-type-infer-b.rkt") (lib "magnolisp/backend-build-writer.rkt") (lib "magnolisp/tests/test-if-3.rkt") (lib "magnolisp/tests/test-foreign-2.rkt") (lib "magnolisp/tests/test-locals-3.rkt") (lib "magnolisp/tests/test-declare-1.rkt") (lib "magnolisp/backend-cxx-main.rkt") (lib "magnolisp/surface.rkt") (lib "magnolisp/tests/test-letrec-1.rkt") (lib "magnolisp/tests/test-packages-4.rkt") (lib "magnolisp/module-load.rkt") (lib "magnolisp/tests/test-type-infer-e.rkt") (lib "magnolisp/tests/test-run-assign-1.rkt") (lib "magnolisp/main.rkt") (lib "magnolisp/backend-mgl-print.rkt") (lib "magnolisp/pp-yield.rkt") (lib "magnolisp/tests/test-run-discard-3.rkt") (lib "magnolisp/tests/test-macro-3.rkt") (lib "magnolisp/tests/test-struct-1.rkt") (lib "magnolisp/base/lang/reader.rkt") (lib "magnolisp/manual-src/util.rkt") (lib "magnolisp/tests/test-let-expr-1.rkt") (lib "magnolisp/tests/test-predicate-2.rkt") (lib "magnolisp/tests/test-literal-2.rkt") (lib "magnolisp/tests/test-anno-1.rkt") (lib "magnolisp/tests/test-run-begin0-1.rkt") (lib "magnolisp/util/bankers-deque.rkt"))) (name . "magnolisp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tero@hasu.is . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/bldl/magnolisp/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (source . "git://github.com/bldl/magnolisp") (source_url . "http://github.com/bldl/magnolisp/tree/master"))))))) ("make-log-interceptor" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "make-log-interceptor" "doc/make-log-interceptor@make-log-interceptor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/make-log-interceptor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/make-log-interceptor.txt"))) (checksum . "232e58ec35aa36367f61586e1640b9ab692ff7dc") (checksum-error . #f) (collection . "make-log-interceptor") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Collect events for a logger, organized by level") (implies . ()) (modules . ((lib "make-log-interceptor/main.rkt") (lib "make-log-interceptor/test/main.rkt") (lib "make-log-interceptor/scribblings/make-log-interceptor.scrbl"))) (name . "make-log-interceptor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (logging . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/bennn/make-log-interceptor.git") (tags . ("logging" "util")) (versions . #hash((default . #hasheq((checksum . "232e58ec35aa36367f61586e1640b9ab692ff7dc") (source . "https://github.com/bennn/make-log-interceptor.git") (source_url . "https://github.com/bennn/make-log-interceptor.git"))))))) ("map-widget" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "map-widget" "doc/map-widget@map-widget/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/map-widget.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/map-widget.txt"))) (checksum . "2eb8e2c0f44192c09dc924888c4fd3deb1d05e22") (checksum-error . #f) (collection . "map-widget") (conflicts . ()) (dependencies . ("draw-lib" "errortrace-lib" "gui-lib" "db-lib" "math-lib" "base" "http-easy" "geoid" "rackunit-lib" "scribble-lib" "draw-doc" "gui-doc" "racket-doc" "al2-test-runner")) (description . "A Racket GUI Widget to display maps based on OpenStreetMap tiles ") (implies . ()) (modules . ((lib "map-widget/private/dbutil.rkt") (lib "map-widget/scribblings/map-widget.scrbl") (lib "map-widget/main.rkt") (lib "map-widget/private/map-util.rkt") (lib "map-widget/private/utilities.rkt") (lib "map-widget/private/point-cloud.rkt") (lib "map-widget/private/map-snip.rkt") (lib "map-widget/private/map-widget.rkt") (lib "map-widget/utils.rkt") (lib "map-widget/private/point-cloud-tests.rkt") (lib "map-widget/private/map-impl.rkt") (lib "map-widget/private/map-tiles.rkt"))) (name . "map-widget") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/map-widget.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "2eb8e2c0f44192c09dc924888c4fd3deb1d05e22") (source . "https://github.com/alex-hhh/map-widget.git") (source_url . "https://github.com/alex-hhh/map-widget.git"))))))) ("margrave" . #hasheq((author . "clements@racket-lang.org tn@cs.brown.edu") (authors . ("clements@racket-lang.org" "tn@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "margrave" "doc/margrave@margrave/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/margrave.txt") (test-failure-log . "server/built/test-fail/margrave.txt") (test-success-log . #f))) (checksum . "09780169700c463def0d6c66192f3b07048671d8") (checksum-error . #f) (collection . "margrave") (conflicts . ()) (dependencies . ("base" "gui-lib" "parser-tools-lib" "rackunit-lib" "scheme-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "A policy analyzer") (implies . ()) (modules . ((lib "margrave/extended-examples/iptables-parser/margrave.rkt") (lib "margrave/scribblings/api.scrbl") (lib "margrave/visualization/application/example.rkt") (lib "margrave/visualization/application/test.rkt") (lib "margrave/extra-files/scratch.rkt") (lib "margrave/extra-files/sup-ios-new.rkt") (lib "margrave/scribblings/margrave.scrbl") (lib "margrave/extended-examples/IOS-simple/demo.rkt") (lib "margrave/lang/reader.rkt") (lib "margrave/extra-files/sup-iptables.rkt") (lib "margrave/extra-files/sup-ios.rkt") (lib "margrave/extended-examples/iptables-parser/ip.rkt") (lib "margrave/scribblings/representing-policies.scrbl") (lib "margrave/extended-examples/IOS-example1/forum1.rkt") (lib "margrave/extra-files/lang_test.rkt") (lib "margrave/compiler.rkt") (lib "margrave/helpers.rkt") (lib "margrave/scribblings/commands.scrbl") (lib "margrave/margrave-policy-vocab.rkt") (lib "margrave/racket/runtime-config.rkt") (lib "margrave/racket/language-info.rkt") (lib "margrave/visualization/application/load-netgraph.rkt") (lib "margrave/extended-examples/IOS-simple/network.rkt") (lib "margrave/xml-test.rkt") (lib "margrave/parser.rkt") (lib "margrave/scribblings/getting-started.scrbl") (lib "margrave/visualization/application/netgraph.rkt") (lib "margrave/racket.rkt") (lib "margrave/IOS-parser/ios-compile.rkt") (lib "margrave/examples/scripts/ios-demo.rkt") (lib "margrave/racket/lang/reader.rkt") (lib "margrave/tests.rkt") (lib "margrave/visualization/application/example2.rkt") (lib "margrave/visualization/application/visualize.rkt") (lib "margrave/main.rkt") (lib "margrave/extra-files/margrave-full-main.rkt") (lib "margrave/IOS-parser/ios.rkt") (lib "margrave/lexer.rkt") (lib "margrave/extra-files/margrave-lite-main.rkt") (lib "margrave/extended-examples/iptables-parser/iptables.rkt") (lib "margrave/extended-examples/IOS-example2/forum2.rkt") (lib "margrave/IOS-parser/ios-parse.rkt") (lib "margrave/visualization/application/apply-model.rkt") (lib "margrave/visualization/application/controls.rkt") (lib "margrave/examples/scripts/network.rkt") (lib "margrave/runtime-config.rkt") (lib "margrave/visualization/application/modelgraph.rkt") (lib "margrave/extended-examples/IOS-example1/testack.rkt") (lib "margrave/margrave.rkt") (lib "margrave/examples/scripts/examples.rkt") (lib "margrave/scribblings/helper.rkt") (lib "margrave/extra-files/large-ios.rkt") (lib "margrave/margrave-ios.rkt") (lib "margrave/language-info.rkt") (lib "margrave/margrave-xml.rkt") (lib "margrave/visualization/application/visxml.rkt") (lib "margrave/tests/lang-margrave-tests.rkt"))) (name . "margrave") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:tn@cs.brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (tags . ()) (versions . #hash((default . #hasheq((checksum . "09780169700c463def0d6c66192f3b07048671d8") (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (source_url . "https://github.com/jbclements/margrave.git#LISA10-pkg"))))))) ("mario" . #hasheq((author . "mlang@blind.guru") (authors . ("mlang@blind.guru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mario.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mario.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mario.txt"))) (checksum . "4604f58610230176abdde0ffca38c9df77810a49") (checksum-error . #f) (collection . "mario") (conflicts . ()) (dependencies . ()) (description . "An interpreter for the 2d programming language MarioLANG") (implies . ()) (modules . ((lib "mario/semantics.rkt") (lib "mario/99bottles.rkt") (lib "mario/main.rkt"))) (name . "mario") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (MarioLANG . #t) (author:mlang@blind.guru . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/mlang/mario.git") (tags . ("language" "MarioLANG")) (versions . #hash((default . #hasheq((checksum . "4604f58610230176abdde0ffca38c9df77810a49") (source . "https://github.com/mlang/mario.git") (source_url . "https://github.com/mlang/mario.git"))))))) ("marionette" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette.txt"))) (checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560002871) (dependencies . ("marionette-doc" "marionette-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (docs and implementation)") (implies . ("marionette-doc" "marionette-lib")) (modules . ()) (name . "marionette") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (source . "https://github.com/Bogdanp/marionette.git?path=marionette") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette"))))))) ("marionette-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "marionette" "doc/marionette@marionette-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-doc.txt"))) (checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (checksum-error . #f) (collection . "marionette") (conflicts . ()) (date-added . 1560007008) (dependencies . ("base" "marionette-lib" "sandbox-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (docs only)") (implies . ()) (modules . ((lib "marionette/scribblings/marionette.scrbl"))) (name . "marionette-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-doc") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-doc") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-doc"))))))) ("marionette-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-lib.txt"))) (checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (checksum-error . #f) (collection . "marionette") (conflicts . ()) (date-added . 1560002949) (dependencies . ("base" "scribble-text-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (implementation only)") (implies . ()) (modules . ((lib "marionette/element.rkt") (lib "marionette/rect.rkt") (lib "marionette/private/browser.rkt") (lib "marionette/browser.rkt") (lib "marionette/private/json.rkt") (lib "marionette/page.rkt") (lib "marionette/capabilities.rkt") (lib "marionette/private/marionette.rkt") (lib "marionette/timeouts.rkt") (lib "marionette/main.rkt") (lib "marionette/private/template.rkt"))) (name . "marionette-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-lib") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-lib") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-lib"))))))) ("marionette-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-test.txt"))) (checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560002977) (dependencies . ("base" "marionette-lib" "rackunit-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (tests only)") (implies . ()) (modules . ((lib "tests/marionette/integration/common.rkt") (lib "tests/marionette/integration/element.rkt") (lib "tests/marionette/integration/page.rkt") (lib "tests/marionette/integration/browser.rkt"))) (name . "marionette-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-test") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "75132b6ab3c9d1512cfdc724037daf0636cb263d") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-test") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-test"))))))) ("markdown" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markdown" "doc/markdown@markdown/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markdown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markdown.txt"))) (checksum . "fc03a2728b12006b21c90b6c480cfe6ae91a4cbe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parsack" "sandbox-lib" "scribble-lib" "srfi-lite-lib" "threading-lib" "at-exp-lib" "html-lib" "racket-doc" "rackunit-lib" "redex-lib" "scribble-doc" "sexp-diff-lib")) (description . "Markdown format parser.") (implies . ()) (modules . ((lib "markdown/xexpr2text.rkt") (lib "markdown/toc.rkt") (lib "markdown/xexpr.rkt") (lib "markdown/redex-test.rkt") (lib "markdown/parsack.rkt") (lib "markdown/ci-environment.rkt") (lib "markdown/suite-test.rkt") (lib "markdown/scrib.rkt") (lib "markdown/perf-test.rkt") (lib "markdown/random-test.rkt") (lib "markdown/main.rkt") (lib "markdown/parse.rkt") (lib "markdown/display-xexpr.rkt") (lib "markdown/entity.rkt") (lib "markdown/markdown.scrbl") (lib "markdown/test.rkt") (lib "markdown/html.rkt") (lib "markdown/example.rkt"))) (name . "markdown") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (markdown . #t) (parser . #t) (ring:1 . #t))) (source . "http://github.com/greghendershott/markdown/tree/master") (tags . ("markdown" "parser")) (versions . #hash((default . #hasheq((checksum . "fc03a2728b12006b21c90b6c480cfe6ae91a4cbe") (source . "git://github.com/greghendershott/markdown") (source_url . "http://github.com/greghendershott/markdown/tree/master"))))))) ("markdown-ng" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markdown-ng" "doc/markdown-ng@markdown-ng/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markdown-ng.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markdown-ng.txt"))) (checksum . "2df7fd1dca47faa99799f427275f3f4ee1f50a32") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1571860112) (dependencies . ("base" "parsack" "sandbox-lib" "scribble-lib" "srfi-lite-lib" "threading-lib" "at-exp-lib" "html-lib" "racket-doc" "rackunit-lib" "redex-lib" "scribble-doc" "sexp-diff" "markdown")) (description . "New Generation of a Racket Markdown library") (implies . ()) (modules . ((lib "markdown-ng/xexpr.rkt") (lib "markdown-ng/parsack.rkt") (lib "markdown-ng/display-xexpr.rkt") (lib "markdown-ng/entity.rkt") (lib "markdown-ng/random-test.rkt") (lib "markdown-ng/main.rkt") (lib "markdown-ng/html.rkt") (lib "markdown-ng/ci-environment.rkt") (lib "markdown-ng/example.rkt") (lib "markdown-ng/redex-test.rkt") (lib "markdown-ng/test.rkt") (lib "markdown-ng/markdown-ng.scrbl") (lib "markdown-ng/suite-test.rkt") (lib "markdown-ng/parse.rkt") (lib "markdown-ng/perf-test.rkt") (lib "markdown-ng/xexpr2text.rkt") (lib "markdown-ng/toc.rkt") (lib "markdown-ng/scrib.rkt"))) (name . "markdown-ng") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (markdown . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/markdown-ng.git") (tags . ("markdown")) (versions . #hash((default . #hasheq((checksum . "2df7fd1dca47faa99799f427275f3f4ee1f50a32") (source . "https://github.com/pmatos/markdown-ng.git") (source_url . "https://github.com/pmatos/markdown-ng.git"))))))) ("markparam" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("markparam-lib" "markparam-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ("markparam-lib" "markparam-doc")) (modules . ()) (name . "markparam") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (source_url . "git://github.com/jeapostrophe/markparam/?path=markparam"))))))) ("markparam-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markparam" "doc/markparam@markparam-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-doc.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . ("base" "markparam-lib" "scribble-lib" "racket-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (modules . ((lib "markparam/scribblings/markparam.scrbl"))) (name . "markparam-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-doc") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-doc") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-doc"))))))) ("markparam-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-lib.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . ("base")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (modules . ((lib "markparam/main.rkt"))) (name . "markparam-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-lib") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-lib") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-lib"))))))) ("markparam-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-test.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . ("base" "markparam-lib" "racket-index" "eli-tester")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (modules . ((lib "markparam/tests/main.rkt"))) (name . "markparam-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-test") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-test") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-test"))))))) ("match-count" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-count.txt"))) (checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (checksum-error . #f) (collection . "match-count") (conflicts . ()) (dependencies . ("base")) (description . "Instrumented match") (implies . ()) (modules . ((lib "match-count/main.rkt"))) (name . "match-count") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (match . #t) (profiling . #t) (ring:1 . #t))) (source . "http://github.com/samth/match-count/tree/master") (tags . ("match" "profiling")) (versions . #hash((default . #hasheq((checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (source . "git://github.com/samth/match-count") (source_url . "http://github.com/samth/match-count/tree/master"))))))) ("match-plus" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-plus" "doc/match-plus@match-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-plus.txt"))) (checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (checksum-error . #f) (collection . "match-plus") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "match-plus/main.rkt") (lib "match-plus/scribblings/match-plus.scrbl"))) (name . "match-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-match-plus.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (source . "git://github.com/lexi-lambda/racket-match-plus.git") (source_url . "http://github.com/lexi-lambda/racket-match-plus.git/tree/master"))))))) ("match-string" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-string" "doc/match-string@match-string/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-string.txt"))) (checksum . "ffc077653b3cdd851fd55589256f1e1177f6ed68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "anaphoric" "srfi-lite-lib" "rackunit-lib" "htdp-lib" "racket-doc" "scribble-lib" "sandbox-lib")) (description . "string-append and append as a match patterns") (implies . ()) (modules . ((lib "match-string/ooo.rkt") (lib "match-string/docs/match-string.scrbl") (lib "match-string/main.rkt") (lib "match-string/syntax-classes.rkt") (lib "match-string/util/match-bound-vars.rkt") (lib "list-with-splicing/main.rkt") (lib "match-string/util/matcher.rkt") (lib "match-string/util/seq-matcher.rkt") (lib "match-string/util/string-seq-matcher.rkt"))) (name . "match-string") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t) (string . #t))) (source . "http://github.com/AlexKnauth/match-string/tree/master") (tags . ("match" "string")) (versions . #hash((default . #hasheq((checksum . "ffc077653b3cdd851fd55589256f1e1177f6ed68") (source . "git://github.com/AlexKnauth/match-string") (source_url . "http://github.com/AlexKnauth/match-string/tree/master"))))))) ("mathler" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mathler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mathler.txt"))) (checksum . "aa9c36b94460d1de9baa687dbec18c8b6f1998af") (checksum-error . #f) (collection . "mathler") (conflicts . ()) (date-added . 1645789387) (dependencies . ("functional-lib" "base" "curly-fn-lib" "try-catch-finally-lib" "readline-lib" "megaparsack-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "terminal version of mathler game, and its solver") (implies . ()) (modules . ((lib "mathler/main.rkt") (lib "mathler/puzzle.rkt") (lib "mathler/response-parser.rkt") (lib "mathler/parser.rkt") (lib "mathler/solver.rkt") (lib "mathler/color.rkt"))) (name . "mathler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:dannypsnl@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/mathler.git#develop") (tags . ()) (versions . #hash((default . #hasheq((checksum . "aa9c36b94460d1de9baa687dbec18c8b6f1998af") (source . "https://github.com/dannypsnl/mathler.git#develop") (source_url . "https://github.com/dannypsnl/mathler.git#develop"))))))) ("mboxrd-read" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mboxrd-read" "doc/mboxrd-read@mboxrd-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mboxrd-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mboxrd-read.txt"))) (checksum . "fe1fa607c8efabe267f30a8c9a321e823c775dbd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "rackunit-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "Racket functions for reading mboxrd and mboxcl2 (used by dovecot) format") (implies . ()) (modules . ((lib "mboxrd-read/mboxrd-read.scrbl") (lib "mboxrd-read/tests.rkt") (lib "mboxrd-read/maildir.rkt") (lib "mboxrd-read/mboxcl2.rkt") (lib "mboxrd-read/mboxrd.rkt") (lib "mboxrd-read/main.rkt"))) (name . "mboxrd-read") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/mboxrd-read.git") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "fe1fa607c8efabe267f30a8c9a321e823c775dbd") (source . "https://github.com/jbclements/mboxrd-read.git") (source_url . "https://github.com/jbclements/mboxrd-read.git"))))))) ("measures" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures" "doc/measures@measures/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures.txt"))) (checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Units and measures with basic arithmetic operations.") (implies . ()) (modules . ((lib "measures/private/fetch-parse-elements.rkt") (lib "measures/tests/test-measure.rkt") (lib "measures/README.scrbl") (lib "measures/lang.rkt") (lib "measures/main.rkt") (lib "measures/convert.rkt") (lib "measures/measure.rkt") (lib "measures/default-units.rkt") (lib "measures/chemical-elements.rkt") (lib "measures/functions.rkt") (lib "measures/tests/test-convert.rkt"))) (name . "measures") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/Metaxal/measures/tree/master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (source . "github://github.com/Metaxal/measures/master") (source_url . "http://github.com/Metaxal/measures/tree/master"))))))) ("measures-with-dimensions" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures-with-dimensions" "doc/measures-with-dimensions@measures-with-dimensions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures-with-dimensions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures-with-dimensions.txt"))) (checksum . "fc6c78f79ac89cf488a5ccc5fc20391bd254886c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1595019971) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "threading" "math-lib" "htdp-lib" "unstable-lib" "sweet-exp" "reprovide-lang" "predicates" "colon-match" "scribble-lib" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc" "typed-racket-doc" "at-exp-lib")) (description . "based on measures, but with dimensions and types") (implies . ()) (modules . ((lib "typed/measures-with-dimensions/relativity/beta-gamma.rkt") (lib "measures-with-dimensions/main.rkt") (lib "typed/measures-with-dimensions/docs/chemistry.scrbl") (lib "typed/measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions/exact-tau-pi-eta.rkt") (lib "typed/measures-with-dimensions/dimensions/dimension-operations.rkt") (lib "typed/measures-with-dimensions/docs/short/SI.scrbl") (lib "typed/measures-with-dimensions/docs/chemistry/molar-mass.scrbl") (lib "typed/measures-with-dimensions/untyped-utils.rkt") (lib "typed/measures-with-dimensions/temperature/match-expanders.rkt") (lib "typed/measures-with-dimensions/units/unit-struct.rkt") (lib "measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/measures/typed-operations-1.rkt") (lib "typed/measures-with-dimensions/chemistry/molar-mass.rkt") (lib "typed/measures-with-dimensions/measures/typed-operations.rkt") (lib "typed/measures-with-dimensions/measures/untyped-operations.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/elements.scrbl") (lib "typed/measures-with-dimensions/chemistry/elements.rkt") (lib "typed/measures-with-dimensions/measures/measure-types.rkt") (lib "typed/measures-with-dimensions/chemistry/compound.rkt") (lib "typed/measures-with-dimensions/measures/0-1-measures.rkt") (lib "typed/measures-with-dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/docs/deftype.rkt") (lib "typed/measures-with-dimensions/short/SI.rkt") (lib "typed/measures-with-dimensions/docs/short/US.scrbl") (lib "typed/measures-with-dimensions/docs/operations-types-structs.scrbl") (lib "typed/measures-with-dimensions/docs/units-and-dimensions.scrbl") (lib "typed/measures-with-dimensions/preds.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/compounds.scrbl") (lib "typed/measures-with-dimensions/docs/measures-with-dimensions.scrbl") (lib "typed/measures-with-dimensions/chemistry/compound-struct.rkt") (lib "typed/measures-with-dimensions/relativity/lorentz-transform.rkt") (lib "typed/measures-with-dimensions/short/US.rkt") (lib "typed/measures-with-dimensions/docs/temperature.scrbl") (lib "typed/measures-with-dimensions/units.rkt") (lib "measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions.rkt") (lib "typed/measures-with-dimensions/temperature/temperature-functions.rkt") (lib "typed/measures-with-dimensions/old/main.rkt") (lib "typed/measures-with-dimensions/dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/measures.rkt") (lib "typed/measures-with-dimensions/defmulti.rkt") (lib "typed/measures-with-dimensions/docs/short-names.scrbl") (lib "typed/measures-with-dimensions/units/unit-operations.rkt") (lib "typed/measures-with-dimensions/dimensions/dimension-struct.rkt") (lib "typed/measures-with-dimensions/measures/physical-constants.rkt") (lib "typed/measures-with-dimensions/docs/physical-constants.scrbl") (lib "typed/measures-with-dimensions/vector-operations.rkt") (lib "typed/measures-with-dimensions/chemistry/misc.rkt") (lib "typed/measures-with-dimensions/measures/measure-struct.rkt") (lib "typed/measures-with-dimensions/units/units.rkt") (lib "typed/measures-with-dimensions/chemistry/element-struct.rkt"))) (name . "measures-with-dimensions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (dimensional-analysis . #t) (math . #t) (ring:1 . #t) (units . #t))) (source . "https://github.com/AlexKnauth/measures-with-dimensions.git#main") (tags . ("dimensional-analysis" "math" "units")) (versions . #hash((default . #hasheq((checksum . "fc6c78f79ac89cf488a5ccc5fc20391bd254886c") (source . "https://github.com/AlexKnauth/measures-with-dimensions.git#main") (source_url . "https://github.com/AlexKnauth/measures-with-dimensions.git#main"))))))) ("medic" . #hasheq((author . "artlessu@gmail.com") (authors . ("artlessu@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "medic" "doc/medic@medic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/medic.txt") (test-failure-log . "server/built/test-fail/medic.txt") (test-success-log . #f))) (checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scheme-lib" "compatibility-lib" "gui-lib" "images-lib" "pict-lib" "draw-lib" "racket-doc" "scribble-lib" "redex-pict-lib")) (description . "A debugging tool for better printf") (implies . ()) (modules . ((lib "medic/demos/timeline-event/event-medic.rkt") (lib "medic/demos/find-path/debug.rkt") (lib "medic/demos/count-length/count.rkt") (lib "medic/demos/aggregate/debug.rkt") (lib "medic/demos/demo2/debug.rkt") (lib "medic/demos/demo4/src4.rkt") (lib "medic/demos/find-path/find-path-medic.rkt") (lib "medic/demos/same/same.rkt") (lib "medic/demos/demo5/debug.rkt") (lib "medic/demos/demo5/src5.rkt") (lib "medic/scribblings/medic.scrbl") (lib "medic/trace.rkt") (lib "medic/demos/count-length/debug.rkt") (lib "medic/trace-util.rkt") (lib "medic/demos/demo5/src5-medic.rkt") (lib "medic/scribblings/demo.scrbl") (lib "medic/demos/demo3/src3.rkt") (lib "medic/trace-browser/graph-pasteboard.rkt") (lib "medic/trace-browser/timeline-canvas.rkt") (lib "medic/demos/demo2/src2.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list-medic.rkt") (lib "medic/demos/aggregate/fact-iter-medic.rkt") (lib "medic/trace-browser/browser.rkt") (lib "medic/demos/demo4/debug.rkt") (lib "medic/demos/aggregate/fact-iter.rkt") (lib "medic/insert.rkt") (lib "medic/main.rkt") (lib "medic/demos/demo4/src4-medic.rkt") (lib "medic/demos/factorial/debug.rkt") (lib "medic/trace-browser/quadtree.rkt") (lib "medic/demos/factorial/fact-medic.rkt") (lib "medic/medic-structs.rkt") (lib "medic/trace-browser/scrub-slider.rkt") (lib "medic/syntax-traversal.rkt") (lib "medic/trace-browser/aggregate-editor.rkt") (lib "medic/trace-browser/tooltip.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list.rkt") (lib "medic/demos/same/debug.rkt") (lib "medic/demos/demo3/src3-medic.rkt") (lib "medic/core.rkt") (lib "medic/demos/timeline-event/se.rkt") (lib "medic/trace-browser/time-slider.rkt") (lib "medic/demos/demo3/debug.rkt") (lib "medic/demos/demo1/src1-medic.rkt") (lib "medic/load-annotator.rkt") (lib "medic/demos/demo1/debug.rkt") (lib "medic/demos/same/same-medic.rkt") (lib "medic/demos/find-path/find-path.rkt") (lib "medic/scribblings/language.scrbl") (lib "medic/demos/demo2/src2-medic.rkt") (lib "medic/demos/doubly-linked-list/debug.rkt") (lib "medic/trace-browser/time-frame.rkt") (lib "medic/demos/demo5/f.rkt") (lib "medic/trace-browser/log-text.rkt") (lib "medic/demos/count-length/count-medic.rkt") (lib "medic/demos/factorial/fact.rkt") (lib "medic/demos/demo1/src1.rkt") (lib "medic/demos/timeline-event/debug.rkt"))) (name . "medic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:artlessu@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lixiangqi/medic/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (source . "git://github.com/lixiangqi/medic") (source_url . "http://github.com/lixiangqi/medic/tree/master"))))))) ("megaparsack" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack.txt"))) (checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (description . "practical parser combinators") (implies . ("megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (modules . ()) (name . "megaparsack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack"))))))) ("megaparsack-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "megaparsack" "doc/megaparsack@megaparsack-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-doc.txt"))) (checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-doc" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-doc" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “megaparsack”") (implies . ()) (modules . ((lib "scribblings/megaparsack/syntax.scrbl") (lib "scribblings/megaparsack.scrbl") (lib "scribblings/megaparsack/choice.scrbl") (lib "scribblings/megaparsack/reference.scrbl") (lib "scribblings/megaparsack/util.rkt") (lib "scribblings/megaparsack/basics.scrbl") (lib "scribblings/megaparsack/differences-from-parsack.scrbl") (lib "scribblings/megaparsack/state.scrbl"))) (name . "megaparsack-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-doc") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-doc") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-doc"))))))) ("megaparsack-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-lib.txt"))) (checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "functional-lib" "match-plus")) (description . "implementation (no documentation) for “megaparsack”") (implies . ()) (modules . ((lib "megaparsack/base.rkt") (lib "megaparsack/main.rkt") (lib "megaparsack/text.rkt") (lib "megaparsack/combinator.rkt"))) (name . "megaparsack-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-lib") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-lib") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-lib"))))))) ("megaparsack-parser" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser.txt"))) (checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "curly-fn-lib" "functional-lib" "megaparsack-lib")) (description . "built-in parsers implemented using megaparsack") (implies . ()) (modules . ((lib "megaparsack/parser/json.rkt"))) (name . "megaparsack-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser"))))))) ("megaparsack-parser-tools" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser-tools.txt"))) (checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "parser-tools-lib")) (description . "helpers for using megaparsack with parser-tools") (implies . ()) (modules . ((lib "megaparsack/parser-tools/lex.rkt"))) (name . "megaparsack-parser-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser-tools") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "0ccdee4270da0337700ac62aa106735d0d879695") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser-tools") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser-tools"))))))) ("memcached" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memcached" "doc/memcached@memcached/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memcached.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memcached.txt"))) (checksum . "465d1bfc700140232c4abd0b854d807740895237") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to memcached") (implies . ()) (modules . ((lib "tests/net/memcached.rkt") (lib "net/memcached/memcached.scrbl") (lib "net/memcached/binary.rkt") (lib "net/memcached.rkt"))) (name . "memcached") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/memcached/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "465d1bfc700140232c4abd0b854d807740895237") (source . "github://github.com/jeapostrophe/memcached/master") (source_url . "http://github.com/jeapostrophe/memcached/tree/master"))))))) ("memo" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memo" "doc/memo@memo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memo.txt"))) (checksum . "3ecfa4ad20c38ce97fedaed848d08348e92c56d3") (checksum-error . #f) (collection . "memo") (conflicts . ()) (dependencies . ("base" "finalizer" "nested-hash" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "thread-utils")) (description . "Memoization with finalizers and cleanup") (implies . ()) (modules . ((lib "memo/main.rkt") (lib "memo/scribblings/memo.scrbl"))) (name . "memo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/memo.git") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "3ecfa4ad20c38ce97fedaed848d08348e92c56d3") (source . "https://github.com/BourgondAries/memo.git") (source_url . "https://github.com/BourgondAries/memo.git"))))))) ("memoize" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize.txt"))) (checksum . "02a647d7fec308f8412656459adf2af06466648e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641494042) (dependencies . ("memoize-lib" "memoize-doc" "memoize-test")) (description . "Memoization for functions") (implies . ("memoize-lib" "memoize-doc" "memoize-test")) (modules . ()) (name . "memoize") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/memoize.git?path=memoize#master") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "02a647d7fec308f8412656459adf2af06466648e") (source . "https://github.com/jbclements/memoize.git?path=memoize#master") (source_url . "https://github.com/jbclements/memoize.git?path=memoize#master"))))))) ("memoize-doc" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize-doc.txt") (test-failure-log . "server/built/test-fail/memoize-doc.txt") (test-success-log . #f))) (checksum . "02a647d7fec308f8412656459adf2af06466648e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641495199) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "memoize-lib")) (description . "documentation for memoize library") (implies . ()) (modules . ()) (name . "memoize-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/memoize.git?path=memoize-doc#master") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "02a647d7fec308f8412656459adf2af06466648e") (source . "https://github.com/jbclements/memoize.git?path=memoize-doc#master") (source_url . "https://github.com/jbclements/memoize.git?path=memoize-doc#master"))))))) ("memoize-lib" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize-lib.txt"))) (checksum . "02a647d7fec308f8412656459adf2af06466648e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641494963) (dependencies . ("base" "rackunit-lib")) (description . "core library for memoize") (implies . ()) (modules . ((lib "memoize/main.rkt"))) (name . "memoize-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/memoize.git?path=memoize-lib#master") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "02a647d7fec308f8412656459adf2af06466648e") (source . "https://github.com/jbclements/memoize.git?path=memoize-lib#master") (source_url . "https://github.com/jbclements/memoize.git?path=memoize-lib#master"))))))) ("memoize-test" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize-test.txt"))) (checksum . "02a647d7fec308f8412656459adf2af06466648e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641495924) (dependencies . ("base" "rackunit-lib" "memoize-lib")) (description . "testing code for memoize \r\n... bogus change to refresh checksum?") (implies . ()) (modules . ((lib "memoize/private/tests.rkt"))) (name . "memoize-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/memoize.git?path=memoize-test#master") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "02a647d7fec308f8412656459adf2af06466648e") (source . "https://github.com/jbclements/memoize.git?path=memoize-test#master") (source_url . "https://github.com/jbclements/memoize.git?path=memoize-test#master"))))))) ("meow" . #hasheq((author . "racket@fog.pw") (authors . ("racket@fog.pw")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/meow.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "86b2ed46a2cadb04cf6cc3d93610cee6ad6b2af1") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/meows/racket-meow.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Personal utilities.") (implies . ()) (modules . ((lib "meow/scribblings/meow.scrbl") (lib "meow/tool.rkt") (lib "meow/main.rkt"))) (name . "meow") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:racket@fog.pw . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/meows/racket-meow.git") (tags . ("utilities")) (versions . #hash((default . #hasheq((checksum . "86b2ed46a2cadb04cf6cc3d93610cee6ad6b2af1") (source . "https://github.com/meows/racket-meow.git") (source_url . "https://github.com/meows/racket-meow.git"))))))) ("meta" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "meta" "doc/meta@meta/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/meta.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/meta.txt"))) (checksum . "3d46d19067a2f3fbfeac4b38a3ae3892abb1c91a") (checksum-error . #f) (collection . "meta") (conflicts . ()) (date-added . 1643773453) (dependencies . ("base" "chk-lib" "racket-doc" "scribble-lib")) (description . "Associate metadata with values.") (implies . ()) (modules . ((lib "meta/main.rkt") (lib "meta/scribblings/meta.scrbl"))) (name . "meta") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (metadata . #t) (ring:1 . #t))) (source . "https://github.com/camoy/meta.git") (tags . ("metadata")) (versions . #hash((default . #hasheq((checksum . "3d46d19067a2f3fbfeac4b38a3ae3892abb1c91a") (source . "https://github.com/camoy/meta.git") (source_url . "https://github.com/camoy/meta.git"))))))) ("metapict" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "metapict" "doc/metapict@metapict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/metapict.txt") (test-failure-log . "server/built/test-fail/metapict.txt") (test-success-log . #f))) (checksum . "1280fbfbba81dcd64f7db930d217c35de248d6ab") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1564425321) (dependencies . ("base" "draw-lib" "math-lib" "gui-lib" "parser-tools-lib" "pict-lib" "slideshow-lib" "srfi-lite-lib" "ppict" "htdp-lib" "compatibility-lib" "graph-lib" "plot-gui-lib" "plot-lib" "rackunit-lib" "unstable-latent-contract-lib" "unstable-parameter-group-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc" "racket-poppler")) (description . "Create beautiful pictures and diagrams") (implies . ()) (modules . ((lib "metapict/line.rkt") (lib "metapict/box-and-pointer-diagram.rkt") (lib "metapict/scribblings/pt.scrbl") (lib "metapict/graph.rkt") (lib "metapict/markings.rkt") (lib "metapict/grid.rkt") (lib "metapict/exp/framed-table.rkt") (lib "metapict/adaptive-plot.rkt") (lib "metapict/trig.rkt") (lib "metapict/scribblings/examples.scrbl") (lib "metapict/examples/racket-logo.rkt") (lib "metapict/device.rkt") (lib "metapict/dc.rkt") (lib "metapict/path-operations.rkt") (lib "metapict/trans.rkt") (lib "metapict/axis.rkt") (lib "metapict/extras/flags.rkt") (lib "metapict/bez.rkt") (lib "metapict/exp/render-math-using-picts.rkt") (lib "metapict/function.rkt") (lib "metapict/examples/pointilism.rkt") (lib "metapict/color.rkt") (lib "metapict/scribblings/curves.scrbl") (lib "metapict/examples/venn.rkt") (lib "metapict/def.rkt") (lib "metapict/examples/uml.rkt") (lib "metapict/examples/arbelos.rkt") (lib "metapict/scribblings/labels.scrbl") (lib "metapict/todo/lexer.rkt") (lib "metapict/scribblings/utils.rkt") (lib "metapict/pen-and-brush.rkt") (lib "metapict/examples/metapost-examples.rkt") (lib "metapict/examples/reuleaux-triangle.rkt") (lib "metapict/examples/rectilinear.rkt") (lib "metapict/gradient.rkt") (lib "metapict/mat.rkt") (lib "metapict/parameters.rkt") (lib "metapict/examples/root-spiral.rkt") (lib "metapict/main.rkt") (lib "metapict/scribblings/representation.scrbl") (lib "metapict/curve.rkt") (lib "metapict/examples/pict-finders.rkt") (lib "metapict/save-svg.rkt") (lib "metapict/arrow.rkt") (lib "metapict/scribblings/examples4.rkt") (lib "metapict/scribblings/metapict.scrbl") (lib "metapict/snake.rkt") (lib "metapict/examples/truncated-cone.rkt") (lib "metapict/examples/geometry-exercises.rkt") (lib "metapict/scribblings/construction-of-bezier-curve.rkt") (lib "metapict/scribblings/draw-and-fill.scrbl") (lib "metapict/node.rkt") (lib "metapict/examples/olympic-rings.rkt") (lib "metapict/scribblings/bez.scrbl") (lib "metapict/clipping.rkt") (lib "metapict/draw.rkt") (lib "metapict/scribblings/pict.scrbl") (lib "metapict/pt-vec.rkt") (lib "metapict/polygons.rkt") (lib "metapict/geometry.rkt") (lib "metapict/domain.rkt") (lib "metapict/examples/generate-exercises-to-pdf.rkt") (lib "metapict/examples/kmiecik-examples-from-tug-boat.rkt") (lib "metapict/scribblings/reference.scrbl") (lib "metapict/examples/exercises-angles-in-right-triangle.rkt") (lib "metapict/exp/tex/render-tex-formula.rkt") (lib "metapict/shapes.rkt") (lib "metapict/examples/convex-hull.rkt") (lib "metapict/examples/random-curve.rkt") (lib "metapict/examples/pointilism2.rkt") (lib "metapict/hom.rkt") (lib "metapict/examples/state-machine-turn-stile.rkt") (lib "metapict/label.rkt") (lib "metapict/function-plot.rkt") (lib "metapict/text-path.rkt") (lib "metapict/examples/gradient-example.rkt") (lib "metapict/scribblings/curve.scrbl") (lib "metapict/extras/function-tables.rkt") (lib "metapict/todo/test-grammar-and-lexer.rkt") (lib "metapict/system.rkt") (lib "metapict/tests/test-node.rkt") (lib "metapict/examples/rotating-triangle.rkt") (lib "metapict/draw-bezier.rkt") (lib "metapict/todo/tagged-pict.rkt") (lib "metapict/examples/graphviz-experiment.rkt") (lib "metapict/tests/commutative-diagrams.rkt") (lib "metapict/list3-sequence.rkt") (lib "metapict/todo/linear-equations.rkt") (lib "metapict/histogram.rkt") (lib "metapict/dc-path.rkt") (lib "metapict/examples/vector-diagrams.rkt") (lib "metapict/examples/peano.rkt") (lib "metapict/examples/glider.rkt") (lib "metapict/scribblings/examples5.scrbl") (lib "metapict/scribblings/device.scrbl") (lib "metapict/bitmap.rkt") (lib "metapict/plot.rkt") (lib "metapict/structs.rkt") (lib "metapict/text.rkt") (lib "metapict/tests/test-text-path.rkt") (lib "metapict/examples/cuboid.rkt") (lib "metapict/pict.rkt") (lib "metapict/examples/koch-curve.rkt") (lib "metapict/examples/asymptote-venn-diagram.rkt") (lib "metapict/shade.rkt") (lib "metapict/examples/integral-left-sum.rkt") (lib "metapict/examples/asymptote-hobby-control.rkt") (lib "metapict/examples/example-graph.rkt") (lib "metapict/scribblings/trans.scrbl") (lib "metapict/window.rkt") (lib "metapict/scribblings/guide.scrbl") (lib "metapict/examples/metapost-manual.rkt") (lib "metapict/cubic-equation.rkt") (lib "metapict/tests/test-radial-gradient-for-ellipse.rkt") (lib "metapict/examples/triangles.rkt") (lib "metapict/scribblings/examples2.rkt") (lib "metapict/match-case-lambda.rkt") (lib "metapict/tests/test-rotation.rkt") (lib "metapict/path.rkt") (lib "metapict/exp/font-root-test.rkt") (lib "metapict/save-pdf.rkt") (lib "metapict/scribblings/guide.rkt") (lib "metapict/debug.rkt") (lib "metapict/scribblings/moonlanding.rkt") (lib "metapict/examples/grapviz-experiment.rkt") (lib "metapict/tree.rkt") (lib "metapict/metapict.rkt") (lib "metapict/examples/sine-cosine-drawing.rkt") (lib "metapict/crop.rkt") (lib "metapict/scribblings/colors.scrbl") (lib "metapict/font.rkt") (lib "metapict/tests/test-latex-formulas.rkt") (lib "metapict/scribblings/coordinates.scrbl") (lib "metapict/pict-lite.rkt") (lib "metapict/examples/metafont-book.rkt") (lib "metapict/todo/grammar-expressions.rkt") (lib "metapict/todo/grammar.rkt") (lib "metapict/examples/missing-square-puzzle.rkt") (lib "metapict/examples/triangle-sss.rkt") (lib "metapict/angles.rkt") (lib "metapict/examples/polygonal-numbers.rkt"))) (name . "metapict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (graph . #t) (graphics . #t) (images . #t) (metapict . #t) (node . #t) (ring:1 . #t) (tikz . #t))) (source . "https://github.com/soegaard/metapict.git") (tags . ("graph" "graphics" "images" "metapict" "node" "tikz")) (versions . #hash((default . #hasheq((checksum . "1280fbfbba81dcd64f7db930d217c35de248d6ab") (source . "https://github.com/soegaard/metapict.git") (source_url . "https://github.com/soegaard/metapict.git"))))))) ("mf-apply" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mf-apply" "doc/mf-apply@mf-apply/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mf-apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mf-apply.txt"))) (checksum . "e9aaf549dfd9549c833d38a1856c577399f9ef50") (checksum-error . #f) (collection . "mf-apply") (conflicts . ()) (dependencies . ("base" "redex-lib" "scribble-lib" "racket-doc" "rackunit-lib" "redex-doc")) (description . "PLT Redex lang-extension for checked metafunction application") (implies . ()) (modules . ((lib "mf-apply/lang/reader.rkt") (lib "mf-apply/docs/mf-apply.scrbl"))) (name . "mf-apply") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang-extension . #t) (redex . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/bennn/mf-apply/tree/master") (tags . ("lang-extension" "redex" "utility")) (versions . #hash((default . #hasheq((checksum . "e9aaf549dfd9549c833d38a1856c577399f9ef50") (source . "git://github.com/bennn/mf-apply") (source_url . "http://github.com/bennn/mf-apply/tree/master"))))))) ("mic1" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mic1" "doc/mic1@mic1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mic1.txt") (test-failure-log . "server/built/test-fail/mic1.txt") (test-success-log . #f))) (checksum . "e985f4698f005049643998d28f8173e821acdb6b") (checksum-error . #f) (collection . "mic1") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "readline-lib" "racket-doc" "scribble-lib" "chk")) (description . "tools for MIC-1 CPU architecture") (implies . ()) (modules . ((lib "mic1/mcc.rkt") (lib "mic1/masm.rkt") (lib "mic1/high-level.rkt") (lib "mic1/mic1.rkt") (lib "mic1/lib.rkt") (lib "mic1/low-level.rkt") (lib "mic1/mic1.scrbl") (lib "mic1/simulator.rkt") (lib "mic1/hdl.rkt") (lib "mic1/mic1-test.rkt"))) (name . "mic1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (hardware . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/mic1/tree/master?path=rkt") (tags . ("hardware")) (versions . #hash((default . #hasheq((checksum . "e985f4698f005049643998d28f8173e821acdb6b") (source . "git://github.com/jeapostrophe/mic1?path=rkt") (source_url . "http://github.com/jeapostrophe/mic1/tree/master?path=rkt"))))))) ("midi-readwrite" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "midi" "doc/midi@midi-readwrite/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/midi-readwrite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/midi-readwrite.txt"))) (checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "simple functions to read MIDI (.mid) files") (implies . ()) (modules . ((lib "midi-readwrite/midi.scrbl") (lib "midi-readwrite/midi-write.rkt") (lib "midi-readwrite/main.rkt") (lib "midi-readwrite/controller-name.rkt") (lib "midi-readwrite/notestream.rkt") (lib "midi-readwrite/midi-to-notes.rkt") (lib "midi-readwrite/test/example-read.rkt") (lib "midi-readwrite/midi-structs.rkt") (lib "midi-readwrite/sort-helper.rkt") (lib "midi-readwrite/midi-read.rkt"))) (name . "midi-readwrite") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/midi-readwrite/tree/master") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (source . "github://github.com/jbclements/midi-readwrite/master") (source_url . "http://github.com/jbclements/midi-readwrite/tree/master"))))))) ("mike" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mike" "doc/mike@mike/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mike.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mike.txt"))) (checksum . "f3eb907e9688b45538cba791dcd71ed0619fb8da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1624403593) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Micro Make replacement") (implies . ()) (modules . ((lib "mike/private/helpers/compile.rkt") (lib "mike/private/helpers/index.rkt") (lib "mike/scribblings/mike.scrbl") (lib "mike/private/tests.rkt") (lib "mike/scribblings/project.scrbl") (lib "mike/scribblings/about.scrbl") (lib "mike/scribblings/cli.scrbl") (lib "mike/private/rules.rkt") (lib "mike/main.rkt") (lib "mike/private/variables.rkt"))) (name . "mike") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (development . #t) (make . #t) (ring:1 . #t) (utility . #t))) (source . "https://gitlab.com/xgqt/racket-mike.git") (tags . ("development" "make" "utility")) (versions . #hash((default . #hasheq((checksum . "f3eb907e9688b45538cba791dcd71ed0619fb8da") (source . "https://gitlab.com/xgqt/racket-mike.git") (source_url . "https://gitlab.com/xgqt/racket-mike.git"))))))) ("mime-type" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mime-type" "doc/mime-type@mime-type/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mime-type.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mime-type.txt"))) (checksum . "e81bc2c587fe6741fcec7110217f7b2be9e2f03f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1645258897) (dependencies . ("base" "mime-type-lib" "base" "mime-type-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Utilities for working with MIME types. (docs, tests & implementation)") (implies . ("mime-type-lib")) (modules . ((lib "net/scribblings/mime-type.scrbl") (lib "tests/net/mime-type.rkt"))) (name . "mime-type") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (mime-type . #t) (net . #t) (ring:1 . #t) (web . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type") (tags . ("mime-type" "net" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "e81bc2c587fe6741fcec7110217f7b2be9e2f03f") (source . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type") (source_url . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type"))))))) ("mime-type-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mime-type-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mime-type-lib.txt"))) (checksum . "e81bc2c587fe6741fcec7110217f7b2be9e2f03f") (checksum-error . #f) (collection . "net") (conflicts . ()) (date-added . 1645258854) (dependencies . ("base")) (description . "Utilities for working with MIME types. (implementation)") (implies . ()) (modules . ((lib "net/mime-type.rkt"))) (name . "mime-type-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (mime-type . #t) (net . #t) (ring:1 . #t) (web . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type-lib") (tags . ("mime-type" "net" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "e81bc2c587fe6741fcec7110217f7b2be9e2f03f") (source . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type-lib") (source_url . "https://github.com/Bogdanp/racket-net-mime-type.git?path=mime-type-lib"))))))) ("mind-map" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "mind-map" "doc/mind-map@mind-map/index.html"))) (failure-log . "server/built/fail/mind-map.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8401400f1dbc7956357cd27563b6926f4e429d7c") (checksum-error . #f) (collection . "mind-map") (conflicts . ()) (date-added . 1592414757) (dependencies . ("base" "racket-graphviz" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Write and render mind maps in Racket.") (implies . ()) (modules . ((lib "mind-map/private/lexer.rkt") (lib "mind-map/cli.rkt") (lib "mind-map/examples/tcgs.rkt") (lib "mind-map/private/parser.rkt") (lib "mind-map/main.rkt") (lib "mind-map/scribblings/mind-map.scrbl"))) (name . "mind-map") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (mind-map . #t) (mind-mapping . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/mind-map.git") (tags . ("mind-map" "mind-mapping")) (versions . #hash((default . #hasheq((checksum . "8401400f1dbc7956357cd27563b6926f4e429d7c") (source . "https://github.com/zyrolasting/mind-map.git") (source_url . "https://github.com/zyrolasting/mind-map.git"))))))) ("minetest" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "minetest" "doc/minetest@minetest/index.html"))) (failure-log . "server/built/fail/minetest.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Compile-time framework for getting 2htdp/image objects into Minetest (as blocks, items, recipes, and/or schematics).  Only works on Linux.") (implies . ()) (modules . ((lib "minetest/examples/example2.rkt") (lib "minetest/schematics-writer-raw.rkt") (lib "minetest/examples/quick-demo.rkt") (lib "minetest/examples/hello-world.rkt") (lib "minetest/entities.rkt") (lib "minetest/compiler.rkt") (lib "minetest/rules.rkt") (lib "minetest/rocket-module.rkt") (lib "minetest/schematics.rkt") (lib "minetest/lua.rkt") (lib "minetest/minetest.scrbl") (lib "minetest/core.rkt") (lib "minetest/items.rkt") (lib "minetest/examples/example-mod.rkt") (lib "minetest/textures.rkt") (lib "minetest/recipes.rkt") (lib "minetest/main.rkt") (lib "minetest/mob-api-raw.rkt") (lib "minetest/blocks.rkt"))) (name . "minetest") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (minetest . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/minetest.git") (tags . ("2htdp" "education" "games" "minetest")) (versions . #hash((default . #hasheq((checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (source . "https://github.com/thoughtstem/minetest.git") (source_url . "https://github.com/thoughtstem/minetest.git"))))))) ("ming" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "ming" "doc/ming@ming/index.html"))) (failure-log . "server/built/fail/ming.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "de98049b22ce6f54abf813b3b16c4aa6d368753d") (checksum-error . #f) (collection . "ming") (conflicts . ()) (date-added . 1659526784) (dependencies . ("base" "scribble-lib" "sandbox-lib" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "名语言/Ming language，中文化的LISP编程语言/Lisp in Chinese。") (implies . ()) (modules . ((lib "ming/scribble.rkt") (lib "ming/scribblings/ming-lib/core.scrbl") (lib "ming/mapping/racket/base/others.rkt") (lib "ming/private/core.rkt") (lib "ming/private/mapping-lang.rkt") (lib "ming/scribblings/racket-lib.scrbl") (lib "ming/scribblings/ming-lib.scrbl") (lib "ming/scribblings/appendix.scrbl") (lib "ming/mapping/racket.rkt") (lib "ming/mapping/racket/base/procedures.rkt") (lib "ming/scribblings/racket-lib/single-level-data-types.scrbl") (lib "ming/mapping/racket/base/generic-numerics.rkt") (lib "ming/scribblings/prepare.scrbl") (lib "ming/scribblings/racket-lib/pairs-and-lists.scrbl") (lib "ming/mapping/ming/core.rkt") (lib "ming/private/match-files-in.rkt") (lib "ming/mapping/racket/base/pairs-and-lists.rkt") (lib "ming/scribblings/ming-lib/list.scrbl") (lib "ming/scribblings/racket-lib/numbers.scrbl") (lib "ming/racket/math.rkt") (lib "ming/private/mapping-files.rkt") (lib "ming/racket/base.rkt") (lib "ming/core.rkt") (lib "ming/scribblings/racket-lib/others.scrbl") (lib "ming/racket/list.rkt") (lib "ming/mapping/racket/list.rkt") (lib "ming/scribblings/preface.scrbl") (lib "ming/mapping/racket/base/syntax.rkt") (lib "ming/scribblings/ming.scrbl") (lib "ming/mapping/racket/math.rkt") (lib "ming/racket.rkt") (lib "ming/list.rkt") (lib "ming/mapping/racket/base/number-types.rkt") (lib "ming/mapping/racket/base/string.rkt") (lib "ming/mapping/racket/string.rkt") (lib "ming/mapping/racket/base/syntactic-forms.rkt") (lib "ming/racket/string.rkt") (lib "ming/scribblings/racket-lib/syntactic-forms.scrbl") (lib "ming/main.rkt") (lib "ming/scribblings/naming-rules.scrbl") (lib "ming/scribblings/racket-lib/string.scrbl") (lib "ming/scribblings/first-contact.scrbl") (lib "ming/mapping/racket/base.rkt"))) (name . "ming") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (chinese . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/ming.git") (tags . ("chinese" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "de98049b22ce6f54abf813b3b16c4aa6d368753d") (source . "https://github.com/yanyingwang/ming.git") (source_url . "https://github.com/yanyingwang/ming.git"))))))) ("mini-theme" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mini-theme" "doc/mini-theme@mini-theme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mini-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mini-theme.txt"))) (checksum . "0dc671679070aeaeebe1bf23b741d914bf5b8892") (checksum-error . #f) (collection . "mini-theme") (conflicts . ()) (date-added . 1610243211) (dependencies . ("base" "scribble-lib")) (description . "A minimal DrRacket theme") (implies . ()) (modules . ((lib "mini-theme/scribblings/mini-theme.scrbl"))) (name . "mini-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/mini-theme.git#develop") (tags . ("drracket-theme")) (versions . #hash((default . #hasheq((checksum . "0dc671679070aeaeebe1bf23b741d914bf5b8892") (source . "https://github.com/dannypsnl/mini-theme.git#develop") (source_url . "https://github.com/dannypsnl/mini-theme.git#develop"))))))) ("minikanren" . #hasheq((author . "asumu@ccs.neu.edu jhemann@umail.iu.edu") (authors . ("asumu@ccs.neu.edu" "jhemann@umail.iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "minikanren" "doc/minikanren@minikanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren.txt"))) (checksum . "34ca4936f0df0ca07c5869ef95ed10f82b9a879f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A Planet 2 package for minikanren") (implies . ()) (modules . ((lib "minikanren/minikanren.rkt") (lib "minikanren/minikanren.scrbl") (lib "minikanren/main.rkt"))) (name . "minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:jhemann@umail.iu.edu . #t) (logic . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/minikanren/tree/master") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "34ca4936f0df0ca07c5869ef95ed10f82b9a879f") (source . "github://github.com/takikawa/minikanren/master") (source_url . "http://github.com/takikawa/minikanren/tree/master"))))))) ("minikanren-ee" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren-ee.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren-ee.txt"))) (checksum . "f8e8e45fb1db72eefc91af327e93be02a7cd1324") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1561146929) (dependencies . ("base" "rackunit-lib" "ee-lib")) (description . "An embedded expander wrapper around faster-minikanren, offering better error messages and some automatic program transformations") (implies . ()) (modules . ((lib "minikanren-ee/main.rkt") (lib "minikanren-ee/private/syntax-classes.rkt") (lib "minikanren-ee/private/forms.rkt") (lib "minikanren-ee/test/local.rkt") (lib "minikanren-ee/private/env-rep.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-program-transformation.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren.rkt") (lib "minikanren-ee/mk/full-interp.rkt") (lib "minikanren-ee/mk/matche.rkt") (lib "minikanren-ee/test/test2.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-compile-time-errors.rkt") (lib "minikanren-ee/test/interposition.rkt") (lib "minikanren-ee/core.rkt") (lib "minikanren-ee/private/compile.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-macro.rkt") (lib "minikanren-ee/private/interface-macros.rkt") (lib "minikanren-ee/mk/numbers.rkt") (lib "minikanren-ee/private/expand.rkt") (lib "minikanren-ee/mk/main.rkt") (lib "minikanren-ee/private/runtime.rkt") (lib "minikanren-ee/mk/simple-interp.rkt") (lib "minikanren-ee/mk/mk.rkt") (lib "minikanren-ee/test/test1.rkt"))) (name . "minikanren-ee") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/minikanren-ee.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f8e8e45fb1db72eefc91af327e93be02a7cd1324") (source . "https://github.com/michaelballantyne/minikanren-ee.git") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git"))))))) ("minipascal" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minipascal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minipascal.txt"))) (checksum . "646c1cedefc3d269db43b9d186d892655d4efb78") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("ragg" "base" "parser-tools-lib" "base" "parser-tools-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "MiniPascal as a Racket language") (implies . ()) (modules . ((lib "minipascal/semantics-simple.rkt") (lib "minipascal/tests-medium/procedure-with-no-arguments.rkt") (lib "minipascal/tests-basic/negative-index-range.rkt") (lib "minipascal/tests-medium/procedure-with-two-arguments.rkt") (lib "minipascal/tests-basic/long-sum.rkt") (lib "minipascal/tests-medium/array-of-integer.rkt") (lib "minipascal/tests-basic/relational-operators.rkt") (lib "minipascal/tests-basic/fibonacci.rkt") (lib "minipascal/tests-medium/function-with-one-argument.rkt") (lib "minipascal/tests-basic/type-definitions2.rkt") (lib "minipascal/tests-fpc/fpc-test.rkt") (lib "minipascal/semantics.rkt") (lib "minipascal/compiler-simple.rkt") (lib "minipascal/compiler.rkt") (lib "minipascal/types.rkt") (lib "minipascal/experiments/terminal.rkt") (lib "minipascal/tests-medium/horner.rkt") (lib "minipascal/tests-basic/compound-statement.rkt") (lib "minipascal/lang/reader.rkt") (lib "minipascal/tests-basic/const-var-scope.rkt") (lib "minipascal/runtime.rkt") (lib "minipascal/tests-basic/gcd.rkt") (lib "minipascal/tests-medium/nested-functions.rkt") (lib "minipascal/tests-real/stackoverflow-primes.rkt") (lib "minipascal/tests-medium/strings.rkt") (lib "minipascal/tests-medium/array-with-char-index.rkt") (lib "minipascal/tests-real/primes.rkt") (lib "minipascal/tests-medium/hcf.rkt") (lib "minipascal/tests-medium/write-natural.rkt") (lib "minipascal/tests-basic/hello.rkt") (lib "minipascal/tests-basic/negative-constants.rkt") (lib "minipascal/tests-basic/arithmetic.rkt") (lib "minipascal/tests-basic/export-of-global-functions.rkt") (lib "minipascal/tests-medium/function-with-no-arguments.rkt") (lib "minipascal/tests-basic/lowhigh.rkt") (lib "minipascal/tests-basic/for-statement.rkt") (lib "minipascal/compiler-fpc.rkt") (lib "minipascal/tests-basic/type-definitions1.rkt") (lib "minipascal/tests-medium/array-of-char.rkt") (lib "minipascal/tests-basic/char.rkt") (lib "minipascal/tests-basic/constant-definitions.rkt") (lib "minipascal/tests-basic/boolean.rkt") (lib "minipascal/mini-pascal-grammar.rkt") (lib "minipascal/tests-basic/stdlib-chr.rkt") (lib "minipascal/tests-medium/function-with-two-arguments.rkt") (lib "minipascal/mini-pascal-lexer.rkt"))) (name . "minipascal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (compiler . #t) (language . #t) (pascal . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/minipascal/tree/master") (tags . ("compiler" "language" "pascal")) (versions . #hash((default . #hasheq((checksum . "646c1cedefc3d269db43b9d186d892655d4efb78") (source . "github://github.com/soegaard/minipascal/master") (source_url . "http://github.com/soegaard/minipascal/tree/master"))))))) ("misc1" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "misc1" "doc/misc1@misc1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/misc1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/misc1.txt"))) (checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "racket-doc" "unstable-lib" "unstable-doc" "scribble-lib")) (description . "Miscellaneous utilities collection.") (implies . ()) (modules . ((lib "misc1/dict.scrbl") (lib "misc1/syntax.scrbl") (lib "misc1/fast-channel.scrbl") (lib "misc1/misc1.scrbl") (lib "misc1/throw.scrbl") (lib "misc1/async.scrbl") (lib "misc1/syntax.rkt") (lib "misc1/locking.rkt") (lib "misc1/match.rkt") (lib "misc1/throw.rkt") (lib "misc1/dict.rkt") (lib "misc1/fast-channel.rkt") (lib "misc1/evt.scrbl") (lib "misc1/list.rkt") (lib "misc1/locking.scrbl") (lib "misc1/list.scrbl") (lib "misc1/async.rkt") (lib "misc1/evt.rkt") (lib "misc1/match.scrbl"))) (name . "misc1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-misc1/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (source . "github://github.com/mordae/racket-misc1/master") (source_url . "http://github.com/mordae/racket-misc1/tree/master"))))))) ("mischief" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mischief" "doc/mischief@mischief/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief.txt") (test-failure-log . "server/built/test-fail/mischief.txt") (test-success-log . #f))) (checksum . "c6f95a774b60950cabd7238e639f7e5f0d8737cd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit") (implies . ()) (modules . ((lib "mischief/stylish.rkt") (lib "mischief/scope.rkt") (lib "mischief/symbol.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/modular.scrbl") (lib "mischief/values.rkt") (lib "mischief/define.rkt") (lib "mischief/string.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "debug/syntax.rkt") (lib "mischief/stylish/print-style.rkt") (lib "mischief/sort.rkt") (lib "debug/racket/base.rkt") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/module.rkt") (lib "mischief/stepper.rkt") (lib "mischief/error.rkt") (lib "mischief/stylish/expression.rkt") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/keyword.rkt") (lib "debug/mischief.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/id-table.rkt") (lib "mischief/memoize.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/explode.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "mischief/function.rkt") (lib "mischief/contract.rkt") (lib "mischief/for.rkt") (lib "mischief/private/render-expression.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/place.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/json.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/scribblings/datatypes.scrbl") (lib "no-debug/main.rkt") (lib "mischief/transform.rkt") (lib "mischief/quotation.rkt") (lib "no-debug/racket/base.rkt") (lib "mischief/lang/runtime.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "debug/racket.rkt") (lib "mischief/examples.rkt") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/debug.scrbl") (lib "no-debug/syntax.rkt") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "mischief/scribblings/scope.scrbl") (lib "debug/main.rkt") (lib "mischief/web.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/parse.rkt") (lib "mischief/maybe.rkt") (lib "mischief/lang/reader.rkt") (lib "no-debug/low-level.rkt") (lib "debug/low-level.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/discrim.rkt") (lib "mischief/require.rkt") (lib "mischief/list.rkt") (lib "no-debug/mischief.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "mischief/visitor.rkt") (lib "mischief/private/reify-value.rkt") (lib "mischief/dye-pack.rkt") (lib "no-debug/racket.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "debug/racket/lang/reader.rkt") (lib "debug/provide.rkt") (lib "mischief/dict.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/tests/stylish.rkt") (lib "mischief/stream.rkt") (lib "mischief/stylish/print.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/main.rkt") (lib "mischief/phrase.rkt") (lib "mischief/boolean.rkt"))) (name . "mischief") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/carl-eastlund/mischief/tree/stable") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "c6f95a774b60950cabd7238e639f7e5f0d8737cd") (source . "github://github.com/carl-eastlund/mischief/stable") (source_url . "http://github.com/carl-eastlund/mischief/tree/stable"))))))) ("mischief-dev" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "mischief" "doc/mischief@mischief-dev/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief-dev.txt") (test-failure-log . "server/built/test-fail/mischief-dev.txt") (test-success-log . #f))) (checksum . "ce58c3170240f12297e2f98475f53c9514225825") (checksum-error . #f) (collection . (multi)) (conflicts . ("mischief")) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit [development branch]") (implies . ()) (modules . ((lib "mischief/stylish.rkt") (lib "mischief/scope.rkt") (lib "mischief/symbol.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/modular.scrbl") (lib "mischief/values.rkt") (lib "mischief/define.rkt") (lib "mischief/string.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "debug/syntax.rkt") (lib "mischief/stylish/print-style.rkt") (lib "mischief/sort.rkt") (lib "debug/racket/base.rkt") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/module.rkt") (lib "mischief/stepper.rkt") (lib "mischief/error.rkt") (lib "mischief/stylish/expression.rkt") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/keyword.rkt") (lib "debug/mischief.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/id-table.rkt") (lib "mischief/memoize.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/explode.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "mischief/function.rkt") (lib "mischief/contract.rkt") (lib "mischief/for.rkt") (lib "mischief/private/render-expression.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/place.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/json.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/scribblings/datatypes.scrbl") (lib "no-debug/main.rkt") (lib "mischief/transform.rkt") (lib "mischief/quotation.rkt") (lib "no-debug/racket/base.rkt") (lib "mischief/lang/runtime.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "debug/racket.rkt") (lib "mischief/examples.rkt") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/debug.scrbl") (lib "no-debug/syntax.rkt") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "mischief/scribblings/scope.scrbl") (lib "debug/main.rkt") (lib "mischief/web.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/parse.rkt") (lib "mischief/maybe.rkt") (lib "mischief/lang/reader.rkt") (lib "no-debug/low-level.rkt") (lib "debug/low-level.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/discrim.rkt") (lib "mischief/require.rkt") (lib "mischief/list.rkt") (lib "no-debug/mischief.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "mischief/visitor.rkt") (lib "mischief/private/reify-value.rkt") (lib "mischief/dye-pack.rkt") (lib "no-debug/racket.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "debug/racket/lang/reader.rkt") (lib "debug/provide.rkt") (lib "mischief/dict.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/tests/stylish.rkt") (lib "mischief/stream.rkt") (lib "mischief/stylish/print.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/main.rkt") (lib "mischief/phrase.rkt") (lib "mischief/boolean.rkt"))) (name . "mischief-dev") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:2 . #t) (syntax . #t))) (source . "http://github.com/carl-eastlund/mischief/tree/master") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "ce58c3170240f12297e2f98475f53c9514225825") (source . "github://github.com/carl-eastlund/mischief/master") (source_url . "http://github.com/carl-eastlund/mischief/tree/master"))))))) ("mixfix" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mixfix" "doc/mixfix@mixfix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mixfix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mixfix.txt"))) (checksum . "2303684161d37ff337be6b47a0240b70fd69758c") (checksum-error . #f) (collection . "mixfix") (conflicts . ()) (date-added . 1615496468) (dependencies . ("base" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Mixfix for Racket") (implies . ()) (modules . ((lib "mixfix/tests/macro-precedence.rkt") (lib "mixfix/tests/form.rkt") (lib "mixfix/tests/scope.rkt") (lib "mixfix/tests/id-macro-head.rkt") (lib "mixfix/main.rkt") (lib "mixfix/tests/import-order.rkt") (lib "mixfix/tests/partial-expansion.rkt") (lib "mixfix/scribblings/mixfix.scrbl"))) (name . "mixfix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (mixfix . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/mixfix.git") (tags . ("mixfix")) (versions . #hash((default . #hasheq((checksum . "2303684161d37ff337be6b47a0240b70fd69758c") (source . "https://github.com/sorawee/mixfix.git") (source_url . "https://github.com/sorawee/mixfix.git"))))))) ("mk" . #hasheq((author . "mvc@iu.edu") (authors . ("mvc@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mk.txt"))) (checksum . "a01b4ee787e7889b9f226d954d932f9770c0ba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1575410721) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "mk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:mvc@iu.edu . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/WeixiMa/mk.git") (tags . ("miniKanren")) (versions . #hash((default . #hasheq((checksum . "a01b4ee787e7889b9f226d954d932f9770c0ba1d") (source . "https://github.com/WeixiMa/mk.git") (source_url . "https://github.com/WeixiMa/mk.git"))))))) ("mm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mm.txt"))) (checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "rackunit-chk")) (description . "an environment for exploring memory management") (implies . ()) (modules . ((lib "mm/tests/collectors/mark-and-sweep.rkt") (lib "mm/compiler.rkt") (lib "mm/runtime.rkt") (lib "mm/tests/all.rkt") (lib "mm/tests/suite.rkt") (lib "mm/heap.rkt") (lib "mm/tests/collectors/stop-and-copy.rkt") (lib "mm/main.rkt") (lib "mm/collector.rkt") (lib "mm/tests/collectors/infinite.rkt") (lib "mm/tests/collectors/generic-ms.rkt") (lib "mm/heap-gui.rkt") (lib "mm/id-table.rkt") (lib "mm/ast.rkt"))) (name . "mm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (textbook . #t))) (source . "http://github.com/jeapostrophe/mm/tree/master") (tags . ("textbook")) (versions . #hash((default . #hasheq((checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (source . "git://github.com/jeapostrophe/mm") (source_url . "http://github.com/jeapostrophe/mm/tree/master"))))))) ("mmap" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mmap.txt"))) (checksum . "8ead18bc73fa629ae352471c63a7b0847b18fb3f") (checksum-error . #f) (collection . "mmap") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Wrapper for the system mmap() function") (implies . ()) (modules . ((lib "mmap/main.rkt"))) (name . "mmap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (mmap . #t) (process . #t) (ring:1 . #t))) (source . "http://github.com/samth/mmap/tree/master") (tags . ("mmap" "process")) (versions . #hash((default . #hasheq((checksum . "8ead18bc73fa629ae352471c63a7b0847b18fb3f") (source . "git://github.com/samth/mmap") (source_url . "http://github.com/samth/mmap/tree/master"))))))) ("mobilpay" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mobilpay.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mobilpay.txt"))) (checksum . "0c75ab1a28c834035fb1d661e3e0390338b9f34a") (checksum-error . #f) (collection . "mobilpay") (conflicts . ()) (date-added . 1561027335) (dependencies . ("base" "crypto-lib" "gregor-lib" "rackunit-lib")) (description . "A barebones implementation of mobilpay's credit card ordering interface in Racket.") (implies . ()) (modules . ((lib "mobilpay/main.rkt"))) (name . "mobilpay") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (payment-gateway . #t) (payments . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/mobilpay.git") (tags . ("payment-gateway" "payments" "web")) (versions . #hash((default . #hasheq((checksum . "0c75ab1a28c834035fb1d661e3e0390338b9f34a") (source . "https://github.com/Bogdanp/mobilpay.git") (source_url . "https://github.com/Bogdanp/mobilpay.git"))))))) ("mock" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock" "doc/mock@mock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "mock") (conflicts . ()) (dependencies . ("arguments" "base" "fancy-app" "reprovide-lang" "racket-doc" "scribble-lib" "sweet-exp")) (description . "A library for creating test mocks") (implies . ("arguments")) (modules . ((lib "mock/private/util.rkt") (lib "mock/private/base.rkt") (lib "mock/private/syntax.scrbl") (lib "mock/private/history.rkt") (lib "mock/private/syntax-param.rkt") (lib "mock/private/function.scrbl") (lib "mock/private/stub.scrbl") (lib "mock/private/syntax-util.rkt") (lib "mock/main.scrbl") (lib "mock/private/opaque.scrbl") (lib "mock/private/syntax-test.rkt") (lib "mock/private/base.scrbl") (lib "mock/private/syntax.rkt") (lib "mock/private/reference.scrbl") (lib "mock/private/function.rkt") (lib "mock/private/not-implemented.rkt") (lib "mock/private/util-doc.rkt") (lib "mock/private/opaque.rkt") (lib "mock/private/stub.rkt") (lib "mock/private/history.scrbl") (lib "mock/private/guide.scrbl") (lib "mock/private/stub-class.rkt") (lib "mock/private/syntax-class.rkt") (lib "mock/main.rkt"))) (name . "mock") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jackfirth/racket-mock/tree/master?path=mock") (tags . ("mock" "testing")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=mock") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock"))))))) ("mock-rackunit" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock-rackunit" "doc/mock-rackunit@mock-rackunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock-rackunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock-rackunit.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "mock") (conflicts . ()) (dependencies . ("base" "mock" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib" "sweet-exp")) (description . "RackUnit checks for testing with mocks from the mock package") (implies . ()) (modules . ((lib "mock/rackunit.scrbl") (lib "mock/rackunit.rkt"))) (name . "mock-rackunit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jackfirth/racket-mock/tree/master?path=mock-rackunit") (tags . ("mock" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=mock-rackunit") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock-rackunit"))))))) ("mockfighter" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mockfighter.txt") (docs . (("main" "mockfighter" "doc/mockfighter@mockfighter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mockfighter.txt") (test-failure-log . "server/built/test-fail/mockfighter.txt") (test-success-log . #f))) (checksum . "63906eff874e90644725dbff5365889d959e2294") (checksum-error . #f) (collection . "mockfighter") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "stockfighter-racket" "scribble-lib" "racket-doc")) (description . "Stockfighter-like API for a limit order exchange") (implies . ()) (modules . ((lib "mockfighter/utils.rkt") (lib "mockfighter/mm.rkt") (lib "mockfighter/server.rkt") (lib "mockfighter/main.rkt") (lib "mockfighter/server-test.rkt") (lib "mockfighter/venue.rkt") (lib "mockfighter/scribblings/mockfighter.scrbl") (lib "mockfighter/matching-engine.rkt") (lib "mockfighter/websocket-test.rkt") (lib "mockfighter/noise-trader.rkt") (lib "mockfighter/game-master.rkt") (lib "mockfighter/orderbook.rkt") (lib "mockfighter/retail-trader.rkt"))) (name . "mockfighter") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (finance . #t) (ring:1 . #t) (stockfighter . #t))) (source . "http://github.com/eu90h/mockfighter/tree/master") (tags . ("finance" "stockfighter")) (versions . #hash((default . #hasheq((checksum . "63906eff874e90644725dbff5365889d959e2294") (source . "git://github.com/eu90h/mockfighter") (source_url . "http://github.com/eu90h/mockfighter/tree/master"))))))) ("mode-lambda" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mode-lambda" "doc/mode-lambda@mode-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mode-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mode-lambda.txt"))) (checksum . "64b5ae81f457ded7664458cd9935ce7d3ebfc449") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-lib" "scheme-lib" "web-server-lib" "lux" "reprovide-lang-lib" "base" "srfi-lite-lib" "draw-lib" "opengl" "htdp-lib" "pict-lib" "draw-lib" "draw-doc" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "2d sprite-based graphics engine") (implies . ()) (modules . ((lib "mode-lambda/korf-bin.rkt") (lib "mode-lambda/text/static.rkt") (lib "mode-lambda/examples/quick.rkt") (lib "mode-lambda/examples/text.rkt") (lib "mode-lambda/util.rkt") (lib "mode-lambda/backend/software.rkt") (lib "mode-lambda/examples/transparency/open-gl-issue.rkt") (lib "mode-lambda/backend/software/2d-hash.rkt") (lib "mode-lambda/backend/gl.rkt") (lib "mode-lambda/examples/jens.rkt") (lib "mode-lambda/sprite-index.rkt") (lib "mode-lambda/scribblings/mode-lambda.scrbl") (lib "mode-lambda/backend/lib.rkt") (lib "mode-lambda/backend/gl/util.rkt") (lib "mode-lambda/examples/one.rkt") (lib "mode-lambda/color.rkt") (lib "mode-lambda/main.rkt") (lib "mode-lambda/static.rkt") (lib "mode-lambda/scribblings/backend-gl.scrbl") (lib "mode-lambda/shot.rkt") (lib "mode-lambda/scribblings/backend-software.scrbl") (lib "mode-lambda/text/runtime.rkt") (lib "mode-lambda/text.rkt") (lib "mode-lambda/core.rkt"))) (name . "mode-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/mode-lambda/tree/master") (tags . ("graphics" "OpenGL")) (versions . #hash((default . #hasheq((checksum . "64b5ae81f457ded7664458cd9935ce7d3ebfc449") (source . "git://github.com/jeapostrophe/mode-lambda") (source_url . "http://github.com/jeapostrophe/mode-lambda/tree/master"))))))) ("mojilang" . #hasheq((author . "a11ce@protonmail.com") (authors . ("a11ce@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mojilang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mojilang.txt"))) (checksum . "895709fc4c46a8f366034497f2cadc3ae97d1c09") (checksum-error . #f) (collection . "esAsm") (conflicts . ()) (date-added . 1634858540) (dependencies . ("base" "esAsm" "parser-tools-lib")) (description . "") (implies . ()) (modules . ((lib "esAsm/mojilang/parser.rkt") (lib "esAsm/mojilang/lang/reader.rkt"))) (name . "mojilang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:a11ce@protonmail.com . #t) (ring:1 . #t))) (source . "https://github.com/a11ce/esAsm.git?path=mojilang") (tags . ()) (versions . #hash((default . #hasheq((checksum . "895709fc4c46a8f366034497f2cadc3ae97d1c09") (source . "https://github.com/a11ce/esAsm.git?path=mojilang") (source_url . "https://github.com/a11ce/esAsm.git?path=mojilang"))))))) ("molis-hai" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "molis-hai" "doc/molis-hai@molis-hai/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/molis-hai.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/molis-hai.txt"))) (checksum . "6a335ec73c144f9d8ac538752ca8e6fd0b3b3cce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "web-server-lib" "pfds" "rackunit-lib" "racket-doc")) (description . "This package includes the code associated with my Dickens-based (or any-corpus-based) password generator, Molis Hai. See also http://www.brinckerhoff.org/molis-hai/pwgen.html") (implies . ()) (modules . ((lib "molis-hai/json-read-write.rkt") (lib "molis-hai/paper/pr-slides.rkt") (lib "molis-hai/word-frequency.rkt") (lib "molis-hai/pw-chars.rkt") (lib "molis-hai/soups-paper/pr-slides.rkt") (lib "molis-hai/huffman-encode-decode.rkt") (lib "molis-hai/huffman.rkt") (lib "molis-hai/experimental/unicode-scrub-lib.rkt") (lib "molis-hai/experimental/extract-crime-and-punishment-text.rkt") (lib "molis-hai/model-comparison.rkt") (lib "molis-hai/user-study-2016/log-analysis.rkt") (lib "molis-hai/js-model/generate-pages.rkt") (lib "molis-hai/experimental/enumeration.rkt") (lib "molis-hai/example-model.rkt") (lib "molis-hai/user-study-2016/delayed-recall.rkt") (lib "molis-hai/user-study-2016/levenshtein-words-paths.rkt") (lib "molis-hai/user-study-2016/string-editing.rkt") (lib "molis-hai/use-model.rkt") (lib "molis-hai/word-model.rkt") (lib "molis-hai/user-study-2016/example-passwords.rkt") (lib "molis-hai/letter-frequency.rkt") (lib "molis-hai/pronounce3.rkt") (lib "molis-hai/user-study-2016/fingerprints.rkt") (lib "molis-hai/molis-hai.scrbl") (lib "molis-hai/cmd-line.rkt") (lib "molis-hai/inverse-mapping.rkt") (lib "molis-hai/user-study-2016/anonymize-log.rkt") (lib "molis-hai/shared-types.rkt") (lib "molis-hai/char-model.rkt") (lib "molis-hai/paper/bib.rkt") (lib "molis-hai/user-study-2016/levenshtein-paths.rkt") (lib "molis-hai/paper/paper.scrbl") (lib "molis-hai/soups-paper/bib.rkt") (lib "molis-hai/user-study-2016/table.rkt") (lib "molis-hai/random-bits.rkt") (lib "molis-hai/user-study-2016/research-protocol.scrbl") (lib "molis-hai/user-study-2016/pre-registration.scrbl") (lib "molis-hai/experimental/unicode-scrub.rkt") (lib "molis-hai/build-model.rkt") (lib "molis-hai/random-password.rkt") (lib "molis-hai/user-study-2016/best-fit.rkt") (lib "molis-hai/huffman-convert.rkt") (lib "molis-hai/soups-paper/paper.scrbl") (lib "molis-hai/experimental/sent-email-text-extraction.rkt"))) (name . "molis-hai") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Dickens . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t) (security . #t))) (source . "git://github.com/jbclements/molis-hai/") (tags . ("Dickens" "security")) (versions . #hash((default . #hasheq((checksum . "6a335ec73c144f9d8ac538752ca8e6fd0b3b3cce") (source . "git://github.com/jbclements/molis-hai/") (source_url . "git://github.com/jbclements/molis-hai/"))))))) ("monad" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monad.txt"))) (checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A generic/polymorphic monad library for Racket.") (implies . ()) (modules . ((lib "monad/io.rkt") (lib "monad/state.rkt") (lib "monad/examples/example.rkt") (lib "monad/main.rkt"))) (name . "monad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (io . #t) (monad . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-monad/tree/master") (tags . ("io" "monad")) (versions . #hash((default . #hasheq((checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (source . "github://github.com/tonyg/racket-monad/master") (source_url . "http://github.com/tonyg/racket-monad/tree/master"))))))) ("mongodb" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mongodb" "doc/mongodb@mongodb/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mongodb.txt") (test-failure-log . "server/built/test-fail/mongodb.txt") (test-success-log . #f))) (checksum . "4fbeb1a577ff9a1b8274045a5741d6670d555ac7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "web-server-lib" "srfi-lite-lib" "eli-tester" "racket-doc" "scribble-lib" "srfi-doc" "web-server-doc")) (description . "A native Racket interface to MongoDB & BSON") (implies . ()) (modules . ((lib "tests/db/mongodb/basic.rkt") (lib "net/bson/binio.rkt") (lib "tests/db/mongodb/wire.rkt") (lib "tests/net/bson.rkt") (lib "net/bson/write.rkt") (lib "db/mongodb/wire/driver.rkt") (lib "db/mongodb/orm/struct.rkt") (lib "net/bson.rkt") (lib "db/mongodb/orm/dict.rkt") (lib "net/bson/shared.rkt") (lib "db/mongodb.rkt") (lib "tests/db/mongodb/orm.rkt") (lib "net/bson/mapping.rkt") (lib "db/mongodb/basic/main.rkt") (lib "net/bson/read.rkt") (lib "db/mongodb/basic/driver.rkt") (lib "tests/db/mongodb/quick-start.rkt") (lib "db/mongodb/orm/main.rkt") (lib "net/bson/driver.rkt") (lib "db/mongodb/wire/format.rkt") (lib "db/mongodb/seq.rkt") (lib "db/mongodb/mongodb.scrbl") (lib "db/mongodb/wire/main.rkt") (lib "web-server/dispatch/mongodb.rkt") (lib "tests/db/mongodb/util.rkt"))) (name . "mongodb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/mongodb/tree/master") (tags . ("db" "net")) (versions . #hash((default . #hasheq((checksum . "4fbeb1a577ff9a1b8274045a5741d6670d555ac7") (source . "github://github.com/jeapostrophe/mongodb/master") (source_url . "http://github.com/jeapostrophe/mongodb/tree/master"))))))) ("monitors" . #hasheq((author . "samc@ccs.neu.edu") (authors . ("samc@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "monitors" "doc/monitors@monitors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monitors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monitors.txt"))) (checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (checksum-error . #f) (collection . "monitors") (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Java style monitors for Racket objects") (implies . ()) (modules . ((lib "monitors/main.rkt") (lib "monitors/monitor.rkt") (lib "monitors/scribblings/monitors.scrbl"))) (name . "monitors") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samc@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t))) (source . "http://github.com/howell/monitors/tree/master") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (source . "git://github.com/howell/monitors") (source_url . "http://github.com/howell/monitors/tree/master"))))))) ("monotonic" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "monotonic" "doc/monotonic@monotonic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monotonic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monotonic.txt"))) (checksum . "4d2271f47d3c40e121afec4afc37de8adb4cf773") (checksum-error . #f) (collection . "monotonic") (conflicts . ()) (date-added . 1581537372) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Monotonic time for Racket.") (implies . ()) (modules . ((lib "monotonic/monotonic.scrbl") (lib "monotonic/windows.rkt") (lib "monotonic/posix.rkt") (lib "monotonic/cs.rkt") (lib "monotonic/main.rkt") (lib "monotonic/macos.rkt"))) (name . "monotonic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (clock . #t) (monotonic . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/Bogdanp/racket-monotonic.git") (tags . ("clock" "monotonic" "time")) (versions . #hash((default . #hasheq((checksum . "4d2271f47d3c40e121afec4afc37de8adb4cf773") (source . "https://github.com/Bogdanp/racket-monotonic.git") (source_url . "https://github.com/Bogdanp/racket-monotonic.git"))))))) ("mordae" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mordae.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mordae.txt"))) (checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "racket-doc" "typed-racket-lib")) (description . "Personal utilities, do not use directly!") (implies . ()) (modules . ((lib "mordae/syntax.rkt") (lib "mordae/match.rkt") (lib "mordae/async.rkt") (lib "mordae/evt.rkt"))) (name . "mordae") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-mordae/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (source . "git://github.com/mordae/racket-mordae") (source_url . "http://github.com/mordae/racket-mordae/tree/master"))))))) ("morsel-doc" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "morsel" "doc/morsel@morsel-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/morsel-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/morsel-doc.txt"))) (checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (checksum-error . #f) (collection . "morsel-doc") (conflicts . ()) (date-added . 1578075083) (dependencies . ("base" "morsel-lib" "scribble-lib" "racket-doc" "doc-coverage")) (description . "documentation for morsel-lib") (implies . ()) (modules . ((lib "morsel-doc/racket.rkt") (lib "morsel-doc/doc-coverage.rkt") (lib "morsel-doc/morsel.scrbl"))) (name . "morsel-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:default.kramer@gmail.com . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/default-kramer/morsel.git?path=morsel-doc") (tags . ("tests")) (versions . #hash((default . #hasheq((checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (source . "https://github.com/default-kramer/morsel.git?path=morsel-doc") (source_url . "https://github.com/default-kramer/morsel.git?path=morsel-doc"))))))) ("morsel-lib" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/morsel-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/morsel-lib.txt"))) (checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (checksum-error . #f) (collection . "morsel-lib") (conflicts . ()) (date-added . 1578074967) (dependencies . ("base" "rackunit-lib")) (description . "core of Plisqin") (implies . ()) (modules . ((lib "morsel-lib/private/essence/pass-injections.rkt") (lib "morsel-lib/private/sql/clauses.rkt") (lib "morsel-lib/private/sql/sql-token.rkt") (lib "morsel-lib/main.rkt") (lib "morsel-lib/private/essence/pass.rkt") (lib "morsel-lib/private/essence/pass-targeted-joins.rkt") (lib "morsel-lib/private/util.rkt") (lib "morsel-lib/sql.rkt") (lib "morsel-lib/private/essence/pass-join-on-joins.rkt") (lib "morsel-lib/private/essence/from.rkt") (lib "morsel-lib/private/sql/dialect.rkt") (lib "morsel-lib/private/essence/model.rkt") (lib "morsel-lib/private/sql/render.rkt") (lib "morsel-lib/private/_essence.rkt") (lib "morsel-lib/private/sql/to-sql.rkt") (lib "morsel-lib/private/essence/base-query-printer.rkt") (lib "morsel-lib/private/essence/content.rkt") (lib "morsel-lib/sql/dialect.rkt"))) (name . "morsel-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:default.kramer@gmail.com . #t) (db . #t) (ring:1 . #t) (sql . #t) (tabular . #t))) (source . "https://github.com/default-kramer/morsel.git?path=morsel-lib") (tags . ("db" "sql" "tabular")) (versions . #hash((default . #hasheq((checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (source . "https://github.com/default-kramer/morsel.git?path=morsel-lib") (source_url . "https://github.com/default-kramer/morsel.git?path=morsel-lib"))))))) ("mosquitto-ffi" . #hasheq((author . "bartbes+racket@gmail.com") (authors . ("bartbes+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mosquitto-ffi.txt") (test-failure-log . "server/built/test-fail/mosquitto-ffi.txt") (test-success-log . #f))) (checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (checksum-error . #f) (collection . "mosquitto") (conflicts . ()) (dependencies . ("base")) (description . "An FFI binding of libmosquitto for racket") (implies . ()) (modules . ((lib "mosquitto/main.rkt") (lib "mosquitto/api.rkt"))) (name . "mosquitto-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bartbes+racket@gmail.com . #t) (ffi . #t) (mosquitto . #t) (ring:1 . #t))) (source . "http://github.com/bartbes/mosquitto-racket/tree/master") (tags . ("ffi" "mosquitto")) (versions . #hash((default . #hasheq((checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (source . "git://github.com/bartbes/mosquitto-racket") (source_url . "http://github.com/bartbes/mosquitto-racket/tree/master"))))))) ("mox" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "mox"))) (failure-log . "server/built/fail/mox.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1e6870b20beade246bbd24ae22ca7c3ac4f3248d") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1603469404) (dependencies . ("base" "digimon" "w3s" "typed-racket-lib" "typed-racket-more" "scribble-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "graphics")) (description . "Open XML for Microsoft Office") (implies . ()) (modules . ((lib "mox/digitama/scribble/docx/app.rkt") (lib "mox/digitama/scribble/shared/render.rkt") (lib "mox/digitama/scribble/package/content.type.rkt") (lib "mox/digitama/scribble/package/relationship.rkt") (lib "mox/digitama/scribble/docx/metainfo.rkt") (lib "mox/scribble.rkt") (lib "mox/digitama/scribble/package/core.rkt") (lib "mox/digivice/devimon/parameter.rkt") (lib "mox/tamer/xlsx.rkt") (lib "mox/digitama/scribble/shared/typed/scribble.rkt") (lib "mox/tamer/scribble/docx.scrbl") (lib "mox/digitama/scribble/docx/misc.rkt") (lib "mox/digitama/css/datatype.rkt") (lib "mox/digitama/drawing/theme.rkt") (lib "mox/digivice/iana.rkt") (lib "mox/digitama/scribble/docx/style.rkt") (lib "mox/tamer/StormEvents.rkt") (lib "mox/digitama/scribble/docx/package.rkt") (lib "mox/digitama/scribble/docx.rkt") (lib "mox/tamer/ooxml.rkt") (lib "mox/digitama/scribble/xlsx/metainfo.rkt") (lib "mox/tamer/docx.rkt") (lib "mox/digitama/moxml.rkt") (lib "mox/digivice/devimon/format/docx.rkt") (lib "mox/xlsx.rkt") (lib "mox/digitama/scribble/docx/story/document.rkt") (lib "mox/digitama/drawing/moxml.rkt") (lib "mox/digivice/devimon/format/xlsx.rkt") (lib "mox/tamer/recognizer.rkt") (lib "mox/digitama/docx/moxml.rkt") (lib "mox/digitama/scribble/pptx/metainfo.rkt") (lib "mox/digitama/scribble/package/standards.rkt") (lib "mox/tamer/mox.scrbl") (lib "mox/docx-render.rkt") (lib "mox/digitama/scribble/docx/datatype.rkt") (lib "mox/docx.rkt") (lib "mox/digitama/shared/moxml.rkt") (lib "mox/digitama/package.rkt") (lib "mox/tamer/theme.rkt") (lib "mox/digitama/scribble/shared/scribble.rkt") (lib "mox/digivice/devimon.rkt") (lib "mox/digitama/scribble/package/xmlns.rkt") (lib "mox/digivice/devimon/format.rkt") (lib "mox/digitama/xlsx/moxml.rkt") (lib "mox/digitama/scribble/package/partname.rkt") (lib "mox/digitama/shared/property.rkt"))) (name . "mox") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (office . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t) (xml . #t))) (source . "https://github.com/wargrey/mox.git") (tags . ("office" "typed-racket" "unstable" "xml")) (versions . #hash((default . #hasheq((checksum . "1e6870b20beade246bbd24ae22ca7c3ac4f3248d") (source . "https://github.com/wargrey/mox.git") (source_url . "https://github.com/wargrey/mox.git"))))))) ("mred-designer" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mred-designer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mred-designer.txt"))) (checksum . "f88e45905dc0fcb13fa327d9b39a47444384921e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "planet-lib" "rackunit-lib")) (description . "A WYSIWYG GUI generator for Racket") (implies . ()) (modules . ((lib "mred-designer/widgets/choice/widget.rkt") (lib "mred-designer/main.rkt") (lib "mred-designer/widgets/canvas/widget.rkt") (lib "mred-designer/property-widgets.rkt") (lib "mred-designer/property-frame.rkt") (lib "mred-designer/widgets/menu-item/widget.rkt") (lib "mred-designer/code-generation.rkt") (lib "mred-designer/widgets/radio-box/widget.rkt") (lib "mred-designer/widgets/horizontal-pane/widget.rkt") (lib "mred-designer/tests/mred-designer.rkt") (lib "mred-designer/edit-list.rkt") (lib "mred-designer/widgets/project/preview.rkt") (lib "mred-designer/mred-id.rkt") (lib "mred-designer/mred-plugin.rkt") (lib "mred-designer/template-load.rkt") (lib "mred-designer/widgets/project/widget.rkt") (lib "mred-designer/widgets/text-field/widget.rkt") (lib "mred-designer/widgets/frame/widget.rkt") (lib "mred-designer/controller.rkt") (lib "mred-designer/widgets/message/widget.rkt") (lib "mred-designer/widgets/separator-menu-item/widget.rkt") (lib "mred-designer/widgets/button/widget.rkt") (lib "mred-designer/default-values.rkt") (lib "mred-designer/templates.rkt") (lib "mred-designer/widgets/dialog/widget.rkt") (lib "mred-designer/widgets/combo-field/widget.rkt") (lib "mred-designer/widgets.rkt") (lib "mred-designer/widgets/vertical-pane/widget.rkt") (lib "mred-designer/widgets/frame/preview.rkt") (lib "mred-designer/widgets/horizontal-panel/widget.rkt") (lib "mred-designer/tooltip.rkt") (lib "mred-designer/widgets/menu/widget.rkt") (lib "mred-designer/widgets/panel/widget.rkt") (lib "mred-designer/widgets/gauge/widget.rkt") (lib "mred-designer/widgets/slider/widget.rkt") (lib "mred-designer/misc.rkt") (lib "mred-designer/widgets/menu-bar/widget.rkt") (lib "mred-designer/widgets/tab/widget.rkt") (lib "mred-designer/widgets/list-box/widget.rkt") (lib "mred-designer/widgets/group-box-panel/widget.rkt") (lib "mred-designer/code-write.rkt") (lib "mred-designer/widgets/pane/widget.rkt") (lib "mred-designer/preview-widgets.rkt") (lib "mred-designer/toolbox-frame.rkt") (lib "mred-designer/project-manager.rkt") (lib "mred-designer/plugin.rkt") (lib "mred-designer/widgets/editor-canvas/widget.rkt") (lib "mred-designer/widgets/tab-panel/widget.rkt") (lib "mred-designer/help.rkt") (lib "mred-designer/hierarchy-frame.rkt") (lib "mred-designer/widgets/grow-box-spacer-pane/widget.rkt") (lib "mred-designer/widgets/check-box/widget.rkt") (lib "mred-designer/widgets/vertical-panel/widget.rkt") (lib "mred-designer/properties.rkt"))) (name . "mred-designer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/Metaxal/MrEd-Designer/tree/master") (tags . ("dev" "gui")) (versions . #hash((default . #hasheq((checksum . "f88e45905dc0fcb13fa327d9b39a47444384921e") (source . "git://github.com/Metaxal/MrEd-Designer") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master"))))))) ("msgpack" . #hasheq((author . "hiphish@posteo.de hiphish@openmailbox.org") (authors . ("hiphish@posteo.de" "hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "msgpack" "doc/msgpack@msgpack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/msgpack.txt") (test-failure-log . "server/built/test-fail/msgpack.txt") (test-success-log . #f))) (checksum . "64a60986b149703ff9436877da1dd3e86c6e4094") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "quickcheck" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of the MessagePack protocol.") (implies . ()) (modules . ((lib "msgpack/test/pack/boolean.rkt") (lib "msgpack/ext.rkt") (lib "msgpack/test/pack/integers.rkt") (lib "msgpack/test/unpack/float.rkt") (lib "msgpack/test/unpack/nil.rkt") (lib "msgpack/test/pack/string.rkt") (lib "msgpack/test/unpack/integers.rkt") (lib "msgpack/test/unpack/map.rkt") (lib "msgpack/pack.rkt") (lib "msgpack/unpack.rkt") (lib "msgpack/test/ext.rkt") (lib "msgpack/test/unpack/binary.rkt") (lib "msgpack/test/unpack/extension.rkt") (lib "msgpack/test/pack/binary.rkt") (lib "msgpack/test/unpack/array.rkt") (lib "msgpack/test/pack/extension.rkt") (lib "msgpack/test/pack/float.rkt") (lib "msgpack/test/pack/nil.rkt") (lib "msgpack/packable.rkt") (lib "msgpack/test/unpack/string.rkt") (lib "msgpack/test/unpack/boolean.rkt") (lib "msgpack/test/pack/array.rkt") (lib "msgpack/scribblings/msgpack.scrbl") (lib "msgpack/test/pack/map.rkt") (lib "msgpack/main.rkt"))) (name . "msgpack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (author:hiphish@posteo.de . #t) (binary . #t) (messagepack . #t) (msgpack . #t) (protocol . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (tags . ("binary" "messagepack" "msgpack" "protocol")) (versions . #hash((default . #hasheq((checksum . "64a60986b149703ff9436877da1dd3e86c6e4094") (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (source_url . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack"))))))) ("msgpack-rpc" . #hasheq((author . "wbthomason@cs.cornell.edu") (authors . ("wbthomason@cs.cornell.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "msgpack-rpc" "doc/msgpack-rpc@msgpack-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/msgpack-rpc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/msgpack-rpc.txt"))) (checksum . "e605bf9d822a3995745d3739b23fd89c7db859e5") (checksum-error . #f) (collection . "msgpack-rpc") (conflicts . ()) (dependencies . ("base" "msgpack" "unix-socket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A MessagePack-RPC client for Racket") (implies . ()) (modules . ((lib "msgpack-rpc/main.rkt") (lib "msgpack-rpc/scribblings/msgpack-rpc.scrbl"))) (name . "msgpack-rpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:wbthomason@cs.cornell.edu . #t) (messagepack . #t) (msgpack . #t) (msgpack-rpc . #t) (protocol . #t) (remote . #t) (ring:1 . #t) (rpc . #t))) (source . "https://github.com/wbthomason/msgpack-rpc-racket.git") (tags . ("messagepack" "msgpack" "msgpack-rpc" "protocol" "remote" "rpc")) (versions . #hash((default . #hasheq((checksum . "e605bf9d822a3995745d3739b23fd89c7db859e5") (source . "https://github.com/wbthomason/msgpack-rpc-racket.git") (source_url . "https://github.com/wbthomason/msgpack-rpc-racket.git"))))))) ("multi-file-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-file-lang" "doc/multi-file-lang@multi-file-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-file-lang.txt") (test-failure-log . "server/built/test-fail/multi-file-lang.txt") (test-success-log . #f))) (checksum . "0975cc27e0003050597da7d9f1fc5e9eac341fc7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lang-file" "rackunit-lib" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "a #lang language for multiple files in one") (implies . ()) (modules . ((lib "multi-file/lang.rkt") (lib "multi-file/private/make-parent-directory.rkt") (lib "multi-file/tests/1/multi-test.rkt") (lib "multi-file/lang/reader.rkt") (lib "multi-file/private/fallback-make-parent-directory.rkt") (lib "multi-file/tests/1/d.rkt") (lib "multi-file/scribblings/multi-file-lang.scrbl") (lib "multi-file/tests/2/multi-test.rkt"))) (name . "multi-file-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/multi-file-lang/tree/master") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "0975cc27e0003050597da7d9f1fc5e9eac341fc7") (source . "git://github.com/AlexKnauth/multi-file-lang") (source_url . "http://github.com/AlexKnauth/multi-file-lang/tree/master"))))))) ("multi-id" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-id.hl" "doc/multi-id.hl@multi-id/index.html") ("main" "multi-id" "doc/multi-id@multi-id/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-id.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multi-id.txt"))) (checksum . "6dbea1523d75a353b56d1bb63fbc15535d57f240") (checksum-error . #f) (collection . "multi-id") (conflicts . ()) (date-added . 1614799484) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "type-expander" "scribble-lib" "hyper-literate" "scribble-lib" "racket-doc" "scribble-enhanced" "typed-racket-doc")) (description . "Define identifiers which act as a type-expander and match-expander and macro and identifier macro and set! transformer") (implies . ()) (modules . ((lib "multi-id/scribblings/multi-id.scrbl") (lib "multi-id/test/test-multi-id.rkt") (lib "multi-id/main.rkt") (lib "multi-id/multi-id.hl.rkt"))) (name . "multi-id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (define . #t) (multimethods . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/multi-id.git#main") (tags . ("define" "multimethods" "syntax")) (versions . #hash((default . #hasheq((checksum . "6dbea1523d75a353b56d1bb63fbc15535d57f240") (source . "https://github.com/jsmaniac/multi-id.git#main") (source_url . "https://github.com/jsmaniac/multi-id.git#main"))))))) ("multicolumn" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multicolumn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multicolumn.txt"))) (checksum . "916e9acca5ccf56b319bf5e641fac483ed60eac9") (checksum-error . #f) (collection . "multicolumn") (conflicts . ()) (date-added . 1550465815) (dependencies . ("base" "stretchable-snip" "gui-lib")) (description . "GUI widget with multicolumn data table. Columns width may be set in pixels or in percents.") (implies . ()) (modules . ((lib "multicolumn/main.rkt") (lib "multicolumn/multicolumn.rkt"))) (name . "multicolumn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/multicolumn.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "916e9acca5ccf56b319bf5e641fac483ed60eac9") (source . "https://github.com/Kalimehtar/multicolumn.git") (source_url . "https://github.com/Kalimehtar/multicolumn.git"))))))) ("multimethod" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "multimethod-doc")) (description . "") (implies . ("multimethod-lib" "multimethod-doc")) (modules . ()) (name . "multimethod") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod"))))))) ("multimethod-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multimethod" "doc/multimethod@multimethod-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-doc.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "scribblings/multimethod.scrbl"))) (name . "multimethod-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-doc") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-doc"))))))) ("multimethod-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-lib.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec")) (description . "") (implies . ()) (modules . ((lib "multimethod/multimethod.rkt") (lib "multimethod/main.rkt") (lib "multimethod/privilege.rkt"))) (name . "multimethod-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-lib") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-lib"))))))) ("multimethod-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-test.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "tests/multimethod/multimethod.rkt") (lib "tests/multimethod/ignored-params.rkt"))) (name . "multimethod-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-test") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-test"))))))) ("multipath-daemon" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multipath-daemon" "doc/multipath-daemon@multipath-daemon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multipath-daemon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multipath-daemon.txt"))) (checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "unix-socket-lib" "racket-doc" "unstable-doc" "unix-socket-doc")) (description . "Library for communication with the multipathd process via it's UNIX domain socket.") (implies . ()) (modules . ((lib "multipath-daemon/main.rkt") (lib "multipath-daemon/multipath-daemon.scrbl"))) (name . "multipath-daemon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-multipath-daemon/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (source . "github://github.com/mordae/racket-multipath-daemon/master") (source_url . "http://github.com/mordae/racket-multipath-daemon/tree/master"))))))) ("multiscope" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multiscope.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multiscope.txt"))) (checksum . "58af714ee263b3a34006b0aa810d0c6e34ba93f7") (checksum-error . #f) (collection . "multiscope") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "multiscope/test/macros-sep-comp1.rkt") (lib "multiscope/main.rkt") (lib "multiscope/test/macros-broken-sep-comp1.rkt") (lib "multiscope/test/provide.rkt") (lib "multiscope/test/macros.rkt") (lib "multiscope/test/macros-sep-comp2.rkt") (lib "multiscope/test/basic.rkt") (lib "multiscope/test/macros-broken-sep-comp2.rkt") (lib "multiscope/test/all-defined-out.rkt"))) (name . "multiscope") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/multiscope.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "58af714ee263b3a34006b0aa810d0c6e34ba93f7") (source . "https://github.com/michaelballantyne/multiscope.git") (source_url . "https://github.com/michaelballantyne/multiscope.git"))))))) ("mumble-ping" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mumble-ping" "doc/mumble-ping@mumble-ping/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mumble-ping.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mumble-ping.txt"))) (checksum . "dbb24e40b1be0c0065b7000ccff8e9e5be7eda92") (checksum-error . #f) (collection . "mumble-ping") (conflicts . ()) (date-added . 1564908965) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "rackunit-typed" "bitsyntax" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Ping Mumble servers") (implies . ()) (modules . ((lib "mumble-ping/scribblings/mumble-ping.scrbl") (lib "mumble-ping/main.rkt"))) (name . "mumble-ping") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/winny-/mumble-ping.git") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "dbb24e40b1be0c0065b7000ccff8e9e5be7eda92") (source . "https://github.com/winny-/mumble-ping.git") (source_url . "https://github.com/winny-/mumble-ping.git"))))))) ("music" . #hasheq((author . "npfaro@indiana.edu") (authors . ("npfaro@indiana.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "music"))) (failure-log . "server/built/fail/music.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a5f9a6c456351d1b80950241cb1d82585043bc65") (checksum-error . #f) (collection . "lang-music") (conflicts . ()) (dependencies . ("base" "binaryio-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A music notation language. Outputs MIDI. See more on github.") (implies . ()) (modules . ((lib "lang-music/lang/reader.rkt") (lib "lang-music/examples/algorithms.rkt") (lib "lang-music/examples/example-from-slide.rkt") (lib "lang-music/coroutines.rkt") (lib "lang-music/examples/sweet.rkt") (lib "lang-music/lang.rkt") (lib "lang-music/voices.rkt") (lib "lang-music/examples/more_examples.rkt") (lib "lang-music/examples/allstar.rkt") (lib "lang-music/examples/schtuff.rkt") (lib "lang-music/examples/morecowbell.rkt"))) (name . "music") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (audio . #t) (author:npfaro@indiana.edu . #t) (composition . #t) (midi . #t) (music . #t) (ring:1 . #t) (sound . #t))) (source . "https://github.com/SuperDisk/lang-music.git#a5f9a6c") (tags . ("audio" "composition" "midi" "music" "sound")) (versions . #hash((default . #hasheq((checksum . "a5f9a6c456351d1b80950241cb1d82585043bc65") (source . "https://github.com/SuperDisk/lang-music.git#a5f9a6c") (source_url . "https://github.com/SuperDisk/lang-music.git#a5f9a6c"))))))) ("mutable-match-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutable-match-lambda" "doc/mutable-match-lambda@mutable-match-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutable-match-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutable-match-lambda.txt"))) (checksum . "28ea2c1f4e7a92826308c937608d4d91f2ead051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "kw-utils" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "mutable-match-lambda/mutable-match-lambda-procedure.rkt") (lib "mutable-match-lambda/main.rkt") (lib "mutable-match-lambda/let-inferred-name.rkt") (lib "mutable-match-lambda/make-clause-proc.rkt") (lib "mutable-match-lambda/communication.rkt") (lib "mutable-match-lambda/prop-object-name.rkt") (lib "mutable-match-lambda/docs/mutable-match-lambda.scrbl") (lib "mutable-match-lambda/syntax-to-string.rkt"))) (name . "mutable-match-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/mutable-match-lambda/tree/master") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "28ea2c1f4e7a92826308c937608d4d91f2ead051") (source . "git://github.com/AlexKnauth/mutable-match-lambda") (source_url . "http://github.com/AlexKnauth/mutable-match-lambda/tree/master"))))))) ("mutt" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutt" "doc/mutt@mutt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutt.txt"))) (checksum . "8f85ee8f1d4c4c14077b9396e51647ef6fc53f00") (checksum-error . #f) (collection . "mutt") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "make-log-interceptor" "scribble-lib" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs" "typed-racket-doc")) (description . "Racket API for the Mutt email client") (implies . ()) (modules . ((lib "mutt/test/untyped.rkt") (lib "mutt/setup.rkt") (lib "mutt/scribblings/typed-mutt.scrbl") (lib "mutt/private/parameters.rkt") (lib "mutt/private/main.rkt") (lib "mutt/test/util.rkt") (lib "mutt/private/pre-install.rkt") (lib "mutt/scribblings/mutt.scrbl") (lib "mutt/test/typed.rkt") (lib "mutt/typed.rkt") (lib "mutt/main.rkt"))) (name . "mutt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:types@ccs.neu.edu . #t) (email . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/bennn/racket-mutt.git") (tags . ("api" "email" "utility")) (versions . #hash((default . #hasheq((checksum . "8f85ee8f1d4c4c14077b9396e51647ef6fc53f00") (source . "https://github.com/bennn/racket-mutt.git") (source_url . "https://github.com/bennn/racket-mutt.git"))))))) ("my-cond" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-cond-iffy" "doc/my-cond-iffy@my-cond/index.html") ("main" "my-cond" "doc/my-cond@my-cond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/my-cond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/my-cond.txt"))) (checksum . "e80a3f2497151750cbe03f8284f0de9dd86706e1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "sweet-exp-lib" "rackunit-lib" "racket-doc" "scribble-lib" "sweet-exp")) (description . "a version of cond that supports \"cond-expanders\" and a for/cond-clause form, allowing it to iterate though conditions") (implies . ()) (modules . ((lib "my-cond/my-cond.rkt") (lib "typed/my-cond/failure-sym.rkt") (lib "my-cond/for-cond-clause.rkt") (lib "my-cond/failure-sym.rkt") (lib "my-cond/typed.rkt") (lib "typed/my-cond/parse-for-cond-clause.rkt") (lib "my-cond/cond-expander-struct.rkt") (lib "my-cond/define-syntax-parser.rkt") (lib "my-cond/docs/my-cond-iffy.scrbl") (lib "my-cond/cond-expander-prop.rkt") (lib "typed/my-cond.rkt") (lib "my-cond/proc+condexp.rkt") (lib "my-cond/parse-for-cond-clause.rkt") (lib "my-cond/iffy.rkt") (lib "my-cond/cond-expander.rkt") (lib "my-cond/docs/my-cond.scrbl") (lib "my-cond/main.rkt"))) (name . "my-cond") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/my-cond/tree/master") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "e80a3f2497151750cbe03f8284f0de9dd86706e1") (source . "git://github.com/AlexKnauth/my-cond") (source_url . "http://github.com/AlexKnauth/my-cond/tree/master"))))))) ("namespaced-transformer" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (description . "") (implies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (modules . ()) (name . "namespaced-transformer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer"))))))) ("namespaced-transformer-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "namespaced-transformer" "doc/namespaced-transformer@namespaced-transformer-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-doc.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "namespaced-transformer-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "scribblings/namespaced-transformer.scrbl"))) (name . "namespaced-transformer-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-doc") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-doc"))))))) ("namespaced-transformer-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-lib.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ((lib "namespaced-transformer/main.rkt") (lib "namespaced-transformer/info-key.rkt"))) (name . "namespaced-transformer-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-lib") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-lib"))))))) ("nanopass" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nanopass" "doc/nanopass@nanopass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nanopass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nanopass.txt"))) (checksum . "deac3a4bf937e1217ec54c5439710712b227fc5a") (checksum-error . #f) (collection . "nanopass") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "unstable-pretty-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "nanopass/tests/coresheme-to-javascript-compiler.rkt") (lib "nanopass/tests/compiler-test.rkt") (lib "nanopass/tests/test-driver.rkt") (lib "nanopass/private/unparser.rkt") (lib "nanopass/private/language.rkt") (lib "nanopass/private/helpers.rkt") (lib "nanopass/tests/synforms.rkt") (lib "nanopass/private/meta-parser.rkt") (lib "nanopass/private/records.rkt") (lib "nanopass/lang/reader.rkt") (lib "nanopass/private/pass-helper.rkt") (lib "nanopass/tests/alltests.rkt") (lib "nanopass/private/meta-syntax-dispatch.rkt") (lib "nanopass/main.rkt") (lib "nanopass/private/language-node-counter.rkt") (lib "nanopass/private/pass.rkt") (lib "nanopass/tests/test-all.rkt") (lib "nanopass/private/language-helpers.rkt") (lib "nanopass/tests/helpers.rkt") (lib "nanopass/tests/compiler.rkt") (lib "nanopass/tests/unit-tests.rkt") (lib "nanopass/base.rkt") (lib "nanopass/private/nano-syntax-dispatch.rkt") (lib "nanopass/scribblings/nanopass.scrbl") (lib "nanopass/private/syntaxconvert.rkt") (lib "nanopass/private/parser.rkt"))) (name . "nanopass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (compiler . #t) (ring:1 . #t))) (source . "http://github.com/nanopass/nanopass-framework-racket/tree/master") (tags . ("compiler")) (versions . #hash((default . #hasheq((checksum . "deac3a4bf937e1217ec54c5439710712b227fc5a") (source . "git://github.com/nanopass/nanopass-framework-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master"))))))) ("nasa-open-api" . #hasheq((author . "mhugijr@outlook.com") (authors . ("mhugijr@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nasa-open-api" "doc/nasa-open-api@nasa-open-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nasa-open-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nasa-open-api.txt"))) (checksum . "aea1067af82aa4516f192e96bb987751ad2f6316") (checksum-error . #f) (collection . "nasa-open-api") (conflicts . ()) (date-added . 1592817412) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Library for a handful of NASA's Open APIs") (implies . ()) (modules . ((lib "nasa-open-api/neo.rkt") (lib "nasa-open-api/solar-flare.rkt") (lib "nasa-open-api/apod.rkt") (lib "nasa-open-api/fireball.rkt") (lib "nasa-open-api/scribblings/apod.scrbl") (lib "nasa-open-api/cme.rkt") (lib "nasa-open-api/scribblings/donki-notifications.scrbl") (lib "nasa-open-api/donki.rkt") (lib "nasa-open-api/donki-notifications.rkt") (lib "nasa-open-api/scribblings/solar-flare.scrbl") (lib "nasa-open-api/scribblings/nasa-open-api.scrbl") (lib "nasa-open-api/scribblings/cme.scrbl") (lib "nasa-open-api/scribblings/neo.scrbl") (lib "nasa-open-api/main.rkt") (lib "nasa-open-api/scribblings/fireball.scrbl"))) (name . "nasa-open-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (api . #t) (author:mhugijr@outlook.com . #t) (client . #t) (client-api . #t) (data-structures . #t) (ring:1 . #t) (structs . #t))) (source . "https://github.com/m-hugi/nasa-open-api.git") (tags . ("api" "API" "client" "client-api" "data-structures" "structs")) (versions . #hash((default . #hasheq((checksum . "aea1067af82aa4516f192e96bb987751ad2f6316") (source . "https://github.com/m-hugi/nasa-open-api.git") (source_url . "https://github.com/m-hugi/nasa-open-api.git"))))))) ("nat-traversal" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/nat-traversal.txt") (docs . (("main" "nat-traversal" "doc/nat-traversal@nat-traversal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nat-traversal.txt") (test-failure-log . "server/built/test-fail/nat-traversal.txt") (test-success-log . #f))) (checksum . "e234e0265e824a268739da4a139ee8919bcc951e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "bitsyntax" "web-server-lib" "racket-doc" "scribble-lib")) (description . "NAT traversal utilities, including NAT-PMP and UPnP.") (implies . ()) (modules . ((lib "nat-traversal/high-level.rkt") (lib "nat-traversal/upnp.rkt") (lib "nat-traversal/upnp-ip-gateway.rkt") (lib "nat-traversal/mapping.rkt") (lib "nat-traversal/examples/example-upnp-ip-gateway.rkt") (lib "nat-traversal/examples/map-udp-port.rkt") (lib "nat-traversal/examples/example-high-level-udp.rkt") (lib "nat-traversal/examples/example-high-level-tcp.rkt") (lib "nat-traversal/main.rkt") (lib "nat-traversal/interfaces.rkt") (lib "nat-traversal/scribblings/nat-traversal.scrbl") (lib "nat-traversal/timer.rkt") (lib "nat-traversal/nat-pmp.rkt"))) (name . "nat-traversal") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (firewall . #t) (nat . #t) (net . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/tonyg/racket-nat-traversal.git") (tags . ("firewall" "nat" "net" "network")) (versions . #hash((default . #hasheq((checksum . "e234e0265e824a268739da4a139ee8919bcc951e") (source . "https://github.com/tonyg/racket-nat-traversal.git") (source_url . "https://github.com/tonyg/racket-nat-traversal.git"))))))) ("natural-cli" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "natural-cli" "doc/natural-cli@natural-cli/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/natural-cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/natural-cli.txt"))) (checksum . "c7abc38d025159128d446ca1a6314ab909ffe920") (checksum-error . #f) (collection . "natural-cli") (conflicts . ()) (date-added . 1573761764) (dependencies . ("base" "compatibility-lib" "scribble-lib" "racket-doc" "rackunit-lib" "compatibility-doc")) (description . "Easily write large command-line interfaces (CLIs)") (implies . ()) (modules . ((lib "natural-cli/scribblings/natural-cli.scrbl") (lib "natural-cli/cli/natural-cli_mklauncher.rkt") (lib "natural-cli/main.rkt") (lib "natural-cli/cli/natural-cli_mkmodule.rkt") (lib "natural-cli/cli/natural-cli.rkt") (lib "natural-cli/skel.rkt"))) (name . "natural-cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (cli . #t) (command-line . #t) (interface . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/natural-cli.git") (tags . ("cli" "command-line" "interface")) (versions . #hash((default . #hasheq((checksum . "c7abc38d025159128d446ca1a6314ab909ffe920") (source . "https://github.com/zyrolasting/natural-cli.git") (source_url . "https://github.com/zyrolasting/natural-cli.git"))))))) ("neo4j-lib" . #hasheq((author . "tomasz.baranski@posteo.net") (authors . ("tomasz.baranski@posteo.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "neo4j" "doc/neo4j@neo4j-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neo4j-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neo4j-lib.txt"))) (checksum . "18d50ef8c4a59b5e7b4a2f6ee778fb90782ef777") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621412901) (dependencies . ("base" "db-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib" "db-doc")) (description . "Neo4j interface") (implies . ()) (modules . ((lib "db/test/neo4j.rkt") (lib "db/neo4j.rkt") (lib "db/scribblings/neo4j.scrbl") (lib "db/private/neo4j.rkt") (lib "db/private/dbsystem.rkt"))) (name . "neo4j-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tomasz.baranski@posteo.net . #t) (database . #t) (db . #t) (neo4j . #t) (ring:1 . #t))) (source . "https://github.com/tomob/neo4j-lib.git#main") (tags . ("database" "db" "neo4j")) (versions . #hash((default . #hasheq((checksum . "18d50ef8c4a59b5e7b4a2f6ee778fb90782ef777") (source . "https://github.com/tomob/neo4j-lib.git#main") (source_url . "https://github.com/tomob/neo4j-lib.git#main"))))))) ("neologia" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neologia.txt") (docs . (("main" "neologia" "doc/neologia@neologia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neologia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neologia.txt"))) (checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (checksum-error . #f) (collection . "neologia") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for creating and managing dictionaries and lexicons") (implies . ()) (modules . ((lib "neologia/scribblings/neologia.scrbl") (lib "neologia/main.rkt") (lib "neologia/examples/test.rkt") (lib "neologia/tokenizer.rkt") (lib "neologia/parser-only.rkt") (lib "neologia/tokenize-only.rkt") (lib "neologia/parser.rkt") (lib "neologia/colorer.rkt") (lib "neologia/lexer.rkt") (lib "neologia/generator.rkt"))) (name . "neologia") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (dictionaries . #t) (lang . #t) (lang-extension . #t) (lexicon . #t) (ring:1 . #t))) (source . "https://github.com/robertkleffner/neologia.git") (tags . ("dictionaries" "lang" "lang-extension" "lexicon")) (versions . #hash((default . #hasheq((checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (source . "https://github.com/robertkleffner/neologia.git") (source_url . "https://github.com/robertkleffner/neologia.git"))))))) ("nested-hash" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nested-hash" "doc/nested-hash@nested-hash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nested-hash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nested-hash.txt"))) (checksum . "c562dbe1cf54d8604e56db14526f03c9b6c75b5b") (checksum-error . #f) (collection . "nested-hash") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions to allow for easy nested hash setting and getting.") (implies . ()) (modules . ((lib "nested-hash/main.rkt") (lib "nested-hash/scribblings/nested-hash.scrbl"))) (name . "nested-hash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (hash . #t) (hash-ref . #t) (hash-set . #t) (nested-hash-ref . #t) (nested-hash-set . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/nested-hash.git") (tags . ("hash" "hash-ref" "hash-set" "nested-hash-ref" "nested-hash-set")) (versions . #hash((default . #hasheq((checksum . "c562dbe1cf54d8604e56db14526f03c9b6c75b5b") (source . "https://github.com/BourgondAries/nested-hash.git") (source_url . "https://github.com/BourgondAries/nested-hash.git"))))))) ("net-cookies" . #hasheq((author . "jmj@fellowhuman.com jay.mccarthy@gmail.com") (authors . ("jmj@fellowhuman.com" "jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("net-cookies-lib" "net-cookies-doc")) (description . "RFC6265-compliant cookie handling for client and server") (implies . ("net-cookies-lib" "net-cookies-doc")) (modules . ()) (name . "net-cookies") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies"))))))) ("net-cookies-doc" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cookies" "doc/cookies@net-cookies-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-cookies-lib" "racket-doc" "web-server-lib" "web-server-doc" "net-doc" "scribble-lib")) (description . "RFC6265-compliant cookie handling for client and server (doc)") (implies . ()) (modules . ((lib "net/cookies/scribblings/cookies.scrbl"))) (name . "net-cookies-doc") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-doc") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-doc") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-doc"))))))) ("net-cookies-lib" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base")) (description . "RFC6265-compliant cookie handling for client and server (lib)") (implies . ()) (modules . ((lib "net/cookies/user-agent.rkt") (lib "net/cookies/common.rkt") (lib "net/cookies/server.rkt") (lib "net/cookies.rkt"))) (name . "net-cookies-lib") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-lib") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-lib") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-lib"))))))) ("net-cookies-test" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-cookies-lib" "rackunit-lib")) (description . "RFC6265-compliant cookie handling for client and server (test)") (implies . ()) (modules . ((lib "tests/net/cookies/server.rkt") (lib "tests/net/cookies/common.rkt") (lib "tests/net/cookies/user-agent.rkt"))) (name . "net-cookies-test") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-test") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "06e14b37fbd237b74563661c522df02855dadd2f") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-test") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-test"))))))) ("net-ip" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("net-ip-doc" "net-ip-lib")) (description . "IP address utilities (implementation and docs).") (implies . ("net-ip-doc" "net-ip-lib")) (modules . ()) (name . "net-ip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip"))))))) ("net-ip-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net-ip" "doc/net-ip@net-ip-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-doc.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib" "racket-doc" "scribble-lib")) (description . "IP address utilities (docs only).") (implies . ()) (modules . ((lib "net/scribblings/net-ip.scrbl"))) (name . "net-ip-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc"))))))) ("net-ip-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-lib.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "IP address utilities (implementation only).") (implies . ()) (modules . ((lib "net/ip.rkt") (lib "net/ip/network.rkt") (lib "net/ip/common.rkt") (lib "net/ip/address.rkt"))) (name . "net-ip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib"))))))) ("net-ip-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-test.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib" "quickcheck" "rackunit-lib")) (description . "Tests for net-ip-lib.") (implies . ()) (modules . ((lib "tests/net/run-all-tests.rkt") (lib "tests/net/ip/common.rkt") (lib "tests/net/ip/address.rkt") (lib "tests/net/ip/network.rkt"))) (name . "net-ip-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test"))))))) ("net-jwt" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jwt" "doc/jwt@net-jwt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-jwt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-jwt.txt"))) (checksum . "0f747569e878ef14d1f5d2de527efd02af88fcf9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "typed-racket-lib" "typed-racket-more" "sha" "crypto" "rackunit-lib" "web-server-lib" "racket-doc" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "option-bind")) (description . "JSON Web Token / JSON Web Signature codec, verification, signing") (implies . ()) (modules . ((lib "net/jwt/misc.rkt") (lib "tests/net/jwt/base64.rkt") (lib "tests/net/jwt/algorithms.rkt") (lib "net/jwt/encode-decode.rkt") (lib "net/jwt.rkt") (lib "net/jwt/jwt.scrbl") (lib "net/jwt/structs.rkt") (lib "tests/net/jwt/encode-decode.rkt") (lib "net/jwt/base64.rkt") (lib "net/jwt/algorithms.rkt"))) (name . "net-jwt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jmj@fellowhuman.com . #t) (json . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/RenaissanceBug/racket-jwt/tree/master") (tags . ("json" "net" "web")) (versions . #hash((default . #hasheq((checksum . "0f747569e878ef14d1f5d2de527efd02af88fcf9") (source . "git://github.com/RenaissanceBug/racket-jwt") (source_url . "http://github.com/RenaissanceBug/racket-jwt/tree/master"))))))) ("net-pem" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-pem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-pem.txt"))) (checksum . "6a2add18192a24118b13d0e652d808c270dd1890") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1600280564) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Privacy Enhanced Mail (PEM) Parsing and Unparsing") (implies . ()) (modules . ((lib "net/pem.rkt") (lib "net/pem/pem.rkt") (lib "net/pem/tests/test-pem.rkt") (lib "scribblings/net-pem.scrbl"))) (name . "net-pem") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:anurag@mendhekar.com . #t) (crypto . #t) (pem . #t) (privacy-enhanced-mail . #t) (ring:1 . #t))) (source . "https://github.com/themetaschemer/net-pem.git") (tags . ("crypto" "pem" "privacy-enhanced-mail")) (versions . #hash((default . #hasheq((checksum . "6a2add18192a24118b13d0e652d808c270dd1890") (source . "https://github.com/themetaschemer/net-pem.git") (source_url . "https://github.com/themetaschemer/net-pem.git"))))))) ("net2" . #hasheq((author . "jackhfirth@gmail.com dedbox@gmail.com") (authors . ("jackhfirth@gmail.com" "dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net2" "doc/net2@net2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net2.txt"))) (checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (checksum-error . #f) (collection . "net2") (conflicts . ()) (dependencies . ("reprovide-lang" "base" "unix-socket-doc" "unix-socket-lib" "disposable" "racket-doc" "scribble-lib")) (description . "Highly experimental and aspirational networking library. Not yet fit for public consumption.") (implies . ()) (modules . ((lib "net2/transport.rkt") (lib "net2/scribblings/system.scrbl") (lib "net2/system.rkt") (lib "net2/scribblings/transport.scrbl") (lib "net2/scribblings/util.rkt") (lib "net2/main.rkt") (lib "net2/scribblings/listener.scrbl") (lib "net2/scribblings/main.scrbl") (lib "net2/scribblings/tech.rkt") (lib "net2/scribblings/connector.scrbl") (lib "net2/scribblings/base.rkt") (lib "net2/connector.rkt") (lib "net2/data.rkt") (lib "net2/scribblings/data.scrbl") (lib "net2/listener.rkt"))) (name . "net2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/racket-net2.git") (tags . ("concurrency" "experimental" "io" "network")) (versions . #hash((default . #hasheq((checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (source . "https://github.com/jackfirth/racket-net2.git") (source_url . "https://github.com/jackfirth/racket-net2.git"))))))) ("netrc" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "netrc" "doc/netrc@netrc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/netrc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/netrc.txt"))) (checksum . "af814d20a77910ab6de2161ac37d02586604a192") (checksum-error . #f) (collection . "netrc") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Find entries in ~/.netrc files") (implies . ()) (modules . ((lib "netrc/scribblings/netrc.scrbl") (lib "netrc/main.rkt"))) (name . "netrc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@apgwoz.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/apg/netrc/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "af814d20a77910ab6de2161ac37d02586604a192") (source . "git://github.com/apg/netrc") (source_url . "http://github.com/apg/netrc/tree/master"))))))) ("neu-cs2500-handin" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neu-cs2500-handin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neu-cs2500-handin.txt"))) (checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "drracket" "drracket-plugin-lib")) (description . "") (implies . ()) (modules . ((lib "neu-cs2500-handin/client.rkt") (lib "neu-cs2500-handin/updater.rkt") (lib "neu-cs2500-handin/this-collection.rkt") (lib "neu-cs2500-handin/handin-multi.rkt") (lib "neu-cs2500-handin/client-gui.rkt"))) (name . "neu-cs2500-handin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/nuprl/cs2500-client/tree/master#f2016") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (source . "git://github.com/nuprl/cs2500-client#f2016") (source_url . "http://github.com/nuprl/cs2500-client/tree/master#f2016"))))))) ("neuron" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neuron.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neuron.txt"))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("neuron-lib" "neuron-doc")) (description . "Decentralized Software Organisms") (implies . ("neuron-lib" "neuron-doc")) (modules . ()) (name . "neuron") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (network . #t) (ring:1 . #t) (serialization . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron") (tags . ("concurrency" "experimental" "network" "serialization")) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron"))))))) ("neuron-doc" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neuron-doc.txt") (docs . (("main" "neuron" "doc/neuron@neuron-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neuron-doc.txt"))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . "neuron") (conflicts . ()) (dependencies . ("base" "neuron-lib" "at-exp-lib" "pict-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Documentation for neuron") (implies . ()) (modules . ((lib "neuron/scribblings/base.rkt") (lib "neuron/scribblings/tech-report/concurrency.scrbl") (lib "neuron/scribblings/main.scrbl") (lib "neuron/scribblings/reference/control-your-resources.scrbl") (lib "neuron/scribblings/reference/concurrency.scrbl") (lib "neuron/scribblings/reference.scrbl") (lib "neuron/scribblings/reference/data-flow.scrbl") (lib "neuron/scribblings/drawings.rkt") (lib "neuron/scribblings/reference/evaluation.scrbl") (lib "neuron/scribblings/tech-report.scrbl") (lib "neuron/scribblings/guide.scrbl"))) (name . "neuron-doc") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc"))))))) ("neuron-lib" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron-lib.txt") (test-failure-log . "server/built/test-fail/neuron-lib.txt") (test-success-log . #f))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . "neuron") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Impelementation of neuron") (implies . ()) (modules . ((lib "neuron/process.rkt") (lib "neuron/process/exchanger.rkt") (lib "neuron/network/tcp.rkt") (lib "neuron/exchanger.rkt") (lib "neuron/process/control.rkt") (lib "neuron/process/messaging.rkt") (lib "neuron/reprovide.rkt") (lib "neuron/evaluation.rkt") (lib "neuron/socket.rkt") (lib "neuron/main.rkt") (lib "neuron/event.rkt") (lib "neuron/codec.rkt") (lib "neuron/syntax.rkt"))) (name . "neuron-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib"))))))) ("neuron-shell" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/neuron-shell.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6f60ede1866a8a419e44972ea11220d0457e8acb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555373198) (dependencies . ("base" "scribble-lib")) (description . "Interactive UI for Neuron") (implies . ()) (modules . ((lib "scribblings/neuron-shell.scrbl") (lib "neuron/shell.rkt"))) (name . "neuron-shell") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron-shell.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f60ede1866a8a419e44972ea11220d0457e8acb") (source . "https://github.com/dedbox/racket-neuron-shell.git") (source_url . "https://github.com/dedbox/racket-neuron-shell.git"))))))) ("nevermore" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nevermore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nevermore.txt"))) (checksum . "20c6533176bd47c56aa94287fada6909b87ff03a") (checksum-error . #f) (collection . "nevermore") (conflicts . ()) (date-added . 1567407940) (dependencies . ("base" "rackunit-lib")) (description . "A silly little Racket package that will never change. Its purpose is to be used to test racket-docker builds.") (implies . ()) (modules . ((lib "nevermore/main.rkt"))) (name . "nevermore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ci . #t) (nevermore . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/nevermore.git") (tags . ("ci" "nevermore")) (versions . #hash((default . #hasheq((checksum . "20c6533176bd47c56aa94287fada6909b87ff03a") (source . "https://github.com/Bogdanp/nevermore.git") (source_url . "https://github.com/Bogdanp/nevermore.git"))))))) ("nlopt" . #hasheq((author . "kominek@gmail.com") (authors . ("kominek@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/nlopt.txt") (docs . (("main" "nlopt" "doc/nlopt@nlopt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nlopt.txt") (test-failure-log . "server/built/test-fail/nlopt.txt") (test-success-log . #f))) (checksum . "164381c8c94066e5b2a2b57a81f2a96694d6bca2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1639800306) (dependencies . ("base" "math-lib" "math-doc" "racket-doc" "scribble-lib")) (description . "FFI wrapper for the NLopt nonlinear optimization library.") (implies . ()) (modules . ((lib "examples/highlevel-example.rkt") (lib "examples/safe-example2.rkt") (lib "examples/unsafe-example2.rkt") (lib "tests/unsafe.rkt") (lib "nlopt/docs/algorithms.scrbl") (lib "tests/highlevel.rkt") (lib "nlopt/main.rkt") (lib "nlopt/unsafe.rkt") (lib "nlopt/safe.rkt") (lib "nlopt/docs/unsafe.scrbl") (lib "nlopt/highlevel.rkt") (lib "examples/unsafe-example1.rkt") (lib "nlopt/docs/nlopt.scrbl") (lib "examples/safe-example1.rkt") (lib "nlopt/docs/highlevel.scrbl") (lib "nlopt/docs/safe.scrbl") (lib "examples/stress-test.rkt"))) (name . "nlopt") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kominek@gmail.com . #t) (ffi . #t) (numerical . #t) (optimization . #t) (ring:1 . #t))) (source . "https://github.com/jkominek/nlopt.git#master") (tags . ("ffi" "numerical" "optimization")) (versions . #hash((default . #hasheq((checksum . "164381c8c94066e5b2a2b57a81f2a96694d6bca2") (source . "https://github.com/jkominek/nlopt.git#master") (source_url . "https://github.com/jkominek/nlopt.git#master"))))))) ("no-vert-bar-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "no-vert-bar-lang" "doc/no-vert-bar-lang@no-vert-bar-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/no-vert-bar-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/no-vert-bar-lang.txt"))) (checksum . "3e31489f2b3aff73f50cade704b724b5578af7fb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc")) (description . "a lang-extension that reads `|` as a normal character") (implies . ()) (modules . ((lib "no-vert-bar/scribblings/no-vert-bar-lang.scrbl") (lib "no-vert-bar/tests/test.rkt") (lib "no-vert-bar/reader.rkt") (lib "no-backslash/lang/reader.rkt") (lib "no-backslash/tests/test.rkt") (lib "no-backslash/reader.rkt") (lib "no-vert-bar/lang/reader.rkt"))) (name . "no-vert-bar-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/no-vert-bar-lang/tree/master") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "3e31489f2b3aff73f50cade704b724b5578af7fb") (source . "git://github.com/AlexKnauth/no-vert-bar-lang") (source_url . "http://github.com/AlexKnauth/no-vert-bar-lang/tree/master"))))))) ("noise" . #hasheq((author . "racket@jverkamp.com") (authors . ("racket@jverkamp.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "manual-noise" "doc/manual-noise@noise/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/noise.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/noise.txt"))) (checksum . "ad2f2e043f992fb5f4a96df6e32dbea8234b315f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1628194981) (dependencies . ("base" "typed-racket-lib" "images-doc" "images-lib" "racket-doc" "scribble-lib")) (description . "Implements perlin and simplex noise in typed racket based on the implementations from http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf") (implies . ()) (modules . ((lib "noise/manual-noise.scrbl") (lib "noise/main.rkt"))) (name . "noise") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algorithms . #t) (author:racket@jverkamp.com . #t) (math . #t) (noise . #t) (ring:1 . #t))) (source . "https://github.com/jpverkamp/noise.git#master") (tags . ("algorithms" "math" "noise")) (versions . #hash((default . #hasheq((checksum . "ad2f2e043f992fb5f4a96df6e32dbea8234b315f") (source . "https://github.com/jpverkamp/noise.git#master") (source_url . "https://github.com/jpverkamp/noise.git#master"))))))) ("non-det" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/non-det.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/non-det.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/non-det.txt"))) (checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (checksum-error . #f) (collection . "non-det") (conflicts . ()) (dependencies . ("chk-lib" "base" "text-table")) (description . "Racket non-determinism") (implies . ()) (modules . ((lib "non-det/examples/steam-cart.rkt") (lib "non-det/opt.rkt") (lib "non-det/examples/linear-std.rkt") (lib "non-det/main.rkt") (lib "non-det/logic.rkt"))) (name . "non-det") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/non-det.git") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (source . "https://github.com/jeapostrophe/non-det.git") (source_url . "https://github.com/jeapostrophe/non-det.git"))))))) ("north" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "north" "doc/north@north/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/north.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/north.txt"))) (checksum . "8de16ba702477aa2f075450cc94e81510b34c4d1") (checksum-error . #f) (collection . "north") (conflicts . ()) (date-added . 1548674759) (dependencies . ("base" "db-lib" "gregor-lib" "parser-tools-lib" "at-exp-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A database migration tool.") (implies . ()) (modules . ((lib "north/adapter/base.rkt") (lib "north/adapter/postgres.rkt") (lib "north/lang/reader.rkt") (lib "north/main.rkt") (lib "north/adapter/sqlite.rkt") (lib "north/base.rkt") (lib "north/north.scrbl") (lib "north/tool/syntax-color.rkt") (lib "north/cli.rkt"))) (name . "north") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (db . #t) (migrations . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-north.git?path=north") (tags . ("db" "migrations" "web")) (versions . #hash((default . #hasheq((checksum . "8de16ba702477aa2f075450cc94e81510b34c4d1") (source . "https://github.com/Bogdanp/racket-north.git?path=north") (source_url . "https://github.com/Bogdanp/racket-north.git?path=north"))))))) ("nproc" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nproc" "doc/nproc@nproc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nproc.txt") (test-failure-log . "server/built/test-fail/nproc.txt") (test-success-log . #f))) (checksum . "779fe7db83918a6ade7cf27f64d2fd5f9358f8bc") (checksum-error . #f) (collection . "nproc") (conflicts . ()) (date-added . 1601809529) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple wrapper to num_processors in gnulib's nproc module") (implies . ()) (modules . ((lib "nproc/private/install.rkt") (lib "nproc/scribblings/nproc.scrbl") (lib "nproc/main.rkt"))) (name . "nproc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (gnu . #t) (gnulib . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/nproc.git") (tags . ("gnu" "gnulib")) (versions . #hash((default . #hasheq((checksum . "779fe7db83918a6ade7cf27f64d2fd5f9358f8bc") (source . "https://github.com/jeroanan/nproc.git") (source_url . "https://github.com/jeroanan/nproc.git"))))))) ("nvim-client" . #hasheq((author . "hiphish@posteo.de hiphish@openmailbox.org") (authors . ("hiphish@posteo.de" "hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nvim-client" "doc/nvim-client@nvim-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nvim-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nvim-client.txt"))) (checksum . "c7d0a3d7ceaebd59955e6d2aee16352098c82d8a") (checksum-error . #f) (collection . "nvim") (conflicts . ()) (dependencies . ("base" "msgpack" "unix-socket-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "unix-socket-doc" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "API client for the Neovim text editor") (implies . ()) (modules . ((lib "nvim/client/exn-fail-rpc.rkt") (lib "nvim/api/tabpage.rkt") (lib "nvim/client/types.rkt") (lib "nvim/scribblings/intro.scrbl") (lib "nvim/scribblings/api.scrbl") (lib "nvim/scribblings/rplugin.scrbl") (lib "nvim/api/buffer.rkt") (lib "nvim/scribblings/nvim-client.scrbl") (lib "nvim/client.rkt") (lib "nvim/client/rpc-session.rkt") (lib "nvim/scribblings/rpc.scrbl") (lib "nvim/rplugin.rkt") (lib "nvim/main.rkt") (lib "nvim/api/window.rkt") (lib "nvim/api.rkt") (lib "nvim/api/nvim.rkt"))) (name . "nvim-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (author:hiphish@posteo.de . #t) (neovim . #t) (nvim . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (tags . ("neovim" "nvim")) (versions . #hash((default . #hasheq((checksum . "c7d0a3d7ceaebd59955e6d2aee16352098c82d8a") (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (source_url . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client"))))))) ("object-backtrace" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/object-backtrace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/object-backtrace.txt"))) (checksum . "154610bbe33f3fe0abdee6c016cde534048c50fb") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586810429) (dependencies . ("base")) (description . "") (implies . ()) (modules . ((lib "object-backtrace/main.rkt"))) (name . "object-backtrace") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/object-backtrace.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "154610bbe33f3fe0abdee6c016cde534048c50fb") (source . "https://github.com/samth/object-backtrace.git") (source_url . "https://github.com/samth/object-backtrace.git"))))))) ("ocelot" . #hasheq((author . "bornholt@cs.washington.edu") (authors . ("bornholt@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "ocelot" "doc/ocelot@ocelot/index.html"))) (failure-log . "server/built/fail/ocelot.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (checksum-error . #f) (collection . "ocelot") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "rosette" "scribble-lib" "racket-doc")) (description . "A solver-aided relational logic DSL") (implies . ()) (modules . ((lib "ocelot/test/symbolic/alloy/test.rkt") (lib "ocelot/engine/interpretation.rkt") (lib "ocelot/test/concrete/concrete-test.rkt") (lib "ocelot/lib/simplify.rkt") (lib "ocelot/main.rkt") (lib "ocelot/test/symbolic/alloy/ceilingsandfloors.rkt") (lib "ocelot/test/symbolic/symmetry-test.rkt") (lib "ocelot/test/symbolic/simplify-solve-test.rkt") (lib "ocelot/scribblings/ocelot.scrbl") (lib "ocelot/lang/bounds.rkt") (lib "ocelot/lang/ast.rkt") (lib "ocelot/lib/print.rkt") (lib "ocelot/test/util.rkt") (lib "ocelot/lib/simplify-solve.rkt") (lib "ocelot/lib/alloy.rkt") (lib "ocelot/engine/engine.rkt") (lib "ocelot/scribblings/log.rkt") (lib "ocelot/engine/matrix.rkt") (lib "ocelot/engine/matrix-ops.rkt") (lib "ocelot/test/symbolic/symbolic-test.rkt") (lib "ocelot/test/symbolic/alloy/basic.rkt") (lib "ocelot/engine/symmetry.rkt") (lib "ocelot/lang/universe.rkt") (lib "ocelot/engine/tuple.rkt") (lib "ocelot/test/symbolic/simplify-test.rkt") (lib "ocelot/ocelot.rkt") (lib "ocelot/lang/sketch.rkt"))) (name . "ocelot") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (alloy . #t) (author:bornholt@cs.washington.edu . #t) (relational . #t) (ring:1 . #t) (rosette . #t))) (source . "http://github.com/jamesbornholt/ocelot/tree/master") (tags . ("alloy" "relational" "rosette")) (versions . #hash((default . #hasheq((checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (source . "git://github.com/jamesbornholt/ocelot") (source_url . "http://github.com/jamesbornholt/ocelot/tree/master"))))))) ("odysseus" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/odysseus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/odysseus.txt"))) (checksum . "fc27120e833742fb7d79b10ac07efa00d10e2418") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1618756902) (dependencies . ()) (description . "Library with handy general-purpose functions and macro as well as specific ones") (implies . ()) (modules . ()) (name . "odysseus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/odysseus.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fc27120e833742fb7d79b10ac07efa00d10e2418") (source . "https://github.com/prozion/odysseus.git") (source_url . "https://github.com/prozion/odysseus.git"))))))) ("oii-422-handin-client" . #hasheq((author . "ifigueroap@gmail.com ") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/oii-422-handin-client.txt") (test-failure-log . "server/built/test-fail/oii-422-handin-client.txt") (test-success-log . #f))) (checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin Client for PUCV PL course OII-422") (implies . ()) (modules . ((lib "oii-422-handin-client/handin-multi.rkt") (lib "oii-422-handin-client/this-collection.rkt") (lib "oii-422-handin-client/client.rkt") (lib "oii-422-handin-client/client-gui.rkt") (lib "oii-422-handin-client/updater.rkt"))) (name . "oii-422-handin-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/ifigueroap/oii-422-handin-client.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (source . "git://github.com/ifigueroap/oii-422-handin-client.git") (source_url . "http://github.com/ifigueroap/oii-422-handin-client.git/tree/master"))))))) ("onlog" . #hasheq((author . "med.hur@gmail.com") (authors . ("med.hur@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "onlog"))) (failure-log . "server/built/fail/onlog.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555013294) (dependencies . ()) (description . "Perform operations on log files") (implies . ()) (modules . ((lib "onlog/main.rkt") (lib "onlog/onlog.scrbl"))) (name . "onlog") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:med.hur@gmail.com . #t) (commandline . #t) (logging . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/fmind/onlog.git") (tags . ("commandline" "logging" "tools")) (versions . #hash((default . #hasheq((checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (source . "https://github.com/fmind/onlog.git") (source_url . "https://github.com/fmind/onlog.git"))))))) ("open-app" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "open-app" "doc/open-app@open-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/open-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/open-app.txt"))) (checksum . "5503f0d2b5e398c864e6bdacfac9c672bf9b9869") (checksum-error . #f) (collection . "open-app") (conflicts . ()) (date-added . 1590543323) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A utility for opening a file or url with the default application.") (implies . ()) (modules . ((lib "open-app/main.rkt") (lib "open-app/scribblings/open-app.scrbl"))) (name . "open-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (application . #t) (author:schlee.simon@gmail.com . #t) (ring:1 . #t) (util . #t) (utilities . #t) (utility . #t))) (source . "https://github.com/SimonLSchlee/open-app.git") (tags . ("app" "application" "util" "utilities" "utility")) (versions . #hash((default . #hasheq((checksum . "5503f0d2b5e398c864e6bdacfac9c672bf9b9869") (source . "https://github.com/SimonLSchlee/open-app.git") (source_url . "https://github.com/SimonLSchlee/open-app.git"))))))) ("openal" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openal" "doc/openal@openal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openal.txt"))) (checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (checksum-error . #f) (collection . "openal") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "FFI for OpenAL") (implies . ()) (modules . ((lib "openal/main.rkt") (lib "openal/openal.scrbl") (lib "openal/path.rkt"))) (name . "openal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/openal/tree/master") (tags . ("audio" "ffi")) (versions . #hash((default . #hasheq((checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (source . "git://github.com/jeapostrophe/openal") (source_url . "http://github.com/jeapostrophe/openal/tree/master"))))))) ("openapi-type-provider" . #hasheq((author . "kbtpodifo@gmail.com") (authors . ("kbtpodifo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "openapi-type-provider" "doc/openapi-type-provider@openapi-type-provider/index.html"))) (failure-log . "server/built/fail/openapi-type-provider.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ba298d11271bb08448f7a5d9f018f5f5c1b8f828") (checksum-error . #f) (collection . "openapi-type-provider") (conflicts . ()) (date-added . 1619208925) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Type provider for OpenAPI schemas. Generate well-typed client libraries in Typed Racket.") (implies . ()) (modules . ((lib "openapi-type-provider/examples/use-type-provider.rkt") (lib "openapi-type-provider/examples/use-openapi-provider.rkt") (lib "openapi-type-provider/openapi-type-provider.rkt") (lib "openapi-type-provider/json-schema.rkt") (lib "openapi-type-provider/utils.rkt") (lib "openapi-type-provider/main.rkt") (lib "openapi-type-provider/scribblings/openapi-type-provider.scrbl") (lib "openapi-type-provider/schema-type-provider.rkt") (lib "openapi-type-provider/tests/utils-tests.rkt") (lib "openapi-type-provider/openapi.rkt"))) (name . "openapi-type-provider") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (api . #t) (author:kbtpodifo@gmail.com . #t) (json . #t) (openapi . #t) (ring:1 . #t) (type-provider . #t) (typed-racket . #t))) (source . "https://github.com/stardust66/openapi-type-provider.git#main") (tags . ("api" "json" "openapi" "type-provider" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "ba298d11271bb08448f7a5d9f018f5f5c1b8f828") (source . "https://github.com/stardust66/openapi-type-provider.git#main") (source_url . "https://github.com/stardust66/openapi-type-provider.git#main"))))))) ("opencl" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opencl" "doc/opencl@opencl/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/opencl.txt") (success-log . "server/built/install/opencl.txt") (test-failure-log . "server/built/test-fail/opencl.txt") (test-success-log . #f))) (checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "superc" "at-exp-lib" "racket-doc")) (description . "A Racket interface to OpenCL using an FFI") (implies . ()) (modules . ((lib "opencl/racket.rkt") (lib "tests/opencl/samples/atiSamples/EigenValue/EigenValue.rkt") (lib "opencl/c/types.rkt") (lib "opencl/c/4-3.rkt") (lib "tests/opencl/examples/pps/scan.rkt") (lib "opencl/c/4-2.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclDeviceQuery/oclDeviceQuery.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclBandwidthTest/oclBandwidthTest.rkt") (lib "tests/opencl/samples/atiSamples/DwtHaar1D/DwtHaar1D.rkt") (lib "opencl/scribblings/c/5.scrbl") (lib "tests/opencl/samples/atiSamples/MatrixMultiplication/MatrixMultiplication.rkt") (lib "opencl/scribblings/c/types.scrbl") (lib "tests/opencl/samples/atiSamples/Template/Template.rkt") (lib "tests/opencl/samples/atiSamples/BitonicSort/BitonicSort.rkt") (lib "tests/opencl/examples/vmult/racket-list.rkt") (lib "tests/opencl/samples/atiSamples/BlackScholes/BlackScholes.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclDotProduct/oclDotProduct.rkt") (lib "opencl/c/5-4.rkt") (lib "tests/opencl/samples/atiSamples/atiUtils/utils.rkt") (lib "tests/opencl/examples/matrix-transpose/transpose.rkt") (lib "opencl/c/include/cl.rkt") (lib "opencl/c/5-5.rkt") (lib "tests/opencl/examples/vmult/c-loop.rkt") (lib "tests/opencl/test.rkt") (lib "tests/opencl/samples/atiSamples/FastWalshTransform/FastWalshTransform.rkt") (lib "opencl/c/5-9.rkt") (lib "tests/opencl/examples/vmult/c-kernel.rkt") (lib "opencl/c/4.rkt") (lib "opencl/c/5-3.rkt") (lib "tests/opencl/examples/vmult/racket-vector.rkt") (lib "opencl/c/5-6.rkt") (lib "opencl/scribblings/c.scrbl") (lib "opencl/c/5.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclMatVecMul/oclMatVecMul.rkt") (lib "opencl/c/util.rkt") (lib "tests/opencl/samples/atiSamples/MatrixTranspose/MatrixTranspose.rkt") (lib "opencl/c/4-1.rkt") (lib "opencl/c/5-8.rkt") (lib "tests/opencl/samples/atiSamples/FloydWarshall/FloydWarshall.rkt") (lib "tests/opencl/samples/nvidiaSamples/utils/utils.rkt") (lib "opencl/c/5-10.rkt") (lib "opencl/c/tsyntax.rkt") (lib "tests/opencl/samples/atiSamples/BinarySearch/BinarySearch.rkt") (lib "opencl/c/syntax.rkt") (lib "opencl/c/5-2.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclVectorAdd/oclVectorAdd.rkt") (lib "opencl/c.rkt") (lib "opencl/c/include/extract-defines.rkt") (lib "opencl/scribblings/c/4.scrbl") (lib "tests/opencl/samples/atiSamples/BinomialOption/BinomialOption.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclTranspose/oclTranspose.rkt") (lib "opencl/c/5-7.rkt") (lib "opencl/c/5-1.rkt") (lib "tests/opencl/examples/vmult/make-data.rkt") (lib "tests/opencl/examples/vmult/racket-unsafe-vector.rkt") (lib "opencl/c/constants.rkt") (lib "opencl/c/lib.rkt") (lib "opencl/scribblings/opencl.scrbl") (lib "tests/opencl/examples/vmult/opencl.rkt"))) (name . "opencl") (ring . 1) (search-terms . #hasheq((|| . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/opencl/tree/master") (tags . ("" "ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (source . "github://github.com/jeapostrophe/opencl/master") (source_url . "http://github.com/jeapostrophe/opencl/tree/master"))))))) ("opencpu" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "opencpu"))) (failure-log . "server/built/fail/opencpu.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab5433418a3a19aeafe239901c3a530d745e2dbd") (checksum-error . #f) (collection . "opencpu") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "adjutor" "scribble-lib" "racket-doc" "net-doc")) (description . "A Racket library for calling R functions through the OpenCPU API.") (implies . ()) (modules . ((lib "opencpu/scribblings/opencpu.scrbl") (lib "opencpu/main.rkt"))) (name . "opencpu") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (API . #t) (R . #t) (api . #t) (author:philip@philipmcgrath.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/LiberalArtist/opencpu/tree/master") (tags . ("API" "api" "net" "R" "web")) (versions . #hash((default . #hasheq((checksum . "ab5433418a3a19aeafe239901c3a530d745e2dbd") (source . "git://github.com/LiberalArtist/opencpu") (source_url . "http://github.com/LiberalArtist/opencpu/tree/master"))))))) ("opencv" . #hasheq((author . "petersamarin@gmail.com") (authors . ("petersamarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opencv.txt") (test-failure-log . "server/built/test-fail/opencv.txt") (test-success-log . #f))) (checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to the OpenCV library") (implies . ()) (modules . ((lib "tutorials/06_feature2d/01-Harris-corner-detector.rkt") (lib "tutorials/01_introduction/01-display-image.rkt") (lib "tutorials/03_imgproc/VideoCanny.rkt") (lib "tutorials/03_imgproc/20-2-finding-contours-in-your-video.rkt") (lib "tutorials/08_objdetect/CascadeClassifier.rkt") (lib "opencv/main.rkt") (lib "opencv/objdetect.rkt") (lib "tutorials/01_introduction/02-load-save-image.rkt") (lib "tutorials/03_imgproc/SimpleImageProcessing.rkt") (lib "tutorials/03_imgproc/01-smoothing-images.rkt") (lib "tutorials/03_imgproc/VideoSobel.rkt") (lib "opencv/videoio.rkt") (lib "opencv/imgproc.rkt") (lib "opencv/core.rkt") (lib "tutorials/03_imgproc/VideoSimple.rkt") (lib "opencv/calib3d.rkt") (lib "opencv/utilities.rkt") (lib "opencv/types.rkt") (lib "opencv/highgui.rkt"))) (name . "opencv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:petersamarin@gmail.com . #t) (computer-vision . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/oetr/racket-opencv/tree/master") (tags . ("computer-vision" "ffi")) (versions . #hash((default . #hasheq((checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (source . "git://github.com/oetr/racket-opencv") (source_url . "http://github.com/oetr/racket-opencv/tree/master"))))))) ("openfst" . #hasheq((author . "alex@alex-maclean.com") (authors . ("alex@alex-maclean.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openfst" "doc/openfst@openfst/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openfst.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openfst.txt"))) (checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (checksum-error . #f) (collection . "openfst") (conflicts . ()) (date-added . 1653594056) (dependencies . ("base" "openfst-x86_64-linux" "openfst-x86_64-win32" "openfst-x86_64-macosx" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A partial, unofficial set of bindings for the OpenFST library, based partially on the Python package Pynini") (implies . ()) (modules . ((lib "openfst/test/test-abstract.rkt") (lib "openfst/main.rkt") (lib "openfst/utils.rkt") (lib "openfst/test/test-direct.rkt") (lib "openfst/scribblings/openfst.scrbl") (lib "openfst/abstract.rkt") (lib "openfst/wrapper.rkt") (lib "openfst/direct.rkt"))) (name . "openfst") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (FFI . #t) (author:alex@alex-maclean.com . #t) (automata . #t) (ring:1 . #t))) (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst") (tags . ("automata" "FFI")) (versions . #hash((default . #hasheq((checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst") (source_url . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst"))))))) ("openfst-x86_64-linux" . #hasheq((author . "alex@alex-maclean.com") (authors . ("alex@alex-maclean.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openfst-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openfst-x86_64-linux.txt"))) (checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (checksum-error . #f) (collection . "openfst") (conflicts . ()) (date-added . 1653774307) (dependencies . ("base")) (description . "native libraries for openfst on x86_64-linux") (implies . ()) (modules . ()) (name . "openfst-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alex@alex-maclean.com . #t) (openfst . #t) (ring:1 . #t))) (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-linux") (tags . ("openfst")) (versions . #hash((default . #hasheq((checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-linux") (source_url . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-linux"))))))) ("openfst-x86_64-macosx" . #hasheq((author . "alex@alex-maclean.com") (authors . ("alex@alex-maclean.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openfst-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openfst-x86_64-macosx.txt"))) (checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (checksum-error . #f) (collection . "openfst") (conflicts . ()) (date-added . 1653950784) (dependencies . ("base")) (description . "native libraries for openfst on x86_64-macosx") (implies . ()) (modules . ()) (name . "openfst-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alex@alex-maclean.com . #t) (openfst . #t) (ring:1 . #t))) (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-macosx") (tags . ("openfst")) (versions . #hash((default . #hasheq((checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-macosx") (source_url . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-macosx"))))))) ("openfst-x86_64-win32" . #hasheq((author . "alex@alex-maclean.com") (authors . ("alex@alex-maclean.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openfst-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openfst-x86_64-win32.txt"))) (checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (checksum-error . #f) (collection . "openfst") (conflicts . ()) (date-added . 1653936159) (dependencies . ("base")) (description . "native libraries for openfst on x86_64-win32") (implies . ()) (modules . ()) (name . "openfst-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alex@alex-maclean.com . #t) (openfst . #t) (ring:1 . #t))) (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-win32") (tags . ("openfst")) (versions . #hash((default . #hasheq((checksum . "cdd7ce0f62d159c56fc77df2fc299045f37e5d50") (source . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-win32") (source_url . "https://github.com/AlexMaclean/racket-openfst.git?path=openfst-x86_64-win32"))))))) ("opengl" . #hasheq((author . "stephanh42@gmail.com") (authors . ("stephanh42@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opengl" "doc/opengl@opengl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opengl.txt") (test-failure-log . "server/built/test-fail/opengl.txt") (test-success-log . #f))) (checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "srfi-lite-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc")) (description . "Exhaustive Racket bindings to OpenGL") (implies . ()) (modules . ((lib "tests/opengl/gltest.rkt") (lib "opengl/readspec.rkt") (lib "opengl/util.rkt") (lib "tests/opengl/planet.rkt") (lib "tests/opengl/gears.rkt") (lib "tests/opengl/viewer.rkt") (lib "opengl/main.rkt") (lib "tests/opengl/shadertest.rkt") (lib "tests/opengl/vbotest.rkt") (lib "tests/opengl/bitmaptest.rkt") (lib "opengl/opengl.scrbl"))) (name . "opengl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stephanh42@gmail.com . #t) (ffi . #t) (graphics . #t) (opengl . #t) (ring:1 . #t))) (source . "http://github.com/stephanh42/RacketGL/tree/master") (tags . ("ffi" "graphics" "opengl")) (versions . #hash((default . #hasheq((checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (source . "github://github.com/stephanh42/RacketGL/master") (source_url . "http://github.com/stephanh42/RacketGL/tree/master"))))))) ("openh264-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openh264-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openh264-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ()) (name . "openh264-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (openh264 . #t) (ring:1 . #t) (video . #t))) (source . "http://github.com/videolang/native-pkgs/tree/master?path=openh264-x86_64-macosx") (tags . ("openh264" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=openh264-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=openh264-x86_64-macosx"))))))) ("openmpi" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mpi" "doc/mpi@openmpi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openmpi.txt") (test-failure-log . "server/built/test-fail/openmpi.txt") (test-success-log . #f))) (checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "at-exp-lib" "racket-doc")) (description . "A Racket interface to MPI based on an FFI to OpenMPI") (implies . ()) (modules . ((lib "mpi/ffi/types.rkt") (lib "tests/mpi/master_server.rkt") (lib "mpi/ffi/mpi.rkt") (lib "mpi/ffi/parsec.rkt") (lib "mpi/main.rkt") (lib "mpi/ffi/constants.rkt") (lib "mpi/mpi.scrbl") (lib "mpi/ffi.rkt") (lib "mpi/ffi/lib.rkt"))) (name . "openmpi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/openmpi/tree/master") (tags . ("ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (source . "github://github.com/jeapostrophe/openmpi/master") (source_url . "http://github.com/jeapostrophe/openmpi/tree/master"))))))) ("openweather" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openweather" "doc/openweather@openweather/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openweather.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openweather.txt"))) (checksum . "a0c4e4832b3ac05c1c38fbf64c6ce3ff583882e7") (checksum-error . #f) (collection . "openweather") (conflicts . ()) (dependencies . ("opt" "uri" "http11" "tjson" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "Library for OpenWeatherMap's API.  Only US, with zipcode is currently supported.") (implies . ()) (modules . ((lib "openweather/main.rkt") (lib "openweather/scribblings/openweather.scrbl") (lib "openweather/src/invoke.rkt"))) (name . "openweather") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (weather . #t))) (source . "https://gitlab.com/RayRacine/openweather.git") (tags . ("api" "weather")) (versions . #hash((default . #hasheq((checksum . "a0c4e4832b3ac05c1c38fbf64c6ce3ff583882e7") (source . "https://gitlab.com/RayRacine/openweather.git") (source_url . "https://gitlab.com/RayRacine/openweather.git"))))))) ("operational-transformation" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "operational-transformation-demo" "operational-transformation-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Wrapper package for both operational-transformation-lib and operational-transformation-demo.") (implies . ()) (modules . ()) (name . "operational-transformation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation"))))))) ("operational-transformation-demo" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-demo.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "operational-transformation-lib" "gui-lib")) (description . "Demo collaborative editor using Operational Transformation (OT).") (implies . ()) (modules . ((lib "operational-transformation-demo/multiserver.rkt") (lib "operational-transformation-demo/server.rkt") (lib "operational-transformation-demo/multiclient.rkt") (lib "operational-transformation-demo/client.rkt"))) (name . "operational-transformation-demo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-demo") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-demo"))))))) ("operational-transformation-lib" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-lib.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Just the operational-transformation collect, no demo included.") (implies . ()) (modules . ((lib "operational-transformation/main.rkt") (lib "operational-transformation/server.rkt") (lib "operational-transformation/operation.rkt") (lib "operational-transformation/text/simple-document.rkt") (lib "operational-transformation/client.rkt") (lib "operational-transformation/text.rkt"))) (name . "operational-transformation-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-lib") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-lib"))))))) ("opt" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opt" "doc/opt@opt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/opt.txt"))) (checksum . "83544737512709bfbdf5d65a956ee12c4cc7e822") (checksum-error . #f) (collection . "opt") (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib")) (description . "Optional and Either data type utilities.\r\nProvides util function for Typed Racket's Option type as well as defines an Either type.") (implies . ()) (modules . ((lib "opt/option.rkt") (lib "opt/either.rkt") (lib "opt/scribblings/opt.scrbl"))) (name . "opt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (datatype . #t) (either . #t) (option . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/opt.git") (tags . ("datatype" "either" "option")) (versions . #hash((default . #hasheq((checksum . "83544737512709bfbdf5d65a956ee12c4cc7e822") (source . "https://gitlab.com/RayRacine/opt.git") (source_url . "https://gitlab.com/RayRacine/opt.git"))))))) ("optimization-coach" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "optimization-coach" "doc/optimization-coach@optimization-coach/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef9474eea0176baa60fc5518943a1429f13cd76") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "drracket" "typed-racket-lib" "profile-lib" "rackunit-lib" "gui-lib" "data-lib" "source-syntax" "images-lib" "sandbox-lib" "string-constants-lib" "scribble-lib")) (description . "Optimization Coach Plug-In for DrRacket") (implies . ()) (modules . ((lib "optimization-coach/utils.rkt") (lib "optimization-coach/hidden-costs.rkt") (lib "optimization-coach/locality-merging.rkt") (lib "optimization-coach/causality-merging.rkt") (lib "optimization-coach/sandbox.rkt") (lib "optimization-coach/profiling.rkt") (lib "optimization-coach/scribblings/optimization-coach.scrbl") (lib "optimization-coach/main.rkt") (lib "optimization-coach/structs.rkt") (lib "optimization-coach/instrumentation.rkt") (lib "optimization-coach/display.rkt") (lib "optimization-coach/report.rkt") (lib "optimization-coach/inlining.rkt") (lib "optimization-coach/typed-racket.rkt") (lib "optimization-coach/tool.rkt"))) (name . "optimization-coach") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:stamourv@racket-lang.org . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/stamourv/optimization-coach/tree/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "dbd6cf06613bf285b4540301ea86dd87239eab7d") (source . "github://github.com/stamourv/optimization-coach/master") (source_url . "http://github.com/stamourv/optimization-coach/tree/master"))))))) ("option-bind" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "option-bind" "doc/option-bind@option-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/option-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/option-bind.txt"))) (checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (checksum-error . #f) (collection . "option-bind") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "typed-racket-lib" "typed-racket-more")) (description . "Monadic shorthand for propagating #f in Option types") (implies . ()) (modules . ((lib "option-bind/main.rkt") (lib "option-bind/scribblings/option-bind.scrbl"))) (name . "option-bind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:jmj@fellowhuman.com . #t) (ring:1 . #t))) (source . "http://github.com/RenaissanceBug/option-bind/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (source . "git://github.com/RenaissanceBug/option-bind") (source_url . "http://github.com/RenaissanceBug/option-bind/tree/master"))))))) ("org" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/org.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (checksum-error . #f) (collection . "org") (conflicts . ()) (date-added . 1632084504) (dependencies . ("base" "laundry")) (description . "Org mode as #lang org.") (implies . ()) (modules . ((lib "org/main.rkt"))) (name . "org") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tgbugs@gmail.com . #t) (laundry . #t) (org . #t) (org-mode . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=org#master") (tags . ("laundry" "org" "org-mode")) (versions . #hash((default . #hasheq((checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (source . "https://github.com/tgbugs/laundry.git?path=org#master") (source_url . "https://github.com/tgbugs/laundry.git?path=org#master"))))))) ("org-mode" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/org-mode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/org-mode.txt"))) (checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A native Racket reader and writer for org-mode files.") (implies . ()) (modules . ((lib "file/org-mode.rkt"))) (name . "org-mode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (file . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/org-mode/tree/master") (tags . ("file")) (versions . #hash((default . #hasheq((checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (source . "github://github.com/jeapostrophe/org-mode/master") (source_url . "http://github.com/jeapostrophe/org-mode/tree/master"))))))) ("org-tools" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/org-tools.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (checksum-error . #f) (collection . "org-tools") (conflicts . ()) (date-added . 1653723863) (dependencies . ("draw-lib" "drracket-plugin-lib" "gui-lib" "base" "org")) (description . "DrRacket tool for Org Mode") (implies . ()) (modules . ((lib "org-tools/mode.rkt"))) (name . "org-tools") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tgbugs@gmail.com . #t) (laundry . #t) (org . #t) (org-mode . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=org-tools#master") (tags . ("laundry" "org" "org-mode")) (versions . #hash((default . #hasheq((checksum . "5f08dbadd1b9ec9477340a145fc6fe2a459d3745") (source . "https://github.com/tgbugs/laundry.git?path=org-tools#master") (source_url . "https://github.com/tgbugs/laundry.git?path=org-tools#master"))))))) ("osc" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "osc" "doc/osc@osc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/osc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/osc.txt"))) (checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Open Sound Control data definitions") (implies . ()) (modules . ((lib "osc/osc-to-bytes.rkt") (lib "osc/examples/send-to-renoise.rkt") (lib "osc/examples/try-sending.rkt") (lib "osc/examples/decode-supercollider.rkt") (lib "osc/main.rkt") (lib "osc/osc.scrbl") (lib "osc/osc-time.rkt") (lib "osc/osc-defns.rkt") (lib "osc/examples/libpcap-read.rkt") (lib "osc/osc-common.rkt") (lib "osc/bytes-to-osc.rkt") (lib "osc/osc-quickcheck.rkt") (lib "osc/examples/decode-helper.rkt"))) (name . "osc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/osc/tree/master") (tags . ("audio" "io")) (versions . #hash((default . #hasheq((checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (source . "github://github.com/jbclements/osc/master") (source_url . "http://github.com/jbclements/osc/tree/master"))))))) ("otp" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp.txt"))) (checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612236772) (dependencies . ("crypto-lib" "rackunit-lib" "base" "otp-lib" "typed-otp-lib" "otp-doc")) (description . "Implementation of one-time passwords as specified by RFC4226 and RFC6238.") (implies . ("otp-lib" "typed-otp-lib" "otp-doc")) (modules . ((lib "otp/test.rkt"))) (name . "otp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:yilin@kebab-ca.se . #t) (crypto . #t) (otp . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp") (tags . ("crypto" "otp")) (versions . #hash((default . #hasheq((checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (source . "https://github.com/yilinwei/otp.git?path=otp") (source_url . "https://github.com/yilinwei/otp.git?path=otp"))))))) ("otp-doc" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "otp" "doc/otp@otp-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp-doc.txt"))) (checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612291950) (dependencies . ("base" "racket-doc" "scribble-lib" "otp-lib" "crypto-lib" "crypto-doc")) (description . "") (implies . ()) (modules . ((lib "otp/scribblings/utils.rkt"))) (name . "otp-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yilin@kebab-ca.se . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (source . "https://github.com/yilinwei/otp.git?path=otp-doc") (source_url . "https://github.com/yilinwei/otp.git?path=otp-doc"))))))) ("otp-lib" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp-lib.txt"))) (checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612286684) (dependencies . ("base" "crypto-lib" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "otp/private/checksum.rkt") (lib "otp/private/utils.rkt") (lib "otp/private/totp.rkt") (lib "otp/private/hotp.rkt") (lib "otp/private/error.rkt") (lib "otp/main.rkt"))) (name . "otp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yilin@kebab-ca.se . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (source . "https://github.com/yilinwei/otp.git?path=otp-lib") (source_url . "https://github.com/yilinwei/otp.git?path=otp-lib"))))))) ("overscan" . #hasheq((author . "mark@markwunsch.com") (authors . ("mark@markwunsch.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/overscan.txt") (docs . (("main" "overscan" "doc/overscan@overscan/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/overscan.txt") (test-failure-log . "server/built/test-fail/overscan.txt") (test-success-log . #f))) (checksum . "f198e6b4c1f64cf5720e66ab5ad27fdc4b9e67e9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "gui-lib" "sgl" "scribble-lib" "racket-doc")) (description . "A toolkit and live coding environment for broadcasting video.") (implies . ()) (modules . ((lib "overscan/scribblings/overscan/introspection.scrbl") (lib "gstreamer/gst.rkt") (lib "gstreamer/video.rkt") (lib "gstreamer/event.rkt") (lib "gstreamer/element.rkt") (lib "overscan/scribblings/overscan/gstreamer/pad.scrbl") (lib "overscan/macos.rkt") (lib "gstreamer/private/opengl.rkt") (lib "gstreamer/main.rkt") (lib "gstreamer/draw.rkt") (lib "overscan/video.rkt") (lib "overscan/scribblings/overscan/gstreamer/elements.scrbl") (lib "gstreamer/buffer.rkt") (lib "gstreamer/context.rkt") (lib "overscan/scribblings/overscan/gstreamer/buffer.scrbl") (lib "overscan/scribblings/overscan/gstreamer/bin.scrbl") (lib "overscan/scribblings/overscan/getting-started.scrbl") (lib "gstreamer/caps.rkt") (lib "gstreamer/message.rkt") (lib "gstreamer/clock.rkt") (lib "overscan/scribblings/overscan.scrbl") (lib "overscan/main.rkt") (lib "overscan/scribblings/examples/logo.rkt") (lib "gstreamer/elements.rkt") (lib "overscan/scribblings/overscan/gstreamer/bus.scrbl") (lib "gstreamer/factories.rkt") (lib "gstreamer/bin.rkt") (lib "overscan/scribblings/overscan/gstreamer/caps.scrbl") (lib "overscan/draw.rkt") (lib "gstreamer/private/structure.rkt") (lib "gstreamer/bus.rkt") (lib "overscan/twitch.rkt") (lib "ffi/unsafe/introspection.rkt") (lib "overscan/scribblings/overscan/gstreamer.scrbl") (lib "overscan/scribblings/overscan/gstreamer/element.scrbl") (lib "overscan/scribblings/utilities.rkt") (lib "gstreamer/device.rkt") (lib "overscan/scribblings/overscan/gstreamer/clock.scrbl") (lib "overscan/scribblings/overscan/gstreamer/device.scrbl") (lib "overscan/scribblings/overscan/broadcasting.scrbl") (lib "gstreamer/private/core.rkt") (lib "overscan/youtube.rkt") (lib "gstreamer/appsink.rkt") (lib "gstreamer/gui.rkt") (lib "gstreamer/pipeline.rkt"))) (name . "overscan") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:mark@markwunsch.com . #t) (broadcasting . #t) (ffi . #t) (gobject-introspection . #t) (gstreamer . #t) (media . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/mwunsch/overscan.git") (tags . ("broadcasting" "ffi" "gobject-introspection" "gstreamer" "media" "video")) (versions . #hash((default . #hasheq((checksum . "f198e6b4c1f64cf5720e66ab5ad27fdc4b9e67e9") (source . "https://github.com/mwunsch/overscan.git") (source_url . "https://github.com/mwunsch/overscan.git"))))))) ("package-analysis" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "package-analysis" "doc/package-analysis@package-analysis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/package-analysis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/package-analysis.txt"))) (checksum . "785bc9b1eac503c9359d9d08936422f6f47ce82b") (checksum-error . #f) (collection . "package-analysis") (conflicts . ()) (date-added . 1570856027) (dependencies . ("base" "rebellion" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A package for analyzing the Racket package ecosystem") (implies . ()) (modules . ((lib "package-analysis/client.scrbl") (lib "package-analysis/data-model.rkt") (lib "package-analysis/client.rkt") (lib "package-analysis/main.rkt") (lib "package-analysis/main.scrbl") (lib "package-analysis/package-version.scrbl") (lib "package-analysis/package-dependency.scrbl") (lib "package-analysis/catalog.scrbl") (lib "package-analysis/package-details.scrbl"))) (name . "package-analysis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (analytics . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/package-analysis.git") (tags . ("analytics")) (versions . #hash((default . #hasheq((checksum . "785bc9b1eac503c9359d9d08936422f6f47ce82b") (source . "https://github.com/jackfirth/package-analysis.git") (source_url . "https://github.com/jackfirth/package-analysis.git"))))))) ("packet-socket" . #hasheq((author . "tonygarnockjones@gmail.com schuster@ccs.neu.edu") (authors . ("tonygarnockjones@gmail.com" "schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/packet-socket.txt") (success-log . "server/built/install/packet-socket.txt") (test-failure-log . "server/built/test-fail/packet-socket.txt") (test-success-log . #f))) (checksum . "831e638e9aa9b0c3c8ecc2cbb4d1b91f57b93f1b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib")) (description . "Access to raw Ethernet frames from Racket") (implies . ()) (modules . ((lib "packet-socket/main.rkt") (lib "packet-socket/private/install.rkt"))) (name . "packet-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schuster@ccs.neu.edu . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-packet-socket/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "831e638e9aa9b0c3c8ecc2cbb4d1b91f57b93f1b") (source . "git://github.com/tonyg/racket-packet-socket") (source_url . "http://github.com/tonyg/racket-packet-socket/tree/master"))))))) ("paddle" . #hasheq((author . "matt@jadud.com") (authors . ("matt@jadud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "paddle" "doc/paddle@paddle/index.html"))) (failure-log . "server/built/fail/paddle.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "38e2ff034635b988549d875bb9d8bd1ab0252ad2") (checksum-error . #f) (collection . "paddle") (conflicts . ()) (date-added . 1547908613) (dependencies . ("base" "draw-lib" "gui-lib" "sgl")) (description . "Paddle is a microworld. ") (implies . ()) (modules . ((lib "paddle/src/types.rkt") (lib "paddle/examples/sheep-wolves.rkt") (lib "paddle/examples/gameoflife.rkt") (lib "paddle/examples/diffusion.rkt") (lib "paddle/examples/direction-test.rkt") (lib "paddle/src/util.rkt") (lib "paddle/scribblings/misc.scrbl") (lib "paddle/examples/termites.rkt") (lib "paddle/src/netlogo.rkt") (lib "paddle/src/agents.rkt") (lib "paddle/src/log.rkt") (lib "paddle/src/patches.rkt") (lib "paddle/scribblings/paddle.scrbl") (lib "paddle/main.rkt") (lib "paddle/examples/boids.rkt") (lib "paddle/src/world.rkt") (lib "paddle/src/gui.rkt") (lib "paddle/src/get-set.rkt") (lib "paddle/examples/rle-patterns.rkt") (lib "paddle/src/state.rkt") (lib "paddle/src/agentsets.rkt") (lib "paddle/src/breeds.rkt") (lib "paddle/src/quadtree.rkt") (lib "paddle/src/plot.rkt") (lib "paddle/examples/rle.rkt"))) (name . "paddle") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (agent-based . #t) (author:matt@jadud.com . #t) (microworld . #t) (ring:1 . #t) (turtles . #t))) (source . "https://github.com/jadudm/paddle.git") (tags . ("agent-based" "microworld" "turtles")) (versions . #hash((default . #hasheq((checksum . "38e2ff034635b988549d875bb9d8bd1ab0252ad2") (source . "https://github.com/jadudm/paddle.git") (source_url . "https://github.com/jadudm/paddle.git"))))))) ("pangu" . #hasheq((author . "mail@kisaragi-hiu.com") (authors . ("mail@kisaragi-hiu.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pangu" "doc/pangu@pangu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pangu.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pangu.txt"))) (checksum . "52e1505c89019e9b15eed0087a4386ccb4bd65d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1576535118) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Paranoid text spacing with Racket.") (implies . ()) (modules . ((lib "pangu/main.rkt") (lib "pangu/test.rkt") (lib "pangu/scribblings/pangu.scrbl"))) (name . "pangu") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mail@kisaragi-hiu.com . #t) (ring:1 . #t))) (source . "https://github.com/kisaragi-hiu/pangu.rkt.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "52e1505c89019e9b15eed0087a4386ccb4bd65d1") (source . "https://github.com/kisaragi-hiu/pangu.rkt.git") (source_url . "https://github.com/kisaragi-hiu/pangu.rkt.git"))))))) ("parameter" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parameter.txt") (docs . (("main" "parameter" "doc/parameter@parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parameter.txt"))) (checksum . "d084723e260a133e792317286fb05494aabc29ed") (checksum-error . #f) (collection . "parameter") (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib")) (description . "Parameter utilities") (implies . ()) (modules . ((lib "parameter/parameter.scrbl") (lib "parameter/main.rkt"))) (name . "parameter") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/samth/parameter.plt/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d084723e260a133e792317286fb05494aabc29ed") (source . "git://github.com/samth/parameter.plt") (source_url . "http://github.com/samth/parameter.plt/tree/master"))))))) ("paren-shape" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "paren-shape-pattern-expanders" "doc/paren-shape-pattern-expanders@paren-shape/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/paren-shape.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/paren-shape.txt"))) (checksum . "c25e7aa6671e1630a669d33de6e554e9ad7f5fd2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib" "rackunit-lib" "scribble-lib" "racket-doc" "syntax-classes-doc")) (description . "Deprecated. Use syntax-classes-lib instead.") (implies . ()) (modules . ((lib "paren-shape/scribblings/paren-shape-pattern-expanders.scrbl") (lib "paren-shape/pattern-expander.rkt"))) (name . "paren-shape") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "http://github.com/AlexKnauth/paren-shape/tree/master") (tags . ("deprecated" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "c25e7aa6671e1630a669d33de6e554e9ad7f5fd2") (source . "git://github.com/AlexKnauth/paren-shape") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master"))))))) ("parendown" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown.txt"))) (checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519535) (dependencies . ("parendown-doc" "parendown-lib")) (description . "A weak opening parenthesis, good for eliminating indentation.") (implies . ("parendown-doc" "parendown-lib")) (modules . ()) (name . "parendown") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main"))))))) ("parendown-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parendown" "doc/parendown@parendown-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-doc.txt"))) (checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519523) (dependencies . ("base" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A weak opening parenthesis, good for eliminating indentation. (doc)") (implies . ()) (modules . ((lib "parendown/scribblings/parendown.scrbl"))) (name . "parendown-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main"))))))) ("parendown-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-lib.txt"))) (checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519511) (dependencies . ("base")) (description . "A weak opening parenthesis, good for eliminating indentation. (lib)") (implies . ()) (modules . ((lib "parendown/lang/reader.rkt") (lib "parendown/slash/lang/reader.rkt") (lib "parendown/main.rkt"))) (name . "parendown-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main"))))))) ("parendown-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-test.txt"))) (checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519498) (dependencies . ("base" "parendown-lib" "rackunit-lib")) (description . "A weak opening parenthesis, good for eliminating indentation. (test)") (implies . ()) (modules . ((lib "parendown/tests.rkt") (lib "parendown/tests/slash.rkt"))) (name . "parendown-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "0bcd45cc69ec18ff3c4b8338c3fdc35c20e30cad") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main"))))))) ("parenlog" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parenlog.txt") (docs . (("main" "parenlog" "doc/parenlog@parenlog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parenlog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parenlog.txt"))) (checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (checksum-error . #f) (collection . "parenlog") (conflicts . ()) (dependencies . ("base" "chk-lib" "racket-doc" "scribble-lib")) (description . "A language that is like Prolog, but parenthetical.") (implies . ()) (modules . ((lib "parenlog/examples/type-class.rkt") (lib "parenlog/lang/reader.rkt") (lib "parenlog/lang.rkt") (lib "parenlog/core.rkt") (lib "parenlog/examples/linear.rkt") (lib "parenlog/examples/family-tree.rkt") (lib "parenlog/examples/short.rkt") (lib "parenlog/examples/type.rkt") (lib "parenlog/parenlog.scrbl") (lib "parenlog/parenlog.rkt") (lib "parenlog/stx.rkt") (lib "parenlog/main.rkt"))) (name . "parenlog") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (language . #t) (logic . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/parenlog/tree/master") (tags . ("language" "logic")) (versions . #hash((default . #hasheq((checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (source . "github://github.com/jeapostrophe/parenlog/master") (source_url . "http://github.com/jeapostrophe/parenlog/tree/master"))))))) ("pareto-frontier" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pareto-frontier" "doc/pareto-frontier@pareto-frontier/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pareto-frontier.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pareto-frontier.txt"))) (checksum . "f2409c3ad5a411562e6358618b78c0b9541d8bf8") (checksum-error . #f) (collection . "pareto-frontier") (conflicts . ()) (date-added . 1633067615) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Efficient Pareto frontier calculation") (implies . ()) (modules . ((lib "pareto-frontier/main.rkt") (lib "pareto-frontier/scribblings/pareto-frontier.scrbl"))) (name . "pareto-frontier") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algorithms . #t) (author:sorawee.pwase@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/pareto-frontier.git") (tags . ("algorithms")) (versions . #hash((default . #hasheq((checksum . "f2409c3ad5a411562e6358618b78c0b9541d8bf8") (source . "https://github.com/sorawee/pareto-frontier.git") (source_url . "https://github.com/sorawee/pareto-frontier.git"))))))) ("parquet" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parquet" "doc/parquet@parquet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parquet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parquet.txt"))) (checksum . "19a26155d832d1102003ddd67dcd40c2fb1c5325") (checksum-error . #f) (collection . "parquet") (conflicts . ()) (dependencies . ("base" "thrift" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Support for the Apache Parquet column-oriented file format. Uses the thrift package for actual file handling.") (implies . ()) (modules . ((lib "parquet/tests/file.rkt") (lib "parquet/scribblings/_parquet.scrbl") (lib "parquet/scribblings/file.scrbl") (lib "parquet/generated/parquet-encode.rkt") (lib "parquet/format.rkt") (lib "parquet/main.rkt") (lib "parquet/tests/test-doc-complete.rkt") (lib "parquet/scribblings/parquet.scrbl") (lib "parquet/generated/parquet-decode.rkt") (lib "parquet/generated/parquet.rkt") (lib "parquet/file.rkt") (lib "parquet/tests/parquet.rkt") (lib "parquet/scribblings/generated-parquet.scrbl"))) (name . "parquet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-parquet.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "19a26155d832d1102003ddd67dcd40c2fb1c5325") (source . "https://github.com/johnstonskj/racket-parquet.git") (source_url . "https://github.com/johnstonskj/racket-parquet.git"))))))) ("parsack" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack.txt"))) (checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657641485) (dependencies . ("base" "parsack-lib" "parsack-doc" "parsack-test" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A basic Parsec (Haskell's monadic parser combinator library) implementation.") (implies . ("parsack-lib" "parsack-doc" "parsack-test")) (modules . ()) (name . "parsack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/stchang/parsack.git?path=parsack#master") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (source . "https://github.com/stchang/parsack.git?path=parsack#master") (source_url . "https://github.com/stchang/parsack.git?path=parsack#master"))))))) ("parsack-doc" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parsack" "doc/parsack@parsack-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack-doc.txt"))) (checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657641650) (dependencies . ("base" "parsack-lib" "scribble-lib" "racket-doc")) (description . "documentation for parsack") (implies . ()) (modules . ((lib "parsack/scribblings/parsack.scrbl"))) (name . "parsack-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (documentation . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/stchang/parsack.git?path=parsack-doc#master") (tags . ("documentation" "parsing")) (versions . #hash((default . #hasheq((checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (source . "https://github.com/stchang/parsack.git?path=parsack-doc#master") (source_url . "https://github.com/stchang/parsack.git?path=parsack-doc#master"))))))) ("parsack-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack-lib.txt"))) (checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657641581) (dependencies . ("base")) (description . "core parsack files (no docs or tests)") (implies . ()) (modules . ((lib "parsack/main.rkt") (lib "parsack/parsack.rkt"))) (name . "parsack-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/stchang/parsack.git?path=parsack-lib#master") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (source . "https://github.com/stchang/parsack.git?path=parsack-lib#master") (source_url . "https://github.com/stchang/parsack.git?path=parsack-lib#master"))))))) ("parsack-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack-test.txt"))) (checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1657641718) (dependencies . ("base" "parsack-lib" "rackunit-lib")) (description . "tests and examples for parsack") (implies . ()) (modules . ((lib "tests/parsack/example-tests/csv-parser-basic-tests.rkt") (lib "tests/parsack/run-all-tests.rkt") (lib "parsack/examples/csv-parser-basic.rkt") (lib "tests/parsack/bytestring-tests.rkt") (lib "parsack/examples/csv-parser-sepBy.rkt") (lib "tests/parsack/example-tests/json-parser-tests.rkt") (lib "tests/parsack/example-tests/json-perf-test.rkt") (lib "tests/parsack/example-tests/http-request-parser-tests.rkt") (lib "tests/parsack/example-tests/parse-result-tests.rkt") (lib "tests/parsack/example-tests/csv-parser-quoted-tests.rkt") (lib "tests/parsack/example-tests/csv-parser-sepBy-tests.rkt") (lib "parsack/examples/json-parser.rkt") (lib "parsack/examples/url-query-parser.rkt") (lib "tests/parsack/example-tests/url-query-parser-tests.rkt") (lib "tests/parsack/parsack-tests.rkt") (lib "parsack/examples/csv-parser-quoted.rkt") (lib "parsack/examples/http-request-parser.rkt") (lib "tests/parsack/test-utils.rkt") (lib "parsack/examples/scheme-parser.rkt"))) (name . "parsack-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (parsing . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/stchang/parsack.git?path=parsack-test#master") (tags . ("parsing" "tests")) (versions . #hash((default . #hasheq((checksum . "57b21873e8e3eb7ffbdfa253251c3c27a66723b1") (source . "https://github.com/stchang/parsack.git?path=parsack-test#master") (source_url . "https://github.com/stchang/parsack.git?path=parsack-test#master"))))))) ("parse-qif" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parse-qif.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parse-qif.txt") (test-failure-log . "server/built/test-fail/parse-qif.txt") (test-success-log . #f))) (checksum . "e795b5f47b7ee80a63ecb13177b9160ede073872") (checksum-error . #f) (collection . "parse-qif") (conflicts . ()) (dependencies . ()) (description . "Basic QIF-parsing code, used to apply categories to downloaded transactions") (implies . ()) (modules . ((lib "parse-qif/main.rkt") (lib "parse-qif/parse-qif.rkt"))) (name . "parse-qif") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (qif . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/parse-qif.git") (tags . ("parser" "parsing" "qif")) (versions . #hash((default . #hasheq((checksum . "e795b5f47b7ee80a63ecb13177b9160ede073872") (source . "https://github.com/jbclements/parse-qif.git") (source_url . "https://github.com/jbclements/parse-qif.git"))))))) ("parser-combinator" . #hasheq((author . "nathan@nixpulvis.com") (authors . ("nathan@nixpulvis.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parser-combinator.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parser-combinator.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parser-combinator.txt"))) (checksum . "9635c0479c1841e122a75faa35d1d76333ef3cb6") (checksum-error . #f) (collection . "parser-combinator") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "htdp-lib")) (description . "Parser / Lexer Library, and JSON Implementation.") (implies . ()) (modules . ((lib "parser-combinator/json.rkt") (lib "parser-combinator/json-tests.rkt") (lib "parser-combinator/parse.rkt") (lib "parser-combinator/parse-tests.rkt"))) (name . "parser-combinator") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:nathan@nixpulvis.com . #t) (json . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/nixpulvis/parser-combinator.git") (tags . ("json" "parser")) (versions . #hash((default . #hasheq((checksum . "9635c0479c1841e122a75faa35d1d76333ef3cb6") (source . "https://github.com/nixpulvis/parser-combinator.git") (source_url . "https://github.com/nixpulvis/parser-combinator.git"))))))) ("pcf" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "pcf") ("salvage" "redex-to-lang" "doc/redex-to-lang@pcf/index.html"))) (failure-log . "server/built/fail/pcf.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "redex-lib" "redex-pict-lib" "unstable-lib" "scribble-lib" "racket-doc" "sandbox-lib" "redex-doc" "scribble-doc")) (description . "PCF with Contracts and Symbolic Values") (implies . ()) (modules . ((lib "pcf/lang.rkt") (lib "tests/cpcf/redex.rkt") (lib "pcf/types.rkt") (lib "spcf/heap/lang/reader.rkt") (lib "pcf/heap/test.rkt") (lib "tests/pcf/redex.rkt") (lib "scpcf/heap/lang/reader.rkt") (lib "scpcf/heap/lang.rkt") (lib "pcf/syntax.rkt") (lib "spcf/heap/semantics.rkt") (lib "spcf/heap/syntax.rkt") (lib "pcf/heap/examples/fact5.rkt") (lib "spcf/types.rkt") (lib "scpcf/syntax.rkt") (lib "scpcf/lang.rkt") (lib "cpcf/heap/lang/reader.rkt") (lib "tests/scpcf/make-tests.rkt") (lib "cpcf/syntax.rkt") (lib "tests/spcf/make-tests.rkt") (lib "spcf/heap/test.rkt") (lib "pcf/source/lang.rkt") (lib "pcf/private/racket-pcf.rkt") (lib "scpcf/examples.rkt") (lib "spcf/semantics.rkt") (lib "pcf/private/return.rkt") (lib "pcf/private/prover.rkt") (lib "scpcf/lang/reader.rkt") (lib "scpcf/redex.rkt") (lib "scribblings/redex-to-lang/redex-to-lang.scrbl") (lib "pcf/heap/lang/reader.rkt") (lib "scpcf/heap/test.rkt") (lib "cpcf/heap/syntax.rkt") (lib "cpcf/heap/test.rkt") (lib "pcf/private/subst.rkt") (lib "spcf/redex.rkt") (lib "spcf/lang/reader.rkt") (lib "scpcf/types.rkt") (lib "cpcf/heap/semantics.rkt") (lib "cpcf/lang/reader.rkt") (lib "spcf/examples.rkt") (lib "scpcf/semantics.rkt") (lib "scribblings/pcf/pcf.scrbl") (lib "pcf/redex.rkt") (lib "pcf/private/make-lang.rkt") (lib "pcf/source.rkt") (lib "pcf/private/label.rkt") (lib "tests/cpcf/make-tests.rkt") (lib "pcf/source/lang/reader.rkt") (lib "pcf/heap/lang.rkt") (lib "cpcf/heap/lang.rkt") (lib "cpcf/lang.rkt") (lib "scpcf/heap/semantics.rkt") (lib "spcf/lang.rkt") (lib "tests/pcf/make-tests.rkt") (lib "cpcf/examples.rkt") (lib "pcf/semantics.rkt") (lib "pcf/private/lexical.rkt") (lib "pcf/heap/semantics.rkt") (lib "cpcf/types.rkt") (lib "scpcf/heap/examples.rkt") (lib "tests/spcf/redex.rkt") (lib "tests/scpcf/redex.rkt") (lib "cpcf/test.rkt") (lib "pcf/test.rkt") (lib "cpcf/redex.rkt") (lib "pcf/examples.rkt") (lib "pcf/lang/reader.rkt") (lib "scpcf/heap/syntax.rkt") (lib "pcf/heap/syntax.rkt") (lib "cpcf/semantics.rkt") (lib "spcf/syntax.rkt") (lib "spcf/heap/lang.rkt"))) (name . "pcf") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:dvanhorn@racket-lang.org . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/dvanhorn/pcf/tree/master/") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (source . "github://github.com/dvanhorn/pcf/master/") (source_url . "http://github.com/dvanhorn/pcf/tree/master/"))))))) ("pcg" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pcg" "doc/pcg@pcg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pcg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pcg.txt"))) (checksum . "4a03a774377ff84aae29c563bc5170edd9a200e0") (checksum-error . #f) (collection . "pcg") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Permuted congruential generators (PCG) in Racket") (implies . ()) (modules . ((lib "pcg/scribblings/pcg.scrbl") (lib "pcg/main.rkt"))) (name . "pcg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (pcg . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/pcg.git") (tags . ("pcg" "random")) (versions . #hash((default . #hasheq((checksum . "4a03a774377ff84aae29c563bc5170edd9a200e0") (source . "https://github.com/BourgondAries/pcg.git") (source_url . "https://github.com/BourgondAries/pcg.git"))))))) ("pdf-read" . #hasheq((author . "gcr@sneakygcr.net") (authors . ("gcr@sneakygcr.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pdf-read" "doc/pdf-read@pdf-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pdf-read.txt") (test-failure-log . "server/built/test-fail/pdf-read.txt") (test-success-log . #f))) (checksum . "bc442055764128efb06badeac8b4bfd026475106") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "draw-lib" "slideshow-lib" "scribble-lib" "racket-doc" "pict-doc" "draw-doc")) (description . "PDF reading library. Read PDF documents into picts and bitmap%s. You can also gather text and layout information. Requires liboppler.") (implies . ()) (modules . ((lib "pdf-read/main.rkt") (lib "pdf-read/ffi.rkt") (lib "pdf-read/pdf-read.scrbl"))) (name . "pdf-read") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gcr@sneakygcr.net . #t) (documents . #t) (graphics . #t) (io . #t) (media . #t) (pdf . #t) (ring:1 . #t))) (source . "git://github.com/gcr/pdf-read/") (tags . ("documents" "graphics" "io" "media" "pdf")) (versions . #hash((default . #hasheq((checksum . "bc442055764128efb06badeac8b4bfd026475106") (source . "git://github.com/gcr/pdf-read/") (source_url . "git://github.com/gcr/pdf-read/"))))))) ("peg" . #hasheq((author . "rain1@airmail.cc") (authors . ("rain1@airmail.cc")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peg" "doc/peg@peg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/peg.txt"))) (checksum . "5191749fa13686045f2170358097eb81d710a9de") (checksum-error . #f) (collection . "peg") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "PEG parser generator") (implies . ()) (modules . ((lib "peg/scribblings/peg.scrbl") (lib "peg/tests/peg-syntax-harness/peg-test-guile-passwd.rkt") (lib "peg/tests/s-exp/tests.rkt") (lib "peg/tests/docs-example-1.rkt") (lib "peg/tests/peg-syntax/peg-example-named-pattern.rkt") (lib "peg/tests/peg-syntax/peg-example-canopy.rkt") (lib "peg/tests/test-regex-range.rkt") (lib "peg/tests/peg-syntax/peg-example-float.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-peg-in-peg-comments.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-peg-as-peg.rkt") (lib "peg/tests/peg-syntax/peg-example-bracket-expand.rkt") (lib "peg/push-pop-boxes.rkt") (lib "peg/tests/peg-syntax/peg-example-shell.rkt") (lib "peg/tests/docs-example-2.rkt") (lib "peg/tests/peg-syntax/peg-example-peg-as-peg.rkt") (lib "peg/tests/peg-syntax/peg-example-guile-passwd.rkt") (lib "peg/tests/test-shell.rkt") (lib "peg/tests/docs-example-3.rkt") (lib "peg/tests/peg-syntax/peg-example-guile-cfunc.rkt") (lib "peg/tests/test-json.rkt") (lib "peg/tests/test-multibrack.rkt") (lib "peg/peg-to-scheme.rkt") (lib "peg/tests/test-etc-passwd.rkt") (lib "peg/tests/list-monad.rkt") (lib "peg/tests/peg-syntax-harness/test-named-pattern.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-antlr-query-language.rkt") (lib "peg/tests/test-bracket-expand.rkt") (lib "peg/tests/test-unicode.rkt") (lib "peg/tests/test-quests.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-expr.rkt") (lib "peg/tests/peg-syntax-harness/test-comma-separated-number.rkt") (lib "peg/tests/peg-syntax/peg-example-peg-in-peg-comments.rkt") (lib "peg/tests/peg-syntax/peg-example-imp.rkt") (lib "peg/tests/peg-syntax/peg-example-newick.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-guile-cfunc.rkt") (lib "peg/s-exp.rkt") (lib "peg/tests/peg-syntax/peg-example-antlr-query-language.rkt") (lib "peg/tests/peg-syntax/peg-example-expr.rkt") (lib "peg/tests/peg-syntax/peg-example-positive-lookahead.rkt") (lib "peg/tests/peg-syntax-harness/test-imp.rkt") (lib "peg/tests/s-exp/test-dotted-pair.rkt") (lib "peg/tests/peg-syntax/peg-example-empty.rkt") (lib "peg/tests/peg-syntax/peg-example-quests.rkt") (lib "peg/tests/test-blg.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-positive-lookahead.rkt") (lib "peg/tests/test-cfunc.rkt") (lib "peg/tests/test-verbose.rkt") (lib "peg/main.rkt") (lib "peg/tests/peg-syntax-harness/test-newick.rkt") (lib "peg/tests/s-exp/test-chars.rkt") (lib "peg/peg-result.rkt") (lib "peg/tests/test-tiny.rkt") (lib "peg/tests/s-exp/test-numbers.rkt") (lib "peg/tests/peg-syntax/peg-example-n.rkt") (lib "peg/tests/peg-syntax/peg-example-false-action.rkt") (lib "peg/peg.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-false-action.rkt") (lib "peg/tests/peg-syntax/peg-example-comma-separated-number.rkt") (lib "peg/tests/peg-syntax-harness/test-import.rkt") (lib "peg/tests/peg-syntax/peg-example-import.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-canopy.rkt") (lib "peg/tests/test-palindrome.rkt") (lib "peg/peg-in-peg.rkt"))) (name . "peg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rain1@airmail.cc . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "5191749fa13686045f2170358097eb81d710a9de") (source . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de") (source_url . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de"))))))) ("peg-gen" . #hasheq((author . "eltonm.cardoso@gmail.com") (authors . ("eltonm.cardoso@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peg-gen" "doc/peg-gen@peg-gen/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peg-gen.txt") (test-failure-log . "server/built/test-fail/peg-gen.txt") (test-success-log . #f))) (checksum . "5e834bf07cc579827e5258d18b1d146a6e2b649e") (checksum-error . #f) (collection . "peg-gen") (conflicts . ()) (date-added . 1644606649) (dependencies . ("algorithms" "base" "rackcheck" "rackunit" "cover-lib" "typed-peg" "algorithms" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Well-formed random PEG generator") (implies . ()) (modules . ((lib "peg-gen/tests/well-formed.rkt") (lib "peg-gen/tests/verf-well-formed.rkt") (lib "peg-gen/scribblings/peg-gen.scrbl") (lib "peg-gen/tests/test-coverage.rkt") (lib "peg-gen/peg-gen.rkt") (lib "peg-gen/main.rkt"))) (name . "peg-gen") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (GENERATOR . #t) (PEG . #t) (RANDOM . #t) (author:eltonm.cardoso@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lives-group/pegwfgen.git") (tags . ("GENERATOR" "PEG" "RANDOM")) (versions . #hash((default . #hasheq((checksum . "5e834bf07cc579827e5258d18b1d146a6e2b649e") (source . "https://github.com/lives-group/pegwfgen.git") (source_url . "https://github.com/lives-group/pegwfgen.git"))))))) ("peony" . #hasheq((author . "asaglenister@protonmail.com") (authors . ("asaglenister@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peony" "doc/peony@peony/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peony.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/peony.txt"))) (checksum . "cabbb94e5caf786004e9c54dd624fa4ec574998e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586947811) (dependencies . ("base" "web-server" "db-doc" "db-lib" "racket-doc" "scribble-lib")) (description . "A small frontend on web-server to make developing some kinds of webapp quicker.") (implies . ()) (modules . ((lib "peony/peony.scrbl") (lib "peony/main.rkt"))) (name . "peony") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asaglenister@protonmail.com . #t) (ring:1 . #t) (web . #t) (web-framework . #t))) (source . "https://github.com/silver-ag/peony.git") (tags . ("web" "web-framework")) (versions . #hash((default . #hasheq((checksum . "cabbb94e5caf786004e9c54dd624fa4ec574998e") (source . "https://github.com/silver-ag/peony.git") (source_url . "https://github.com/silver-ag/peony.git"))))))) ("persistent-array" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "persistent-array" "doc/persistent-array@persistent-array/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-array.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-array.txt"))) (checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A semi-persistent array") (implies . ()) (modules . ((lib "data/p-array.scrbl") (lib "data/p-array.rkt"))) (name . "persistent-array") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/samth/persistent-array/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (source . "git://github.com/samth/persistent-array") (source_url . "http://github.com/samth/persistent-array/tree/master"))))))) ("persistent-union-find" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-union-find.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-union-find.txt"))) (checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "persistent-array" "r6rs-lib")) (description . "A persistent implementation of the union-find data structure") (implies . ()) (modules . ((lib "data/p-union-find.rkt"))) (name . "persistent-union-find") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/samth/persistent-union-find/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (source . "git://github.com/samth/persistent-union-find") (source_url . "http://github.com/samth/persistent-union-find/tree/master"))))))) ("pex" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pex" "doc/pex@pex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pex.txt") (test-failure-log . "server/built/test-fail/pex.txt") (test-success-log . #f))) (checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "libserialport" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Apollo Art PEx System Control") (implies . ()) (modules . ((lib "pex/pex.scrbl") (lib "pex/main.rkt") (lib "pex/regexp-read.rkt"))) (name . "pex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-pex/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (source . "git://github.com/mordae/racket-pex") (source_url . "http://github.com/mordae/racket-pex/tree/master"))))))) ("pfds" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional-data-structures" "doc/functional-data-structures@pfds/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pfds.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pfds.txt"))) (checksum . "1630af681e6bef5e75503649100b7f0d32a2e9fc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-compatibility" "scheme-lib" "at-exp-lib" "htdp-lib" "racket-doc" "scribble-lib" "typed-racket-more")) (description . "Purely functional data structures for Typed Racket") (implies . ()) (modules . ((lib "pfds/tests/skewbinomialheap-tests.rkt") (lib "pfds/tests/bankers-queue-tests.rkt") (lib "pfds/scribblings/skewbinomialheap.scrbl") (lib "pfds/scribblings/leftistheap.scrbl") (lib "pfds/scribblings/bankers-deque.scrbl") (lib "pfds/tests/skewbinaryrandomaccesslist-tests.rkt") (lib "pfds/ralist/binary.rkt") (lib "pfds/tests/hood-melville-queue-tests.rkt") (lib "pfds/deque/bankers.rkt") (lib "pfds/scribblings/realtimequeue.scrbl") (lib "pfds/scribblings/physicists-queue.scrbl") (lib "pfds/scribblings/binaryrandomaccesslist.scrbl") (lib "pfds/tests/implicitdeque-tests.rkt") (lib "pfds/scribblings/treap.scrbl") (lib "pfds/scribblings/deques.scrbl") (lib "pfds/heap/pairing.rkt") (lib "pfds/heap/bootstrapped.rkt") (lib "pfds/scribblings/functional-data-structures.scrbl") (lib "pfds/queue/hood-melville.rkt") (lib "pfds/scribblings/bootstrapedqueue.scrbl") (lib "pfds/tests/realtimedeque-tests.rkt") (lib "pfds/heap/leftist.rkt") (lib "pfds/tests/stream-tests.rkt") (lib "pfds/scribblings/skewbinaryrandomaccesslist.scrbl") (lib "pfds/heap/lazy-pairing.rkt") (lib "pfds/queue/physicists.rkt") (lib "pfds/tests/bankers-deque-tests.rkt") (lib "pfds/tests/treap-tests.rkt") (lib "pfds/scribblings/hood-melville-queue.scrbl") (lib "pfds/tests/realtimequeue-tests.rkt") (lib "pfds/scribblings/lazypairingheap.scrbl") (lib "pfds/scribblings/queues.scrbl") (lib "pfds/heap/splay.rkt") (lib "pfds/tests/partialstream-tests.rkt") (lib "pfds/deque/real-time.rkt") (lib "pfds/trie.rkt") (lib "pfds/tests/catenablelist-tests.rkt") (lib "pfds/tests/redblacktrees-tests.rkt") (lib "pfds/tests/implicitqueue-tests.rkt") (lib "pfds/scribblings/pairingheap.scrbl") (lib "pfds/queue/implicit.rkt") (lib "pfds/tests/pairingheap-test.rkt") (lib "pfds/tests/lazypairingheap-test.rkt") (lib "pfds/queue/bootstrapped.rkt") (lib "pfds/stream.rkt") (lib "pfds/scribblings/binomialheap.scrbl") (lib "pfds/tests/binary-ran-access-list-tests.rkt") (lib "pfds/red-black-tree.rkt") (lib "pfds/scribblings/queue.scrbl") (lib "pfds/queue/real-time.rkt") (lib "pfds/scribblings/tries.scrbl") (lib "pfds/tests/bankers-deque-benchmarks.rkt") (lib "pfds/scribblings/heaps.scrbl") (lib "pfds/treap.rkt") (lib "pfds/vlist.rkt") (lib "pfds/tests/implicitdeque-performance-tests.rkt") (lib "pfds/scribblings/redblacktrees.scrbl") (lib "pfds/heap/binomial.rkt") (lib "pfds/ralist/skew.rkt") (lib "pfds/scribblings/vlist.scrbl") (lib "pfds/catenable-list.rkt") (lib "pfds/scribblings/bootstrapedheap.scrbl") (lib "pfds/heap/skew-binomial.rkt") (lib "pfds/partialstream.rkt") (lib "pfds/scribblings/streams.scrbl") (lib "pfds/scribblings/realtimedeque.scrbl") (lib "pfds/scribblings/randomaccesslist.scrbl") (lib "pfds/tests/vlist-tests.rkt") (lib "pfds/delay.rkt") (lib "pfds/tests/bootstrapedheap-tests.rkt") (lib "pfds/tests/implicitqueue-performance-tests.rkt") (lib "pfds/tests/leftistheaps-tests.rkt") (lib "pfds/scribblings/splayheap.scrbl") (lib "pfds/deque/implicit.rkt") (lib "pfds/tests/binomialheap-tests.rkt") (lib "pfds/tests/splayheap-tests.rkt") (lib "pfds/scribblings/implicitqueue.scrbl") (lib "pfds/tests/tries-test.rkt") (lib "pfds/tests/physicists-queue-tests.rkt") (lib "pfds/tests/bankers-queue-benchmarks.rkt") (lib "pfds/scribblings/helper.rkt") (lib "pfds/tests/bootstrapedqueue-tests.rkt") (lib "pfds/scribblings/catenable-list.scrbl") (lib "pfds/scribblings/implicitdeque.scrbl") (lib "pfds/tests/tests-main.rkt") (lib "pfds/queue/bankers.rkt"))) (name . "pfds") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/tr-pfds/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "1630af681e6bef5e75503649100b7f0d32a2e9fc") (source . "github://github.com/takikawa/tr-pfds/master") (source_url . "http://github.com/takikawa/tr-pfds/tree/master"))))))) ("phc-adt" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799597) (dependencies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (description . "Algebraic Data Types for Typed/Racket, with features tailored to compiler writing. The data types do not have to be declared before they are used, like prefab structs and symbols. Behind the scenes, this library remembers all the data types in a file, and uses it to implicitly pre-declare them. Mostly stable, although some things may change a bit in the future.") (implies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (modules . ()) (name . "phc-adt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (data . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main") (tags . ("data" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main"))))))) ("phc-adt-doc" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "phc-adt-implementation" "doc/phc-adt-implementation@phc-adt-doc/index.html") ("salvage" "phc-adt" "doc/phc-adt@phc-adt-doc/index.html"))) (failure-log . "server/built/fail/phc-adt-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799493) (dependencies . ("base" "scribble-lib" "hyper-literate" "phc-adt-lib" "racket-doc" "typed-racket-doc" "typed-racket-lib" "scribble-enhanced" "scribble-math" "type-expander" "xlist" "alexis-util" "extensible-parser-specifications" "multi-id" "phc-toolkit" "remember" "threading" "trivial" "typed-struct-props" "datatype")) (description . "Documentation for phc-adt (and rendering of the literate programming)") (implies . ()) (modules . ((lib "phc-adt/scribblings/phc-adt-tagged.scrbl") (lib "phc-adt/scribblings/phc-adt.scrbl") (lib "phc-adt/scribblings/phc-adt-structure.scrbl") (lib "phc-adt/scribblings/phc-adt-implementation.scrbl") (lib "phc-adt/scribblings/phc-adt-choices.scrbl") (lib "phc-adt/scribblings/phc-adt-variant.scrbl") (lib "phc-adt/scribblings/phc-adt-constructor.scrbl"))) (name . "phc-adt-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (docs . #t) (phc-adt . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main") (tags . ("docs" "phc-adt")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main"))))))) ("phc-adt-lib" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799498) (dependencies . ("base" "typed-racket-lib" "hyper-literate" "multi-id" "phc-toolkit" "remember" "type-expander" "extensible-parser-specifications" "alexis-util" "typed-struct-props" "match-string" "xlist" "compatibility-lib" "generic-bind" "datatype" "at-exp-lib" "sandbox-lib" "scribble-enhanced" "scribble-lib" "scribble-math")) (description . "Implementation of phc-adt") (implies . ()) (modules . ((lib "phc-adt/declarations.rkt") (lib "phc-adt/main.rkt") (lib "phc-adt/adt.hl.rkt") (lib "phc-adt/constructor.hl.rkt") (lib "phc-adt/check-no-overlap.rkt") (lib "phc-adt/variant.hl.rkt") (lib "phc-adt/tagged.hl.rkt") (lib "phc-adt/node-low-level.hl.rkt") (lib "phc-adt/structure.hl.rkt") (lib "phc-adt/adt-init.rkt") (lib "phc-adt/tagged-supertype.hl.rkt") (lib "phc-adt/adt-second-step.rkt") (lib "phc-adt/ctx.hl.rkt") (lib "phc-adt/tagged-structure-low-level.hl.rkt"))) (name . "phc-adt-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (phc-adt . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main") (tags . ("phc-adt")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main"))))))) ("phc-adt-test" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799505) (dependencies . ("base" "phc-adt-lib" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "multi-id" "phc-toolkit" "type-expander")) (description . "Tests for phc-adt") (implies . ()) (modules . ((lib "phc-adt/test/test-tagged-define.rkt") (lib "phc-adt/test/test-structure-speed.rkt") (lib "phc-adt/test/test-adt-structure-wrapped.rkt") (lib "phc-adt/test/test-adt-init-no-error.rkt") (lib "phc-adt/test/test-tagged-parametric.rkt") (lib "phc-adt/test/row-polymorphism/test-with-plus.rkt") (lib "phc-adt/test/row-polymorphism/adt-pre-declarations.rkt") (lib "phc-adt/test/test-tagged.rkt") (lib "phc-adt/test/test-structure-other.rkt") (lib "phc-adt/test/test-constructor3.rkt") (lib "phc-adt/test/mailing-list-example/example.rkt") (lib "phc-adt/test/test-constructor2.rkt") (lib "phc-adt/test/test-define-adt.rkt") (lib "phc-adt/test/row-polymorphism/test-merge.rkt") (lib "phc-adt/test/test-structure2.rkt") (lib "phc-adt/test/adt-pre-declarations.rkt") (lib "phc-adt/test/mailing-list-example/adt-pre-declarations.rkt") (lib "phc-adt/test/row-polymorphism/test-split.rkt") (lib "phc-adt/test/test-adt.rkt") (lib "phc-adt/test/test-variant.rkt") (lib "phc-adt/test/test-structure-parametric.rkt") (lib "phc-adt/test/test-adt-init-error.rkt") (lib "phc-adt/test/ck.rkt") (lib "phc-adt/test/test-structure-low-level.rkt") (lib "phc-adt/test/row-polymorphism/test-with-update-only.rkt") (lib "phc-adt/test/row-polymorphism/test-with.rkt") (lib "phc-adt/test/node-low-level-quick-test.rkt") (lib "phc-adt/test/test-empty.rkt") (lib "phc-adt/test/test-structure.rkt") (lib "phc-adt/test/test-tagged-call-syntax.rkt") (lib "phc-adt/test/test-constructor.rkt"))) (name . "phc-adt-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (phc-adt . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main") (tags . ("phc-adt" "tests")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main"))))))) ("phc-toolkit" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "phc-toolkit" "doc/phc-toolkit@phc-toolkit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-toolkit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-toolkit.txt"))) (checksum . "694c75444c4151be7069b3a0271650921d86ce51") (checksum-error . #f) (collection . "phc-toolkit") (conflicts . ()) (date-added . 1614799512) (dependencies . ("base" "rackunit-lib" "alexis-util" "typed-racket-lib" "typed-racket-more" "reprovide-lang" "type-expander" "hyper-literate" "version-case" "scribble-lib" "racket-doc" "typed-racket-doc" "predicates" "rackunit-doc" "scribble-math" "drracket")) (description . "Personal collection of utilities. Somewhat unstable and sparsely documented (for now).") (implies . ()) (modules . ((lib "phc-toolkit/scribblings/list.scrbl") (lib "phc-toolkit/todo.rkt") (lib "phc-toolkit/scribblings/multiassoc-syntax.scrbl") (lib "phc-toolkit/untyped/logn-id.rkt") (lib "phc-toolkit/untyped-only/syntax-parse.rkt") (lib "phc-toolkit/in.rkt") (lib "phc-toolkit/scribblings/eval-get-values-untyped.scrbl") (lib "phc-toolkit/scribblings/misc.scrbl") (lib "phc-toolkit/test/test-format-id-record.rkt") (lib "phc-toolkit/untyped/misc.rkt") (lib "phc-toolkit/scribblings/typed-untyped-untyped.scrbl") (lib "phc-toolkit/untyped/main.rkt") (lib "phc-toolkit/scribblings/threading.scrbl") (lib "phc-toolkit/test-framework.rkt") (lib "phc-toolkit/untyped/syntax-parse.rkt") (lib "phc-toolkit/untyped/contract.rkt") (lib "phc-toolkit/contract.rkt") (lib "phc-toolkit/repeat-stx.rkt") (lib "phc-toolkit/untyped/cond-let.rkt") (lib "phc-toolkit/scribblings/test-framework.scrbl") (lib "phc-toolkit/scribblings/typed-rackunit-untyped.scrbl") (lib "phc-toolkit/untyped.rkt") (lib "phc-toolkit/untyped/test-framework.rkt") (lib "phc-toolkit/untyped/meta-struct.rkt") (lib "phc-toolkit/scribblings/phc-toolkit.scrbl") (lib "phc-toolkit/untyped/multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/values.scrbl") (lib "phc-toolkit/stx.rkt") (lib "phc-toolkit/scribblings/aliases-untyped.scrbl") (lib "phc-toolkit/untyped/typed-untyped.rkt") (lib "phc-toolkit/scribblings/list-untyped.scrbl") (lib "phc-toolkit/typed-untyped.rkt") (lib "phc-toolkit/percent2.rkt") (lib "phc-toolkit/untyped/type-inference-helpers.rkt") (lib "phc-toolkit/untyped/percent.rkt") (lib "phc-toolkit/scribblings/syntax-parse-untyped.scrbl") (lib "phc-toolkit/scribblings/type-inference-helpers.scrbl") (lib "phc-toolkit/test/test-stx.rkt") (lib "phc-toolkit/scribblings/stx-untyped-only.scrbl") (lib "phc-toolkit/eval-get-values.rkt") (lib "phc-toolkit/untyped/generate-indices.rkt") (lib "phc-toolkit/scribblings/stx-patching-srcloc.scrbl") (lib "phc-toolkit/scribblings/values-untyped.scrbl") (lib "phc-toolkit/scribblings/backtrace.scrbl") (lib "phc-toolkit/untyped/typed-rackunit-extensions.rkt") (lib "phc-toolkit/values.rkt") (lib "phc-toolkit/scribblings/not-implemented-yet-untyped.scrbl") (lib "phc-toolkit/scribblings/logn-id-untyped.scrbl") (lib "phc-toolkit/untyped/typed-rackunit.rkt") (lib "phc-toolkit/percent.rkt") (lib "phc-toolkit/misc.rkt") (lib "phc-toolkit/scribblings/cond-let.scrbl") (lib "phc-toolkit/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/cond-let-untyped.scrbl") (lib "phc-toolkit/meta-struct.rkt") (lib "phc-toolkit/untyped-only/for-star-list-star.rkt") (lib "phc-toolkit/list.rkt") (lib "phc-toolkit/untyped/sequence.rkt") (lib "phc-toolkit/is-typed.rkt") (lib "phc-toolkit/scribblings/compat.scrbl") (lib "phc-toolkit/type-inference-helpers.rkt") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/untyped/compat.rkt") (lib "phc-toolkit/untyped-only.rkt") (lib "phc-toolkit/logn-id.rkt") (lib "phc-toolkit/test/test-format-id-record-inject.rkt") (lib "phc-toolkit/scribblings/typed-untyped.scrbl") (lib "phc-toolkit/scribblings/sequence-untyped.scrbl") (lib "phc-toolkit/scribblings/stx-untyped.scrbl") (lib "phc-toolkit/scribblings/tmpl.scrbl") (lib "phc-toolkit/scribblings/template.scrbl") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax.scrbl") (lib "phc-toolkit/scribblings/eval-get-values.scrbl") (lib "phc-toolkit/scribblings/type-inference-helpers-untyped.scrbl") (lib "phc-toolkit/typed-rackunit.rkt") (lib "phc-toolkit/ids.rkt") (lib "phc-toolkit/untyped/for-star-list-star.rkt") (lib "phc-toolkit/backtrace.rkt") (lib "phc-toolkit/test/meta-struct-test.rkt") (lib "phc-toolkit/untyped-only/quasitemplate.rkt") (lib "phc-toolkit/scribblings/ids-untyped.scrbl") (lib "phc-toolkit/fixnum.rkt") (lib "phc-toolkit/light-no-check.rkt") (lib "phc-toolkit/sequence.rkt") (lib "phc-toolkit/scribblings/tmpl-untyped.scrbl") (lib "phc-toolkit/test/list-test.rkt") (lib "phc-toolkit/scribblings/compat-untyped.scrbl") (lib "phc-toolkit/test/test-syntax-parse.rkt") (lib "phc-toolkit/untyped/list.rkt") (lib "phc-toolkit/untyped-only/format-id-record.rkt") (lib "phc-toolkit/untyped-only/stx.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions.scrbl") (lib "phc-toolkit/scribblings/generate-indices.scrbl") (lib "phc-toolkit/is-untyped.rkt") (lib "phc-toolkit/require-provide.rkt") (lib "phc-toolkit/scribblings/aliases.scrbl") (lib "phc-toolkit/scribblings/syntax-parse-pattern-expanders.scrbl") (lib "phc-toolkit/threading.rkt") (lib "phc-toolkit/scribblings/utils.rkt") (lib "phc-toolkit/generate-indices.rkt") (lib "phc-toolkit/stx/prefab.rkt") (lib "phc-toolkit/scribblings/fixnum-untyped.scrbl") (lib "phc-toolkit/untyped/aliases.rkt") (lib "phc-toolkit/scribblings/require-provide.scrbl") (lib "phc-toolkit/scribblings/contract.scrbl") (lib "phc-toolkit/untyped/set.rkt") (lib "phc-toolkit/untyped/format-id-record.rkt") (lib "phc-toolkit/test/test-define-temp-ids.rkt") (lib "phc-toolkit/untyped/not-implemented-yet.rkt") (lib "phc-toolkit/aliases.rkt") (lib "phc-toolkit/scribblings/repeat-stx-untyped.scrbl") (lib "phc-toolkit/scribblings/percent-untyped.scrbl") (lib "phc-toolkit/untyped/fixnum.rkt") (lib "phc-toolkit/untyped/in.rkt") (lib "phc-toolkit/scribblings/backtrace-untyped.scrbl") (lib "phc-toolkit/scribblings/typed-rackunit.scrbl") (lib "phc-toolkit/scribblings/contract-untyped.scrbl") (lib "phc-toolkit/scribblings/stx.scrbl") (lib "phc-toolkit/not-implemented-yet.rkt") (lib "phc-toolkit/compat.rkt") (lib "phc-toolkit/scribblings/require-provide-untyped.scrbl") (lib "phc-toolkit/main.rkt") (lib "phc-toolkit/test/test-percent2.rkt") (lib "phc-toolkit/untyped/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/untyped/tmpl.rkt") (lib "phc-toolkit/test/list-lang-test.rkt") (lib "phc-toolkit/scribblings/fixnum.scrbl") (lib "phc-toolkit/set.rkt") (lib "phc-toolkit/scribblings/test-framework-untyped.scrbl") (lib "phc-toolkit/scribblings/meta-struct.scrbl") (lib "phc-toolkit/untyped/threading.rkt") (lib "phc-toolkit/scribblings/format-id-record-untyped.scrbl") (lib "phc-toolkit/scribblings/meta-struct-untyped.scrbl") (lib "phc-toolkit/scribblings/list-lang.scrbl") (lib "phc-toolkit/scribblings/untyped.scrbl") (lib "phc-toolkit/tmpl.rkt") (lib "phc-toolkit/scribblings/in-untyped.scrbl") (lib "phc-toolkit/untyped/stx.rkt") (lib "phc-toolkit/scribblings/syntax-parse.scrbl") (lib "phc-toolkit/unstable.rkt") (lib "phc-toolkit/multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/threading-untyped.scrbl") (lib "phc-toolkit/untyped/repeat-stx.rkt") (lib "phc-toolkit/scribblings/set-untyped.scrbl") (lib "phc-toolkit/scribblings/percent.scrbl") (lib "phc-toolkit/scribblings/repeat-stx.scrbl") (lib "phc-toolkit/typed-rackunit-extensions.rkt") (lib "phc-toolkit/test/test-ids.rkt") (lib "phc-toolkit/syntax-parse.rkt") (lib "phc-toolkit/scribblings/set.scrbl") (lib "phc-toolkit/untyped/values.rkt") (lib "phc-toolkit/scribblings/sequence.scrbl") (lib "phc-toolkit/scribblings/multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/scribblings/generate-indices-untyped.scrbl") (lib "phc-toolkit/untyped/ids.rkt") (lib "phc-toolkit/untyped/require-provide.rkt") (lib "phc-toolkit/scribblings/ids.scrbl") (lib "phc-toolkit/scribblings/in.scrbl") (lib "phc-toolkit/scribblings/for-star-list-star.scrbl") (lib "phc-toolkit/scribblings/not-implemented-yet.scrbl") (lib "phc-toolkit/scribblings/misc-untyped.scrbl") (lib "phc-toolkit/cond-let.rkt") (lib "phc-toolkit/partial-include.rkt") (lib "phc-toolkit/scribblings/logn-id.scrbl") (lib "phc-toolkit/stx/fold.rkt") (lib "phc-toolkit/list-lang.rkt") (lib "phc-toolkit/test/test-fixnum.rkt") (lib "phc-toolkit/untyped/eval-get-values.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions-untyped.scrbl") (lib "phc-toolkit/untyped/backtrace.rkt"))) (name . "phc-toolkit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/jsmaniac/phc-toolkit.git#main") (tags . ("experimental" "util")) (versions . #hash((default . #hasheq((checksum . "694c75444c4151be7069b3a0271650921d86ce51") (source . "https://github.com/jsmaniac/phc-toolkit.git#main") (source_url . "https://github.com/jsmaniac/phc-toolkit.git#main"))))))) ("php-parser" . #hasheq((author . "antoine.brand@sfr.fr") (authors . ("antoine.brand@sfr.fr")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/php-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/php-parser.txt"))) (checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools" "rackunit-lib" "scribble-lib")) (description . "A php parser") (implies . ()) (modules . ((lib "php-parser/utils.rkt") (lib "php-parser/parser-utils.rkt") (lib "php-parser/parser.rkt") (lib "php-parser/main.rkt") (lib "php-parser/php-parser.scrbl"))) (name . "php-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:antoine.brand@sfr.fr . #t) (parser . #t) (ring:1 . #t))) (source . "http://github.com/antoineb/php-parser/tree/master") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (source . "git://github.com/antoineb/php-parser") (source_url . "http://github.com/antoineb/php-parser/tree/master"))))))) ("pict-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict-abbrevs" "doc/pict-abbrevs@pict-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pict-abbrevs.txt"))) (checksum . "29fb0f7456018e02a9a5531b76af4f0ce2d27854") (checksum-error . #f) (collection . "pict-abbrevs") (conflicts . ()) (dependencies . ("base" "pict-lib" "lang-file" "draw-lib" "slideshow-lib" "ppict" "rackunit-lib" "racket-doc" "scribble-doc" "gui-doc" "pict-doc" "draw-doc" "plot-doc" "plot-lib" "scribble-lib" "slideshow-doc")) (description . "Pict helper functions") (implies . ()) (modules . ((lib "pict-abbrevs/slideshow.rkt") (lib "pict-abbrevs/private/pict-abbrevs.rkt") (lib "pict-abbrevs/scribblings/pict-abbrevs.scrbl") (lib "pict-abbrevs/main.rkt") (lib "pict-abbrevs/private/raco.rkt") (lib "pict-abbrevs/private/slideshow.rkt"))) (name . "pict-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (pict . #t) (ring:1 . #t) (util . #t))) (source . "https://gitlab.com/bengreenman/pict-abbrevs.git") (tags . ("pict" "util")) (versions . #hash((default . #hasheq((checksum . "29fb0f7456018e02a9a5531b76af4f0ce2d27854") (source . "https://gitlab.com/bengreenman/pict-abbrevs.git") (source_url . "https://gitlab.com/bengreenman/pict-abbrevs.git"))))))) ("pict-balloon2" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict-balloon2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pict-balloon2.txt"))) (checksum . "ebe574301cf52c9fc4495c6f502e91ab9e87975a") (checksum-error . #f) (collection . "pict") (conflicts . ()) (date-added . 1623074224) (dependencies . ("base" "draw-lib" "pict-lib" "slideshow-lib")) (description . "Provides `pict/balloon2`, which is intended as an improvement over `pict/balloon`") (implies . ()) (modules . ((lib "pict/balloon2.rkt"))) (name . "pict-balloon2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (pict . #t) (ring:1 . #t))) (source . "git+https://github.com/mflatt/pict-balloon2") (tags . ("pict")) (versions . #hash((default . #hasheq((checksum . "ebe574301cf52c9fc4495c6f502e91ab9e87975a") (source . "git+https://github.com/mflatt/pict-balloon2") (source_url . "git+https://github.com/mflatt/pict-balloon2"))))))) ("pict3d" . #hasheq((author . "neil.toronto@gmail.com jay.mccarthy@gmail.com mflatt@racket-lang.org alexander@knauth.org") (authors . ("neil.toronto@gmail.com" "jay.mccarthy@gmail.com" "mflatt@racket-lang.org" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-opengl" "doc/typed-opengl@pict3d/index.html") ("main" "pict3d" "doc/pict3d@pict3d/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/pict3d.txt") (success-log . "server/built/install/pict3d.txt") (test-failure-log . "server/built/test-fail/pict3d.txt") (test-success-log . #f))) (checksum . "b73e77c66461081934eaeeb17f079841a0118387") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "unstable-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (modules . ((lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/pos/pos-dir.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt") (lib "typed/opengl.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "typed/opengl/ffi.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/typed.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/tests/snowman.rkt") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/tests/shaders.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/private/soup/group.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/pr/33.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/private/pos/linear-affine-smooth.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/pos/affine-combinators.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/gui/typed-pict3d-bitmap.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt"))) (name . "pict3d") (ring . 1) (search-terms . #hasheq((3d . #t) (:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jay.mccarthy@gmail.com . #t) (author:mflatt@racket-lang.org . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/pict3d/tree/master") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "b73e77c66461081934eaeeb17f079841a0118387") (source . "git://github.com/jeapostrophe/pict3d") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master"))))))) ("pict3d-die-cut" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict3d-die-cut" "doc/pict3d-die-cut@pict3d-die-cut/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict3d-die-cut.txt") (test-failure-log . "server/built/test-fail/pict3d-die-cut.txt") (test-success-log . #f))) (checksum . "29354f8dd2e9f964da834903332318a995d15727") (checksum-error . #f) (collection . "pict3d-die-cut") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict3d" "glu-tessellate" "draw-doc" "racket-doc" "scribble-lib")) (description . "For Pict3D, generates text and other 2-D shapes from paths") (implies . ()) (modules . ((lib "pict3d-die-cut/main.rkt") (lib "pict3d-die-cut/pict3d-die-cut.scrbl"))) (name . "pict3d-die-cut") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/pict3d-die-cut/tree/master") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "29354f8dd2e9f964da834903332318a995d15727") (source . "git://github.com/mflatt/pict3d-die-cut") (source_url . "http://github.com/mflatt/pict3d-die-cut/tree/master"))))))) ("pict3d-orig" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "typed-opengl" "doc/typed-opengl@pict3d-orig/index.html") ("none" "pict3d"))) (failure-log . "server/built/fail/pict3d-orig.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (checksum-error . #f) (collection . (multi)) (conflicts . ("pict3d")) (dependencies . ("base" "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (modules . ((lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt") (lib "typed/opengl.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "typed/opengl/ffi.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/typed.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/tests/snowman.rkt") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/private/soup/group.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt"))) (name . "pict3d-orig") (ring . 2) (search-terms . #hasheq((3d . #t) (:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:2 . #t))) (source . "http://github.com/ntoronto/pict3d/tree/master") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (source . "git://github.com/ntoronto/pict3d") (source_url . "http://github.com/ntoronto/pict3d/tree/master"))))))) ("picturing-programs-typed" . #hasheq((author . "maueroats@gmail.com racket@maueroats.fastmail.fm") (authors . ("maueroats@gmail.com" "racket@maueroats.fastmail.fm")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/picturing-programs-typed.txt") (test-failure-log . "server/built/test-fail/picturing-programs-typed.txt") (test-success-log . #f))) (checksum . "82dd9c1938c0fa9fdb5ea95849f7ca6f3a082edd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557615550) (dependencies . ("base" "2htdp-typed" "picturing-programs" "draw-lib" "htdp-lib" "typed-racket-lib" "typed-racket-more" "unstable-list-lib" "unstable-contract-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Bloch's picturing-programs package converted to be usable in Typed Racket. Typed utility functions for posns also included.") (implies . ()) (modules . ((lib "scribblings/picturing-programs-typed.scrbl") (lib "typed/posn-util.rkt") (lib "typed/picturing-programs.rkt"))) (name . "picturing-programs-typed") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (author:maueroats@gmail.com . #t) (author:racket@maueroats.fastmail.fm . #t) (picturing-programs . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/maueroats/picturing-programs-typed.git") (tags . ("2htdp" "picturing-programs" "student")) (versions . #hash((default . #hasheq((checksum . "82dd9c1938c0fa9fdb5ea95849f7ca6f3a082edd") (source . "https://github.com/maueroats/picturing-programs-typed.git") (source_url . "https://github.com/maueroats/picturing-programs-typed.git"))))))) ("pidec" . #hasheq((author . "luis.osa.gdc@gmail.com ") (authors . ("luis.osa.gdc@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pidec" "doc/pidec@pidec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pidec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pidec.txt"))) (checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (checksum-error . #f) (collection . "pidec") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "math-lib" "typed-racket-lib" "while-loop" "scribble-lib" "racket-doc")) (description . "Computation of the n-th digit of π with low memory") (implies . ()) (modules . ((lib "pidec/test-main.rkt") (lib "pidec/scribblings/pidec.scrbl") (lib "pidec/main.rkt"))) (name . "pidec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:luis.osa.gdc@gmail.com . #t) (numerical . #t) (ring:1 . #t))) (source . "http://github.com/logc/pidec.git/tree/master") (tags . ("numerical")) (versions . #hash((default . #hasheq((checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (source . "git://github.com/logc/pidec.git") (source_url . "http://github.com/logc/pidec.git/tree/master"))))))) ("pie" . #hasheq((author . "david@davidchristiansen.dk dfried00@gmail.com") (authors . ("david@davidchristiansen.dk" "dfried00@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie" "doc/pie@pie/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pie.txt"))) (checksum . "2c89553a693ac6688b16d722f416914f2e9aa4c3") (checksum-error . #f) (collection . "pie") (conflicts . ()) (dependencies . ("base" "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "rackunit-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib" "rackunit-lib")) (description . "The Pie language, used in The Little Typer") (implies . ()) (modules . ((lib "pie/alpha.rkt") (lib "pie/gui/main.rkt") (lib "pie/rep.rkt") (lib "pie/gui/pie-lexer.rkt") (lib "pie/basics.rkt") (lib "pie/pie-info.rkt") (lib "pie/fresh.rkt") (lib "pie/serialization.rkt") (lib "pie/gui/print-gui.rkt") (lib "pie/typechecker.rkt") (lib "pie/pie-err.rkt") (lib "pie/locations.rkt") (lib "pie/tests.rkt") (lib "pie/resugar.rkt") (lib "pie/show-goal.rkt") (lib "pie/pie.scrbl") (lib "pie/pretty.rkt") (lib "pie/parser.rkt") (lib "pie/test-todo-output.rkt") (lib "pie/interactive-editing.rkt") (lib "pie/slideshow.rkt") (lib "pie/main.rkt") (lib "pie/tooltip.rkt") (lib "pie/normalize.rkt") (lib "pie/gui/pie-styles.rkt"))) (name . "pie") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (author:dfried00@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/the-little-typer/pie.git") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "2c89553a693ac6688b16d722f416914f2e9aa4c3") (source . "https://github.com/the-little-typer/pie.git") (source_url . "https://github.com/the-little-typer/pie.git"))))))) ("pie-a-let-mode" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie-a-let-mode" "doc/pie-a-let-mode@pie-a-let-mode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie-a-let-mode.txt") (test-failure-log . "server/built/test-fail/pie-a-let-mode.txt") (test-success-log . #f))) (checksum . "77d183629f3d09f2d0b79a5bcd3b16e92ecf5f19") (checksum-error . #f) (collection . "pie-a-let-mode") (conflicts . ()) (dependencies . ("base" "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "rackunit-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A little fork of the Pie language (adds `let` and `equal`).") (implies . ()) (modules . ((lib "pie-a-let-mode/fresh.rkt") (lib "pie-a-let-mode/parser.rkt") (lib "pie-a-let-mode/tooltip.rkt") (lib "pie-a-let-mode/resugar.rkt") (lib "pie-a-let-mode/gui/main.rkt") (lib "pie-a-let-mode/locations.rkt") (lib "pie-a-let-mode/pie-info.rkt") (lib "pie-a-let-mode/basics.rkt") (lib "pie-a-let-mode/slideshow.rkt") (lib "pie-a-let-mode/show-goal.rkt") (lib "pie-a-let-mode/normalize.rkt") (lib "pie-a-let-mode/interactive-editing.rkt") (lib "pie-a-let-mode/tests.rkt") (lib "pie-a-let-mode/pie-a-let-mode.scrbl") (lib "pie-a-let-mode/gui/pie-lexer.rkt") (lib "pie-a-let-mode/main.rkt") (lib "pie-a-let-mode/gui/print-gui.rkt") (lib "pie-a-let-mode/rep.rkt") (lib "pie-a-let-mode/serialization.rkt") (lib "pie-a-let-mode/gui/pie-styles.rkt") (lib "pie-a-let-mode/test-todo-output.rkt") (lib "pie-a-let-mode/alpha.rkt") (lib "pie-a-let-mode/pie-err.rkt") (lib "pie-a-let-mode/pretty.rkt") (lib "pie-a-let-mode/typechecker.rkt"))) (name . "pie-a-let-mode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/pnwamk/pie.git#a-let-mode") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "77d183629f3d09f2d0b79a5bcd3b16e92ecf5f19") (source . "https://github.com/pnwamk/pie.git#a-let-mode") (source_url . "https://github.com/pnwamk/pie.git#a-let-mode"))))))) ("piecrust" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "piecrust" "doc/piecrust@piecrust/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/piecrust.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/piecrust.txt"))) (checksum . "71761acebc880912a4c688a32baef871dbf9ad94") (checksum-error . #f) (collection . "piecrust") (conflicts . ()) (date-added . 1625020884) (dependencies . ("base" "db" "web-server" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An automated (RESTful) CRUD API generator for use with the Racket web server.") (implies . ()) (modules . ((lib "piecrust/tests/test-utils.rkt") (lib "piecrust/tests/minimal-example.rkt") (lib "piecrust/tests/book-author-example.rkt") (lib "piecrust/private/handlers.rkt") (lib "piecrust/scribblings/piecrust.scrbl") (lib "piecrust/tests/shopping-list-example.rkt") (lib "piecrust/private/structs.rkt") (lib "piecrust/main.rkt"))) (name . "piecrust") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:nadeem@acm.org . #t) (json . #t) (ring:1 . #t) (sql . #t) (web-server . #t))) (source . "https://github.com/nadeemabdulhamid/piecrust.git") (tags . ("api" "json" "sql" "web-server")) (versions . #hash((default . #hasheq((checksum . "71761acebc880912a4c688a32baef871dbf9ad94") (source . "https://github.com/nadeemabdulhamid/piecrust.git") (source_url . "https://github.com/nadeemabdulhamid/piecrust.git"))))))) ("pinyin" . #hasheq((author . "mail@xuchunyang.me") (authors . ("mail@xuchunyang.me")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pinyin" "doc/pinyin@pinyin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pinyin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pinyin.txt"))) (checksum . "568e626f8be36c311f40d3f6771cf4f4d1cee677") (checksum-error . #f) (collection . "pinyin") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "汉字转拼音") (implies . ()) (modules . ((lib "pinyin/scribblings/pinyin.scrbl") (lib "pinyin/main.rkt"))) (name . "pinyin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mail@xuchunyang.me . #t) (chinese . #t) (ring:1 . #t))) (source . "https://github.com/xuchunyang/pinyin.git") (tags . ("chinese")) (versions . #hash((default . #hasheq((checksum . "568e626f8be36c311f40d3f6771cf4f4d1cee677") (source . "https://github.com/xuchunyang/pinyin.git") (source_url . "https://github.com/xuchunyang/pinyin.git"))))))) ("pipe" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pipe" "doc/pipe@pipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pipe.txt"))) (checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "racket-doc" "typed-racket-doc" "scribble-lib")) (description . "Iteratees in Typed Racket.") (implies . ()) (modules . ((lib "pipe/filetank.rkt") (lib "pipe/tanks.rkt") (lib "pipe/pipes.rkt") (lib "pipe/types.rkt") (lib "pipe/scribblings/pipe.scrbl") (lib "pipe/main.rkt") (lib "pipe/pumps.rkt"))) (name . "pipe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (control . #t) (iteratee . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/pipe.git") (tags . ("control" "iteratee")) (versions . #hash((default . #hasheq((checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (source . "https://gitlab.com/RayRacine/pipe.git") (source_url . "https://gitlab.com/RayRacine/pipe.git"))))))) ("pipechain" . #hasheq((author . "dyllongagnier@gmail.com") (authors . ("dyllongagnier@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pipechain.txt") (docs . (("main" "pipechain" "doc/pipechain@pipechain/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pipechain.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pipechain.txt"))) (checksum . "090f6490596c0de0b56a0fbea59e3e91800a0883") (checksum-error . #f) (collection . "pipechain") (conflicts . ()) (date-added . 1637702277) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides a quick and easy way to reduce nested function calls without creating\r\nmany superfluous temporary names. Naming things is hard, but so is reading\r\nnested function calls!") (implies . ()) (modules . ((lib "pipechain/scribblings/pipechain.scrbl") (lib "pipechain/utils.rkt") (lib "pipechain/main.rkt"))) (name . "pipechain") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:dyllongagnier@gmail.com . #t) (ring:1 . #t) (syntax . #t) (utilities . #t))) (source . "https://github.com/slaymaker1907/pipechain.git#main") (tags . ("syntax" "utilities")) (versions . #hash((default . #hasheq((checksum . "090f6490596c0de0b56a0fbea59e3e91800a0883") (source . "https://github.com/slaymaker1907/pipechain.git#main") (source_url . "https://github.com/slaymaker1907/pipechain.git#main"))))))) ("pitfall" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pitfall.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pitfall.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661214) (dependencies . ("draw-lib" "with-cache" "at-exp-lib" "base" "beautiful-racket-lib" "brag" "fontland" "rackunit-lib" "srfi-lite-lib" "sugar" "gregor" "debug")) (description . "PDF generation library [under development]") (implies . ()) (modules . ((lib "pitfall/reference.rkt") (lib "pitfall/jpeg.rkt") (lib "pitfall/image.rkt") (lib "ptest/test5.rkt") (lib "ptest/test8.rkt") (lib "ptest/test21.rkt") (lib "pitfall/pdf.rkt") (lib "pitfall/scribblings/pitfall.scrbl") (lib "ptest/test18.rkt") (lib "ptest/test12.rkt") (lib "ptest/test16.rkt") (lib "ptest/test22.rkt") (lib "pitfall/font-embedded.rkt") (lib "pitfall/check-pdf.rkt") (lib "ptest/test3.rkt") (lib "ptest/test4.rkt") (lib "ptest/test13.rkt") (lib "ptest/testrkt.rkt") (lib "ptest/test15.rkt") (lib "ptest/test6.rkt") (lib "ptest/test19.rkt") (lib "pitfall/font-standard.rkt") (lib "pitfall/vector.rkt") (lib "pitfall/core.rkt") (lib "ptest/test10.rkt") (lib "pitfall/font.rkt") (lib "ptest/log.rkt") (lib "ptest/all.rkt") (lib "pitfall/page.rkt") (lib "ptest/test24.rkt") (lib "ptest/test1.rkt") (lib "ptest/test20.rkt") (lib "ptest/raco.rkt") (lib "ptest/test9.rkt") (lib "pitfall/test.rkt") (lib "ptest/test2.rkt") (lib "ptest/test7.rkt") (lib "ptest/test23.rkt") (lib "pitfall/main.rkt") (lib "ptest/test11.rkt") (lib "ptest/test17.rkt") (lib "ptest/test0.rkt") (lib "ptest/test20a.rkt") (lib "pitfall/png.rkt") (lib "pitfall/text.rkt") (lib "pitfall/color.rkt") (lib "pitfall/annotation.rkt") (lib "ptest/test14.rkt") (lib "pitfall/pdftest.rkt") (lib "pitfall/page-test.rkt") (lib "pitfall/object.rkt"))) (name . "pitfall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (pdf . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=pitfall#main") (tags . ("pdf")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=pitfall#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=pitfall#main"))))))) ("pk" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pk.txt"))) (checksum . "f39127f1c23c479390d32a8e32502a0dc14b8f7d") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1560343249) (dependencies . ("base")) (description . "slightly superior print (peek) debugging") (implies . ()) (modules . ((lib "pk/main.rkt"))) (name . "pk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cwebber@dustycloud.org . #t) (debugging . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/racket-pk.git?path=pk") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "f39127f1c23c479390d32a8e32502a0dc14b8f7d") (source . "https://gitlab.com/dustyweb/racket-pk.git?path=pk") (source_url . "https://gitlab.com/dustyweb/racket-pk.git?path=pk"))))))) ("pkg-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pkg-build" "doc/pkg-build@pkg-build/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-build.txt"))) (checksum . "fcbdf97462d32bb217d5e86a6e6619ffe511c3e2") (checksum-error . #f) (collection . "pkg-build") (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-html-lib" "web-server-lib" "plt-web-lib" "remote-shell-lib" "at-exp-lib" "scribble-lib" "racket-doc")) (description . "Build server for pkgs") (implies . ()) (modules . ((lib "pkg-build/pkg-build.scrbl") (lib "pkg-build/private/about.rkt") (lib "pkg-build/main.rkt") (lib "pkg-build/private/install-step.rkt") (lib "pkg-build/private/summary.rkt") (lib "pkg-build/private/extract-doc.rkt") (lib "pkg-build/private/status.rkt") (lib "pkg-build/examples/vbox/build.rkt") (lib "pkg-build/private/pkg-list.rkt") (lib "pkg-build/examples/docker/build.rkt") (lib "pkg-build/private/thread.rkt") (lib "pkg-build/private/pkg-adds.rkt") (lib "pkg-build/private/download.rkt") (lib "pkg-build/private/union-find.rkt") (lib "pkg-build/private/config.rkt") (lib "pkg-build/private/vm.rkt"))) (name . "pkg-build") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/pkg-build/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fcbdf97462d32bb217d5e86a6e6619ffe511c3e2") (source . "git://github.com/racket/pkg-build") (source_url . "http://github.com/racket/pkg-build/tree/master"))))))) ("pkg-dep-draw" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pkg-dep-draw" "doc/pkg-dep-draw@pkg-dep-draw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-dep-draw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-dep-draw.txt"))) (checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (checksum-error . #f) (collection . "pkg-dep-draw") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "pkg-dep-draw/private/struct.rkt") (lib "pkg-dep-draw/private/config.rkt") (lib "pkg-dep-draw/private/cliques.rkt") (lib "pkg-dep-draw/private/closure.rkt") (lib "pkg-dep-draw/pkg-dep-draw.scrbl") (lib "pkg-dep-draw/main.rkt") (lib "pkg-dep-draw/private/draw.rkt") (lib "pkg-dep-draw/private/get-pkgs.rkt") (lib "pkg-dep-draw/private/gui.rkt"))) (name . "pkg-dep-draw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/pkg-dep-draw/tree/master") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (source . "git://github.com/mflatt/pkg-dep-draw") (source_url . "http://github.com/mflatt/pkg-dep-draw/tree/master"))))))) ("pkg-push" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-push.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-push.txt"))) (checksum . "3fc18d8edb81b854ed98897bef925c73f68597ed") (checksum-error . #f) (collection . "pkg-push") (conflicts . ()) (dependencies . ("aws" "base" "http")) (implies . ()) (modules . ((lib "pkg-push/push-catalog.rkt"))) (name . "pkg-push") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/pkg-push/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3fc18d8edb81b854ed98897bef925c73f68597ed") (source . "git://github.com/racket/pkg-push") (source_url . "http://github.com/racket/pkg-push/tree/master"))))))) ("plai-dynamic" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/plai-dynamic.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-dynamic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-dynamic.txt"))) (checksum . "3e0dd86ed95e2a57a279e8334a9cf803159351ed") (checksum-error . #f) (collection . "plai-dynamic") (conflicts . ()) (date-added . 1578845227) (dependencies . ("base")) (description . "Quick and dirty dynamically scoped plai-like language.\r\n\r\nImprovements welcome at\r\n\r\nhttps://gitlab.com/bremner/plai-dynamic\r\n") (implies . ()) (modules . ((lib "plai-dynamic/main.rkt") (lib "plai-dynamic/lang/reader.rkt"))) (name . "plai-dynamic") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:david@tethera.net . #t) (dynamic-scope . #t) (plai . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/plai-dynamic.git") (tags . ("dynamic-scope" "plai")) (versions . #hash((default . #hasheq((checksum . "3e0dd86ed95e2a57a279e8334a9cf803159351ed") (source . "https://pivot.cs.unb.ca/git/plai-dynamic.git") (source_url . "https://pivot.cs.unb.ca/git/plai-dynamic.git"))))))) ("plai-lazy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-lazy" "doc/plai-lazy@plai-lazy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-lazy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-lazy.txt"))) (checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (checksum-error . #f) (collection . "plai-lazy") (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "plai" "sandbox-lib" "scheme-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "A lazy variant of the plai language") (implies . ()) (modules . ((lib "plai-lazy/private/random-mutator.rkt") (lib "plai-lazy/main.rkt") (lib "plai-lazy/scribblings/plai-lazy.scrbl") (lib "plai-lazy/private/sandbox.rkt") (lib "plai-lazy/private/gc-core.rkt") (lib "plai-lazy/private/command-line.rkt") (lib "plai-lazy/private/gc-transformer.rkt") (lib "plai-lazy/private/gc-gui.rkt") (lib "plai-lazy/private/test.rkt") (lib "plai-lazy/datatype.rkt") (lib "plai-lazy/test-harness.rkt") (lib "plai-lazy/lang/reader.rkt") (lib "plai-lazy/private/collector-exports.rkt"))) (name . "plai-lazy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/plai-lazy/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (source . "git://github.com/mflatt/plai-lazy") (source_url . "http://github.com/mflatt/plai-lazy/tree/master"))))))) ("plai-math" . #hasheq((author . "jsolum@westmont.edu") (authors . ("jsolum@westmont.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/plai-math.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Provides helpful math functions to plai-typed") (implies . ()) (modules . ((lib "plai-math/math.rkt"))) (name . "plai-math") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (Math . #t) (author:jsolum@westmont.edu . #t) (plai-typed . #t) (ring:1 . #t))) (source . "http://github.com/JamesSolum/racket_packages/tree/master?path=math") (tags . ("Math" "plai-typed")) (versions . #hash((default . #hasheq((checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (source . "git://github.com/JamesSolum/racket_packages?path=math") (source_url . "http://github.com/JamesSolum/racket_packages/tree/master?path=math"))))))) ("plai-typed" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed" "doc/plai-typed@plai-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed.txt"))) (checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plai" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "The `plai-typed' language for use with Programming Languages: Application and Interpretation, Second Edition\r\n") (implies . ()) (modules . ((lib "plai-typed/tests/untyped.rkt") (lib "plai-typed/private/collapse.rkt") (lib "plai-typed/tests/ta-scope.rkt") (lib "plai-typed/tests/basic.rkt") (lib "plai-typed/tests/use-typed-basic.rkt") (lib "plai-typed/main.rkt") (lib "plai-typed/tests/repl.rkt") (lib "plai-typed/untyped.rkt") (lib "plai-typed/untyped.scrbl") (lib "plai-typed/tests/submod3.rkt") (lib "plai-typed/plai-typed.scrbl") (lib "plai-typed/tests/rename.rkt") (lib "plai-typed/tests/synerror.rkt") (lib "plai-typed/tests/use-basic.rkt") (lib "plai-typed/tests/use-untyped.rkt") (lib "plai-typed/tests/untyped-use-untyped.rkt") (lib "plai-typed/private/fixup-quote.rkt") (lib "plai-typed/tests/parse.rkt") (lib "plai-typed/tests/hygiene.rkt") (lib "plai-typed/tests/values.rkt") (lib "plai-typed/private/types.rkt") (lib "plai-typed/tests/submod.rkt") (lib "plai-typed/tests/submod2.rkt") (lib "plai-typed/private/s-exp.rkt"))) (name . "plai-typed") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t) (textbook . #t))) (source . "http://github.com/mflatt/plai-typed/tree/master") (tags . ("language" "textbook")) (versions . #hash((default . #hasheq((checksum . "419102db1e44b74dea9daf7a75e9b0e2b9c97d05") (source . "github://github.com/mflatt/plai-typed/master") (source_url . "http://github.com/mflatt/plai-typed/tree/master"))))))) ("plai-typed-s-exp-match" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed-s-exp-match" "doc/plai-typed-s-exp-match@plai-typed-s-exp-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed-s-exp-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed-s-exp-match.txt"))) (checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plai-typed" "racket-doc" "scribble-lib")) (description . "Simple S-expression matcher for use with plai-typed") (implies . ()) (modules . ((lib "plai-typed/scribblings/plai-typed-s-exp-match.scrbl") (lib "plai-typed/s-exp-match.rkt"))) (name . "plai-typed-s-exp-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/plai-typed-s-exp-match/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff05b257cc8739d2f4ad8f33b65440635ab9cce0") (source . "github://github.com/mflatt/plai-typed-s-exp-match/master") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/master"))))))) ("plait" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plait" "doc/plait@plait/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plait.txt") (test-failure-log . "server/built/test-fail/plait.txt") (test-success-log . #f))) (checksum . "8d842132a11ab7c7621c428c609dcddc2769d145") (checksum-error . #f) (collection . "plait") (conflicts . ()) (dependencies . ("base" "lazy" "plai" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "The Plait language is a hybrid of Racket (concrete syntax) and ML (type system) that is intended for use in an interpreters-based programming-languages course. It's an improved variant of `plai-typed`.") (implies . ()) (modules . ((lib "plait/private/lazy-datatype.rkt") (lib "plait/tests/untyped.rkt") (lib "plait/scribblings/demo.rkt") (lib "plait/tests/hygiene.rkt") (lib "plait/tests/parse.rkt") (lib "plait/tests/lazy.rkt") (lib "plait/private/collapse.rkt") (lib "plait/private/contract-support.rkt") (lib "plait/tests/s-exp-match.rkt") (lib "plait/private/force.rkt") (lib "plait/tests/lazy-values.rkt") (lib "plait/tests/rename.rkt") (lib "plait/private/s-exp.rkt") (lib "plait/scribblings/plait.scrbl") (lib "plait/tests/use-basic.rkt") (lib "plait/main.rkt") (lib "plait/private/fixup-quote.rkt") (lib "plait/private/types.rkt") (lib "plait/tests/submod.rkt") (lib "plait/tests/use-typed-basic.rkt") (lib "plait/private/tuple.rkt") (lib "plait/tests/macro-intro.rkt") (lib "plait/tests/submod3.rkt") (lib "plait/tests/values.rkt") (lib "plait/scribblings/tutorial.scrbl") (lib "plait/tests/use-untyped.rkt") (lib "plait/tests/ta-scope.rkt") (lib "plait/tests/use-macro-intro.rkt") (lib "plait/tests/untyped-use-untyped.rkt") (lib "plait/tests/repl.rkt") (lib "plait/tests/submod2.rkt") (lib "plait/tests/synerror.rkt") (lib "plait/tests/untyped-use-typed.rkt") (lib "plait/tests/basic.rkt") (lib "plait/private/s-exp-match.rkt") (lib "plait/tests/force.rkt"))) (name . "plait") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t) (textbook . #t))) (source . "https://github.com/mflatt/plait.git") (tags . ("language" "textbook")) (versions . #hash((default . #hasheq((checksum . "8d842132a11ab7c7621c428c609dcddc2769d145") (source . "https://github.com/mflatt/plait.git") (source_url . "https://github.com/mflatt/plait.git"))))))) ("plaitypus" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plaitypus" "doc/plaitypus@plaitypus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plaitypus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plaitypus.txt"))) (checksum . "cebf78ef1dafd5dc93485c41cf7f6eaab3e60efb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566411028) (dependencies . ("base" "plai" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Typed variant of #lang plai. Forked from plai-typed, brought closer to #lang plai.") (implies . ()) (modules . ((lib "plaitypus/tests/use-typed-basic.rkt") (lib "plaitypus/untyped.scrbl") (lib "plaitypus/tests/submod2.rkt") (lib "plaitypus/private/collapse.rkt") (lib "plaitypus/tests/hygiene.rkt") (lib "plaitypus/tests/ta-scope.rkt") (lib "plaitypus/tests/submod.rkt") (lib "plaitypus/tests/use-untyped.rkt") (lib "plaitypus/private/fixup-quote.rkt") (lib "plaitypus/tests/implicit-begin.rkt") (lib "plaitypus/tests/submod3.rkt") (lib "plaitypus/plaitypus.scrbl") (lib "plaitypus/private/types.rkt") (lib "plaitypus/tests/synerror.rkt") (lib "plaitypus/tests/repl.rkt") (lib "plaitypus/tests/rename.rkt") (lib "plaitypus/private/s-exp.rkt") (lib "plaitypus/tests/lec18.rkt") (lib "plaitypus/tests/basic.rkt") (lib "plaitypus/untyped.rkt") (lib "plaitypus/main.rkt") (lib "plaitypus/tests/untyped.rkt") (lib "plaitypus/tests/parse.rkt") (lib "plaitypus/tests/use-basic.rkt") (lib "plaitypus/tests/values.rkt") (lib "plaitypus/tests/untyped-use-untyped.rkt"))) (name . "plaitypus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (language . #t) (ring:1 . #t) (textbook . #t) (typed . #t))) (source . "https://github.com/stamourv/plaitypus.git") (tags . ("language" "textbook" "typed")) (versions . #hash((default . #hasheq((checksum . "cebf78ef1dafd5dc93485c41cf7f6eaab3e60efb") (source . "https://github.com/stamourv/plaitypus.git") (source_url . "https://github.com/stamourv/plaitypus.git"))))))) ("planet2-example" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planet2-example.txt") (test-failure-log . "server/built/test-fail/planet2-example.txt") (test-success-log . #f))) (checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "An example package for testing purposes") (implies . ()) (modules . ((lib "data/frob-nob.rkt"))) (name . "planet2-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (examples . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/planet2-example/tree/master") (tags . ("examples")) (versions . #hash((default . #hasheq((checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (source . "git://github.com/jeapostrophe/planet2-example") (source_url . "http://github.com/jeapostrophe/planet2-example/tree/master"))))))) ("planning" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "planning" "doc/planning@planning/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planning.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/planning.txt"))) (checksum . "b880f85effd4520e14b815d1dbe0ff7e71f4aaf8") (checksum-error . #f) (collection . "planning") (conflicts . ()) (date-added . 1589271068) (dependencies . ("snip-lib" "draw-lib" "gui-lib" "pict-lib" "slideshow-lib" "chess" "fancy-app" "point-free" "rebellion" "base" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for automated planning.") (implies . ()) (modules . ((lib "planning/examples/chess.rkt") (lib "planning/multiset/condition.rkt") (lib "planning/main.scrbl") (lib "planning/examples/sokoban.rkt") (lib "planning/overview.scrbl") (lib "planning/multiset/test.rkt") (lib "planning/examples/flip.rkt") (lib "planning/multiset/action.rkt") (lib "planning/set.scrbl") (lib "planning/examples/phase-transition.scrbl") (lib "planning/examples/room-world.rkt") (lib "planning/set/plan.rkt") (lib "planning/set/condition.rkt") (lib "planning/multiset/problem.rkt") (lib "planning/hash.scrbl") (lib "planning/hash/visualize.rkt") (lib "planning/hash/action.rkt") (lib "planning/private/animation.rkt") (lib "planning/examples/factorio.rkt") (lib "planning/examples/phase-transition.rkt") (lib "planning/hash/problem.rkt") (lib "planning/private.rkt") (lib "planning/hash/condition.rkt") (lib "planning/examples/sokoban.scrbl") (lib "planning/multiset.scrbl") (lib "planning/set/action.rkt") (lib "planning/main.rkt"))) (name . "planning") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (artificial-intelligence . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/planning.git") (tags . ("artificial-intelligence" "data-structures")) (versions . #hash((default . #hasheq((checksum . "b880f85effd4520e14b815d1dbe0ff7e71f4aaf8") (source . "https://github.com/jackfirth/planning.git") (source_url . "https://github.com/jackfirth/planning.git"))))))) ("play" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/play.txt") (test-failure-log . "server/built/test-fail/play.txt") (test-success-log . #f))) (checksum . "34a145ffb815110bec33a48004e8897e48d11f51") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560876873) (dependencies . ("base" "plai" "redex" "rackunit" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "Variations on #lang plai, the language that accompanies Krishnamurthi's PLAI book.") (implies . ()) (modules . ((lib "play/lang/reader.rkt") (lib "scribblings/main.scrbl") (lib "play/parsers.rkt") (lib "play/defmac.rkt") (lib "play/main.rkt") (lib "scribblings/intl.rkt") (lib "play/redex.rkt") (lib "scribblings/play.scrbl"))) (name . "play") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/pleiad/play.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "34a145ffb815110bec33a48004e8897e48d11f51") (source . "https://github.com/pleiad/play.git") (source_url . "https://github.com/pleiad/play.git"))))))) ("plisqin" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plisqin" "doc/plisqin@plisqin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plisqin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plisqin.txt"))) (checksum . "26421c7c42656c873c4e0a4fc7f48c0a3ed7770f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552667990) (dependencies . ("base" "db-lib" "morsel-lib" "at-exp-lib" "db-doc" "doc-coverage" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "An SQL generator") (implies . ()) (modules . ((lib "plisqin-lib/private2/sql/frags-tests.rkt") (lib "plisqin-lib/strict/operators.rkt") (lib "plisqin-lib/dialect.rkt") (lib "plisqin-lib/private2/sql/interval.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/6.rkt") (lib "plisqin-doc/scribblings/research-language.scrbl") (lib "plisqin-doc/scribblings/to-table.rkt") (lib "plisqin-lib/private2/rows-result-to-string.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/final.rkt") (lib "plisqin-doc/scribblings/intro-define-schema.scrbl") (lib "plisqin-doc/scribblings/helpers.rkt") (lib "plisqin-doc/scribblings/null-notes.scrbl") (lib "plisqin/main.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/2.rkt") (lib "plisqin-doc/scribblings/nullability.scrbl") (lib "plisqin-lib/private2/statement/compile-statements.rkt") (lib "plisqin-examples/adventure-works/statements.rkt") (lib "plisqin-lib/private2/sql/special-clauses.rkt") (lib "plisqin-lib/private2/define-schema.rkt") (lib "plisqin-doc/scribblings/read-first.scrbl") (lib "plisqin-lib/private2/token.rkt") (lib "plisqin-doc/scribblings/tokens-strict.scrbl") (lib "plisqin-doc/doc-coverage.rkt") (lib "plisqin-lib/private2/_dialect.rkt") (lib "plisqin-lib/private2/show-table.rkt") (lib "plisqin-lib/private2/statement/define-statement.rkt") (lib "plisqin-doc/scribblings/for-developers.scrbl") (lib "plisqin-lib/private2/_statement.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/4.rkt") (lib "plisqin-doc/scribblings/racket.rkt") (lib "plisqin-lib/private2/from.rkt") (lib "plisqin-lib/main.rkt") (lib "plisqin-doc/scribblings/reference.scrbl") (lib "plisqin-lib/private2/sql/frag-bodies.rkt") (lib "plisqin-lib/private2/sql/frag-types.rkt") (lib "plisqin-lib/types.rkt") (lib "plisqin-doc/scribblings/refactoring-recipes.scrbl") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/1.rkt") (lib "plisqin-doc/scribblings/tokens-custom-strict.rkt") (lib "plisqin-doc/scribblings/standard-label.rkt") (lib "plisqin-lib/private2/sql/frag-nullchecks.rkt") (lib "plisqin-lib/private2/types/types.rkt") (lib "plisqin-doc/scribblings/plisqin.scrbl") (lib "plisqin-lib/private2/sql/fragment.rkt") (lib "plisqin-lib/private2/sql/weave.rkt") (lib "plisqin-lib/private2/sql.rkt") (lib "plisqin-lib/private2/sql/check-sql.rkt") (lib "plisqin-doc/scribblings/aw-reference.scrbl") (lib "plisqin-doc/scribblings/tokens-custom-unsafe.rkt") (lib "plisqin-doc/scribblings/racket-require-test.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/3.rkt") (lib "plisqin-doc/scribblings/aggregates.scrbl") (lib "plisqin-lib/private2/types/lib/guard.rkt") (lib "plisqin-doc/scribblings/plisqin-lib.scrbl") (lib "plisqin-lib/strict.rkt") (lib "plisqin-examples/adventure-works.rkt") (lib "plisqin-lib/private2/statement/param.rkt") (lib "plisqin-lib/private2/sql/frags.rkt") (lib "plisqin-lib/unsafe.rkt") (lib "plisqin-lib/private2/sql/truth.rkt") (lib "plisqin-lib/private2/_null.rkt") (lib "plisqin-lib/private2/_core.rkt") (lib "plisqin-doc/scribblings/tokens-helpers.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/5.rkt") (lib "plisqin-doc/scribblings/tokens-skeleton.rkt") (lib "plisqin-lib/unsafe/operators.rkt") (lib "plisqin-lib/private2/_types.rkt") (lib "plisqin-examples/adventure-works/schema.rkt") (lib "plisqin-lib/private2/types/lib/core.rkt") (lib "plisqin-lib/private2/sql/frags.helpers.rkt") (lib "plisqin-examples/adventure-works/main.rkt") (lib "plisqin-doc/scribblings/design-notes.scrbl"))) (name . "plisqin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:default.kramer@gmail.com . #t) (db . #t) (ring:1 . #t) (sql . #t) (tabular . #t))) (source . "https://github.com/default-kramer/plisqin.git") (tags . ("db" "sql" "tabular")) (versions . #hash((default . #hasheq((checksum . "26421c7c42656c873c4e0a4fc7f48c0a3ed7770f") (source . "https://github.com/default-kramer/plisqin.git") (source_url . "https://github.com/default-kramer/plisqin.git"))))))) ("plot-bestfit" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bestfit" "doc/bestfit@plot-bestfit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plot-bestfit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plot-bestfit.txt"))) (checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (checksum-error . #f) (collection . "bestfit") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "plot-lib" "plot-gui-lib" "math-lib" "racket-doc" "typed-racket-doc" "scribble-lib" "math-doc" "plot-doc")) (description . "") (implies . ()) (modules . ((lib "bestfit/main.rkt") (lib "bestfit/scribblings/base.rkt") (lib "bestfit/scribblings/bestfit.scrbl"))) (name . "plot-bestfit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "http://github.com/florence/plot-bestfit/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (source . "git://github.com/florence/plot-bestfit") (source_url . "http://github.com/florence/plot-bestfit/tree/master"))))))) ("plot-container" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plot-container" "doc/plot-container@plot-container/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plot-container.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plot-container.txt"))) (checksum . "affdbaeec086a0b639a952368fa85c3b90d05c2d") (checksum-error . #f) (collection . "plot-container") (conflicts . ()) (date-added . 1554899153) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "plot-lib" "pict-snip-lib" "plot-gui-lib" "snip-lib" "gui-doc" "pict-snip-doc" "plot-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Embed plot snips in Racket GUI applications") (implies . ()) (modules . ((lib "plot-container/private/plot-container.rkt") (lib "plot-container/scribblings/plot-container.scrbl") (lib "plot-container/private/hover-util.rkt") (lib "plot-container/hover-util.rkt") (lib "plot-container/main.rkt"))) (name . "plot-container") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/plot-container.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "affdbaeec086a0b639a952368fa85c3b90d05c2d") (source . "https://github.com/alex-hhh/plot-container.git") (source_url . "https://github.com/alex-hhh/plot-container.git"))))))) ("plplot" . #hasheq((author . "peter.samarin@gmail.com") (authors . ("peter.samarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plplot.txt") (test-failure-log . "server/built/test-fail/plplot.txt") (test-success-log . #f))) (checksum . "fab8fe83993506b871eab9f1f6a7f2be3324c0dd") (checksum-error . #f) (collection . "plplot") (conflicts . ()) (date-added . 1584305771) (dependencies . ("base")) (description . "FFI bindings to PLplot") (implies . ()) (modules . ((lib "plplot/examples/x02.rkt") (lib "plplot/examples/utilities.rkt") (lib "plplot/examples/x00.rkt") (lib "plplot/examples/x03.rkt") (lib "plplot/main.rkt") (lib "plplot/examples/x01.rkt") (lib "plplot/examples/x17.rkt"))) (name . "plplot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (FFI . #t) (author:peter.samarin@gmail.com . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/oetr/racket-plplot.git") (tags . ("FFI" "plot")) (versions . #hash((default . #hasheq((checksum . "fab8fe83993506b871eab9f1f6a7f2be3324c0dd") (source . "https://github.com/oetr/racket-plplot.git") (source_url . "https://github.com/oetr/racket-plplot.git"))))))) ("plt-build-plot" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-build-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-build-plot.txt"))) (checksum . "e8c000f6611833f183f598c9d34380ff9d1bfc96") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "aws" "s3-sync" "draw-lib" "gui-lib" "scribble-html-lib" "plt-web-lib" "plt-service-monitor")) (description . "tools to record and plot `raco setup` memory use") (implies . ()) (modules . ((lib "plt-build-plot/page.rkt") (lib "plt-build-plot/plot.rkt") (lib "plt-build-plot/upload.rkt") (lib "plt-build-plot/main.rkt"))) (name . "plt-build-plot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/plt-build-plot/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e8c000f6611833f183f598c9d34380ff9d1bfc96") (source . "git://github.com/racket/plt-build-plot") (source_url . "http://github.com/racket/plt-build-plot/tree/master"))))))) ("plt-service-monitor" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-service-monitor" "doc/plt-service-monitor@plt-service-monitor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-service-monitor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-service-monitor.txt"))) (checksum . "ab9dc9ab8e28348e942fb5568bf6e96bc4bbbce4") (checksum-error . #f) (collection . "plt-service-monitor") (conflicts . ()) (dependencies . ("net-lib" "base" "aws" "http" "racket-doc" "scribble-lib")) (description . "service-monitoring and \"heartbeat\" tools") (implies . ()) (modules . ((lib "plt-service-monitor/config.rkt") (lib "plt-service-monitor/plt-service-monitor.scrbl") (lib "plt-service-monitor/private/email.rkt") (lib "plt-service-monitor/beat.rkt") (lib "plt-service-monitor/take-pulse.rkt"))) (name . "plt-service-monitor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/racket/plt-service-monitor/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ab9dc9ab8e28348e942fb5568bf6e96bc4bbbce4") (source . "git://github.com/racket/plt-service-monitor") (source_url . "http://github.com/racket/plt-service-monitor/tree/master"))))))) ("plt-services" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-services.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-services.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Miscellaneous management and maintenance tools used by the Racket development team") (implies . ()) (modules . ()) (name . "plt-services") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (deprecated . #t) (ring:0 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (source_url . "git://github.com/racket/racket/?path=pkgs/plt-services"))))))) ("plt-web" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("plt-web-lib" "plt-web-doc")) (description . "Web-page creation libraries") (implies . ("plt-web-lib" "plt-web-doc")) (modules . ()) (name . "plt-web") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/plt-web/?path=plt-web") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e06442a897ede8df9706555eee51734a9cecf4ab") (source . "git://github.com/racket/plt-web/?path=plt-web") (source_url . "git://github.com/racket/plt-web/?path=plt-web"))))))) ("plt-web-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-web" "doc/plt-web@plt-web-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "plt-web") (conflicts . ()) (dependencies . ("base" "plt-web-lib" "racket-doc" "scribble-doc" "scribble-lib")) (description . "documentation part of \"plt-web\"") (implies . ()) (modules . ((lib "plt-web/plt-web.scrbl"))) (name . "plt-web-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/plt-web/?path=plt-web-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e06442a897ede8df9706555eee51734a9cecf4ab") (source . "git://github.com/racket/plt-web/?path=plt-web-doc") (source_url . "git://github.com/racket/plt-web/?path=plt-web-doc"))))))) ("plt-web-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "plt-web") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "scribble-html-lib")) (description . "PLT web page style and generation") (implies . ()) (modules . ((lib "plt-web/private/roots.rkt") (lib "plt-web/utils.rkt") (lib "plt-web/private/image-version.rkt") (lib "plt-web/build.rkt") (lib "plt-web/main.rkt") (lib "plt-web/style.rkt") (lib "plt-web/extras.rkt") (lib "plt-web/resources.rkt") (lib "plt-web/indexes.rkt") (lib "plt-web/layout.rkt") (lib "plt-web/resources/add-logo-text.rkt") (lib "plt-web/links.rkt") (lib "plt-web/resources/file-icons.rkt"))) (name . "plt-web-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/plt-web/?path=plt-web-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e06442a897ede8df9706555eee51734a9cecf4ab") (source . "git://github.com/racket/plt-web/?path=plt-web-lib") (source_url . "git://github.com/racket/plt-web/?path=plt-web-lib"))))))) ("pmap" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pmap" "doc/pmap@pmap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pmap.txt"))) (checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (checksum-error . #f) (collection . "pmap") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "math-doc")) (description . "Implementations of map using parallel futures and places") (implies . ()) (modules . ((lib "pmap/pmap.scrbl") (lib "pmap/main.rkt") (lib "pmap/pmapp_worker.rkt") (lib "pmap/pmapf.rkt") (lib "pmap/pmapp.rkt"))) (name . "pmap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Math . #t) (author:andreas8001@hotmail.com . #t) (futures . #t) (parallel . #t) (places . #t) (ring:1 . #t) (touch . #t))) (source . "http://github.com/APOS80/pmap/tree/master") (tags . ("futures" "Math" "parallel" "places" "touch")) (versions . #hash((default . #hasheq((checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (source . "git://github.com/APOS80/pmap") (source_url . "http://github.com/APOS80/pmap/tree/master"))))))) ("png-image" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "png-image" "doc/png-image@png-image/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/png-image.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/png-image.txt"))) (checksum . "2515ab0af55f3d9e8aac92aaa3bc6a9dc571f60d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Library to view and modify PNG chunks.") (implies . ()) (modules . ((lib "png-image/base.rkt") (lib "png-image/doc/png-image.scrbl") (lib "png-image/test/png-image-test.rkt") (lib "png-image/png-image.rkt") (lib "png-image/txt.rkt") (lib "png-image/main.rkt"))) (name . "png-image") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (images . #t) (metadata . #t) (png . #t) (ring:1 . #t))) (source . "http://github.com/lehitoskin/png-image/tree/master") (tags . ("compression" "decompression" "images" "metadata" "png")) (versions . #hash((default . #hasheq((checksum . "2515ab0af55f3d9e8aac92aaa3bc6a9dc571f60d") (source . "git://github.com/lehitoskin/png-image") (source_url . "http://github.com/lehitoskin/png-image/tree/master"))))))) ("point-free" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "point-free" "doc/point-free@point-free/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/point-free.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/point-free.txt"))) (checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "A library for easier and more powerful function composition") (implies . ()) (modules . ((lib "point-free/module-doc-test.rkt") (lib "point-free/fixpoint.rkt") (lib "point-free/point-free.scrbl") (lib "point-free/definition-forms.rkt") (lib "point-free/main.rkt") (lib "point-free/parallel-composition.rkt") (lib "point-free/arg-count-syntax.rkt") (lib "point-free/thrush.rkt"))) (name . "point-free") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/point-free/tree/master") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (source . "git://github.com/jackfirth/point-free") (source_url . "http://github.com/jackfirth/point-free/tree/master"))))))) ("pollen" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen" "doc/pollen@pollen/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen.txt"))) (checksum . "c182a30f57ea5096440aea3d097f5fe3b78bb236") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661201) (dependencies . ("base" "txexpr" "sugar" "markdown" "htdp" "at-exp-lib" "html-lib" "rackjure" "web-server-lib" "scribble-lib" "scribble-text-lib" "rackunit-lib" "gui-lib" "string-constants-lib" "net-lib" "plot-gui-lib" "scribble-lib" "racket-doc" "rackunit-doc" "plot-doc" "scribble-doc" "slideshow-doc" "web-server-doc" "drracket")) (description . "Publishing system for web-based books") (implies . ()) (modules . ((lib "pollen/test/data/pathup/pollen.rkt") (lib "pollen/tag.rkt") (lib "pollen/unstable/html.rkt") (lib "pollen/private/to-string.rkt") (lib "pollen/markup.rkt") (lib "pollen/private/main-base.rkt") (lib "pollen/test/data/project-port/pollen.rkt") (lib "pollen/scribblings/cache.scrbl") (lib "pollen/template/html.rkt") (lib "pollen/render.rkt") (lib "pollen/test/test-escape-ext.rkt") (lib "pollen/misc/tutorial.rkt") (lib "pollen/scribblings/tag.scrbl") (lib "pollen/private/whitespace.rkt") (lib "pollen/scribblings/story.scrbl") (lib "pollen/template.rkt") (lib "pollen/markdown.rkt") (lib "pollen/scribblings/acknowledgments.scrbl") (lib "pollen/private/command.rkt") (lib "pollen/scribblings/decode.scrbl") (lib "pollen/private/project-server.rkt") (lib "pollen/test/test-lang-core.rkt") (lib "pollen/private/external/mode-indentation.rkt") (lib "pollen/scribblings/tutorial-second.scrbl") (lib "pollen/setup.rkt") (lib "pollen/test/data/override/pollen.rkt") (lib "pollen/private/project-server-routes.rkt") (lib "pollen/test/test-third-tutorial-files.rkt") (lib "pollen/test/test-langs.rkt") (lib "pollen/scribblings/programming-pollen.scrbl") (lib "pollen/private/external/doclang-raw.rkt") (lib "pollen/ptree.rkt") (lib "pollen/scribblings/format-test.scrbl") (lib "pollen/test/test-pathup.rkt") (lib "pollen/test/test-pollen-mode.rkt") (lib "pollen/test/test-poly.rkt") (lib "pollen/test/data/quick-tour/uptown/pollen.rkt") (lib "pollen/test/test-provider.rkt") (lib "pollen/private/external/output.rkt") (lib "pollen/scribblings/tutorial-mini.scrbl") (lib "pollen/scribblings/utils.rkt") (lib "pollen/private/external/include-template.rkt") (lib "pollen/scribblings/big-picture.scrbl") (lib "pollen/template/base.rkt") (lib "pollen/scribblings/file.scrbl") (lib "pollen/private/constants.rkt") (lib "pollen/test/pollen.rkt") (lib "pollen/private/log.rkt") (lib "pollen/test/test-submodule.rkt") (lib "pollen/scribblings/pollen.scrbl") (lib "pollen/private/split-metas.rkt") (lib "pollen/private/splice.rkt") (lib "pollen/test/test-current-metas-none.rkt") (lib "pollen/scribblings/pygments.scrbl") (lib "pollen/test/test-current-metas.rkt") (lib "pollen/pre.rkt") (lib "pollen/unstable/pygments.rkt") (lib "pollen/test/test-lang-splice.rkt") (lib "pollen/scribblings/convert.scrbl") (lib "pollen/test/test-quick-tour.rkt") (lib "pollen/private/cache-utils.rkt") (lib "pollen/file.rkt") (lib "pollen/test/data/poly-output-path/pollen.rkt") (lib "pollen/scribblings/template.scrbl") (lib "pollen/unstable/convert/html-to-pollen.rkt") (lib "pollen/scribblings/license.scrbl") (lib "pollen/private/runtime-config.rkt") (lib "pollen/test/test-output.rkt") (lib "pollen/test/test-poly-output-path.rkt") (lib "pollen/test/data/whitespace/pollen.rkt") (lib "pollen/scribblings/tutorial-third.scrbl") (lib "pollen/test/data/pathup/subdir/subdir/pollen.rkt") (lib "pollen/test/test-bytes.rkt") (lib "pollen/scribblings/quick.scrbl") (lib "pollen/scribblings/third-tutorial-files/pollen.rkt") (lib "pollen/test/data/pollen-mode/pollen.rkt") (lib "pollen/scribblings/pagetree.scrbl") (lib "pollen/main.rkt") (lib "pollen/test/test-inline-submodule.rkt") (lib "pollen/test/test-pagetree-output.rkt") (lib "pollen/scribblings/render.scrbl") (lib "pollen/scribblings/version-history.scrbl") (lib "pollen/private/dialect.rkt") (lib "pollen/private/file-utils.rkt") (lib "pollen/scribblings/tutorial-first.scrbl") (lib "pollen/private/preheat-cache.rkt") (lib "pollen/scribblings/typography.scrbl") (lib "pollen/scribblings/tutorial-fourth.scrbl") (lib "pollen/unstable/typography.rkt") (lib "pollen/test/test-meta.rkt") (lib "pollen/core.rkt") (lib "pollen/test/test-trim-whitespace.rkt") (lib "pollen/scribblings/unstable-module-reference.scrbl") (lib "pollen/private/external/logging.rkt") (lib "pollen/test/test-project-port.rkt") (lib "pollen/scribblings/top.scrbl") (lib "pollen/scribblings/mb-tools.rkt") (lib "pollen/private/version.rkt") (lib "pollen/scribblings/formats.scrbl") (lib "pollen/test/test-runtime-path.rkt") (lib "pollen/test/data/poly/pollen.rkt") (lib "pollen/private/render-helper.rkt") (lib "pollen/private/drracket-buttons.rkt") (lib "pollen/unstable/convert.rkt") (lib "pollen/scribblings/raco.scrbl") (lib "pollen/top.rkt") (lib "pollen/unstable/math.rkt") (lib "pollen/scribblings/command.scrbl") (lib "pollen/scribblings/core.scrbl") (lib "pollen/scribblings/installation.scrbl") (lib "pollen/scribblings/setup.scrbl") (lib "pollen/mode.rkt") (lib "pollen/test/test-ext.rkt") (lib "pollen/test/data/subtemplate/pollen.rkt") (lib "pollen/scribblings/module-reference.scrbl") (lib "pollen/test/data/rerequire/pollen.rkt") (lib "pollen/test/test-rerequire.rkt") (lib "pollen/test/data/escape-ext/pollen.rkt") (lib "pollen/pagetree.rkt") (lib "pollen/cache.rkt") (lib "pollen/test/test-subtemplate.rkt") (lib "pollen/decode.rkt") (lib "pollen/private/project.rkt") (lib "pollen/private/reader-base.rkt"))) (name . "pollen") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (documents . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/pollen.git") (tags . ("documents")) (versions . #hash((default . #hasheq((checksum . "c182a30f57ea5096440aea3d097f5fe3b78bb236") (source . "https://git.matthewbutterick.com/mbutterick/pollen.git") (source_url . "https://git.matthewbutterick.com/mbutterick/pollen.git"))))))) ("pollen-citations-mcgill" . #hasheq((author . "sanchom@gmail.com") (authors . ("sanchom@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "citations-mcgill" "doc/citations-mcgill@pollen-citations-mcgill/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-citations-mcgill.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-citations-mcgill.txt"))) (checksum . "4d510c4098e00e97257b50b6a9189d7e660c3c8c") (checksum-error . #f) (collection . "pollen") (conflicts . ()) (date-added . 1559932822) (dependencies . ("base" "pollen" "txexpr" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A McGill-style citations system that works within the Pollen publishing system.") (implies . ()) (modules . ((lib "pollen/citations-mcgill.rkt") (lib "pollen/scribblings/citations-mcgill.scrbl"))) (name . "pollen-citations-mcgill") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sanchom@gmail.com . #t) (documents . #t) (pollen . #t) (ring:1 . #t) (self-publishing . #t))) (source . "https://github.com/sanchom/pollen-citations-mcgill.git") (tags . ("documents" "pollen" "self-publishing")) (versions . #hash((default . #hasheq((checksum . "4d510c4098e00e97257b50b6a9189d7e660c3c8c") (source . "https://github.com/sanchom/pollen-citations-mcgill.git") (source_url . "https://github.com/sanchom/pollen-citations-mcgill.git"))))))) ("pollen-component" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-component" "doc/pollen-component@pollen-component/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-component.txt") (test-failure-log . "server/built/test-fail/pollen-component.txt") (test-success-log . #f))) (checksum . "36853a84a58e2889b0e3065d5f1357a596e3c1e6") (checksum-error . #f) (collection . "pollen-component") (conflicts . ()) (dependencies . ("base" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "Component-based development for Pollen") (implies . ()) (modules . ((lib "pollen-component/examples/with-css-expressions-and-urlang/pollen.rkt") (lib "pollen-component/examples/without-pollen-component/pollen.rkt") (lib "pollen-component/examples/with-pollen-component/pollen.rkt") (lib "pollen-component/documentation/pollen-component.scrbl") (lib "pollen-component/tests/parameter.rkt") (lib "pollen-component/tests/pollen.rkt") (lib "pollen-component/main.rkt") (lib "pollen-component/tests/test.rkt") (lib "pollen-component/examples/with-parameter/component.rkt"))) (name . "pollen-component") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (components . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/leafac/pollen-component.git") (tags . ("components" "pollen")) (versions . #hash((default . #hasheq((checksum . "36853a84a58e2889b0e3065d5f1357a596e3c1e6") (source . "https://github.com/leafac/pollen-component.git") (source_url . "https://github.com/leafac/pollen-component.git"))))))) ("pollen-count" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-count" "doc/pollen-count@pollen-count/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-count.txt"))) (checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (checksum-error . #f) (collection . "pollen-count") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "txexpr" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "pollen-count/scribblings/pollen-count.scrbl") (lib "pollen-count/main.rkt"))) (name . "pollen-count") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:malcolm.still@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/malcolmstill/pollen-count/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (source . "git://github.com/malcolmstill/pollen-count") (source_url . "http://github.com/malcolmstill/pollen-count/tree/master"))))))) ("pollen-rock" . #hasheq((author . "ljs.darkfish@gmail.com") (authors . ("ljs.darkfish@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pollen-rock.txt") (docs . (("main" "pollen-rock" "doc/pollen-rock@pollen-rock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-rock.txt") (test-failure-log . "server/built/test-fail/pollen-rock.txt") (test-success-log . #f))) (checksum . "8107c7c1a1ca1e5ab125650f38002683b15b22c9") (checksum-error . #f) (collection . "pollen-rock") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "web-server-lib" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "An enhanced Pollen server and an in-browser editor for Pollen files") (implies . ()) (modules . ((lib "pollen-rock/pollen-rock/http-util.rkt") (lib "pollen-rock/pollen-rock/handlers/get-config-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/dump-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-handler.rkt") (lib "pollen-rock/pollen-rock/tests/test.rkt") (lib "pollen-rock/pollen-rock/handlers/render-handler.rkt") (lib "pollen-rock/pollen-rock/scribblings/pollen-rock.scrbl") (lib "pollen-rock/pollen-rock/handlers/search-handler.rkt") (lib "pollen-rock/pollen-rock/restful.rkt") (lib "pollen-rock/pollen-rock/tests/test-utils.rkt") (lib "pollen-rock/pollen-rock/main.rkt") (lib "pollen-rock/pollen-rock/handlers/watch-handler.rkt") (lib "pollen-rock/pollen-rock/config.rkt") (lib "pollen-rock/pollen-rock/handlers/get-contents-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-watch.rkt") (lib "pollen-rock/pollen-rock/handlers/tags-handler.rkt") (lib "pollen-rock/pollen-rock/logger.rkt") (lib "pollen-rock/pollen-rock/handlers/expose-module.rkt"))) (name . "pollen-rock") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:ljs.darkfish@gmail.com . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/lijunsong/pollen-rock.git") (tags . ("pollen")) (versions . #hash((default . #hasheq((checksum . "8107c7c1a1ca1e5ab125650f38002683b15b22c9") (source . "https://github.com/lijunsong/pollen-rock.git") (source_url . "https://github.com/lijunsong/pollen-rock.git"))))))) ("pollen-tfl" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-tfl" "doc/pollen-tfl@pollen-tfl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tfl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tfl.txt"))) (checksum . "07037ce803db93058950c78996d6d0c5450e233a") (checksum-error . #f) (collection . "pollen-tfl") (conflicts . ()) (date-added . 1556661273) (dependencies . ("base" "pollen" "hyphenate" "css-tools" "txexpr" "sugar" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Sample Pollen project: source code for Typography for Lawyers website") (implies . ()) (modules . ((lib "pollen-tfl/pollen-test.rkt") (lib "pollen-tfl/pollen.rkt") (lib "pollen-tfl/main.rkt") (lib "pollen-tfl/scribblings/pollen-rkt.scrbl") (lib "pollen-tfl/scribblings/pollen-tfl.scrbl") (lib "pollen-tfl/fonts/pollen.rkt"))) (name . "pollen-tfl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (demo . #t) (pollen . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/pollen-tfl.git") (tags . ("demo" "pollen")) (versions . #hash((default . #hasheq((checksum . "07037ce803db93058950c78996d6d0c5450e233a") (source . "https://git.matthewbutterick.com/mbutterick/pollen-tfl.git") (source_url . "https://git.matthewbutterick.com/mbutterick/pollen-tfl.git"))))))) ("pollen-tuftorial" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-tuftorial" "doc/pollen-tuftorial@pollen-tuftorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tuftorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tuftorial.txt"))) (checksum . "bb50c7bf4544c0013a59a65e38d48bd174231d05") (checksum-error . #f) (collection . "pollen-tuftorial") (conflicts . ()) (date-added . 1578341938) (dependencies . ("base" "pollen" "hyphenate" "css-tools" "txexpr" "sugar" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Pollen tutorial project based on Tufte CSS") (implies . ()) (modules . ((lib "pollen-tuftorial/scribblings/pollen-rkt.scrbl") (lib "pollen-tuftorial/pollen.rkt") (lib "pollen-tuftorial/scribblings/pollen-tuftorial.scrbl"))) (name . "pollen-tuftorial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/pollen-tuftorial.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bb50c7bf4544c0013a59a65e38d48bd174231d05") (source . "https://github.com/mbutterick/pollen-tuftorial.git") (source_url . "https://github.com/mbutterick/pollen-tuftorial.git"))))))) ("polyglot" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566696913) (dependencies . ("base" "polyglot-lib" "polyglot-doc")) (description . "Generate static websites using any mixture of any language for humans or computers.") (implies . ("polyglot-lib" "polyglot-doc")) (modules . ()) (name . "polyglot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sage@sagegerard.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (static-sites . #t) (web . #t) (web-server . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot") (tags . ("blog" "markdown" "static-sites" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot"))))))) ("polyglot-doc" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "polyglot-reference" "doc/polyglot-reference@polyglot-doc/index.html") ("main" "polyglot-tutorials" "doc/polyglot-tutorials@polyglot-doc/index.html") ("main" "polyglot-guide" "doc/polyglot-guide@polyglot-doc/index.html") ("main" "polyglot-how-tos" "doc/polyglot-how-tos@polyglot-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-doc.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694858) (dependencies . ("aws" "base" "css-expr" "file-watchers" "markdown" "polyglot-lib" "txexpr" "unlike-assets-doc" "unlike-assets-lib" "scribble-lib" "racket-doc")) (description . "Documentation for polyglot") (implies . ()) (modules . ((lib "polyglot/scribblings/tutorials/css-preprocessing.scrbl") (lib "polyglot/scribblings/tutorials/multiple-workflows.scrbl") (lib "polyglot/scribblings/macros.rkt") (lib "polyglot/scribblings/reference/contributions.scrbl") (lib "polyglot/scribblings/how-tos/embed-code-examples.scrbl") (lib "polyglot/scribblings/guide/motivation.scrbl") (lib "polyglot/scribblings/reference/polyglot-reference.scrbl") (lib "polyglot/scribblings/guide/get-started.scrbl") (lib "polyglot/scribblings/reference/cli.scrbl") (lib "polyglot/scribblings/reference/builds.scrbl") (lib "polyglot/scribblings/guide/polyglot-guide.scrbl") (lib "polyglot/scribblings/guide/imperative-workflow.scrbl") (lib "polyglot/scribblings/how-tos/polyglot-how-tos.scrbl") (lib "polyglot/scribblings/reference/paths.scrbl") (lib "polyglot/scribblings/reference/imperative.scrbl") (lib "polyglot/scribblings/reference/projects-index.scrbl") (lib "polyglot/scribblings/reference/projects.scrbl") (lib "polyglot/scribblings/guide/now-what.scrbl") (lib "polyglot/scribblings/tutorials/polyglot-tutorials.scrbl") (lib "polyglot/scribblings/guide/macros.scrbl") (lib "polyglot/scribblings/reference/functional.scrbl") (lib "polyglot/scribblings/guide/racket-in-markdown.scrbl") (lib "polyglot/scribblings/reference/base.scrbl") (lib "polyglot/scribblings/reference/elements.scrbl") (lib "polyglot/scribblings/how-tos/before-after-builds.scrbl") (lib "polyglot/scribblings/reference/built-in-workflows.scrbl") (lib "polyglot/scribblings/reference/txexpr.scrbl") (lib "polyglot/scribblings/reference/applying.scrbl") (lib "polyglot/scribblings/how-tos/incorporate-side-effects.scrbl") (lib "polyglot/scribblings/reference/workflows.scrbl") (lib "polyglot/scribblings/guide/functional-workflow.scrbl") (lib "polyglot/scribblings/guide/base-workflow.scrbl"))) (name . "polyglot-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (static-sites . #t) (web . #t) (web-server . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc") (tags . ("blog" "markdown" "static-sites" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc"))))))) ("polyglot-lib" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-lib.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694703) (dependencies . ("base" "file-watchers" "txexpr" "unlike-assets-lib" "aws" "markdown" "web-server-lib")) (description . "Implementation for Polyglot") (implies . ()) (modules . ((lib "polyglot/private/cli/demo.rkt") (lib "polyglot/private/server.rkt") (lib "polyglot/elements.rkt") (lib "polyglot/private/dist.rkt") (lib "polyglot/private/skel/imperative/.polyglotrc.rkt") (lib "polyglot/txexpr.rkt") (lib "polyglot/private/dynamic-modules.rkt") (lib "polyglot/private/skel/functional/.polyglotrc.rkt") (lib "polyglot/base.rkt") (lib "polyglot/projects.rkt") (lib "polyglot/private/css.rkt") (lib "polyglot/private/cli/develop.rkt") (lib "polyglot/private/cli/start.rkt") (lib "polyglot/functional.rkt") (lib "polyglot/main.rkt") (lib "polyglot/private/cli/shared.rkt") (lib "polyglot/private/cli/entry.rkt") (lib "polyglot/private/skel/functional/vcomps.rkt") (lib "polyglot/private/cli/publish.rkt") (lib "polyglot/imperative.rkt") (lib "polyglot/paths.rkt") (lib "polyglot/private/skel/imperative/vcomps.rkt") (lib "polyglot/private/cli/build.rkt") (lib "polyglot/builds.rkt"))) (name . "polyglot-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sage@sagegerard.com . #t) (code-generator . #t) (ring:1 . #t) (static-sites . #t) (web . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib") (tags . ("code-generator" "static-sites" "web")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib"))))))) ("polyglot-test" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/polyglot-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-test.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694928) (dependencies . ("base" "polyglot-lib" "aws" "unlike-assets-lib" "markdown" "rackunit-lib")) (description . "Tests for Polyglot") (implies . ()) (modules . ((lib "tests/polyglot/scripts.rkt") (lib "tests/polyglot/projects.rkt") (lib "tests/polyglot/paths.rkt") (lib "tests/polyglot/imperative.rkt") (lib "tests/polyglot/builds.rkt") (lib "tests/polyglot/functional.rkt") (lib "tests/polyglot/dynamic-modules.rkt") (lib "tests/polyglot/publish.rkt") (lib "tests/polyglot/txexpr.rkt"))) (name . "polyglot-test") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test"))))))) ("polysemy" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "polysemy" "doc/polysemy@polysemy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polysemy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polysemy.txt"))) (checksum . "5d9838618ae6d6b8c412eaf30bac4bfa9fcf12c9") (checksum-error . #f) (collection . "polysemy") (conflicts . ()) (date-added . 1614799518) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Highly experimental and unstable. Attach multiple meanings to an identifier (match expander, function overloads, macros, custom \"~literal\" tokens…). Rename parts of identifiers (rename only some meanings, leaving others with the original name). Compose hybrid identifiers by mixing the meanings of two or more independently defined identifiers.") (implies . ()) (modules . ((lib "polysemy/test/test-provide-b.rkt") (lib "polysemy/test/test-require-c.rkt") (lib "polysemy/private/utils.rkt") (lib "polysemy/test/test-require-e-rename-failure.rkt") (lib "polysemy/scribblings/polysemy.scrbl") (lib "polysemy/test/test-provide.rkt") (lib "polysemy/private/ids.rkt") (lib "polysemy/test/test-2-provide.rkt") (lib "polysemy/test/test-2-require.rkt") (lib "polysemy/main.rkt") (lib "polysemy/test/test-require-d.rkt") (lib "polysemy/test/test-require.rkt"))) (name . "polysemy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (provide . #t) (require . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/polysemy.git#main") (tags . ("experimental" "provide" "require" "syntax")) (versions . #hash((default . #hasheq((checksum . "5d9838618ae6d6b8c412eaf30bac4bfa9fcf12c9") (source . "https://github.com/jsmaniac/polysemy.git#main") (source_url . "https://github.com/jsmaniac/polysemy.git#main"))))))) ("pop-pl" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pop-pl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pop-pl.txt"))) (checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (checksum-error . #f) (collection . "pop-pl") (conflicts . ()) (dependencies . ("base" "gui-lib" "pict-lib" "rackunit-lib" "cover-coveralls")) (description . "A Patient-Oriented Prescription Programming Language") (implies . ()) (modules . ((lib "pop-pl/examples/insulin/simulation.rkt") (lib "pop-pl/lang/reader.rkt") (lib "pop-pl/private/shared.rkt") (lib "pop-pl/tests/insulin.rkt") (lib "pop-pl/examples/heparin/simulation.rkt") (lib "pop-pl/tests/harness.rkt") (lib "pop-pl/main.rkt") (lib "pop-pl/lang/parse.rkt") (lib "pop-pl/constants.rkt") (lib "pop-pl/prescription-sig.rkt") (lib "pop-pl/system-unit.rkt") (lib "pop-pl/packrat.rkt") (lib "pop-pl/tests/popa.rkt") (lib "pop-pl/system-sig.rkt") (lib "pop-pl/examples/heparin/sim-gui.rkt") (lib "pop-pl/tests/heparin.rkt") (lib "pop-pl/examples/insulin/sim-gui.rkt") (lib "pop-pl/sexp/lang/reader.rkt") (lib "pop-pl/examples/lurie-heparin/heparin.rkt"))) (name . "pop-pl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "http://github.com/florence/pop-pl/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (source . "git://github.com/florence/pop-pl") (source_url . "http://github.com/florence/pop-pl/tree/master"))))))) ("popl-2012-ryr-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/popl-2012-ryr-talk.txt") (test-failure-log . "server/built/test-fail/popl-2012-ryr-talk.txt") (test-success-log . #f))) (checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "htdp-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "") (implies . ()) (modules . ((lib "popl-2012-ryr-talk/fable/fable.rkt") (lib "popl-2012-ryr-talk/util.rkt") (lib "popl-2012-ryr-talk/subst-test.rkt") (lib "popl-2012-ryr-talk/typeset-amb.rkt") (lib "popl-2012-ryr-talk/amb-test.rkt") (lib "popl-2012-ryr-talk/amb.rkt") (lib "popl-2012-ryr-talk/lifecycle.rkt") (lib "popl-2012-ryr-talk/title.rkt") (lib "popl-2012-ryr-talk/color.rkt") (lib "popl-2012-ryr-talk/subst.rkt") (lib "popl-2012-ryr-talk/main.rkt") (lib "popl-2012-ryr-talk/study.rkt") (lib "popl-2012-ryr-talk/fable-words.rkt"))) (name . "popl-2012-ryr-talk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/rfindler/popl-2012-ryr-talk/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (source . "git://github.com/rfindler/popl-2012-ryr-talk") (source_url . "http://github.com/rfindler/popl-2012-ryr-talk/tree/master"))))))) ("poppler-i386-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-i386-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-i386-macosx.txt"))) (checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (modules . ()) (name . "poppler-i386-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-i386-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (source . "git://github.com/soegaard/poppler-libs?path=poppler-i386-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-i386-macosx"))))))) ("poppler-win32-i386" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-i386.txt"))) (checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (modules . ()) (name . "poppler-win32-i386") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-i386") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-i386") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-i386"))))))) ("poppler-win32-x86-64" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-x86-64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-x86-64.txt"))) (checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (modules . ()) (name . "poppler-win32-x86-64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-x86_64") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-x86_64") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-x86_64"))))))) ("poppler-x86-64-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-x86-64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-x86-64-macosx.txt"))) (checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (modules . ()) (name . "poppler-x86-64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-x86_64-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "f39e31f2b561b457fdbda50117f6bc4802ef14b6") (source . "git://github.com/soegaard/poppler-libs?path=poppler-x86_64-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-x86_64-macosx"))))))) ("port-match" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "port-match" "doc/port-match@port-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/port-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/port-match.txt"))) (checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (checksum-error . #f) (collection . "port-match") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Pattern Matching for Ports") (implies . ()) (modules . ((lib "port-match/main.rkt") (lib "port-match/private/expander.rkt") (lib "port-match/test.rkt") (lib "port-match/private/template.rkt") (lib "port-match/private/pattern.rkt") (lib "port-match/private/forms.rkt") (lib "port-match/private/compile.rkt") (lib "port-match/port-match.scrbl") (lib "port-match/base.rkt"))) (name . "port-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (match . #t) (port . #t) (ring:1 . #t))) (source . "http://github.com/lwhjp/port-match/tree/master") (tags . ("binary" "match" "port")) (versions . #hash((default . #hasheq((checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (source . "git://github.com/lwhjp/port-match") (source_url . "http://github.com/lwhjp/port-match/tree/master"))))))) ("portage-admin" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portage-admin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portage-admin.txt"))) (checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570513) (dependencies . ("base" "portage-admin-doc" "portage-admin-lib" "portage-admin-test")) (description . "A GUI application for inspection of Gentoo-based systems. Metapackage.") (implies . ()) (modules . ()) (name . "portage-admin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (portage . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin") (tags . ("gentoo" "portage" "system")) (versions . #hash((default . #hasheq((checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin") (source_url . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin"))))))) ("portage-admin-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "portage-admin" "doc/portage-admin@portage-admin-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portage-admin-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portage-admin-doc.txt"))) (checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642584634) (dependencies . ("base" "racket-doc" "scribble-lib" "portage-admin-lib")) (description . "A GUI application for inspection of Gentoo-based systems. Documentation.") (implies . ()) (modules . ((lib "portage-admin/scribblings/cmdline.scrbl") (lib "portage-admin/scribblings/modules.scrbl") (lib "portage-admin/scribblings/main.scrbl"))) (name . "portage-admin-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (portage . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-doc") (tags . ("gentoo" "portage" "system")) (versions . #hash((default . #hasheq((checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-doc") (source_url . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-doc"))))))) ("portage-admin-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portage-admin-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portage-admin-lib.txt"))) (checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642584417) (dependencies . ("base" "gui-lib" "plot-gui-lib" "plot-lib" "threading-lib")) (description . "A GUI application for inspection of Gentoo-based systems. Core.") (implies . ()) (modules . ((lib "portage-admin/private/explorer/log/collect.rkt") (lib "portage-admin/private/explorer/eselect/collect.rkt") (lib "portage-admin/private/explorer/log/main.rkt") (lib "portage-admin/private/builds.rkt") (lib "portage-admin/main.rkt") (lib "portage-admin/private/main.rkt") (lib "portage-admin/version.rkt") (lib "portage-admin/private/q-wrapper.rkt") (lib "portage-admin/private/stats/pkgdb/main.rkt") (lib "portage-admin/private/explorer/eselect/main.rkt") (lib "portage-admin/private/spawn/subprocess.rkt") (lib "portage-admin/private/pkgdb.rkt") (lib "portage-admin/private/command-message.rkt") (lib "portage-admin/private/explorer/pkgdb/main.rkt") (lib "portage-admin/private/terminal.rkt") (lib "portage-admin/private/spawn/frame.rkt"))) (name . "portage-admin-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (portage . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-lib") (tags . ("gentoo" "portage" "system")) (versions . #hash((default . #hasheq((checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-lib") (source_url . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-lib"))))))) ("portage-admin-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portage-admin-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portage-admin-test.txt"))) (checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570421) (dependencies . ("base" "rackunit-lib" "portage-admin-lib")) (description . "A GUI application for inspection of Gentoo-based systems. Tests.") (implies . ()) (modules . ((lib "portage-admin/tests/unit/pkginfo.rkt"))) (name . "portage-admin-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (gentoo . #t) (portage . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-test") (tags . ("gentoo" "portage" "system")) (versions . #hash((default . #hasheq((checksum . "03b8bc7071036e23be476d7f56db2aa7e8a920b0") (source . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-test") (source_url . "https://gitlab.com/gentoo-racket/racket-portage-admin.git?path=src%2Fportage-admin-test"))))))) ("portaudio" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "portaudio" "doc/portaudio@portaudio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio.txt") (test-failure-log . "server/built/test-fail/portaudio.txt") (test-success-log . #f))) (checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "portaudio-x86_64-macosx" "portaudio-x86_64-linux" "portaudio-x86_64-win32" "portaudio-aarch64-macosx" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for portaudio, a cross-platform audio library.") (implies . ()) (modules . ((lib "portaudio/test/test-stream-playback.rkt") (lib "portaudio/test/test-copying-callbacks.rkt") (lib "portaudio/test/helpers.rkt") (lib "portaudio/test/test-s16vec-record.rkt") (lib "portaudio/test/test-s16vec-play.rkt") (lib "portaudio/callback-support.rkt") (lib "portaudio/portaudio.scrbl") (lib "portaudio/lib/mac-make.rkt") (lib "portaudio/stream-play.rkt") (lib "portaudio/portaudio.rkt") (lib "portaudio/s16vec-play.rkt") (lib "portaudio/main.rkt") (lib "portaudio/s16vec-record.rkt") (lib "portaudio/callbacks-lib.rkt") (lib "portaudio/devices.rkt") (lib "portaudio/test/test-hi-level-stream-play.rkt") (lib "portaudio/test/test-stream-callback.rkt") (lib "portaudio/test/test-portaudio.rkt"))) (name . "portaudio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/portaudio/tree/master/") (tags . ("audio" "ffi" "io")) (versions . #hash((default . #hasheq((checksum . "bb4faf5e5500d2b89c22f16ba9adf455b263f097") (source . "github://github.com/jbclements/portaudio/master/") (source_url . "http://github.com/jbclements/portaudio/tree/master/"))))))) ("portaudio-aarch64-macosx" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-aarch64-macosx.txt"))) (checksum . "b7654210cfd530a05766bc8e1a3144a6af1d7147") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1655697722) (dependencies . ("base")) (description . "aarch64 macosx libraries for portaudio") (implies . ()) (modules . ()) (name . "portaudio-aarch64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-aarch64-macosx.git#main") (tags . ("portaudio")) (versions . #hash((default . #hasheq((checksum . "b7654210cfd530a05766bc8e1a3144a6af1d7147") (source . "https://github.com/jbclements/portaudio-aarch64-macosx.git#main") (source_url . "https://github.com/jbclements/portaudio-aarch64-macosx.git#main"))))))) ("portaudio-x86_64-linux" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-linux.txt"))) (checksum . "d0426385b94c2392f78bdeaa9ce50b3439cc2542") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1594158460) (dependencies . ("base")) (description . "Linux callback library for portaudio") (implies . ()) (modules . ()) (name . "portaudio-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-linux.git") (tags . ("audio" "portaudio")) (versions . #hash((default . #hasheq((checksum . "d0426385b94c2392f78bdeaa9ce50b3439cc2542") (source . "https://github.com/jbclements/portaudio-x86_64-linux.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-linux.git"))))))) ("portaudio-x86_64-macosx" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-macosx.txt"))) (checksum . "34efbd93f70d19a0b9e2deeb21caca124effe927") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1590689453) (dependencies . ("base")) (description . "macosx libraries for portaudio") (implies . ()) (modules . ()) (name . "portaudio-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-macosx.git") (tags . ("portaudio")) (versions . #hash((default . #hasheq((checksum . "34efbd93f70d19a0b9e2deeb21caca124effe927") (source . "https://github.com/jbclements/portaudio-x86_64-macosx.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-macosx.git"))))))) ("portaudio-x86_64-win32" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-win32.txt"))) (checksum . "8db0fd218e72b583ca6657c6bb6e2512128b2485") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1593884552) (dependencies . ("base")) (description . "64-bit windows libraries for portaudio") (implies . ()) (modules . ()) (name . "portaudio-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-win32.git") (tags . ("audio" "portaudio")) (versions . #hash((default . #hasheq((checksum . "8db0fd218e72b583ca6657c6bb6e2512128b2485") (source . "https://github.com/jbclements/portaudio-x86_64-win32.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-win32.git"))))))) ("positional-tree-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/positional-tree-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (checksum-error . #f) (collection . "positional-tree-utils") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" "list-utils")) (description . "A collection of functions which I have found useful when working with positional trees.") (implies . ()) (modules . ((lib "positional-tree-utils/main.rkt") (lib "positional-tree-utils/scribblings/positional-tree-utils.scrbl") (lib "positional-tree-utils/printer.rkt"))) (name . "positional-tree-utils") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:vincentnys@gmail.com . #t) (ring:1 . #t) (trees . #t) (utilities . #t))) (source . "https://github.com/v-nys/positional-tree-utils.git") (tags . ("trees" "utilities")) (versions . #hash((default . #hasheq((checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (source . "https://github.com/v-nys/positional-tree-utils.git") (source_url . "https://github.com/v-nys/positional-tree-utils.git"))))))) ("postfix-dot-notation" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postfix-dot-notation" "doc/postfix-dot-notation@postfix-dot-notation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postfix-dot-notation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postfix-dot-notation.txt"))) (checksum . "7475bf0b7f0f6fdd534933b86a29de633841f2b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for postfix dot notation") (implies . ()) (modules . ((lib "postfix-dot-notation/reader.rkt") (lib "postfix-dot-notation/docs/postfix-dot-notation.scrbl") (lib "postfix-dot-notation/top-utils.rkt") (lib "postfix-dot-notation/main.rkt") (lib "postfix-dot-notation/lang/reader.rkt") (lib "postfix-dot-notation/lang/runtime-config.rkt") (lib "postfix-dot-notation/tests/test-lang.rkt") (lib "postfix-dot-notation/lang/language-info.rkt") (lib "postfix-dot-notation/minsec.rkt"))) (name . "postfix-dot-notation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/AlexKnauth/postfix-dot-notation/tree/master") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "7475bf0b7f0f6fdd534933b86a29de633841f2b0") (source . "git://github.com/AlexKnauth/postfix-dot-notation") (source_url . "http://github.com/AlexKnauth/postfix-dot-notation/tree/master"))))))) ("postmark" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postmark" "doc/postmark@postmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark.txt") (test-failure-log . "server/built/test-fail/postmark.txt") (test-success-log . #f))) (checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A front-end for the Postmark email delivery service API") (implies . ()) (modules . ((lib "postmark/postmark.scrbl") (lib "postmark/main.rkt"))) (name . "postmark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (email . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/postmark/tree/master") (tags . ("email")) (versions . #hash((default . #hasheq((checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (source . "git://github.com/jbclements/postmark") (source_url . "http://github.com/jbclements/postmark/tree/master"))))))) ("postmark-client" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "postmark" "doc/postmark@postmark-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postmark-client.txt"))) (checksum . "163b4e1344c3c402a7ccc9436f0c3123c837b824") (checksum-error . #f) (collection . "postmark") (conflicts . ("postmark")) (date-added . 1548416613) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib" "web-server-lib")) (description . "A client for the Postmark HTTP API.") (implies . ()) (modules . ((lib "postmark/tests.rkt") (lib "postmark/postmark.scrbl") (lib "postmark/main.rkt"))) (name . "postmark-client") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (email . #t) (ring:2 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-postmark.git?path=postmark") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "163b4e1344c3c402a7ccc9436f0c3123c837b824") (source . "https://github.com/Bogdanp/racket-postmark.git?path=postmark") (source_url . "https://github.com/Bogdanp/racket-postmark.git?path=postmark"))))))) ("power-struct" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "power-struct" "doc/power-struct@power-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/power-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/power-struct.txt"))) (checksum . "cb9c521b8d1047d9d60a688b278dee61b301b975") (checksum-error . #f) (collection . "power-struct") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Structure macro that easily defines a tagged default struct.") (implies . ()) (modules . ((lib "power-struct/scribblings/power-struct.scrbl") (lib "power-struct/main.rkt"))) (name . "power-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (ring:1 . #t) (structs . #t))) (source . "https://github.com/BourgondAries/power-struct.git") (tags . ("structs")) (versions . #hash((default . #hasheq((checksum . "cb9c521b8d1047d9d60a688b278dee61b301b975") (source . "https://github.com/BourgondAries/power-struct.git") (source_url . "https://github.com/BourgondAries/power-struct.git"))))))) ("ppict" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ppict" "doc/ppict@ppict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict.txt"))) (checksum . "141332655e6c3003f847282d4187882aa8c95792") (checksum-error . #f) (collection . "ppict") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "slideshow-lib" "racket-doc" "scribble-lib" "pict-doc" "slideshow-doc")) (description . "progressive picts and slideshows") (implies . ()) (modules . ((lib "ppict/slideshow2.rkt") (lib "ppict/private/tag-pict.rkt") (lib "ppict/private/tag-pict-regions-gui.rkt") (lib "ppict/ppict.scrbl") (lib "ppict/private/ppict-syntax.rkt") (lib "ppict/tag.rkt") (lib "ppict/pict.rkt") (lib "ppict/main.rkt") (lib "ppict/2.rkt") (lib "ppict/private/ppict.rkt") (lib "ppict/slideshow.rkt") (lib "ppict/align.rkt"))) (name . "ppict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (graphics . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/rmculpepper/ppict/tree/master") (tags . ("graphics" "slideshow")) (versions . #hash((default . #hasheq((checksum . "141332655e6c3003f847282d4187882aa8c95792") (source . "git://github.com/rmculpepper/ppict") (source_url . "http://github.com/rmculpepper/ppict/tree/master"))))))) ("ppict-slide-grid" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict-slide-grid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict-slide-grid.txt"))) (checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "unstable-lib")) (description . "") (implies . ()) (modules . ((lib "ppict-slide-grid/main.rkt"))) (name . "ppict-slide-grid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/takikawa/ppict-slide-grid/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (source . "git://github.com/takikawa/ppict-slide-grid") (source_url . "http://github.com/takikawa/ppict-slide-grid/tree/master"))))))) ("pprint" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pprint" "doc/pprint@pprint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pprint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pprint.txt"))) (checksum . "c8ae61dec8d4fe214508cf2dc205d59aa94aba95") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "dherman-struct" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A universal pretty printing library") (implies . ()) (modules . ((lib "pprint/haskell.rkt") (lib "pprint/pprint.scrbl") (lib "pprint/main.rkt") (lib "pprint/tests.rkt"))) (name . "pprint") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/pprint.plt/tree/master") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "c8ae61dec8d4fe214508cf2dc205d59aa94aba95") (source . "git://github.com/takikawa/pprint.plt") (source_url . "http://github.com/takikawa/pprint.plt/tree/master"))))))) ("pprint-compact" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pprint-compact" "doc/pprint-compact@pprint-compact/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pprint-compact.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pprint-compact.txt"))) (checksum . "9a85add8e67bc94e37932693c2c1e6f368722427") (checksum-error . #f) (collection . "pprint-compact") (conflicts . ()) (date-added . 1632273373) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A non-greedy pretty printer") (implies . ()) (modules . ((lib "pprint-compact/memoize.rkt") (lib "pprint-compact/scribblings/pprint-compact.scrbl") (lib "pprint-compact/main.rkt") (lib "pprint-compact/process.rkt") (lib "pprint-compact/tests/diff-test-pareto-frontier.rkt") (lib "pprint-compact/core.rkt") (lib "pprint-compact/debug.rkt") (lib "pprint-compact/measure.rkt") (lib "pprint-compact/pareto-frontier.rkt") (lib "pprint-compact/addons.rkt"))) (name . "pprint-compact") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/pprint-compact.git") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "9a85add8e67bc94e37932693c2c1e6f368722427") (source . "https://github.com/sorawee/pprint-compact.git") (source_url . "https://github.com/sorawee/pprint-compact.git"))))))) ("predicates" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "predicates" "doc/predicates@predicates/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/predicates.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/predicates.txt"))) (checksum . "0c0baa3c6871ae39c9b94af1591331d30fced968") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Deprecated. A library for constructing predicates in a point-free style. Unmaintained, and racket/function now supplies functions that make parts of this unnecessary.") (implies . ()) (modules . ((lib "predicates/contract-helpers.rkt") (lib "predicates/logic.rkt") (lib "predicates/predicates.scrbl") (lib "predicates/conditional.rkt") (lib "predicates/list.rkt") (lib "predicates/comparison.rkt") (lib "predicates/test-helpers.rkt") (lib "predicates/main.rkt"))) (name . "predicates") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (functional . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/predicates/tree/master") (tags . ("deprecated" "functional")) (versions . #hash((default . #hasheq((checksum . "0c0baa3c6871ae39c9b94af1591331d30fced968") (source . "git://github.com/jackfirth/predicates") (source_url . "http://github.com/jackfirth/predicates/tree/master"))))))) ("prefab-predicate-compat" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/prefab-predicate-compat.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7c6cc40738062f336839b1f63e9b9ceb2a80071a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Provides `define-backwards-compatible-flat-prefab-predicate`which is like `define-predicate` but allows for backwards compatible prefab predicate declarations.") (implies . ()) (modules . ((lib "prefab-predicate-compat/main.rkt"))) (name . "prefab-predicate-compat") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:pnwamk@gmail.com . #t) (prefab . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/pnwamk/prefab-predicate-compat.git") (tags . ("prefab" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "7c6cc40738062f336839b1f63e9b9ceb2a80071a") (source . "https://github.com/pnwamk/prefab-predicate-compat.git") (source_url . "https://github.com/pnwamk/prefab-predicate-compat.git"))))))) ("preserves" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/preserves.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/preserves.txt"))) (checksum . "fbda60c96beb53728e97a2c17acb244292d56c7b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621157765) (dependencies . ("base" "rackunit-lib" "data-lib")) (description . "Preserves is a new data model and serialization format in many ways comparable to JSON, XML, S-expressions, CBOR, ASN.1 BER, and so on.") (implies . ()) (modules . ((lib "preserves-schema/parser.rkt") (lib "preserves-schema/metaschema.rkt") (lib "preserves/embedded.rkt") (lib "preserves/read-binary.rkt") (lib "preserves-schema/reader.rkt") (lib "preserves/tool.rkt") (lib "preserves/tests/test-main.rkt") (lib "preserves-schema/main.rkt") (lib "preserves/object-id.rkt") (lib "preserves/main.rkt") (lib "preserves/varint.rkt") (lib "preserves/struct.rkt") (lib "preserves/read-text.rkt") (lib "preserves/write-binary.rkt") (lib "preserves/write-text.rkt") (lib "preserves-schema/methods.rkt") (lib "preserves/float.rkt") (lib "preserves/order.rkt") (lib "preserves-schema/type.rkt") (lib "preserves-schema/unparser.rkt") (lib "preserves-schema/support.rkt") (lib "preserves-schema/checker.rkt") (lib "preserves/annotation.rkt") (lib "preserves/jelly.rkt") (lib "preserves-schema/gen/schema.rkt") (lib "preserves-schema/compiler.rkt") (lib "preserves-schema/bin/preserves-schema-rkt.rkt") (lib "preserves/record.rkt"))) (name . "preserves") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (data . #t) (preserves . #t) (ring:1 . #t) (schema . #t) (serialization . #t))) (source . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main") (tags . ("data" "preserves" "schema" "serialization")) (versions . #hash((default . #hasheq((checksum . "fbda60c96beb53728e97a2c17acb244292d56c7b") (source . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main") (source_url . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main"))))))) ("pretty-format" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pretty-format" "doc/pretty-format@pretty-format/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pretty-format.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pretty-format.txt"))) (checksum . "59c03bb6123fcd898e5143b451e6c9a8b89f7f8b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Pretty versions of printf, format, etc. that print according to format strings") (implies . ()) (modules . ((lib "pretty-format/main.rkt") (lib "typed/pretty-format.rkt") (lib "pretty-format/scribblings/pretty-format.scrbl"))) (name . "pretty-format") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/pretty-format.git") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "59c03bb6123fcd898e5143b451e6c9a8b89f7f8b") (source . "https://github.com/AlexKnauth/pretty-format.git") (source_url . "https://github.com/AlexKnauth/pretty-format.git"))))))) ("pretty-graphs" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "pretty-graphs"))) (failure-log . "server/built/fail/pretty-graphs.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (checksum-error . #f) (collection . "pretty-graphs") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "graph" "pict-doc" "pict-lib" "scribble-lib" "racket-doc")) (description . "For visualizing generic graphs as picts.") (implies . ()) (modules . ((lib "pretty-graphs/main.rkt") (lib "pretty-graphs/scribblings/pretty-graphs.scrbl"))) (name . "pretty-graphs") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:vincentnys@gmail.com . #t) (graph . #t) (pict . #t) (ring:1 . #t) (visualization . #t))) (source . "http://github.com/v-nys/pretty-graphs/tree/master") (tags . ("graph" "pict" "visualization")) (versions . #hash((default . #hasheq((checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (source . "git://github.com/v-nys/pretty-graphs") (source_url . "http://github.com/v-nys/pretty-graphs/tree/master"))))))) ("print-debug" . #hasheq((author . "aldis.sarja@gmail.com") (authors . ("aldis.sarja@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/print-debug.txt") (docs . (("extract" "manual" "doc/manual@print-debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/print-debug.txt") (test-failure-log . "server/built/test-fail/print-debug.txt") (test-success-log . #f))) (checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1552409005) (dependencies . ()) (description . "Debugging tool. Use for debug printing variables and expresions.") (implies . ()) (modules . ((lib "print-debug/manual.scrbl") (lib "print-debug/print-dbg.rkt"))) (name . "print-debug") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:aldis.sarja@gmail.com . #t) (debug . #t) (debugging . #t) (ring:1 . #t))) (source . "https://github.com/aldis-sarja/print-debug.git") (tags . ("debug" "debugging")) (versions . #hash((default . #hasheq((checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (source . "https://github.com/aldis-sarja/print-debug.git") (source_url . "https://github.com/aldis-sarja/print-debug.git"))))))) ("private-in" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "private-in" "doc/private-in@private-in/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/private-in.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/private-in.txt"))) (checksum . "d8a8105a70c8940f6a156dc68d035abbcdd2fe08") (checksum-error . #f) (collection . "private-in") (conflicts . ()) (date-added . 1597184149) (dependencies . ("base" "chk-lib" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Require private bindings.") (implies . ()) (modules . ((lib "private-in/main.rkt") (lib "private-in/scribblings/private-in.scrbl") (lib "private-in/test/mod.rkt"))) (name . "private-in") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/camoy/private-in.git") (tags . ("require")) (versions . #hash((default . #hasheq((checksum . "d8a8105a70c8940f6a156dc68d035abbcdd2fe08") (source . "https://github.com/camoy/private-in.git") (source_url . "https://github.com/camoy/private-in.git"))))))) ("profile-flame-graph" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "profile-flame-graph" "doc/profile-flame-graph@profile-flame-graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profile-flame-graph.txt") (test-failure-log . "server/built/test-fail/profile-flame-graph.txt") (test-success-log . #f))) (checksum . "1364a084256765800e83d93b0db23b2cc801d161") (checksum-error . #f) (collection . "profile-flame-graph") (conflicts . ()) (dependencies . ("base" "pict" "profile-lib" "net-lib" "data-lib" "scribble-lib" "racket-doc" "profile-doc" "net-doc")) (description . "Library that connects the Racket profiler to the flamegraph tool") (implies . ()) (modules . ((lib "profile-flame-graph/profile.rkt") (lib "profile-flame-graph/main.rkt") (lib "profile-flame-graph/flame-graph.rkt") (lib "profile-flame-graph/examples/fizzbuzz-example.rkt") (lib "profile-flame-graph/examples/scribble-example.rkt") (lib "profile-flame-graph/profile-flame-graph.scrbl"))) (name . "profile-flame-graph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (profiling . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/racket-profile-flamegraph/tree/master") (tags . ("profiling")) (versions . #hash((default . #hasheq((checksum . "1364a084256765800e83d93b0db23b2cc801d161") (source . "git://github.com/takikawa/racket-profile-flamegraph") (source_url . "http://github.com/takikawa/racket-profile-flamegraph/tree/master"))))))) ("profj" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdc" "doc/htdc@profj/index.html") ("main" "profj" "doc/profj@profj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profj.txt") (test-failure-log . "server/built/test-fail/profj.txt") (test-success-log . #f))) (checksum . "cf2a5bd0c3243b4dd3a72093ae5eee8e8291a41d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("combinator-parser" "base" "compatibility-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "parser-tools-lib" "scheme-lib" "srfi-lite-lib" "string-constants-lib" "scribble-lib" "racket-doc")) (description . "ProfessorJ") (implies . ()) (modules . ((lib "profj/intermediate+access.rkt") (lib "profj/ast.rkt") (lib "profj/build-info.rkt") (lib "profj/analysis.rkt") (lib "profj/htdch/graphics/rename.rkt") (lib "profj/parser.rkt") (lib "profj/language.rkt") (lib "profj/parsers/parse-error.rkt") (lib "profj/libs/java/lang/ClassCastException.rkt") (lib "profj/libs/java/lang/Double-native-methods.rkt") (lib "profj/dynamic.rkt") (lib "profj/tests/advanced-tests.rkt") (lib "profj/htdch/draw/World-native-methods.rkt") (lib "profj/restrictions.rkt") (lib "profj/libs/java/tester/installer.rkt") (lib "profj/check.rkt") (lib "profj/tests/profj-testing.rkt") (lib "profj/htdch/idraw/World-native-methods.rkt") (lib "profj/libs/java/lang/RuntimeException.rkt") (lib "profj/installer.rkt") (lib "profj/libs/java/lang/mz.rkt") (lib "profj/htdch/Examples/iblink-java.rkt") (lib "profj/htdch/draw/installer.rkt") (lib "profj/libs/java/lang/array.rkt") (lib "profj/libs/java/lang/Exception.rkt") (lib "profj/libs/java/lang/ArithmeticException.rkt") (lib "profj/error-messaging.rkt") (lib "profj/scribblings/java-scribble.rkt") (lib "profj/htdch/draw/Canvas-native-methods.rkt") (lib "profj/libs/java/runtime.rkt") (lib "profj/libs/java/util/installer.rkt") (lib "profj/libs/java/lang/IndexOutOfBoundsException.rkt") (lib "profj/tests/all-tests.rkt") (lib "profj/parsers/general-parsing.rkt") (lib "profj/libs/java/lang/ArrayStoreException.rkt") (lib "profj/libs/java/lang/ArrayIndexOutOfBoundsException.rkt") (lib "profj/graph-scc.rkt") (lib "profj/parsers/full-parser.rkt") (lib "profj/htdch/idraw/Canvas-native-methods.rkt") (lib "profj/libs/java/io/installer.rkt") (lib "profj/types.rkt") (lib "profj/libs/java/lang/String.rkt") (lib "profj/advanced.rkt") (lib "profj/scribblings/htdc.scrbl") (lib "profj/to-scheme.rkt") (lib "profj/parsers/advanced-parser.rkt") (lib "profj/scribblings/beginner.scrbl") (lib "profj/libs/java/lang/Comparable.rkt") (lib "profj/htdch/geometry/installer.rkt") (lib "profj/compile.rkt") (lib "profj/parameters.rkt") (lib "profj/htdch/draw/pre-installer.rkt") (lib "profj/htdch/Examples/blink-java.rkt") (lib "profj/textbook-pls-spec.rkt") (lib "profj/display-java.rkt") (lib "profj/htdch/graphics/installer.rkt") (lib "profj/full.rkt") (lib "profj/tests/full-tests.rkt") (lib "profj/libs/java/lang/Throwable.rkt") (lib "profj/libs/java/lang/Object-composite.rkt") (lib "profj/pre-installer.rkt") (lib "profj/htdch/idraw/pre-installer.rkt") (lib "profj/intermediate.rkt") (lib "profj/parsers/beginner-parser.rkt") (lib "profj/scribblings/profj.scrbl") (lib "profj/libs/java/lang/installer.rkt") (lib "profj/libs/java/lang/Math-native-methods.rkt") (lib "profj/libs/java/lang/Object.rkt") (lib "profj/parsers/intermediate-parser.rkt") (lib "profj/tests/beginner-tests.rkt") (lib "profj/libs/java/lang/compile-lang-syntax.rkt") (lib "profj/parsers/intermediate-access-parser.rkt") (lib "profj/profj-pref.rkt") (lib "profj/beginner.rkt") (lib "profj/parsers/lexer.rkt") (lib "profj/htdch/colors/installer.rkt") (lib "profj/libs/java/io/Serializable.rkt") (lib "profj/scribblings/intermediate-access.scrbl") (lib "profj/libs/java/lang/NegativeArraySizeException.rkt") (lib "profj/scribblings/advanced.scrbl") (lib "profj/tests/intermediate-tests.rkt") (lib "profj/libs/java/lang/System-native-methods.rkt") (lib "profj/htdch/idraw/installer.rkt") (lib "profj/scribblings/intermediate.scrbl") (lib "profj/tool.rkt") (lib "profj/libs/java/lang/compile-lang.rkt") (lib "profj/libs/java/lang/NullPointerException.rkt"))) (name . "profj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/profj/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "cf2a5bd0c3243b4dd3a72093ae5eee8e8291a41d") (source . "github://github.com/mflatt/profj/master") (source_url . "http://github.com/mflatt/profj/tree/master"))))))) ("psd" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "psd"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/psd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/psd.txt"))) (checksum . "73b16a52e0777250d02e977f7dcbd7c1d98ef772") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "draw-lib" "scribble-lib" "racket-doc")) (description . "Read (and will write) Photoshop Documents") (implies . ()) (modules . ((lib "psd/digitama/resources/id1036.rkt") (lib "psd/digitama/resources/id1023.rkt") (lib "psd/tamer/psd.rkt") (lib "psd/digitama/resources/id1028.rkt") (lib "psd/base.rkt") (lib "psd/layer.rkt") (lib "psd/digitama/layer/blocks/txt2.rkt") (lib "psd/digitama/resources/format.rkt") (lib "psd/digitama/resources/id1002.rkt") (lib "psd/profile.rkt") (lib "psd/digitama/layer/bitmap.rkt") (lib "psd/tamer/psd.scrbl") (lib "psd/digitama/resources/id1060.rkt") (lib "psd/digitama/resources/id1011.rkt") (lib "psd/main.rkt") (lib "psd/digitama/resources/id1057.rkt") (lib "psd/digitama/resources/id1003.rkt") (lib "psd/digitama/layer/blocks/lyid.rkt") (lib "psd/digitama/resource.rkt") (lib "psd/tamer/packbits.rkt") (lib "psd/digitama/resources/id1007.rkt") (lib "psd/digitama/stdin.rkt") (lib "psd/village/packbits.rkt") (lib "psd/digitama/draw.rkt") (lib "psd/digitama/exn.rkt") (lib "psd/digitama/parser.rkt") (lib "psd/digitama/unsafe/bitmap.rkt") (lib "psd/digitama/layer/parser.rkt") (lib "psd/digitama/unsafe/resource.rkt") (lib "psd/digitama/image.rkt") (lib "psd/digitama/psd.rkt") (lib "psd/digitama/resources/id1032.rkt") (lib "psd/digitama/resources/id1027.rkt") (lib "psd/digitama/layer/blocks/luni.rkt") (lib "psd/digitama/unsafe/layer.rkt") (lib "psd/digitama/misc.rkt") (lib "psd/digitama/bitmap.rkt") (lib "psd/digitama/resources/id1077.rkt") (lib "psd/digitama/layer.rkt") (lib "psd/digitama/resources/id1020.rkt") (lib "psd/digitama/layer/format.rkt") (lib "psd/digitama/integer.rkt") (lib "psd/digitama/resources/id1000.rkt") (lib "psd/digitama/layer/blocks/lsct.rkt"))) (name . "psd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (bitmap . #t) (file . #t) (parser . #t) (photoshop . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "http://github.com/wargrey/psd/tree/master") (tags . ("bitmap" "file" "parser" "photoshop" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "73b16a52e0777250d02e977f7dcbd7c1d98ef772") (source . "git://github.com/wargrey/psd") (source_url . "http://github.com/wargrey/psd/tree/master"))))))) ("punctaffy" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy.txt"))) (checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614043112) (dependencies . ("punctaffy-doc" "punctaffy-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax.") (implies . ("punctaffy-doc" "punctaffy-lib")) (modules . ()) (name . "punctaffy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main"))))))) ("punctaffy-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "punctaffy" "doc/punctaffy@punctaffy-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-doc.txt"))) (checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1603004787) (dependencies . ("base" "at-exp-lib" "brag" "lathe-comforts-doc" "lathe-comforts-lib" "lathe-morphisms-doc" "lathe-morphisms-lib" "net-doc" "parendown-doc" "parendown-lib" "punctaffy-lib" "racket-doc" "ragg" "scribble-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (doc)") (implies . ()) (modules . ((lib "punctaffy/scribblings/private/shim.rkt") (lib "punctaffy/scribblings/punctaffy/hypersnippet.scrbl") (lib "punctaffy/scribblings/punctaffy/hyperbracketed-util.scrbl") (lib "punctaffy/scribblings/punctaffy/intro.scrbl") (lib "punctaffy/scribblings/punctaffy/defining-hyperbracket.scrbl") (lib "punctaffy/scribblings/punctaffy/token-of-syntax.scrbl") (lib "punctaffy/scribblings/punctaffy.scrbl") (lib "punctaffy/scribblings/punctaffy/motivation.scrbl") (lib "punctaffy/scribblings/punctaffy/baseline-hyperbracket.scrbl"))) (name . "punctaffy-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main"))))))) ("punctaffy-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-lib.txt"))) (checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1614043167) (dependencies . ("base" "lathe-comforts-lib" "lathe-morphisms-lib" "reprovide-lang-lib" "parendown-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (lib)") (implies . ()) (modules . ((lib "punctaffy/hypersnippet/dim.rkt") (lib "punctaffy/private/hypertee-as-brackets.rkt") (lib "punctaffy/private/hypertee-unsafe.rkt") (lib "punctaffy/private/experimental/hypertee-hypermonad.rkt") (lib "punctaffy/quote.rkt") (lib "punctaffy/private/experimental/monad.rkt") (lib "punctaffy/main.rkt") (lib "punctaffy/hypersnippet/hypertee.rkt") (lib "punctaffy/syntax-object/token-of-syntax.rkt") (lib "punctaffy/taffy-notation.rkt") (lib "punctaffy/private/experimental/hyprid.rkt") (lib "punctaffy/private/experimental/monoid.rkt") (lib "punctaffy/private/experimental/hypermonad.rkt") (lib "punctaffy/private/codebasewide-requires.rkt") (lib "punctaffy/private/hypernest-as-ast.rkt") (lib "punctaffy/private/suppress-internal-errors.rkt") (lib "punctaffy/hypersnippet/hyperstack.rkt") (lib "punctaffy/private/experimental/macro/hypernest-macro.rkt") (lib "punctaffy/hypersnippet/hyperparameter.rkt") (lib "punctaffy/let.rkt") (lib "punctaffy/private/util.rkt") (lib "punctaffy/hypersnippet/snippet.rkt") (lib "punctaffy/private/shim.rkt") (lib "punctaffy/hypersnippet/hypernest.rkt"))) (name . "punctaffy-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main"))))))) ("punctaffy-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-test.txt"))) (checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1614043178) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib" "profile-lib" "punctaffy-lib" "rackunit-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (test)") (implies . ()) (modules . ((lib "punctaffy/tests/test-readme.rkt") (lib "punctaffy/tests/profile-hypernest-qq.rkt") (lib "punctaffy/tests/experimental/test-hyprid.rkt") (lib "punctaffy/tests/test-hypernest.rkt") (lib "punctaffy/tests/test-hypertee.rkt") (lib "punctaffy/tests/test-hypertee-2.rkt") (lib "punctaffy/tests/test-let.rkt") (lib "punctaffy/tests/test-hypernest-qq.rkt") (lib "punctaffy/tests/test-hypernest-2.rkt"))) (name . "punctaffy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "2a958bf3987459e9197eb5963fe5107ea2e2e912") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main"))))))) ("pure-crypto" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pure-crypto" "doc/pure-crypto@pure-crypto/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pure-crypto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pure-crypto.txt"))) (checksum . "797f643b39c714b8d67e899f659a01dd676a69a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1585411688) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "detail")) (description . "a pure crypto implementation for racket") (implies . ()) (modules . ((lib "pure-crypto/src/cipher/des/des-key-lists.rkt") (lib "pure-crypto/test/openssl/openssl.rkt") (lib "pure-crypto/example/example.rkt") (lib "pure-crypto/src/cipher/aes/add-round-key.rkt") (lib "pure-crypto/test/cipher/des/undes-test.rkt") (lib "pure-crypto/src/encrypt.rkt") (lib "pure-crypto/src/cipher/aes/s-box.rkt") (lib "pure-crypto/src/lib/process-data.rkt") (lib "pure-crypto/test/decrypt/aes/unaes-test.rkt") (lib "pure-crypto/test/encrypt/tdes/tdes-test.rkt") (lib "pure-crypto/test/cipher/des/des-key-lists-test.rkt") (lib "pure-crypto/test/lib/padding-test.rkt") (lib "pure-crypto/src/cipher/aes/mix-columns.rkt") (lib "pure-crypto/src/cipher/aes/lib.rkt") (lib "pure-crypto/test/cipher/aes/add-round-key-test.rkt") (lib "pure-crypto/src/lib/constants.rkt") (lib "pure-crypto/src/lib/lib.rkt") (lib "pure-crypto/test/cipher/aes/shift-rows-test.rkt") (lib "pure-crypto/test/cipher/aes/aes-test.rkt") (lib "pure-crypto/src/cipher/aes/shift-rows.rkt") (lib "pure-crypto/test/cipher/aes/lib-test.rkt") (lib "pure-crypto/main.rkt") (lib "pure-crypto/test/decrypt/tdes/untdes-test.rkt") (lib "pure-crypto/test/decrypt/des/undes-test.rkt") (lib "pure-crypto/test/lib/process-data-test.rkt") (lib "pure-crypto/test/cipher/des/des-test.rkt") (lib "pure-crypto/src/cipher/des/des.rkt") (lib "pure-crypto/test/encrypt/aes/aes-test.rkt") (lib "pure-crypto/src/lib/to-hex-key.rkt") (lib "pure-crypto/test/cipher/aes/key-expansion-test.rkt") (lib "pure-crypto/test/encrypt/des/des-test.rkt") (lib "pure-crypto/src/lib/padding.rkt") (lib "pure-crypto/scribble/pure-crypto.scrbl") (lib "pure-crypto/test/lib/lib-test.rkt") (lib "pure-crypto/test/cipher/aes/mix-columns-test.rkt") (lib "pure-crypto/src/cipher/aes/key-expansion.rkt") (lib "pure-crypto/test/cipher/aes/s-box-test.rkt") (lib "pure-crypto/src/decrypt.rkt") (lib "pure-crypto/src/cipher/aes/aes.rkt"))) (name . "pure-crypto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AES . #t) (DES . #t) (TDES . #t) (author:chenxiao770117@gmail.com . #t) (crypto . #t) (decryption . #t) (encryption . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-pure-crypto.git") (tags . ("AES" "crypto" "decryption" "DES" "encryption" "TDES")) (versions . #hash((default . #hasheq((checksum . "797f643b39c714b8d67e899f659a01dd676a69a1") (source . "https://github.com/simmone/racket-pure-crypto.git") (source_url . "https://github.com/simmone/racket-pure-crypto.git"))))))) ("puresuri" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "puresuri" "doc/puresuri@puresuri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puresuri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puresuri.txt"))) (checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (checksum-error . #f) (collection . "puresuri") (conflicts . ()) (dependencies . ("lux" "base" "gui-lib" "pict-lib" "ppict" "unstable-lib" "ppict" "gui-doc" "pict-doc" "racket-doc" "slideshow-doc" "unstable-doc" "scribble-lib")) (description . "puresuri presentation system") (implies . ()) (modules . ((lib "puresuri/private/state.rkt") (lib "puresuri/main.rkt") (lib "puresuri/lib/title.rkt") (lib "puresuri/gui.rkt") (lib "puresuri/pict.rkt") (lib "puresuri/command.rkt") (lib "puresuri/private/param.rkt") (lib "puresuri/plpict.rkt") (lib "puresuri/puresuri.scrbl") (lib "puresuri/lib/cmds.rkt") (lib "puresuri/lib/slide-numbers.rkt") (lib "puresuri/lib/grid.rkt") (lib "puresuri/tests/example.rkt"))) (name . "puresuri") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/jeapostrophe/puresuri/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (source . "github://github.com/jeapostrophe/puresuri/master") (source_url . "http://github.com/jeapostrophe/puresuri/tree/master"))))))) ("puzzler" . #hasheq((author . "aowens5189@gmail.com") (authors . ("aowens5189@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "puzzler" "doc/puzzler@puzzler/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puzzler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puzzler.txt"))) (checksum . "be84df0049795acddf4eee0cc0225f0659df0445") (checksum-error . #f) (collection . "puzzler") (conflicts . ()) (date-added . 1553537012) (dependencies . ("beautiful-racket" "brag" "draw-lib" "gui-lib" "base" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "A language for building 2D grid-based puzzle games.") (implies . ()) (modules . ((lib "puzzler/examples/free-the-chick.rkt") (lib "puzzler/examples/sokoban.rkt") (lib "puzzler/scribblings/example-sokoban.scrbl") (lib "puzzler/scribblings/conclusion.scrbl") (lib "puzzler/expander.rkt") (lib "puzzler/scribblings/win-lose-section.scrbl") (lib "puzzler/main.rkt") (lib "puzzler/expander-helpers/renderer.rkt") (lib "puzzler/tokenizer.rkt") (lib "puzzler/parser.rkt") (lib "puzzler/examples/trail-example.rkt") (lib "puzzler/scribblings/map-section.scrbl") (lib "puzzler/examples/multi-level-sokoban.rkt") (lib "puzzler/parse-tree-test.rkt") (lib "puzzler/scribblings/draw-section.scrbl") (lib "puzzler/scribblings/puzzler.scrbl") (lib "puzzler/scribblings/action-section.scrbl") (lib "puzzler/scribblings/interaction-section.scrbl") (lib "puzzler/expander-helpers/game.rkt") (lib "puzzler/examples/sneaking-example.rkt"))) (name . "puzzler") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (:docs: . #t) (author:aowens5189@gmail.com . #t) (game . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/aowens-21/puzzler.git") (tags . ("2d" "game" "lang")) (versions . #hash((default . #hasheq((checksum . "be84df0049795acddf4eee0cc0225f0659df0445") (source . "https://github.com/aowens-21/puzzler.git") (source_url . "https://github.com/aowens-21/puzzler.git"))))))) ("pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pvector" "doc/pvector@pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pvector.txt"))) (checksum . "d0132809b4da6e48c3e3087dc35cda1c47565e5e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fast, immutable, persistent vectors") (implies . ()) (modules . ((lib "data/pvector/for.rkt") (lib "data/private/test/main.rkt") (lib "data/pvector/base.rkt") (lib "data/scribblings/pvector.scrbl") (lib "data/pvector.rkt"))) (name . "pvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (collections . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-pvector/tree/master") (tags . ("collections" "data")) (versions . #hash((default . #hasheq((checksum . "d0132809b4da6e48c3e3087dc35cda1c47565e5e") (source . "git://github.com/lexi-lambda/racket-pvector") (source_url . "http://github.com/lexi-lambda/racket-pvector/tree/master"))))))) ("py-fizz" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/py-fizz.txt") (docs . (("main" "py-fizz" "doc/py-fizz@py-fizz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/py-fizz.txt") (test-failure-log . "server/built/test-fail/py-fizz.txt") (test-success-log . #f))) (checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to-python")) (description . "Physics sandbox for racket.  Compiles to Python and uses the Pymunk physics engine.  High level tool for creating physics simulations and digital toys.   \r\n\r\nPygame and pymunk are dependencies.  (Python too, obviously)") (implies . ()) (modules . ((lib "py-fizz/demos/builder-test.rkt") (lib "py-fizz/toys/toys.rkt") (lib "py-fizz/demos/on-click.rkt") (lib "py-fizz/compiler.rkt") (lib "py-fizz/py-fizz.scrbl") (lib "py-fizz/main.rkt") (lib "py-fizz/demos/catapult.rkt") (lib "py-fizz/demos/cannon-shooter.rkt") (lib "py-fizz/demos/hello-world.rkt") (lib "py-fizz/demos/car-swap.rkt") (lib "py-fizz/demos/builder-test2.rkt") (lib "py-fizz/toys/lose-screen-generator.rkt") (lib "py-fizz/demos/balloons-hit-fan.rkt") (lib "py-fizz/toys/Untitled.rkt"))) (name . "py-fizz") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (physics . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/py-fizz.git") (tags . ("physics")) (versions . #hash((default . #hasheq((checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (source . "https://github.com/thoughtstem/py-fizz.git") (source_url . "https://github.com/thoughtstem/py-fizz.git"))))))) ("pydrnlp" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pydrnlp" "doc/pydrnlp@pydrnlp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pydrnlp.txt") (test-failure-log . "server/built/test-fail/pydrnlp.txt") (test-success-log . #f))) (checksum . "666c1e00b67c0cc1ee6b5e3fbcfbec498b3173ac") (checksum-error . #f) (collection . "pydrnlp") (conflicts . ()) (date-added . 1569547008) (dependencies . ("base" "ricoeur-kernel" "ricoeur-tei-utils" "adjutor" "python-tokenizer" "math-lib" "pict-lib" "draw-lib" "typed-racket-lib" "typed-racket-more" "reprovide-lang" "db-lib" "sql" "gregor-lib" "scribble-lib" "racket-doc" "rackunit-lib" "markdown" "rackunit-typed" "_-exp" "at-exp-lib" "rackjure")) (description . "NLP Library for Digital Ricoeur") (implies . ()) (modules . ((lib "pydrnlp/word-cloud/pict.rkt") (lib "pydrnlp/word-cloud/old/word-cloud.rkt") (lib "pydrnlp/main.rkt") (lib "pydrnlp/word-cloud/world.rkt") (lib "pydrnlp/scribblings/pydrnlp.scrbl") (lib "pydrnlp/word-cloud/scratch.rkt") (lib "pydrnlp/support.rkt") (lib "pydrnlp/trends/debugging-report.rkt") (lib "pydrnlp/support/conda.rkt") (lib "pydrnlp/support/python-lang/prefabs.rkt") (lib "pydrnlp/support/python-lang/read.rkt") (lib "pydrnlp/py/environment.rkt") (lib "pydrnlp/word-cloud/bspt.rkt") (lib "pydrnlp/word-cloud/test-data.rkt") (lib "pydrnlp/trends/cache-tokenize-corpus.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/word-cloud.rkt") (lib "pydrnlp/trends/worker.rkt") (lib "pydrnlp/word-cloud/stream.rkt") (lib "pydrnlp/support/python-lang/stx.rkt") (lib "pydrnlp/trends/types/rb-tree.rkt") (lib "pydrnlp/trends/corpus.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/pict.rkt") (lib "pydrnlp/support/revision-contract.rkt") (lib "pydrnlp/scribblings/bibliography.rkt") (lib "pydrnlp/scribblings/markdown.rkt") (lib "pydrnlp/scribblings/trends.scrbl") (lib "pydrnlp/scribblings/support.scrbl") (lib "pydrnlp/trends/types.rkt") (lib "pydrnlp/scribblings/bug.rkt") (lib "pydrnlp/support/worker.rkt") (lib "pydrnlp/support/python-lang.rkt") (lib "pydrnlp/py/write-env-vars.rkt") (lib "pydrnlp/trends/tokenize-one-doc.rkt") (lib "pydrnlp/scribblings/lib.rkt") (lib "pydrnlp/trends/analyze.rkt") (lib "pydrnlp/word-cloud/rect.rkt") (lib "pydrnlp/trends/types/lemma-table.rkt") (lib "pydrnlp/trends.rkt") (lib "pydrnlp/word-cloud/old/intersect.rkt") (lib "pydrnlp/trends/test.rkt") (lib "pydrnlp/trends/types/types.rkt") (lib "pydrnlp/word-cloud/old/collision.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/quadtree.rkt") (lib "pydrnlp/scribblings/python-doc-lang.rkt") (lib "pydrnlp/scribblings/include-python.rkt"))) (name . "pydrnlp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DigitalRicoeur . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (nlp . #t) (ring:1 . #t))) (source . "https://bitbucket.org/digitalricoeur/pydrnlp.git") (tags . ("application" "DigitalRicoeur" "nlp")) (versions . #hash((default . #hasheq((checksum . "666c1e00b67c0cc1ee6b5e3fbcfbec498b3173ac") (source . "https://bitbucket.org/digitalricoeur/pydrnlp.git") (source_url . "https://bitbucket.org/digitalricoeur/pydrnlp.git"))))))) ("python" . #hasheq((author . "pedropramos@tecnico.ulisboa.pt") (authors . ("pedropramos@tecnico.ulisboa.pt")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python.txt") (test-failure-log . "server/built/test-fail/python.txt") (test-success-log . #f))) (checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (checksum-error . #f) (collection . "python") (conflicts . ()) (dependencies . ("base" "parser-tools" "compatibility-lib" "srfi-lite-lib")) (description . "An implementation of the Python programming language for Racket") (implies . ()) (modules . ((lib "python/ast-node-stmt.rkt") (lib "python/examples/fibonacci/fib.rkt") (lib "python/debug/lang/python.rkt") (lib "python/engine/strings.rkt") (lib "python/engine/bools.rkt") (lib "python/libpython.rkt") (lib "python/engine/descriptors.rkt") (lib "python/compile.rkt") (lib "python/engine/racket_values.rkt") (lib "python/lang/runtime-config.rkt") (lib "python/engine/files.rkt") (lib "python/engine/iterators.rkt") (lib "python/cpy-importing.rkt") (lib "python/examples/mandelbrot/mandelbrot.rkt") (lib "python/runtime_FFI.rkt") (lib "python/sandbox.rkt") (lib "python/examples/ackermann/ackermann.rkt") (lib "python/lang/python.rkt") (lib "python/engine/singletons.rkt") (lib "python/config.rkt") (lib "python/examples/datetime/datetime_racket.rkt") (lib "python/debug/lang/reader.rkt") (lib "python/bindings-mixin.rkt") (lib "python/main.rkt") (lib "python/ast-node.rkt") (lib "python/name-mangling.rkt") (lib "python/ast-node-expr.rkt") (lib "python/ast-node-target.rkt") (lib "python/parse.rkt") (lib "python/engine/collections.rkt") (lib "python/engine/engine.rkt") (lib "python/paths.rkt") (lib "python/lex+yacc.rkt") (lib "python/engine/numbers.rkt") (lib "python/engine/modules.rkt") (lib "python/lang/lang-info.rkt") (lib "python/examples/eratosthenes/sieve.rkt") (lib "python/lang/reader.rkt") (lib "python/runtime.rkt") (lib "python/engine/exceptions.rkt") (lib "python/engine/functions.rkt"))) (name . "python") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pedropramos@tecnico.ulisboa.pt . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/pedropramos/PyonR.git/tree/master#master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (source . "git://github.com/pedropramos/PyonR.git#master") (source_url . "http://github.com/pedropramos/PyonR.git/tree/master#master"))))))) ("python-tokenizer" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "python-tokenizer" "doc/python-tokenizer@python-tokenizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python-tokenizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/python-tokenizer.txt"))) (checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "while-loop" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "A fairly direct translation of tokenize.py") (implies . ()) (modules . ((lib "python-tokenizer/main.rkt") (lib "python-tokenizer/python-tokenizer.rkt") (lib "python-tokenizer/python-tokenizer.scrbl") (lib "python-tokenizer/test-more.rkt") (lib "python-tokenizer/test-tokenize.rkt"))) (name . "python-tokenizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (parser . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/python-tokenizer/tree/master/") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (source . "github://github.com/jbclements/python-tokenizer/master/") (source_url . "http://github.com/jbclements/python-tokenizer/tree/master/"))))))) ("qcr" . #hasheq((author . "zhanghao@antigen.top") (authors . ("zhanghao@antigen.top")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qcr" "doc/qcr@qcr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qcr.txt") (test-failure-log . "server/built/test-fail/qcr.txt") (test-success-log . #f))) (checksum . "8fda724ac41831ea39f65ae713120a9f0399d0a2") (checksum-error . #f) (collection . "qcr") (conflicts . ()) (date-added . 1649861001) (dependencies . ("base" "scribble-lib" "racket-doc" "sandbox-lib" "drracket" "sugar" "racket")) (description . "A small chat room on tcp.") (implies . ()) (modules . ((lib "qcr/scribblings/qcr.scrbl") (lib "qcr/main.rkt"))) (name . "qcr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:zhanghao@antigen.top . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/Antigen-1/qcr.git#8fda724") (tags . ("application" "experimental")) (versions . #hash((default . #hasheq((checksum . "8fda724ac41831ea39f65ae713120a9f0399d0a2") (source . "https://github.com/Antigen-1/qcr.git#8fda724") (source_url . "https://github.com/Antigen-1/qcr.git#8fda724"))))))) ("qi" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi.txt"))) (checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1619235623) (dependencies . ("base" "qi-lib" "qi-doc" "qi-test" "qi-probe" "Qi-Quickscripts" "cli")) (description . "A general-purpose functional DSL.") (implies . ("qi-lib" "qi-doc" "qi-test" "qi-probe" "Qi-Quickscripts")) (modules . ()) (name . "qi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/countvajhula/qi.git?path=qi#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (source . "https://github.com/countvajhula/qi.git?path=qi#main") (source_url . "https://github.com/countvajhula/qi.git?path=qi#main"))))))) ("qi-cat" . #hasheq((author . "noahstorym@gmail.com") (authors . ("noahstorym@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-cat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-cat.txt"))) (checksum . "5ce3b2ec152e729ff3dfa442c9661619980d8018") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662887879) (dependencies . ("base" "qi-lib" "rackunit-lib")) (description . "Packages for studying the connections between Qi and Category Theory. ") (implies . ()) (modules . ((lib "tests/qi/cat/cat.rkt") (lib "qi/cat/main.rkt") (lib "qi/cat.rkt") (lib "qi/sum.rkt") (lib "qi/sum/main.rkt") (lib "qi/cat/private/utils.rkt") (lib "qi/cat/private/function.rkt") (lib "tests/qi/sum/sum.rkt") (lib "qi/sum/private/cofunction.rkt") (lib "qi/sum/private/utils.rkt"))) (name . "qi-cat") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (Category . #t) (Qi . #t) (author:noahstorym@gmail.com . #t) (ring:2 . #t))) (source . "git+https://github.com/NoahStoryM/qi-cat#master") (tags . ("Category" "Qi")) (versions . #hash((default . #hasheq((checksum . "5ce3b2ec152e729ff3dfa442c9661619980d8018") (source . "git+https://github.com/NoahStoryM/qi-cat#master") (source_url . "git+https://github.com/NoahStoryM/qi-cat#master"))))))) ("qi-doc" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qi" "doc/qi@qi-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-doc.txt"))) (checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (checksum-error . #f) (collection . "qi") (conflicts . ()) (date-added . 1637806826) (dependencies . ("base" "scribble-lib" "scribble-abbrevs" "scribble-math" "racket-doc" "sandbox-lib" "math-lib" "metapict" "qi-lib" "qi-probe" "relation")) (description . "A general-purpose functional DSL. [docs only]") (implies . ()) (modules . ((lib "qi/scribblings/qi.scrbl") (lib "qi/scribblings/intro.scrbl") (lib "qi/scribblings/principles.scrbl") (lib "qi/scribblings/tutorial.scrbl") (lib "qi/scribblings/interface.scrbl") (lib "qi/scribblings/macros.scrbl") (lib "qi/scribblings/field-guide.scrbl") (lib "qi/scribblings/using-qi.scrbl") (lib "qi/scribblings/forms.scrbl"))) (name . "qi-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/countvajhula/qi.git?path=qi-doc#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (source . "https://github.com/countvajhula/qi.git?path=qi-doc#main") (source_url . "https://github.com/countvajhula/qi.git?path=qi-doc#main"))))))) ("qi-lib" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-lib.txt"))) (checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (checksum-error . #f) (collection . "qi") (conflicts . ()) (date-added . 1637804960) (dependencies . ("base" "fancy-app")) (description . "A general-purpose functional DSL. [implementation only]") (implies . ()) (modules . ((lib "qi/on.rkt") (lib "qi/flow/impl.rkt") (lib "qi/flow/syntax.rkt") (lib "qi/threading.rkt") (lib "qi/switch.rkt") (lib "qi/flow/expander.rkt") (lib "qi/flow/aux-syntax.rkt") (lib "qi/flow.rkt") (lib "qi/main.rkt") (lib "qi/macro.rkt") (lib "qi/flow/compiler.rkt") (lib "qi/private/util.rkt"))) (name . "qi-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/countvajhula/qi.git?path=qi-lib#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (source . "https://github.com/countvajhula/qi.git?path=qi-lib#main") (source_url . "https://github.com/countvajhula/qi.git?path=qi-lib#main"))))))) ("qi-probe" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-probe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-probe.txt"))) (checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (checksum-error . #f) (collection . "qi") (conflicts . ()) (date-added . 1639456037) (dependencies . ("base" "mischief" "qi-lib")) (description . "A \"circuit tester\" style debugger for Qi.") (implies . ()) (modules . ((lib "qi/tests/qi-probe.rkt") (lib "qi/probe.rkt"))) (name . "qi-probe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (debugging . #t) (qi . #t) (ring:1 . #t))) (source . "https://github.com/countvajhula/qi.git?path=qi-probe#main") (tags . ("debugging" "qi")) (versions . #hash((default . #hasheq((checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (source . "https://github.com/countvajhula/qi.git?path=qi-probe#main") (source_url . "https://github.com/countvajhula/qi.git?path=qi-probe#main"))))))) ("qi-test" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qi-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qi-test.txt"))) (checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (checksum-error . #f) (collection . "qi") (conflicts . ()) (date-added . 1637806985) (dependencies . ("base" "rackunit-lib" "cover" "cover-coveralls" "math-lib" "qi-lib" "relation")) (description . "A general-purpose functional DSL. [tests only]") (implies . ()) (modules . ((lib "qi/tests/private/util.rkt") (lib "qi/tests/threading.rkt") (lib "qi/tests/macro.rkt") (lib "qi/tests/definitions.rkt") (lib "qi/tests/on.rkt") (lib "qi/tests/switch.rkt") (lib "qi/tests/qi.rkt") (lib "qi/tests/flow.rkt") (lib "qi/tests/util.rkt"))) (name . "qi-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/countvajhula/qi.git?path=qi-test#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "0244838afeacb7dc9fe8e263403b07321ccd294e") (source . "https://github.com/countvajhula/qi.git?path=qi-test#main") (source_url . "https://github.com/countvajhula/qi.git?path=qi-test#main"))))))) ("qiniu-sdk" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qiniu-sdk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qiniu-sdk.txt"))) (checksum . "27ca32071cd03a1dc955ec396efa120f0d4b2759") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "web-server-lib")) (description . "A simple library for qiniu.com") (implies . ()) (modules . ((lib "qiniu-sdk/main.rkt"))) (name . "qiniu-sdk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (qiniu . #t) (ring:1 . #t))) (source . "https://github.com/MatrixForChange/qiniu-sdk.git") (tags . ("qiniu")) (versions . #hash((default . #hasheq((checksum . "27ca32071cd03a1dc955ec396efa120f0d4b2759") (source . "https://github.com/MatrixForChange/qiniu-sdk.git") (source_url . "https://github.com/MatrixForChange/qiniu-sdk.git"))))))) ("qresults-list" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qresults-list" "doc/qresults-list@qresults-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qresults-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qresults-list.txt"))) (checksum . "b680a09a8e83cc72fb306e3d9a8ebaff91a7040d") (checksum-error . #f) (collection . "qresults-list") (conflicts . ()) (date-added . 1558142198) (dependencies . ("base" "draw-lib" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "enhanced list-box% control") (implies . ()) (modules . ((lib "qresults-list/private/qresults-list.rkt") (lib "qresults-list/main.rkt") (lib "qresults-list/scribblings/qresults-list.scrbl") (lib "qresults-list/private/widget-utilities.rkt") (lib "qresults-list/private/edit-dialog-base.rkt") (lib "qresults-list/private/icon-resources.rkt") (lib "qresults-list/private/utilities.rkt"))) (name . "qresults-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/qresults-list.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "b680a09a8e83cc72fb306e3d9a8ebaff91a7040d") (source . "https://github.com/alex-hhh/qresults-list.git") (source_url . "https://github.com/alex-hhh/qresults-list.git"))))))) ("qtops" . #hasheq((author . "emsenn@emsenn.net") (authors . ("emsenn@emsenn.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qtops" "doc/qtops@qtops/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qtops.txt") (test-failure-log . "server/built/test-fail/qtops.txt") (test-success-log . #f))) (checksum . "16a37c4122083c320d18a681ad4fd577a6524e24") (checksum-error . #f) (collection . "qtops") (conflicts . ()) (date-added . 1600784764) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Perform operations on things with qualities") (implies . ()) (modules . ((lib "qtops/qualities/region-noise.rkt") (lib "qtops/scribblings/qualities/contents.scrbl") (lib "qtops/scribblings/qualities/fillable.scrbl") (lib "qtops/scribblings/qualities/client.scrbl") (lib "qtops/qualities/mudsocket-contents.rkt") (lib "qtops/qualities/rpg-mudsocket-server.rkt") (lib "qtops/scribblings/qualities/mudsocket-contents.scrbl") (lib "qtops/scribblings/qualities/notable.scrbl") (lib "qtops/scribblings/qualities/universe-thing.scrbl") (lib "qtops/scribblings/qualities/rpg-mudsocket-server.scrbl") (lib "qtops/scribblings/qualities/region.scrbl") (lib "qtops/scribblings/qualities/qualities.scrbl") (lib "qtops/things.rkt") (lib "qtops/scribblings/qualities/lookable.scrbl") (lib "qtops/scribblings/qualities/mudsocket-sight.scrbl") (lib "qtops/qualities/universe-thing.rkt") (lib "qtops/qualities/energetic.rkt") (lib "qtops/main.rkt") (lib "qtops/qualities/region-area.rkt") (lib "qtops/qualities/object.rkt") (lib "qtops/scribblings/qualities/mass.scrbl") (lib "qtops/qualities/brightness.rkt") (lib "qtops/scribblings/qualities/object.scrbl") (lib "qtops/qualities/mudsocket-trivia.rkt") (lib "qtops/scribblings/qualities/trivia.scrbl") (lib "qtops/qualities/pronouns.rkt") (lib "qtops/qualities/lookable.rkt") (lib "qtops/qualities/fillable.rkt") (lib "qtops/scribblings/qualities/region-area.scrbl") (lib "qtops/scribblings/qualities/mudsocket-client.scrbl") (lib "qtops/scribblings/qualities/mudsocket-trivia.scrbl") (lib "qtops/qualities/lit.rkt") (lib "qtops/scribblings/qualities/mudsocket-speech.scrbl") (lib "qtops/qualities/client.rkt") (lib "qtops/scribblings/qualities/sight.scrbl") (lib "qtops/scribblings/qualities/time.scrbl") (lib "qtops/qualities/animation.rkt") (lib "qtops/qualities/time.rkt") (lib "qtops/scribblings/qualities/energetic.scrbl") (lib "qtops/scribblings/qualities/animation.scrbl") (lib "qtops/qualities/area.rkt") (lib "qtops/scribblings/qualities/universe.scrbl") (lib "qtops/scribblings/qualities/noun.scrbl") (lib "qtops/run-tests.rkt") (lib "qtops/qualities/mudsocket-server.rkt") (lib "qtops/scribblings/qualities/npc.scrbl") (lib "qtops/qualities/sight.rkt") (lib "qtops/scribblings/qualities/noise.scrbl") (lib "qtops/qualities/region.rkt") (lib "qtops/qualities/mudsocket-client.rkt") (lib "qtops/qualities/npc.rkt") (lib "qtops/qualities/mass.rkt") (lib "qtops/qualities/description.rkt") (lib "qtops/qualities/mudsocket-basic-self-modification.rkt") (lib "qtops/scribblings/qualities/area.scrbl") (lib "qtops/qualities/exits.rkt") (lib "qtops/scribblings/qualities/mudsocket-server.scrbl") (lib "qtops/scribblings/qualities/exits.scrbl") (lib "qtops/utilities/lists.rkt") (lib "qtops/qualities/main.rkt") (lib "qtops/qualities/contents.rkt") (lib "qtops/qualities/noise.rkt") (lib "qtops/scribblings/qualities/region-noise.scrbl") (lib "qtops/qualities/trivia.rkt") (lib "qtops/qualities/noun.rkt") (lib "qtops/qualities/radiation.rkt") (lib "qtops/scribblings/qualities/description.scrbl") (lib "qtops/qualities/notable.rkt") (lib "qtops/qualities/mudsocket-speech.rkt") (lib "qtops/scribblings/things.scrbl") (lib "qtops/scribblings/qualities/pronouns.scrbl") (lib "qtops/scribblings/qualities/radiation.scrbl") (lib "qtops/scribblings/qualities/lit.scrbl") (lib "qtops/scribblings/qtops.scrbl") (lib "qtops/qualities/mudsocket-sight.rkt") (lib "qtops/scribblings/qualities/brightness.scrbl") (lib "qtops/qualities/universe.rkt"))) (name . "qtops") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:emsenn@emsenn.net . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/emsenn/qtops.git") (tags . ("experimental")) (versions . #hash((default . #hasheq((checksum . "16a37c4122083c320d18a681ad4fd577a6524e24") (source . "https://github.com/emsenn/qtops.git") (source_url . "https://github.com/emsenn/qtops.git"))))))) ("quad" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quad" "doc/quad@quad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555965305) (dependencies . ("at-exp-lib" "base" "beautiful-racket-lib" "fontland" "hyphenate" "pitfall" "pollen" "rackunit-lib" "sugar" "txexpr" "markdown" "pict-lib" "debug" "words" "draw-lib" "draw-doc" "racket-doc" "scribble-lib")) (description . "Document processor (unstable)") (implies . ()) (modules . ((lib "quad/log.rkt") (lib "qtest/test-docs.rkt") (lib "qtest/test-fancy-sauce.rkt") (lib "quadwriter/section.rkt") (lib "qtest/test-kafka.rkt") (lib "quadwriter/param.rkt") (lib "quad/scribblings/quad.scrbl") (lib "quadwriter/string.rkt") (lib "quadwriter/draw.rkt") (lib "quad/get-info.rkt") (lib "qtest/docs.rkt") (lib "quadwriter/main.rkt") (lib "quad/quadhash.rkt") (lib "quadwriter/debug.rkt") (lib "qtest/test-breaks.rkt") (lib "quad/unicode/emoji.rkt") (lib "quad/unicode/math.rkt") (lib "quadwriter/markdown.rkt") (lib "fontproof/main.rkt") (lib "quad/lang.rkt") (lib "quad/quad.rkt") (lib "qtest/test-fallback-mini.rkt") (lib "quad/base.rkt") (lib "quadwriter/image.rkt") (lib "qtest/test-symbol.rkt") (lib "qtest/test-emoji.rkt") (lib "qtest/test-hello.rkt") (lib "qtest/test-font-setup.rkt") (lib "quad/main.rkt") (lib "quad/unicode/unicode-class-prep.rkt") (lib "quadwriter/line.rkt") (lib "qtest/test-metadata.rkt") (lib "qtest/log.rkt") (lib "qtest/test-sections.rkt") (lib "quad/ocm.rkt") (lib "quadwriter/tags.rkt") (lib "qtest/test-adjustment-sizing.rkt") (lib "qtest/test-font-tracking.rkt") (lib "fontproof/command.rkt") (lib "quad/wrap.rkt") (lib "quad/checksum.rkt") (lib "qtest/paths-to-test.rkt") (lib "qtest/update-tests.rkt") (lib "quadwriter/log.rkt") (lib "quadwriter/column.rkt") (lib "qtest/demo-footnotes.rkt") (lib "qtest/test-ot-features.rkt") (lib "quadwriter/keep.rkt") (lib "qtest/test-keep-with-next.rkt") (lib "quadwriter/block.rkt") (lib "quadwriter/lang.rkt") (lib "qtest/test-image.rkt") (lib "quad/util.rkt") (lib "quadwriter/markup.rkt") (lib "quad/param.rkt") (lib "quadwriter/para.rkt") (lib "quad/rebase.rkt") (lib "quad/scribblings/pollen-example/pollen.rkt") (lib "qtest/all.rkt") (lib "quadwriter/test.rkt") (lib "quadwriter/attrs.rkt") (lib "quad/reader.rkt") (lib "qtest/mydraw.rkt") (lib "quadwriter/query.rkt") (lib "quad/atomize.rkt") (lib "quadwriter/lang-helper.rkt") (lib "quadwriter/break.rkt") (lib "quad/pict.rkt") (lib "qtest/sample-main.rkt") (lib "quad/doclang-raw.rkt") (lib "quad/qexpr.rkt") (lib "quadwriter/render.rkt") (lib "qtest/test-baseline-shift.rkt") (lib "qtest/fark.rkt") (lib "qtest/raco.rkt") (lib "quadwriter/doc.rkt") (lib "quadwriter/font.rkt") (lib "quadwriter/html.rkt") (lib "qtest/test-fallback-super.rkt") (lib "quadwriter/core.rkt") (lib "quad/position.rkt") (lib "quadwriter/page.rkt") (lib "quadwriter/struct.rkt"))) (name . "quad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (typesetting . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=quad#main") (tags . ("typesetting")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=quad#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=quad#main"))))))) ("quad-tree" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad-tree.txt"))) (checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (checksum-error . #f) (collection . "quad-tree") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A fairly simple quad-tree implementation. Nothing terribly fancy. Currently rather unstable.") (implies . ()) (modules . ((lib "quad-tree/scribblings/quad-tree.scrbl") (lib "quad-tree/shared.rkt") (lib "quad-tree/main.rkt") (lib "quad-tree/misc/dispatch-case.rkt") (lib "quad-tree/quad-tree.rkt") (lib "quad-tree/quad-fruit-tree.rkt"))) (name . "quad-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:matias@fortlogic.net . #t) (data . #t) (geometry . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (tags . ("data" "geometry" "graphics")) (versions . #hash((default . #hasheq((checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (source_url . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree"))))))) ("qualified-in" . #hasheq((author . "michaelmmacleod@gmail.com") (authors . ("michaelmmacleod@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/qualified-in.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "779feda6a5fe30ff861971c894ae4a301c334150") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/michaelmmacleod/qualified-in.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . "qualified-in") (conflicts . ()) (date-added . 1565833830) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides qualified-in, a require form which prefixes its subforms with their module names and a `:`.") (implies . ()) (modules . ((lib "qualified-in/scribblings/qualified-in.scrbl") (lib "qualified-in/main.rkt"))) (name . "qualified-in") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:michaelmmacleod@gmail.com . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/michaelmmacleod/qualified-in.git") (tags . ("require")) (versions . #hash((default . #hasheq((checksum . "779feda6a5fe30ff861971c894ae4a301c334150") (source . "https://github.com/michaelmmacleod/qualified-in.git") (source_url . "https://github.com/michaelmmacleod/qualified-in.git"))))))) ("quickcheck" . #hasheq((author . "ifigueroap@gmail.com sperber@deinprogramm.de") (authors . ("ifigueroap@gmail.com" "sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickcheck" "doc/quickcheck@quickcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickcheck.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickcheck.txt"))) (checksum . "c104e97b0d371cde46d8d8deb6289538ac6346d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Quickcheck Clone") (implies . ()) (modules . ((lib "quickcheck/property.rkt") (lib "quickcheck/generator.rkt") (lib "quickcheck/private/result.rkt") (lib "quickcheck/testing.rkt") (lib "quickcheck/private/random.rkt") (lib "quickcheck/private/generator.rkt") (lib "quickcheck/private/text-input-output.rkt") (lib "rackunit/quickcheck.rkt") (lib "quickcheck/arbitrary.rkt") (lib "quickcheck/raco-quickcheck.rkt") (lib "quickcheck/private/property.rkt") (lib "quickcheck/private/arbitrary.rkt") (lib "quickcheck/private/test/main.rkt") (lib "quickcheck/main.rkt") (lib "quickcheck/private/test/doc-coverage.rkt") (lib "quickcheck/private/glue.rkt") (lib "quickcheck/private/error.rkt") (lib "quickcheck/scribblings/quickcheck.scrbl") (lib "quickcheck/result.rkt"))) (name . "quickcheck") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (author:sperber@deinprogramm.de . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/ifigueroap/racket-quickcheck/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "c104e97b0d371cde46d8d8deb6289538ac6346d6") (source . "github://github.com/ifigueroap/racket-quickcheck/master") (source_url . "http://github.com/ifigueroap/racket-quickcheck/tree/master"))))))) ("quickscript-competition-2020" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript-competition-2020" "doc/quickscript-competition-2020@quickscript-competition-2020/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-competition-2020.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript-competition-2020.txt"))) (checksum . "4fca3a6eac86a3af944d4e3763395d31705b59b1") (checksum-error . #f) (collection . "quickscript-competition-2020") (conflicts . ()) (date-added . 1597331830) (dependencies . ("data-lib" "base" "drracket" "gui-lib" "htdp-lib" "markdown" "net-lib" "plot-gui-lib" "plot-lib" "quickscript" "rackunit-lib" "scribble-lib" "search-list-box" "syntax-color-lib" "at-exp-lib")) (description . "Scripts from the Quickscript Competition July 2020") (implies . ()) (modules . ((lib "quickscript-competition-2020/scripts/copy-selection-as-html.rkt") (lib "quickscript-competition-2020/scripts/colorscheme2package.rkt") (lib "quickscript-competition-2020/scripts/plot-selected-numbers.rkt") (lib "quickscript-competition-2020/scribblings/quickscript-competition-2020.scrbl") (lib "quickscript-competition-2020/scripts/sort-lines.rkt") (lib "quickscript-competition-2020/scripts/preview-markdown.rkt") (lib "quickscript-competition-2020/scripts/rot13.rkt") (lib "quickscript-competition-2020/scripts/visit-url.rkt") (lib "quickscript-competition-2020/scripts/breakout.rkt") (lib "quickscript-competition-2020/scripts/design-recipe-template.rkt") (lib "quickscript-competition-2020/scripts/count-lines.rkt") (lib "quickscript-competition-2020/scripts/racket-news.rkt") (lib "quickscript-competition-2020/scripts/eyes.rkt") (lib "quickscript-competition-2020/scripts/defines.rkt") (lib "quickscript-competition-2020/scripts/format-selection.rkt") (lib "quickscript-competition-2020/scripts/open-recent.rkt") (lib "quickscript-competition-2020/scripts/cve-search.rkt") (lib "quickscript-competition-2020/scripts/fishy-completion.rkt") (lib "quickscript-competition-2020/scripts/letterfall.rkt") (lib "quickscript-competition-2020/scripts/show-highlighted.rkt") (lib "quickscript-competition-2020/scripts/robopat.rkt") (lib "quickscript-competition-2020/register.rkt") (lib "quickscript-competition-2020/scripts/cs111-course-links.rkt"))) (name . "quickscript-competition-2020") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (Quickscript . #t) (author:spdegabrielle@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/Quickscript-Competiton/July2020entries.git") (tags . ("DrRacket" "Quickscript")) (versions . #hash((default . #hasheq((checksum . "4fca3a6eac86a3af944d4e3763395d31705b59b1") (source . "https://github.com/Quickscript-Competiton/July2020entries.git") (source_url . "https://github.com/Quickscript-Competiton/July2020entries.git"))))))) ("quickscript-extra" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript-extra" "doc/quickscript-extra@quickscript-extra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript-extra.txt"))) (checksum . "996028cc93102ce25eff316fa8ada72f093b3393") (checksum-error . #f) (collection . "quickscript-extra") (conflicts . ()) (date-added . 1614433768) (dependencies . ("base" "quickscript" "at-exp-lib" "drracket" "gui-lib" "pict-lib" "racket-index" "scribble-lib" "search-list-box" "srfi-lite-lib" "net-lib" "web-server-lib" "racket-doc" "rackunit-lib")) (description . "Some scripts for DrRacket's Quickscript.") (implies . ()) (modules . ((lib "quickscript-extra/scripts/color-chooser.rkt") (lib "quickscript-extra/scripts/def-signatures.rkt") (lib "quickscript-extra/scripts/url2script.rkt") (lib "quickscript-extra/scripts/backup-file.rkt") (lib "quickscript-extra/scripts/add-menu.rkt") (lib "quickscript-extra/scripts/reorder-tabs.rkt") (lib "quickscript-extra/scripts/sort-lines.rkt") (lib "quickscript-extra/scripts/bookmarks.rkt") (lib "quickscript-extra/scripts/surround-selection.rkt") (lib "quickscript-extra/scripts/persistent-counter.rkt") (lib "quickscript-extra/scripts/indent-table.rkt") (lib "quickscript-extra/scripts/open-terminal.rkt") (lib "quickscript-extra/scripts/gui-tools.rkt") (lib "quickscript-extra/scripts/filepath-to-clipboard.rkt") (lib "quickscript-extra/scripts/enter-submod.rkt") (lib "quickscript-extra/scripts/goto-line.rkt") (lib "quickscript-extra/scripts/open-collect-file.rkt") (lib "quickscript-extra/scripts/color-theme.rkt") (lib "quickscript-extra/scripts/tweet.rkt") (lib "quickscript-extra/scripts/all-tabs.rkt") (lib "quickscript-extra/scribblings/quickscript-extra.scrbl") (lib "quickscript-extra/scripts/insert-pict.rkt") (lib "quickscript-extra/scripts/abstract-variable.rkt") (lib "quickscript-extra/unregister.rkt") (lib "quickscript-extra/scripts/current-file-example.rkt") (lib "quickscript-extra/scripts/reverse-selection.rkt") (lib "quickscript-extra/register.rkt") (lib "quickscript-extra/scripts/dynamic-abbrev.rkt") (lib "quickscript-extra/scripts/git.rkt") (lib "quickscript-extra/scripts/extract-function.rkt") (lib "quickscript-extra/scripts/number-tabs.rkt") (lib "quickscript-extra/scripts/provided-by.rkt") (lib "quickscript-extra/scripts/regexp-replace.rkt") (lib "quickscript-extra/scripts/author-date.rkt") (lib "quickscript-extra/scripts/open-dir.rkt") (lib "quickscript-extra/scripts/complete-word.rkt") (lib "quickscript-extra/scripts/sections.rkt") (lib "quickscript-extra/scripts/pasterack.rkt"))) (name . "quickscript-extra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/quickscript-extra.git") (tags . ("drracket" "gui")) (versions . #hash((default . #hasheq((checksum . "996028cc93102ce25eff316fa8ada72f093b3393") (source . "https://github.com/Metaxal/quickscript-extra.git") (source_url . "https://github.com/Metaxal/quickscript-extra.git"))))))) ("quote-bad" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quote-bad" "doc/quote-bad@quote-bad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quote-bad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quote-bad.txt"))) (checksum . "251c2ed6f6cfd24b733ea7e0d41ff44c63cb3b2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "pconvert-lib" "unstable-lib" "hygienic-quote-lang" "rackunit-lib" "unstable-macro-testing-lib" "scribble-lib" "racket-doc")) (description . "A version of quote that helps to rid programs of bad uses of quote") (implies . ()) (modules . ((lib "constructor-style-print/lang/reader.rkt") (lib "constructor-style-print/tests/constructor-style-print-lang.rkt") (lib "quote-bad/constructor-style-print/lang/reader.rkt") (lib "quote-bad/translate-quoted.rkt") (lib "constructor-style-print/constructor-style-print.rkt") (lib "constructor-style-print/lang/language-info.rkt") (lib "quote-bad/scribblings/quote-bad.scrbl") (lib "constructor-style-print/lang/runtime-config.rkt") (lib "quote-bad/quote-bad.rkt") (lib "quote-bad/quote-bad-error.rkt") (lib "constructor-style-print/racket/init.rkt"))) (name . "quote-bad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/quote-bad/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "251c2ed6f6cfd24b733ea7e0d41ff44c63cb3b2d") (source . "git://github.com/AlexKnauth/quote-bad") (source_url . "http://github.com/AlexKnauth/quote-bad/tree/master"))))))) ("r-cade" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-cade" "doc/r-cade@r-cade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-cade.txt") (test-failure-log . "server/built/test-fail/r-cade.txt") (test-success-log . #f))) (checksum . "0cce22885aad28234d3f6e1d88568cdc16daf3e6") (checksum-error . #f) (collection . "r-cade") (conflicts . ()) (date-added . 1580498839) (dependencies . ("base" "csfml" "racket-doc" "scribble-lib")) (description . "Retro game engine.") (implies . ()) (modules . ((lib "r-cade/anim.rkt") (lib "r-cade/examples/defender.rkt") (lib "r-cade/examples/derby.rkt") (lib "r-cade/draw.rkt") (lib "r-cade/examples/shooter.rkt") (lib "r-cade/examples/centipede.rkt") (lib "r-cade/input.rkt") (lib "r-cade/audio.rkt") (lib "r-cade/game.rkt") (lib "r-cade/examples/snake.rkt") (lib "r-cade/main.rkt") (lib "r-cade/examples/columns.rkt") (lib "r-cade/time.rkt") (lib "r-cade/scribblings/r-cade.scrbl") (lib "r-cade/video.rkt") (lib "r-cade/examples/flappy.rkt") (lib "r-cade/examples/invaders.rkt") (lib "r-cade/palette.rkt") (lib "r-cade/music.rkt") (lib "r-cade/riff.rkt") (lib "r-cade/examples/twinkle.rkt") (lib "r-cade/font.rkt") (lib "r-cade/examples/tetris.rkt") (lib "r-cade/examples/breakout.rkt") (lib "r-cade/shader.rkt") (lib "r-cade/sound.rkt") (lib "r-cade/voice.rkt") (lib "r-cade/examples/fonts.rkt"))) (name . "r-cade") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (:docs: . #t) (author:massung@gmail.com . #t) (csfml . #t) (game . #t) (game-engine . #t) (ring:1 . #t))) (source . "https://github.com/massung/r-cade.git") (tags . ("2d" "csfml" "game" "game-engine")) (versions . #hash((default . #hasheq((checksum . "0cce22885aad28234d3f6e1d88568cdc16daf3e6") (source . "https://github.com/massung/r-cade.git") (source_url . "https://github.com/massung/r-cade.git"))))))) ("r-lexer" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-lexer" "doc/r-lexer@r-lexer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-lexer.txt"))) (checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (checksum-error . #f) (collection . "r-lexer") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "r-lexer/main.rkt") (lib "r-lexer/scribblings/r-lexer.scrbl") (lib "r-lexer/lang/reader.rkt"))) (name . "r-lexer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/LeifAndersen/racket-r-lexer/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (source . "git://github.com/LeifAndersen/racket-r-lexer") (source_url . "http://github.com/LeifAndersen/racket-r-lexer/tree/master"))))))) ("r-linq" . #hasheq((author . "trajafri@gmail.com pkoronke@iu.edu") (authors . ("trajafri@gmail.com" "pkoronke@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-linq" "doc/r-linq@r-linq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-linq.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-linq.txt"))) (checksum . "e41a733b91fc32001d09fe8ff25a0b2c0a06e34c") (checksum-error . #f) (collection . "r-linq") (conflicts . ()) (date-added . 1561339779) (dependencies . ("base" "rackunit" "racket-doc" "scribble-lib")) (description . "LINQ implemented in Racket.") (implies . ()) (modules . ((lib "r-linq/main.rkt") (lib "r-linq/main.scrbl") (lib "r-linq/linq-tests.rkt"))) (name . "r-linq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pkoronke@iu.edu . #t) (author:trajafri@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/trajafri/r-linq.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "e41a733b91fc32001d09fe8ff25a0b2c0a06e34c") (source . "https://github.com/trajafri/r-linq.git") (source_url . "https://github.com/trajafri/r-linq.git"))))))) ("r16" . #hasheq((author . "williewillus@vincent-lee.net") (authors . ("williewillus@vincent-lee.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r16" "doc/r16@r16/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r16.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r16.txt"))) (checksum . "34f472bd88a4dedcbdddc390c9ccd27070a23f39") (checksum-error . #f) (collection . "r16") (conflicts . ()) (date-added . 1614541039) (dependencies . ("base" "dbg" "racket-cord" "sandbox-lib" "slideshow-lib" "threading-lib" "web-server-lib" "racket-doc" "draw-lib" "rackunit-lib" "scribble-lib" "threading-doc")) (description . "Community-Driven Interactive Code Evaluation") (implies . ()) (modules . ((lib "r16/utils.rkt") (lib "r16/frontends/discord.rkt") (lib "r16/result.rkt") (lib "r16/interface.rkt") (lib "r16/log.rkt") (lib "r16/backend.rkt") (lib "r16/common.rkt") (lib "r16/scribblings/r16.scrbl") (lib "r16/trick.rkt") (lib "r16/evaluator.rkt") (lib "r16/frontends/http.rkt") (lib "r16/config.rkt") (lib "r16/main.rkt") (lib "r16/presentation/main.rkt") (lib "r16/trick-db.rkt"))) (name . "r16") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:williewillus@vincent-lee.net . #t) (bot . #t) (discord . #t) (ring:1 . #t) (sandbox . #t))) (source . "git+https://git.sr.ht/~williewillus/r16") (tags . ("bot" "discord" "sandbox")) (versions . #hash((default . #hasheq((checksum . "34f472bd88a4dedcbdddc390c9ccd27070a23f39") (source . "git+https://git.sr.ht/~williewillus/r16") (source_url . "git+https://git.sr.ht/~williewillus/r16"))))))) ("r7rs" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs.txt"))) (checksum . "a66868651dfee41e0c66887efa8201f7dcb23fb1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1646048446) (dependencies . ("base" "r7rs-lib")) (description . "An implementation of R7RS as a #lang") (implies . ("r7rs-lib")) (modules . ()) (name . "r7rs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a66868651dfee41e0c66887efa8201f7dcb23fb1") (source . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs#master") (source_url . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs#master"))))))) ("r7rs-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs-lib.txt"))) (checksum . "a66868651dfee41e0c66887efa8201f7dcb23fb1") (checksum-error . #f) (collection . "r7rs") (conflicts . ()) (date-added . 1646046150) (dependencies . ("base" "compatibility-lib" "r5rs-lib" "r6rs-lib" "rackunit-lib")) (description . "") (implies . ()) (modules . ((lib "r7rs/lang/private/char.rkt") (lib "r7rs/char.rkt") (lib "r7rs/private/mutability.rkt") (lib "r7rs/lang/private/bytevector.rkt") (lib "r7rs/lang/private/string.rkt") (lib "r7rs/write.rkt") (lib "r7rs/private/strip-prefix.rkt") (lib "r7rs/inexact.rkt") (lib "r7rs/time.rkt") (lib "r7rs/private/list.rkt") (lib "r7rs/private/quote.rkt") (lib "r7rs/lang/private/directive.rkt") (lib "r7rs/repl.rkt") (lib "r7rs/r5rs.rkt") (lib "r7rs/private/case.rkt") (lib "r7rs/private/import.rkt") (lib "r7rs/private/math.rkt") (lib "r7rs/base.rkt") (lib "r7rs/private/define-values.rkt") (lib "r7rs/process-context.rkt") (lib "r7rs/cxr.rkt") (lib "r7rs/complex.rkt") (lib "r7rs/lang/reader.rkt") (lib "r7rs/private/vector.rkt") (lib "r7rs/main.rkt") (lib "r7rs/private/string.rkt") (lib "r7rs/lang/private/symbol.rkt") (lib "r7rs/case-lambda.rkt") (lib "r7rs/read.rkt") (lib "r7rs/private/record.rkt") (lib "r7rs/load.rkt") (lib "r7rs/private/cond-expand.rkt") (lib "r7rs/file.rkt") (lib "r7rs/private/export.rkt") (lib "r7rs/private/bytevector.rkt") (lib "r7rs/lazy.rkt") (lib "r7rs/load/lang/reader.rkt") (lib "r7rs/eval.rkt") (lib "r7rs/private/exception.rkt") (lib "r7rs/load/lang/language.rkt") (lib "r7rs/private/syntax-rules.rkt") (lib "r7rs/private/library.rkt"))) (name . "r7rs-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs-lib#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a66868651dfee41e0c66887efa8201f7dcb23fb1") (source . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs-lib#master") (source_url . "https://github.com/lexi-lambda/racket-r7rs.git?path=r7rs-lib#master"))))))) ("raart" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raart" "doc/raart@raart/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/raart.txt") (success-log . "server/built/install/raart.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raart.txt"))) (checksum . "09ec9f46979f052f95625530b649ec346b965e49") (checksum-error . #f) (collection . "raart") (conflicts . ()) (dependencies . ("gui-lib" "htdp-lib" "pict-lib" "plot-gui-lib" "plot-lib" "lux" "unix-signals" "reprovide-lang" "ansi" "struct-define" "base" "sandbox-lib" "htdp-doc" "racket-doc" "scribble-lib")) (description . "racket ansi art") (implies . ()) (modules . ((lib "raart/main.rkt") (lib "raart/lux-chaos.rkt") (lib "raart/t/key.rkt") (lib "raart/kitty.rkt") (lib "raart/t/draw.rkt") (lib "raart/draw.rkt") (lib "raart/t/hack.rkt") (lib "raart/kitty-init.rkt") (lib "raart/buffer.rkt") (lib "raart/t/kitty.rkt") (lib "raart/raart.scrbl") (lib "raart/size.rkt"))) (name . "raart") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (art . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:1 . #t) (terminal . #t) (ui . #t))) (source . "https://github.com/jeapostrophe/raart.git") (tags . ("ansi" "art" "graphics" "terminal" "ui")) (versions . #hash((default . #hasheq((checksum . "09ec9f46979f052f95625530b649ec346b965e49") (source . "https://github.com/jeapostrophe/raart.git") (source_url . "https://github.com/jeapostrophe/raart.git"))))))) ("rackcheck" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackcheck" "doc/rackcheck@rackcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackcheck.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackcheck.txt"))) (checksum . "965d21fdeefdde356cd563f0d916b1fd8469ea6f") (checksum-error . #f) (collection . "rackcheck") (conflicts . ()) (date-added . 1583921387) (dependencies . ("base" "rackcheck-lib" "racket-doc" "rackunit-doc" "rackunit-lib" "scribble-lib")) (description . "A property-based testing library with shrinking support.") (implies . ("rackcheck-lib")) (modules . ((lib "rackcheck/rackcheck.scrbl"))) (name . "rackcheck") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (quickcheck . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck") (tags . ("quickcheck" "testing")) (versions . #hash((default . #hasheq((checksum . "965d21fdeefdde356cd563f0d916b1fd8469ea6f") (source . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck") (source_url . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck"))))))) ("rackcheck-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackcheck-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackcheck-lib.txt"))) (checksum . "965d21fdeefdde356cd563f0d916b1fd8469ea6f") (checksum-error . #f) (collection . "rackcheck") (conflicts . ()) (date-added . 1645380230) (dependencies . ("base" "rackunit-lib" "rackunit-lib")) (description . "A property-based testing library with shrinking support. (implementation)") (implies . ()) (modules . ((lib "rackcheck/rackunit.rkt") (lib "rackcheck/shrink-tree.rkt") (lib "rackcheck/gen/unicode.rkt") (lib "rackcheck/gen/base.rkt") (lib "rackcheck/prop.rkt") (lib "rackcheck/gen/core.rkt") (lib "rackcheck/main.rkt") (lib "rackcheck/gen/syntax.rkt") (lib "rackcheck/gen/shrink-tree.rkt"))) (name . "rackcheck-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (quickcheck . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck-lib") (tags . ("quickcheck" "testing")) (versions . #hash((default . #hasheq((checksum . "965d21fdeefdde356cd563f0d916b1fd8469ea6f") (source . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck-lib") (source_url . "https://github.com/Bogdanp/rackcheck.git?path=rackcheck-lib"))))))) ("rackdis" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackdis" "doc/rackdis@rackdis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackdis.txt") (test-failure-log . "server/built/test-fail/rackdis.txt") (test-success-log . #f))) (checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (checksum-error . #f) (collection . "rackdis") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Redis bindings") (implies . ()) (modules . ((lib "rackdis/scribblings/rackdis.scrbl") (lib "rackdis/resp.rkt") (lib "rackdis/main.rkt") (lib "rackdis/test.rkt"))) (name . "rackdis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Redis . #t) (author:euler90h@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "http://github.com/eu90h/rackdis/tree/master") (tags . ("db" "Redis")) (versions . #hash((default . #hasheq((checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (source . "git://github.com/eu90h/rackdis") (source_url . "http://github.com/eu90h/rackdis/tree/master"))))))) ("racket-build-guide" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-build-guide" "doc/racket-build-guide@racket-build-guide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-build-guide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-build-guide.txt"))) (checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "scribble-doc" "distro-build-doc")) (description . "Racket build and contribution documentation") (implies . ()) (modules . ((lib "racket-build-guide/distribute.scrbl") (lib "racket-build-guide/contribute.scrbl") (lib "racket-build-guide/common.rkt") (lib "racket-build-guide/zuo.scrbl") (lib "racket-build-guide/bootstrap.scrbl") (lib "racket-build-guide/build.scrbl") (lib "racket-build-guide/racket-build-guide.scrbl"))) (name . "racket-build-guide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/racket-build-guide") (tags . ()) (versions . #hash((default . #hasheq((checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (source . "git://github.com/racket/racket/?path=pkgs/racket-build-guide") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-build-guide"))))))) ("racket-cheat" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-cheat" "doc/racket-cheat@racket-cheat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6e79a13b9e24969a87c8a1c191d38ee4f4c55cf9") (checksum-error . #f) (collection . "racket-cheat") (conflicts . ()) (dependencies . ("base" "scribble-lib" "db-doc" "db-lib" "drracket" "net-doc" "net-lib" "parser-tools-doc" "parser-tools-lib" "pict-doc" "pict-lib" "racket-doc" "sandbox-lib" "slideshow-doc" "slideshow-lib")) (description . "a user-friendly index into the Racket documentation") (implies . ()) (modules . ((lib "racket-cheat/racket-cheat.scrbl") (lib "racket-cheat/racket-cheat.rkt"))) (name . "racket-cheat") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (beginners . #t) (documentation . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/racket-cheat/tree/master") (tags . ("beginners" "documentation")) (versions . #hash((default . #hasheq((checksum . "6e79a13b9e24969a87c8a1c191d38ee4f4c55cf9") (source . "git://github.com/jeapostrophe/racket-cheat") (source_url . "http://github.com/jeapostrophe/racket-cheat/tree/master"))))))) ("racket-chipmunk" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-chipmunk.txt") (test-failure-log . "server/built/test-fail/racket-chipmunk.txt") (test-success-log . #f))) (checksum . "152c9c4758f59ade9db01614e89e946eb39de168") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Chipmunk bindings for Racket.") (implies . ()) (modules . ((lib "racket-chipmunk/examples/callbacks.rkt") (lib "racket-chipmunk/main.rkt") (lib "racket-chipmunk/lang/chipmunk-ffi.rkt") (lib "racket-chipmunk/examples/chipmunk-test.rkt") (lib "racket-chipmunk/examples/hello-world.rkt") (lib "racket-chipmunk/lang/chipmunk.rkt"))) (name . "racket-chipmunk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (physics . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-chipmunk.git") (tags . ("games" "physics")) (versions . #hash((default . #hasheq((checksum . "152c9c4758f59ade9db01614e89e946eb39de168") (source . "https://github.com/thoughtstem/racket-chipmunk.git") (source_url . "https://github.com/thoughtstem/racket-chipmunk.git"))))))) ("racket-cord" . #hasheq((author . "ben@bensimms.moe") (authors . ("ben@bensimms.moe")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-cord" "doc/racket-cord@racket-cord/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-cord.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-cord.txt"))) (checksum . "f2ca1a13849b700761e0d0f60d7ef8d898b7b142") (checksum-error . #f) (collection . "racket-cord") (conflicts . ()) (date-added . 1614814811) (dependencies . ("base" "http-easy" "rfc6455" "rackunit-lib" "scribble-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for discord.") (implies . ()) (modules . ((lib "racket-cord/scribblings/extracted.scrbl") (lib "racket-cord/main.rkt") (lib "racket-cord/private/data.rkt") (lib "racket-cord/scribblings/racket-cord.scrbl") (lib "racket-cord/private/gateway.rkt") (lib "racket-cord/private/logger.rkt") (lib "racket-cord/private/utils.rkt") (lib "racket-cord/private/events.rkt") (lib "racket-cord/http.rkt") (lib "racket-cord/private/constants.rkt"))) (name . "racket-cord") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben@bensimms.moe . #t) (discord . #t) (http . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/simmsb/racket-cord.git") (tags . ("discord" "http" "net")) (versions . #hash((default . #hasheq((checksum . "f2ca1a13849b700761e0d0f60d7ef8d898b7b142") (source . "https://github.com/simmsb/racket-cord.git") (source_url . "https://github.com/simmsb/racket-cord.git"))))))) ("racket-dogstatsd" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dogstatsd" "doc/dogstatsd@racket-dogstatsd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-dogstatsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-dogstatsd.txt"))) (checksum . "164ec431a98689b111495bad638313b219e3b0b2") (checksum-error . #f) (collection . "dogstatsd") (conflicts . ()) (dependencies . ("base" "threading" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "DogStatsD client for Racket, allowing you to send metrics to Datadog") (implies . ()) (modules . ((lib "dogstatsd/private/socket.rkt") (lib "dogstatsd/private/servicechecks.rkt") (lib "dogstatsd/private/buffer.rkt") (lib "dogstatsd/private/events.rkt") (lib "dogstatsd/test.rkt") (lib "dogstatsd/private/utils.rkt") (lib "dogstatsd/scribblings/dogstatsd.scrbl") (lib "dogstatsd/main.rkt") (lib "dogstatsd/private/statsd.rkt"))) (name . "racket-dogstatsd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (dogstatsd . #t) (metrics . #t) (ring:1 . #t) (statsd . #t))) (source . "https://github.com/DarrenN/racket-dogstatsd.git") (tags . ("dogstatsd" "metrics" "statsd")) (versions . #hash((default . #hasheq((checksum . "164ec431a98689b111495bad638313b219e3b0b2") (source . "https://github.com/DarrenN/racket-dogstatsd.git") (source_url . "https://github.com/DarrenN/racket-dogstatsd.git"))))))) ("racket-glossary" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-glossary.txt") (docs . (("main" "racket-glossary" "doc/racket-glossary@racket-glossary/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-glossary.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-glossary.txt"))) (checksum . "6f8ad25f8e297b8a9a889482ca3e4a47f698f3d3") (checksum-error . #f) (collection . "racket-glossary") (conflicts . ()) (date-added . 1656243753) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib" "al2-test-runner")) (description . "Glossary of Scheme and Racket terms, with a focus on Racket.\r\n\r\nThis document is work in progress; many entries are still missing.") (implies . ()) (modules . ((lib "racket-glossary/glossary-stats.rkt") (lib "racket-glossary/fix-svgs.rkt") (lib "racket-glossary/scribblings/racket-glossary.scrbl"))) (name . "racket-glossary") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:sschwarzer@sschwarzer.net . #t) (concepts . #t) (glossary . #t) (ring:1 . #t))) (source . "git+https://git.sr.ht/~sschwarzer/racket-glossary#main") (tags . ("concepts" "glossary")) (versions . #hash((default . #hasheq((checksum . "6f8ad25f8e297b8a9a889482ca3e4a47f698f3d3") (source . "git+https://git.sr.ht/~sschwarzer/racket-glossary#main") (source_url . "git+https://git.sr.ht/~sschwarzer/racket-glossary#main"))))))) ("racket-graphviz" . #hasheq((author . "hadi@moshayedi.net") (authors . ("hadi@moshayedi.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "graphviz"))) (failure-log . "server/built/fail/racket-graphviz.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fdf1b50c383bd1d9db6738063e2d9f5660439ec1") (checksum-error . #f) (collection . "graphviz") (conflicts . ()) (date-added . 1564856283) (dependencies . ("base" "pict-lib" "draw-lib" "metapict" "scribble-lib" "pict-doc" "racket-doc" "rackunit-lib")) (description . "Make composition of Racket Pict and Graphviz Diagrams possible.") (implies . ()) (modules . ((lib "graphviz/lib/dot.rkt") (lib "graphviz/example.rkt") (lib "graphviz/scribblings/graphviz.scrbl") (lib "graphviz/examples/erdiagram.rkt") (lib "graphviz/examples/dirtree.rkt") (lib "graphviz/lib/digraph.rkt") (lib "graphviz/scribblings/utils.rkt") (lib "graphviz/lib/erdiagram.rkt") (lib "graphviz/main.rkt"))) (name . "racket-graphviz") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:hadi@moshayedi.net . #t) (graph . #t) (ring:1 . #t) (visualization . #t))) (source . "https://github.com/pykello/racket-graphviz.git") (tags . ("graph" "visualization")) (versions . #hash((default . #hasheq((checksum . "fdf1b50c383bd1d9db6738063e2d9f5660439ec1") (source . "https://github.com/pykello/racket-graphviz.git") (source_url . "https://github.com/pykello/racket-graphviz.git"))))))) ("racket-immutable" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-immutable.txt"))) (checksum . "ceb8282535b0a14073fd1c420fcdfbcb44fe4913") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "operations that return immutable strings, immutable byte-strings, and immutable vectors") (implies . ()) (modules . ((lib "racket-immutable/immutable.rkt") (lib "racket-immutable/test/immutable-string.rkt") (lib "racket-immutable/lang/reader.rkt") (lib "racket-immutable/lang.rkt") (lib "racket-immutable/base/lang/reader.rkt") (lib "racket-immutable/base/lang.rkt"))) (name . "racket-immutable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/racket-immutable/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ceb8282535b0a14073fd1c420fcdfbcb44fe4913") (source . "git://github.com/AlexKnauth/racket-immutable") (source_url . "http://github.com/AlexKnauth/racket-immutable/tree/master"))))))) ("racket-lambda-runtime" . #hasheq((author . "odonnell_johnny@yahoo.com") (authors . ("odonnell_johnny@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-lambda-runtime.txt") (test-failure-log . "server/built/test-fail/racket-lambda-runtime.txt") (test-success-log . #f))) (checksum . "7edded99cf5165140fa650af0025d0843bf520c2") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586833807) (dependencies . ("base" "web-server-lib")) (description . "A library that interacts with the AWS Lambda runtime API to run your Racket function") (implies . ()) (modules . ((lib "racket-lambda-runtime/test/index.rkt") (lib "racket-lambda-runtime/test/sample-runtime-api.rkt") (lib "racket-lambda-runtime/main.rkt"))) (name . "racket-lambda-runtime") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (AWS . #t) (author:odonnell_johnny@yahoo.com . #t) (aws . #t) (lambda . #t) (ring:1 . #t))) (source . "https://github.com/johnnyodonnell/racket-lambda-runtime.git") (tags . ("AWS" "aws" "lambda")) (versions . #hash((default . #hasheq((checksum . "7edded99cf5165140fa650af0025d0843bf520c2") (source . "https://github.com/johnnyodonnell/racket-lambda-runtime.git") (source_url . "https://github.com/johnnyodonnell/racket-lambda-runtime.git"))))))) ("racket-language-server" . #hasheq((author . "david@craven.ch") (authors . ("david@craven.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-language-server" "doc/racket-language-server@racket-language-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-language-server.txt") (test-failure-log . "server/built/test-fail/racket-language-server.txt") (test-success-log . #f))) (checksum . "e397a130676504fc8b053e6b1f48d49b77b9ad98") (checksum-error . #f) (collection . "racket-language-server") (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-tool-lib" "gui-lib" "scribble-lib" "syntax-color-lib" "at-exp-lib" "data-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of the Language Server Protocol for Racket.") (implies . ()) (modules . ((lib "racket-language-server/protocol/jsonrpc.rkt") (lib "racket-language-server/scribblings/racket-language-server.scrbl") (lib "racket-language-server/protocol/conversion.rkt") (lib "racket-language-server/protocol/lsp.rkt") (lib "racket-language-server/protocol/dispatch.rkt") (lib "racket-language-server/lang/lexer.rkt") (lib "racket-language-server/main.rkt") (lib "racket-language-server/protocol/methods.rkt") (lib "racket-language-server/lang/document.rkt") (lib "racket-language-server/protocol/json-util.rkt") (lib "racket-language-server/lang/worker.rkt") (lib "racket-language-server/protocol/notifications.rkt") (lib "racket-language-server/lang/indent.rkt") (lib "racket-language-server/lang/check-syntax.rkt") (lib "racket-language-server/lang/workspace.rkt"))) (name . "racket-language-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@craven.ch . #t) (ide . #t) (language-server-protocol . #t) (lsp . #t) (ring:1 . #t))) (source . "https://github.com/theia-ide/racket-language-server.git") (tags . ("ide" "language-server-protocol" "lsp")) (versions . #hash((default . #hasheq((checksum . "e397a130676504fc8b053e6b1f48d49b77b9ad98") (source . "https://github.com/theia-ide/racket-language-server.git") (source_url . "https://github.com/theia-ide/racket-language-server.git"))))))) ("racket-llvm" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-llvm" "doc/racket-llvm@racket-llvm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-llvm.txt") (test-failure-log . "server/built/test-fail/racket-llvm.txt") (test-success-log . #f))) (checksum . "a39dfc4fb6ad867f2a519903ab114e941e15fa88") (checksum-error . #f) (collection . "racket-llvm") (conflicts . ()) (date-added . 1642560026) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib" "at-exp-lib")) (description . "racket llvm C-API bindings") (implies . ()) (modules . ((lib "racket-llvm/module.rkt") (lib "racket-llvm/ref.rkt") (lib "racket-llvm/scribblings/jit.scrbl") (lib "racket-llvm/scribblings/racket-llvm.scrbl") (lib "racket-llvm/builder.rkt") (lib "racket-llvm/types.rkt") (lib "racket-llvm/examples/printf.rkt") (lib "racket-llvm/value.rkt") (lib "racket-llvm/examples/show-function-cfg.rkt") (lib "racket-llvm/scribblings/module.scrbl") (lib "racket-llvm/scribblings/llvm-structure.scrbl") (lib "racket-llvm/examples/optimization.rkt") (lib "racket-llvm/error.rkt") (lib "racket-llvm/main.rkt") (lib "racket-llvm/definer.rkt") (lib "racket-llvm/scribblings/builder.scrbl") (lib "racket-llvm/pass-manager.rkt") (lib "racket-llvm/jit.rkt") (lib "racket-llvm/examples/sum.rkt"))) (name . "racket-llvm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (llvm . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/racket-llvm.git#develop") (tags . ("llvm")) (versions . #hash((default . #hasheq((checksum . "a39dfc4fb6ad867f2a519903ab114e941e15fa88") (source . "https://github.com/dannypsnl/racket-llvm.git#develop") (source_url . "https://github.com/dannypsnl/racket-llvm.git#develop"))))))) ("racket-locale" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-locale" "doc/racket-locale@racket-locale/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-locale.txt") (test-failure-log . "server/built/test-fail/racket-locale.txt") (test-success-log . #f))) (checksum . "4381d42d76548b6b52522349955be55ee46e3700") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "gregor-lib" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "More, and complete, locale tools. ") (implies . ()) (modules . ((lib "locale/main.rkt") (lib "locale/tests/test-doc-complete.rkt") (lib "locale/language-info.rkt") (lib "locale/private/system-type.rkt") (lib "locale/scribblings/format.scrbl") (lib "locale/tests/locale.rkt") (lib "locale/private/clocale.rkt") (lib "locale/scribblings/racket-locale.scrbl") (lib "locale/tests/format.rkt") (lib "locale/scribblings/language-info.scrbl") (lib "locale/tests/format-macosx.rkt") (lib "locale/private/matches.rkt") (lib "locale/private/cuname.rkt") (lib "locale/format.rkt") (lib "locale/tests/format-linux.rkt") (lib "locale/scribblings/locale.scrbl"))) (name . "racket-locale") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (i18n . #t) (locale . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-locale.git") (tags . ("i18n" "locale")) (versions . #hash((default . #hasheq((checksum . "4381d42d76548b6b52522349955be55ee46e3700") (source . "https://github.com/johnstonskj/racket-locale.git") (source_url . "https://github.com/johnstonskj/racket-locale.git"))))))) ("racket-paint" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-paint" "doc/racket-paint@racket-paint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-paint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-paint.txt"))) (checksum . "70dc5dea96e76d0b80aa77ce7c633816f8a9632c") (checksum-error . #f) (collection . "racket-paint") (conflicts . ()) (date-added . 1603617294) (dependencies . ("gui-lib" "pict-lib" "search-list-box" "global" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple paint program") (implies . ()) (modules . ((lib "racket-paint/keymap.rkt") (lib "racket-paint/scribblings/racket-paint.scrbl") (lib "racket-paint/main.rkt") (lib "racket-paint/event-listener.rkt") (lib "racket-paint/misc.rkt") (lib "racket-paint/paint.rkt"))) (name . "racket-paint") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drawing . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/racket-paint.git") (tags . ("drawing" "gui")) (versions . #hash((default . #hasheq((checksum . "70dc5dea96e76d0b80aa77ce7c633816f8a9632c") (source . "https://github.com/Metaxal/racket-paint.git") (source_url . "https://github.com/Metaxal/racket-paint.git"))))))) ("racket-poppler" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-poppler.txt") (test-failure-log . "server/built/test-fail/racket-poppler.txt") (test-success-log . #f))) (checksum . "0ccd65fb4a85c05ad6494b5ab8412c529bd77f26") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("draw-lib" "slideshow-lib" "web-server-lib" "base" "pict" "poppler-x86-64-macosx" "poppler-i386-macosx" "poppler-win32-x86-64" "poppler-win32-i386" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Read, search and render pdfs. Use LaTeX in scribble and slidehow.") (implies . ()) (modules . ((lib "racket-poppler/examples/test-render-tex.rkt") (lib "racket-poppler/main.rkt") (lib "racket-poppler/libs.rkt") (lib "racket-poppler/ffi.rkt") (lib "racket-poppler/examples/test-pdf-functions.rkt") (lib "racket-poppler/render-tex.rkt"))) (name . "racket-poppler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (pdf . #t) (poppler . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "http://github.com/soegaard/racket-poppler/tree/master") (tags . ("pdf" "poppler" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "0ccd65fb4a85c05ad6494b5ab8412c529bd77f26") (source . "github://github.com/soegaard/racket-poppler/master") (source_url . "http://github.com/soegaard/racket-poppler/tree/master"))))))) ("racket-predicates" . #hasheq((author . "anu.drumcoder@gmail.com") (authors . ("anu.drumcoder@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "racket-predicates"))) (failure-log . "server/built/fail/racket-predicates.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3a4f82ffaaf80033bb744e45eb57b05ef5399c99") (checksum-error . #f) (collection . "racket-predicates") (conflicts . ()) (date-added . 1598310321) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library composed of predicate functions ") (implies . ()) (modules . ((lib "racket-predicates/test/list-predicates-test.rkt") (lib "racket-predicates/test/misc-predicates-test.rkt") (lib "racket-predicates/scribblings/racket-predicates.scrbl") (lib "racket-predicates/test/comparison-predicates-test.rkt") (lib "racket-predicates/test/string-predicates-test.rkt") (lib "racket-predicates/predicates/string/string-predicates.rkt") (lib "racket-predicates/predicates/numer/numerical-predicates.rkt") (lib "racket-predicates/predicates/comparison/comparison-predicates.rkt") (lib "racket-predicates/test/numerical-predicates-test.rkt") (lib "racket-predicates/main.rkt") (lib "racket-predicates/predicates/miscellaneous/misc-predicates.rkt") (lib "racket-predicates/test/logic-predicates-test.rkt") (lib "racket-predicates/predicates/logic/logic-predicates.rkt") (lib "racket-predicates/predicates/list/list-predicates.rkt"))) (name . "racket-predicates") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:anu.drumcoder@gmail.com . #t) (curry . #t) (functional . #t) (memoization . #t) (predicates . #t) (ring:1 . #t))) (source . "https://github.com/aryaghan-mutum/racket-predicates.git") (tags . ("curry" "functional" "memoization" "predicates")) (versions . #hash((default . #hasheq((checksum . "3a4f82ffaaf80033bb744e45eb57b05ef5399c99") (source . "https://github.com/aryaghan-mutum/racket-predicates.git") (source_url . "https://github.com/aryaghan-mutum/racket-predicates.git"))))))) ("racket-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-processing.txt"))) (checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Allows processing to be written with Lispy syntax in DrRacket.  Depends on the racket-to package, which transpiles to processing.") (implies . ()) (modules . ((lib "racket-processing/main.rkt") (lib "racket-processing/processing-module.rkt"))) (name . "racket-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-processing.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (source . "https://github.com/thoughtstem/racket-processing.git") (source_url . "https://github.com/thoughtstem/racket-processing.git"))))))) ("racket-quandl" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-quandl" "doc/racket-quandl@racket-quandl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-quandl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-quandl.txt"))) (checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (checksum-error . #f) (collection . "racket-quandl") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Grab data from Quandl with racket for fun and profit") (implies . ()) (modules . ((lib "racket-quandl/main.rkt") (lib "racket-quandl/scribblings/racket-quandl.scrbl"))) (name . "racket-quandl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:malcolm.still@gmail.com . #t) (finance . #t) (ring:1 . #t))) (source . "http://github.com/malcolmstill/racket-quandl/tree/master") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (source . "git://github.com/malcolmstill/racket-quandl") (source_url . "http://github.com/malcolmstill/racket-quandl/tree/master"))))))) ("racket-rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "rackunit-grade" "doc/rackunit-grade@racket-rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-rackunit-grade.txt") (test-failure-log . "server/built/test-fail/racket-rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (collection . (multi)) (conflicts . ("rackunit-grade")) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl"))) (name . "racket-rackunit-grade") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:2 . #t))) (source . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("racket-raylib-2d" . #hasheq((author . "nma.arvydas.silanskas@gmail.com") (authors . ("nma.arvydas.silanskas@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-raylib-2d.txt") (test-failure-log . "server/built/test-fail/racket-raylib-2d.txt") (test-success-log . #f))) (checksum . "60ad7a2f9305e78f95759571013fcaf306939868") (checksum-error . #f) (collection . "raylib-2d") (conflicts . ()) (date-added . 1561492032) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket wrapper for Raylib (https://www.raylib.com/) v2.5 2D functionality") (implies . ()) (modules . ((lib "raylib-2d/test/camera.rkt") (lib "raylib-2d/test/image.rkt") (lib "raylib-2d/test/mouse.rkt") (lib "raylib-2d/functions.rkt") (lib "raylib-2d/test/shader.rkt") (lib "raylib-2d/enums.rkt") (lib "raylib-2d/test/shape.rkt") (lib "raylib-2d/structs.rkt") (lib "raylib-2d/main.rkt") (lib "raylib-2d/test/font.rkt") (lib "raylib-2d/test/texture.rkt") (lib "raylib-2d/util.rkt") (lib "raylib-2d/colors.rkt") (lib "raylib-2d/test/kb.rkt"))) (name . "racket-raylib-2d") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:nma.arvydas.silanskas@gmail.com . #t) (ffi . #t) (game . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/arvyy/racket-raylib-2d.git") (tags . ("2d" "ffi" "game" "graphics")) (versions . #hash((default . #hasheq((checksum . "60ad7a2f9305e78f95759571013fcaf306939868") (source . "https://github.com/arvyy/racket-raylib-2d.git") (source_url . "https://github.com/arvyy/racket-raylib-2d.git"))))))) ("racket-route-match" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-route-match" "doc/racket-route-match@racket-route-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-route-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-route-match.txt"))) (checksum . "c9800e602f0e58bf6e0273d7dbdb86d28f9047cb") (checksum-error . #f) (collection . "racket-route-match") (conflicts . ()) (date-added . 1552731295) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "racket-route-match is a library for matching URL routes. It uses the same routing syntax as used by popular Ruby web frameworks like Ruby on Rails and Sinatra.") (implies . ()) (modules . ((lib "racket-route-match/main.rkt") (lib "racket-route-match/scribblings/racket-route-match.scrbl") (lib "racket-route-match/test.rkt"))) (name . "racket-route-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (ring:1 . #t) (route . #t))) (source . "https://github.com/Junker/racket-route-match.git") (tags . ("route")) (versions . #hash((default . #hasheq((checksum . "c9800e602f0e58bf6e0273d7dbdb86d28f9047cb") (source . "https://github.com/Junker/racket-route-match.git") (source_url . "https://github.com/Junker/racket-route-match.git"))))))) ("racket-scaffold" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scaffold" "doc/scaffold@racket-scaffold/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-scaffold.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-scaffold.txt"))) (checksum . "e6df9238aef49e36d8cef641601ee7c5f4d5c16b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "dali" "scribble-lib" "scribble-doc" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Simple templated content generator integrated with raco") (implies . ()) (modules . ((lib "scaffold/scribblings/scaffold.scrbl") (lib "scaffold/plank-files/info-collection.rkt") (lib "scaffold/plank-files/info-single-package.rkt") (lib "scaffold/plank-files/scribble-top.scrbl") (lib "scaffold/plank-files/test-doc-complete.rkt") (lib "scaffold/plank-files/scribble-module.scrbl") (lib "scaffold/plank-files/info-multi-package.rkt") (lib "scaffold/introspect.rkt") (lib "scaffold/private/system.rkt") (lib "scaffold/main.rkt") (lib "scaffold/private/logging.rkt") (lib "scaffold/plank-files/test-module.rkt") (lib "scaffold/plank-files/module.rkt") (lib "scaffold/test/test-doc-complete.rkt") (lib "scaffold/planks.rkt"))) (name . "racket-scaffold") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-scaffold.git") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "e6df9238aef49e36d8cef641601ee7c5f4d5c16b") (source . "https://github.com/johnstonskj/racket-scaffold.git") (source_url . "https://github.com/johnstonskj/racket-scaffold.git"))))))) ("racket-school-mystery-languages" . #hasheq((author . "justinpombrio@cs.brown.edu") (authors . ("justinpombrio@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-school-mystery-languages.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-school-mystery-languages.txt") (test-failure-log . "server/built/test-fail/racket-school-mystery-languages.txt") (test-success-log . #f))) (checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (checksum-error . #f) (collection . "RacketSchool") (conflicts . ()) (dependencies . ()) (description . "Some labs will have you explore these languages. One syntax, many semantics. (2017)") (implies . ()) (modules . ((lib "RacketSchool/Variables3.rkt") (lib "RacketSchool/Functions1.rkt") (lib "RacketSchool/Functions3.rkt") (lib "RacketSchool/Variables1.rkt") (lib "RacketSchool/private/tests.rkt") (lib "RacketSchool/VariablesAll.rkt") (lib "RacketSchool/private/basic.rkt") (lib "RacketSchool/FunctionsAll.rkt") (lib "RacketSchool/private/mystery.rkt") (lib "RacketSchool/private/mystery-lang.rkt") (lib "RacketSchool/Records3.rkt") (lib "RacketSchool/public/basic.rkt") (lib "RacketSchool/private/event-loop.rkt") (lib "RacketSchool/Variables2.rkt") (lib "RacketSchool/private/mystery-functions.rkt") (lib "RacketSchool/private/mystery-records.rkt") (lib "RacketSchool/Functions2.rkt") (lib "RacketSchool/private/mystery-variables.rkt") (lib "RacketSchool/private/mystery-semantics-records.rkt") (lib "RacketSchool/RecordsAll.rkt") (lib "RacketSchool/private/testing.rkt") (lib "RacketSchool/Records2.rkt") (lib "RacketSchool/Records1.rkt") (lib "RacketSchool/private/mystery-semantics-variables.rkt") (lib "RacketSchool/private/mystery-semantics-functions.rkt"))) (name . "racket-school-mystery-languages") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:justinpombrio@cs.brown.edu . #t) (ring:1 . #t))) (source . "http://github.com/justinpombrio/RacketSchool/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (source . "git://github.com/justinpombrio/RacketSchool") (source_url . "http://github.com/justinpombrio/RacketSchool/tree/master"))))))) ("racket-spider" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-spider.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-spider.txt"))) (checksum . "1ed8e8996d296021a1adf7acb30190db301055f7") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1577869465) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "lightweight http client") (implies . ()) (modules . ((lib "racket-spider/spider.rkt"))) (name . "racket-spider") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:1227847322@qq.com . #t) (ring:1 . #t))) (source . "https://github.com/Syntacticlosure/racket-spider.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1ed8e8996d296021a1adf7acb30190db301055f7") (source . "https://github.com/Syntacticlosure/racket-spider.git") (source_url . "https://github.com/Syntacticlosure/racket-spider.git"))))))) ("racket-to" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to.txt"))) (checksum . "c76caf3721c09d68c5871a64481b15be72293259") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A set of lightweight transpilers from racket to other languages.  Entirely for educational and in-class demo purposes.  Don't use this for anything important yet...") (implies . ()) (modules . ((lib "racket-to/processing.rkt") (lib "racket-to/racket2blank.rkt") (lib "racket-to/python.rkt") (lib "racket-to/javascript.rkt"))) (name . "racket-to") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c76caf3721c09d68c5871a64481b15be72293259") (source . "https://github.com/thoughtstem/racket-to.git") (source_url . "https://github.com/thoughtstem/racket-to.git"))))))) ("racket-to-python" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to-python.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to-python.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to-python.txt"))) (checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "My toolset for working with Python as a compilation target from Racket.  It's basically just a lightweight wrapper around the Hy Language, which is basically a Lisp that compiles to Python.") (implies . ()) (modules . ((lib "racket-to-python/python.rkt") (lib "racket-to-python/python-module.rkt") (lib "racket-to-python/main.rkt") (lib "racket-to-python/python-extras.rkt"))) (name . "racket-to-python") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to-python.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (source . "https://github.com/thoughtstem/racket-to-python.git") (source_url . "https://github.com/thoughtstem/racket-to-python.git"))))))) ("racket-tree-sitter" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-tree-sitter" "doc/racket-tree-sitter@racket-tree-sitter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-tree-sitter.txt") (test-failure-log . "server/built/test-fail/racket-tree-sitter.txt") (test-success-log . #f))) (checksum . "d5193cb8af43428372db34188924f4fea372ba8d") (checksum-error . #f) (collection . "racket-tree-sitter") (conflicts . ()) (date-added . 1660733338) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "racket binding to tree-sitter") (implies . ()) (modules . ((lib "racket-tree-sitter/types.rkt") (lib "racket-tree-sitter/main.rkt") (lib "racket-tree-sitter/tree-cursor.rkt") (lib "racket-tree-sitter/node.rkt") (lib "racket-tree-sitter/parser.rkt") (lib "racket-tree-sitter/query-cursor.rkt") (lib "racket-tree-sitter/scribblings/racket-tree-sitter.scrbl") (lib "racket-tree-sitter/language.rkt") (lib "racket-tree-sitter/definer.rkt") (lib "racket-tree-sitter/tree.rkt") (lib "racket-tree-sitter/query.rkt"))) (name . "racket-tree-sitter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (editor . #t) (parser . #t) (ring:1 . #t) (tree-sitter . #t))) (source . "https://github.com/dannypsnl/racket-tree-sitter.git#develop") (tags . ("editor" "parser" "tree-sitter")) (versions . #hash((default . #hasheq((checksum . "d5193cb8af43428372db34188924f4fea372ba8d") (source . "https://github.com/dannypsnl/racket-tree-sitter.git#develop") (source_url . "https://github.com/dannypsnl/racket-tree-sitter.git#develop"))))))) ("racket-where" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-where.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-where.txt"))) (checksum . "93a9cbd548bdb1c3e9e0a38a6e16120a493715a0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1654714299) (dependencies . ("base" "rackunit-lib")) (description . "Small tool to find installed Racket packages\r\n") (implies . ()) (modules . ((lib "racket-where/cmdline.rkt") (lib "racket-where/main.rkt") (lib "racket-where/tests.rkt") (lib "racket-where/racket-where.rkt"))) (name . "racket-where") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/gentoo-racket/racket-where.git?path=src") (tags . ("system")) (versions . #hash((default . #hasheq((checksum . "93a9cbd548bdb1c3e9e0a38a6e16120a493715a0") (source . "https://gitlab.com/gentoo-racket/racket-where.git?path=src") (source_url . "https://gitlab.com/gentoo-racket/racket-where.git?path=src"))))))) ("racketeer" . #hasheq((author . "emailmiraleung@gmail.com jordanelder@outlook.com") (authors . ("emailmiraleung@gmail.com" "jordanelder@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racketeer.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "rackunit-lib" "sandbox-lib" "syntax-color-lib" "wxme-lib")) (description . "Continuous testing for DrRacket") (implies . ()) (modules . ((lib "racketeer/racketeer/private/testing-mixin.rkt") (lib "racketeer/racketeer/tool.rkt"))) (name . "racketeer") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:emailmiraleung@gmail.com . #t) (author:jordanelder@outlook.com . #t) (ring:1 . #t))) (source . "http://github.com/miraleung/racketeer/tree/master#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (source . "git://github.com/miraleung/racketeer#master") (source_url . "http://github.com/miraleung/racketeer/tree/master#master"))))))) ("racketmq" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racketmq.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1a764691e735798dd00e5b467bfdf4f16367d85e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1645034512) (dependencies . ("base" "syndicate-classic" "web-server-lib" "rackunit-lib")) (description . "An implementation of W3C WebSub.") (implies . ()) (modules . ((lib "racketmq/protocol.rkt") (lib "racketmq/template.rkt") (lib "racketmq/hub/topic-demand.rkt") (lib "racketmq/hub/websocket.rkt") (lib "racketmq/poke.rkt") (lib "racketmq/hub/static-content.rkt") (lib "racketmq/hub/subscription.rkt") (lib "racketmq/hub.rkt") (lib "racketmq/hub/remote-topic.rkt") (lib "racketmq/private/util.rkt") (lib "racketmq/hub/local-topic.rkt"))) (name . "racketmq") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://git.syndicate-lang.org/syndicate-lang/racketmq-2017.git#main") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "1a764691e735798dd00e5b467bfdf4f16367d85e") (source . "https://git.syndicate-lang.org/syndicate-lang/racketmq-2017.git#main") (source_url . "https://git.syndicate-lang.org/syndicate-lang/racketmq-2017.git#main"))))))) ("racketscript" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript.txt"))) (checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702458) (dependencies . ("base" "racketscript-compiler" "racketscript-extras" "racketscript-doc")) (description . "A lightweight Racket to JavaScript compiler with some batteries included") (implies . ("racketscript-compiler" "racketscript-extras" "racketscript-doc")) (modules . ()) (name . "racketscript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (source . "https://github.com/racketscript/racketscript.git?path=racketscript#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript#master"))))))) ("racketscript-compiler" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-compiler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-compiler.txt"))) (checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702477) (dependencies . ("base" "racket" "typed-racket-lib" "typed-racket-more" "threading" "graph-lib" "anaphoric" "base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "A Racket to JavaScript compiler") (implies . ()) (modules . ((lib "racketscript/compiler/runtime/lib.rkt") (lib "racketscript/compiler/runtime/runtime.rkt") (lib "racketscript/compiler/main.rkt") (lib "racketscript/compiler/il-analyze.rkt") (lib "racketscript/compiler/ident.rkt") (lib "racketscript/compiler/runtime/core.rkt") (lib "racketscript/compiler/runtime/syntax.rkt") (lib "racketscript/compiler/environment.rkt") (lib "racketscript/compiler/config.rkt") (lib "racketscript/compiler/moddeps.rkt") (lib "racketscript/compiler/runtime/read.rkt") (lib "racketscript/compiler/absyn.rkt") (lib "racketscript/compiler/assembler.rkt") (lib "racketscript/compiler/runtime/futures.rkt") (lib "racketscript/compiler/runtime/extfl.rkt") (lib "racketscript/browser.rkt") (lib "racketscript/compiler/transform.rkt") (lib "racketscript/compiler/global.rkt") (lib "racketscript/compiler/runtime/flfxnum.rkt") (lib "racketscript/boot/lang/private/interop.rkt") (lib "racketscript/compiler/stx-utils.rkt") (lib "racketscript/compiler/runtime/unsafe.rkt") (lib "racketscript/compiler/runtime/linklet-primitive.rkt") (lib "racketscript/compiler/runtime/utils.rkt") (lib "racketscript/compiler/runtime/network.rkt") (lib "racketscript/base/main.rkt") (lib "racketscript/compiler/logging.rkt") (lib "racketscript/compiler/runtime/place-struct.rkt") (lib "racketscript/compiler/runtime/kernel.rkt") (lib "racketscript/private/interop.rkt") (lib "racketscript/compiler/runtime/paramz.rkt") (lib "racketscript/main.rkt") (lib "racketscript/compiler/runtime/place.rkt") (lib "racketscript/base.rkt") (lib "racketscript/interop.rkt") (lib "racketscript/compiler/case-lambda.rkt") (lib "racketscript/boot.rkt") (lib "racketscript/compiler/util-untyped.rkt") (lib "racketscript/compiler/il.rkt") (lib "racketscript/compiler/runtime/builtin.rkt") (lib "racketscript/compiler/runtime/boot.rkt") (lib "racketscript/boot/lang/reader.rkt") (lib "racketscript/compiler/language.rkt") (lib "racketscript/compiler/expand.rkt") (lib "racketscript/compiler/runtime/main.rkt") (lib "racketscript/base/lang/reader.rkt") (lib "racketscript/compiler/util.rkt") (lib "racketscript/compiler/runtime/foreign.rkt"))) (name . "racketscript-compiler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master"))))))) ("racketscript-doc" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racketscript" "doc/racketscript@racketscript-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-doc.txt"))) (checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1626156941) (dependencies . ("base" "racket-doc" "scribble-lib" "scribble-enhanced" "racketscript-compiler")) (description . "Documentation for \"racketscript\".") (implies . ()) (modules . ((lib "racketscript/scribblings/racketscript.scrbl") (lib "racketscript/scribblings/ffi.scrbl") (lib "racketscript/scribblings/start.scrbl"))) (name . "racketscript-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master"))))))) ("racketscript-extras" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-extras.txt"))) (checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702496) (dependencies . ("base" "racket" "racketscript-compiler" "rackunit-lib")) (description . "Goodies for RacketScript") (implies . ()) (modules . ((lib "racketscript/private/jscommon.rkt") (lib "racketscript/htdp/universe.rkt") (lib "racketscript/htdp/image.rkt") (lib "racketscript/htdp/private/color.rkt"))) (name . "racketscript-extras") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (big-bang . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master") (tags . ("big-bang" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "11400fdd9d11541e7dd40c536c015677a7fa4181") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master"))))))) ("racketui" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racketui" "doc/racketui@racketui/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketui.txt") (test-failure-log . "server/built/test-fail/racketui.txt") (test-success-log . #f))) (checksum . "045e0e647439623397cdf67e8e045ec7aa5e2def") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "srfi-lite-lib" "web-server-lib" "racket-doc" "scribble-lib")) (description . "Automated web forms UI generator (especially for HtDP)") (implies . ()) (modules . ((lib "racketui/tests/tfield-tests.rkt") (lib "racketui/bsl-tests/web-file-size-mixed-struct.rkt") (lib "racketui/bsl-tests/longest-list-str.rkt") (lib "racketui/bsl-tests/blood-test-2list.rkt") (lib "racketui/bsl-tests/grades-average-list-mixed.rkt") (lib "racketui/main.rkt") (lib "racketui/bsl-tests/reverser-file-io.rkt") (lib "racketui/bsl-tests/genetics-list-struct-contain.rkt") (lib "racketui/bsl-tests/counter-change-img.rkt") (lib "racketui/bsl-tests/target-img.rkt") (lib "racketui/common.rkt") (lib "racketui/render.rkt") (lib "racketui/web.rkt") (lib "racketui/tests/syntax-tests.rkt") (lib "racketui/syntax.rkt") (lib "racketui/bsl-tests/hello.rkt") (lib "racketui/scribblings/racketui.scrbl") (lib "racketui/bsl-tests/caesar-file.rkt") (lib "racketui/tfield.rkt") (lib "racketui/bsl-tests/dish-order-cost-struct.rkt") (lib "racketui/save.rkt") (lib "racketui/bsl-tests/all-bigger-2list.rkt") (lib "racketui/tests/web-tests.rkt") (lib "racketui/web-launch.rkt") (lib "racketui/bsl-tests/acronym-list-str.rkt") (lib "racketui/bsl-tests/total-sales-seats-matrix.rkt") (lib "racketui/bsl-tests/clock-img.rkt") (lib "racketui/tests/save-tests.rkt") (lib "racketui/bsl-tests/wgt-on-moon-simple.rkt"))) (name . "racketui") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/nadeemabdulhamid/racketui/tree/master") (tags . ("2htdp" "web")) (versions . #hash((default . #hasheq((checksum . "045e0e647439623397cdf67e8e045ec7aa5e2def") (source . "git://github.com/nadeemabdulhamid/racketui") (source_url . "http://github.com/nadeemabdulhamid/racketui/tree/master"))))))) ("rackjure" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackjure" "doc/rackjure@rackjure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackjure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackjure.txt"))) (checksum . "62b210b0544c9660cac41b2b8c298b364e73cbee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "threading-lib" "rackunit-lib" "racket-doc" "sandbox-lib" "scribble-lib" "threading-doc")) (description . "Some Clojure-inspired idioms.") (implies . ()) (modules . ((lib "rackjure/lang/reader.rkt") (lib "rackjure/egal.rkt") (lib "rackjure/bench.rkt") (lib "rackjure/lambda-reader.rkt") (lib "rackjure/app.rkt") (lib "rackjure/alist.rkt") (lib "rackjure/utils.rkt") (lib "rackjure/conditionals.rkt") (lib "rackjure/rackjure.scrbl") (lib "rackjure/test.rkt") (lib "rackjure/base/lang/reader.rkt") (lib "rackjure/threading.rkt") (lib "rackjure/lang/runtime-config.rkt") (lib "rackjure/main.rkt") (lib "rackjure/check-expansion.rkt") (lib "rackjure/base.rkt") (lib "rackjure/str.rkt") (lib "rackjure/lang/language-info.rkt") (lib "rackjure/rackjure.rkt") (lib "rackjure/dict.rkt"))) (name . "rackjure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/greghendershott/rackjure/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "62b210b0544c9660cac41b2b8c298b364e73cbee") (source . "github://github.com/greghendershott/rackjure/master") (source_url . "http://github.com/greghendershott/rackjure/tree/master"))))))) ("rackpgmp" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "perflinty" "doc/perflinty@rackpgmp/index.html") ("main" "pgmp" "doc/pgmp@rackpgmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpgmp.txt") (test-failure-log . "server/built/test-fail/rackpgmp.txt") (test-success-log . #f))) (checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "errortrace-doc" "scribble-lib" "sandbox-lib" "errortrace-lib" "rackunit-lib" "r6rs-lib")) (description . "A library for profile-guided meta-programming") (implies . ()) (modules . ((lib "perflinty/docs/perflinty-auto.scrbl") (lib "perflinty/docs/perflinty.scrbl") (lib "perflinty/vector.rkt") (lib "tests/exclusive-cond-test.rkt") (lib "tests/class-test.rkt") (lib "tests/perflinty-vector.rkt") (lib "pgmp/docs/pgmp.scrbl") (lib "pgmp/pgmp.rkt") (lib "perflinty/auto.rkt") (lib "tests/run.rkt") (lib "perflinty/docs/perflinty-list.scrbl") (lib "examples/my-first-pgmp.rkt") (lib "tests/case-test.rkt") (lib "perflinty/list.rkt") (lib "perflinty/docs/perflinty-vector.scrbl") (lib "examples/exclusive-cond.rkt") (lib "pgmp/main.rkt") (lib "examples/class.rkt") (lib "pgmp/exclusive-cond.rkt") (lib "tests/perflinty-list.rkt") (lib "pgmp/api/exact.rkt") (lib "pgmp/case.rkt") (lib "tests/perflinty-auto.rkt") (lib "pgmp/api/utils.rkt"))) (name . "rackpgmp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (PGO . #t) (author:wjb@williamjbowman.com . #t) (profiling . #t) (ring:1 . #t))) (source . "http://github.com/wilbowma/pgmp/tree/master?path=rackpgmp") (tags . ("PGO" "profiling")) (versions . #hash((default . #hasheq((checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (source . "git://github.com/wilbowma/pgmp?path=rackpgmp") (source_url . "http://github.com/wilbowma/pgmp/tree/master?path=rackpgmp"))))))) ("rackpropagator" . #hasheq((author . "o.strickson@gmail.com") (authors . ("o.strickson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpropagator.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackpropagator.txt"))) (checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641765526) (dependencies . ("rackpropagator-lib" "rackpropagator-doc")) (description . "Reverse-mode automatic differentiation") (implies . ("rackpropagator-lib" "rackpropagator-doc")) (modules . ()) (name . "rackpropagator") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:o.strickson@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator") (source_url . "https://github.com/ots22/rackpropagator.git?path=rackpropagator"))))))) ("rackpropagator-doc" . #hasheq((author . "o.strickson@gmail.com") (authors . ("o.strickson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackpropagator" "doc/rackpropagator@rackpropagator-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpropagator-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackpropagator-doc.txt"))) (checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641847119) (dependencies . ("base" "racket-doc" "math-doc" "math-lib" "scribble-lib" "scribble-math" "rackpropagator-lib")) (description . "Rackpropagator documentation") (implies . ()) (modules . ((lib "rackpropagator/scribblings/anf.scrbl") (lib "rackpropagator/scribblings/derivative.scrbl") (lib "rackpropagator/scribblings/supported-language.scrbl") (lib "rackpropagator/scribblings/bibliography.rkt") (lib "rackpropagator/scribblings/builtins.scrbl") (lib "rackpropagator/scribblings/common.rkt") (lib "rackpropagator/scribblings/limitations.scrbl") (lib "rackpropagator/scribblings/prim-definition.scrbl") (lib "rackpropagator/scribblings/linear.scrbl") (lib "rackpropagator/scribblings/rackpropagator.scrbl"))) (name . "rackpropagator-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:o.strickson@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-doc") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-doc") (source_url . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-doc"))))))) ("rackpropagator-lib" . #hasheq((author . "o.strickson@gmail.com") (authors . ("o.strickson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpropagator-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackpropagator-lib.txt"))) (checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641847050) (dependencies . ("base" "math-lib")) (description . "Reverse-mode automatic differentiation (implementation)") (implies . ()) (modules . ((lib "rackpropagator/matrix.rkt") (lib "rackpropagator/sum-let.rkt") (lib "rackpropagator/builtins.rkt") (lib "rackpropagator/derivative.rkt") (lib "rackpropagator/prim-definition.rkt") (lib "rackpropagator/anf.rkt") (lib "rackpropagator/reverse-transform.rkt") (lib "rackpropagator/matrix-wrappers.rkt") (lib "rackpropagator/util.rkt") (lib "rackpropagator/main.rkt") (lib "rackpropagator/primitives.rkt"))) (name . "rackpropagator-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:o.strickson@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-lib") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-lib") (source_url . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-lib"))))))) ("rackpropagator-test" . #hasheq((author . "o.strickson@gmail.com") (authors . ("o.strickson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpropagator-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackpropagator-test.txt"))) (checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641847206) (dependencies . ("base" "rackpropagator-lib" "rackunit-lib")) (description . "Rackpropagator tests") (implies . ()) (modules . ((lib "rackpropagator/tests/reverse-transform.rkt") (lib "rackpropagator/tests/derivative.rkt") (lib "rackpropagator/tests/sum-let.rkt") (lib "rackpropagator/tests/anf.rkt"))) (name . "rackpropagator-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:o.strickson@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-test") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "5c5367985bf5fe20e8dd6e9da35792a203c296d1") (source . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-test") (source_url . "https://github.com/ots22/rackpropagator.git?path=rackpropagator-test"))))))) ("rackterm" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackterm.txt"))) (checksum . "5d94185dea482974a1cf66099380bede6c2ce501") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1608151830) (dependencies . ("base" "draw-lib" "gui-lib" "rackunit-lib" "scheme-lib")) (description . "Terminal emulator library (currently unstable and undocumented) and simple frontend.  Run racket -l rackterm/xterm to run.") (implies . ()) (modules . ((lib "rackterm/private/shell-trampoline.rkt") (lib "rackterm/private/cell.rkt") (lib "rackterm/private/fun-terminal.rkt") (lib "rackterm/private/terminal-canvas.rkt") (lib "rackterm/private/term-key-event.rkt") (lib "rackterm/private/console-code-parse.rkt") (lib "rackterm/xterm.rkt") (lib "rackterm/private/256color.rkt") (lib "rackterm/private/terminal.rkt") (lib "rackterm/private/pty.rkt"))) (name . "rackterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/willghatch/rackterm.git") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "5d94185dea482974a1cf66099380bede6c2ce501") (source . "https://github.com/willghatch/rackterm.git") (source_url . "https://github.com/willghatch/rackterm.git"))))))) ("rackunit-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-abbrevs" "doc/rackunit-abbrevs@rackunit-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-abbrevs.txt"))) (checksum . "83091b86a37cb8498d1b1d1645cf45529ebe458c") (checksum-error . #f) (collection . "rackunit-abbrevs") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Iterated RackUnit tests") (implies . ()) (modules . ((lib "rackunit-abbrevs/scribblings/rackunit-abbrevs.scrbl") (lib "rackunit-abbrevs/private/error-reporting.rkt") (lib "rackunit-abbrevs/main.rkt") (lib "rackunit-abbrevs/private/test-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/typed.rkt") (lib "rackunit-abbrevs/private/rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/test-syntax-error.rkt") (lib "rackunit-abbrevs/private/typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/test-typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/error-reporting.rkt"))) (name . "rackunit-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/bennn/rackunit-abbrevs/tree/master") (tags . ("rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "83091b86a37cb8498d1b1d1645cf45529ebe458c") (source . "git://github.com/bennn/rackunit-abbrevs") (source_url . "http://github.com/bennn/rackunit-abbrevs/tree/master"))))))) ("rackunit-chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-chk" "doc/rackunit-chk@rackunit-chk/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-chk.txt"))) (checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "a short hand for writing rackunit tests") (implies . ()) (modules . ((lib "rackunit/chk.rkt") (lib "rackunit/chk/rackunit-chk.scrbl"))) (name . "rackunit-chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jeapostrophe/rackunit-chk/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (source . "git://github.com/jeapostrophe/rackunit-chk") (source_url . "http://github.com/jeapostrophe/rackunit-chk/tree/master"))))))) ("rackunit-fancy-runner" . #hasheq((author . "c2d7fa@gmail.com") (authors . ("c2d7fa@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-fancy-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-fancy-runner.txt"))) (checksum . "c367fa93ed8a2daad4aa12cc9e947661d169dab6") (checksum-error . #f) (collection . "rackunit-fancy-runner") (conflicts . ()) (date-added . 1572190847) (dependencies . ("base" "rackunit-lib")) (description . "Command-line RackUnit test runner with fancy output") (implies . ()) (modules . ((lib "rackunit-fancy-runner/main.rkt"))) (name . "rackunit-fancy-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:c2d7fa@gmail.com . #t) (rackunit . #t) (ring:1 . #t))) (source . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6") (tags . ("rackunit")) (versions . #hash((default . #hasheq((checksum . "c367fa93ed8a2daad4aa12cc9e947661d169dab6") (source . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6") (source_url . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6"))))))) ("rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-grade" "doc/rackunit-grade@rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-grade.txt") (test-failure-log . "server/built/test-fail/rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Simple library and raco command for grading homework against a test file") (implies . ()) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl"))) (name . "rackunit-grade") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (homework . #t) (rackunit . #t) (raco . #t) (ring:1 . #t) (teaching . #t))) (source . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master") (tags . ("homework" "rackunit" "raco" "teaching")) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("rackunit-macrotypes-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-macrotypes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-macrotypes-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "macrotypes-lib")) (description . "rackunit extension for use with Turnstile lang") (implies . ()) (modules . ((lib "rackunit/macrotypes.rkt") (lib "rackunit/rackunit-typechecking.rkt") (lib "rackunit/turnstile.rkt") (lib "rackunit/turnstile+.rkt"))) (name . "rackunit-macrotypes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib"))))))) ("rackunit-spec" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-spec" "doc/rackunit-spec@rackunit-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-spec.txt"))) (checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (checksum-error . #f) (collection . "rackunit") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "BDD test helpers for rackunit") (implies . ()) (modules . ((lib "rackunit/spec.rkt") (lib "rackunit/scribblings/rackunit-spec.scrbl"))) (name . "rackunit-spec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/lexi-lambda/rackunit-spec/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (source . "git://github.com/lexi-lambda/rackunit-spec") (source_url . "http://github.com/lexi-lambda/rackunit-spec/tree/master"))))))) ("racl" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racl.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "sandbox-lib" "rackunit-lib")) (description . "Racket bindings for NaCl, a cryptographic library.") (implies . ()) (modules . ((lib "racl/tcp.rkt") (lib "racl/test-main.rkt") (lib "racl/ffi-lib.rkt") (lib "racl/keys.rkt") (lib "racl/port.rkt") (lib "racl/session.rkt") (lib "racl/wrapper.rkt") (lib "racl/main.rkt") (lib "racl/spki-sexp.rkt") (lib "racl/examples/repl-server.rkt") (lib "racl/private/install.rkt") (lib "racl/examples/repl-client.rkt"))) (name . "racl") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racl/tree/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (source . "github://github.com/tonyg/racl/master") (source_url . "http://github.com/tonyg/racl/tree/master"))))))) ("raco-bug" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-bug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-bug.txt"))) (checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (checksum-error . #f) (collection . "raco-bug") (conflicts . ()) (dependencies . ("base" "drracket")) (description . "Submit bug reports") (implies . ()) (modules . ((lib "raco-bug/main.rkt"))) (name . "raco-bug") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bug . #t) (ring:1 . #t))) (source . "http://github.com/samth/raco-bug/tree/master") (tags . ("bug")) (versions . #hash((default . #hasheq((checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (source . "git://github.com/samth/raco-bug") (source_url . "http://github.com/samth/raco-bug/tree/master"))))))) ("raco-cross" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-cross.txt"))) (checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1620787639) (dependencies . ("raco-cross-lib" "raco-cross-doc")) (description . "A raco command to drive cross compilation.") (implies . ("raco-cross-lib" "raco-cross-doc")) (modules . ()) (name . "raco-cross") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (source . "https://github.com/racket/raco-cross.git?path=raco-cross") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross"))))))) ("raco-cross-doc" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-cross" "doc/raco-cross@raco-cross-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-cross-doc.txt"))) (checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (checksum-error . #f) (collection . "raco") (conflicts . ()) (date-added . 1624115972) (dependencies . ("base" "raco-cross-lib" "racket-doc" "scribble-lib")) (description . "documentation part of \"raco-cross\"") (implies . ()) (modules . ((lib "raco/private/cross/raco-cross.scrbl"))) (name . "raco-cross-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross-doc") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (source . "https://github.com/racket/raco-cross.git?path=raco-cross-doc") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross-doc"))))))) ("raco-cross-lib" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-cross-lib.txt"))) (checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (checksum-error . #f) (collection . "raco") (conflicts . ()) (date-added . 1624115840) (dependencies . ("base")) (description . "implementation (no documentation) part of \"raco-cross\"") (implies . ()) (modules . ((lib "raco/private/cross/xpatch.rkt") (lib "raco/private/cross/native.rkt") (lib "raco/private/cross/can-build.rkt") (lib "raco/private/cross/default.rkt") (lib "raco/private/cross/browse.rkt") (lib "raco/private/cross/build.rkt") (lib "raco/private/cross/command.rkt") (lib "raco/private/cross/remove.rkt") (lib "raco/private/cross/setup.rkt") (lib "raco/private/cross/url.rkt") (lib "raco/private/cross/platform.rkt") (lib "raco/private/cross/download.rkt") (lib "raco/private/cross/workspace.rkt") (lib "raco/cross.rkt") (lib "raco/private/cross/host-racket.rkt") (lib "raco/private/cross/run.rkt"))) (name . "raco-cross-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross-lib") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "80e6acfee34aef252cad0f2f23eb3ee2f25aaf63") (source . "https://github.com/racket/raco-cross.git?path=raco-cross-lib") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross-lib"))))))) ("raco-exe-multitarget" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-exe-multitarget.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-exe-multitarget.txt"))) (checksum . "64f383a6e7f2b85797e2581cba39d1b8395dcd89") (checksum-error . #f) (collection . "raco-exe-multitarget") (conflicts . ()) (date-added . 1641064998) (dependencies . ("base" "raco-cross-lib" "rackunit-lib" "al2-test-runner")) (description . "Create standalone binaries for multiple target platforms") (implies . ()) (modules . ((lib "raco-exe-multitarget/scribblings/raco-exe-multitarget.scrbl") (lib "raco-exe-multitarget/main.rkt"))) (name . "raco-exe-multitarget") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sschwarzer@sschwarzer.net . #t) (binary . #t) (raco . #t) (raco-cross . #t) (ring:1 . #t) (standalone . #t))) (source . "git+https://git.sr.ht/~sschwarzer/raco-exe-multitarget#v0.5.0") (tags . ("binary" "raco" "raco-cross" "standalone")) (versions . #hash((default . #hasheq((checksum . "64f383a6e7f2b85797e2581cba39d1b8395dcd89") (source . "git+https://git.sr.ht/~sschwarzer/raco-exe-multitarget#v0.5.0") (source_url . "git+https://git.sr.ht/~sschwarzer/raco-exe-multitarget#v0.5.0"))))))) ("raco-find-collection" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-fc" "doc/raco-fc@raco-find-collection/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-find-collection.txt") (test-failure-log . "server/built/test-fail/raco-find-collection.txt") (test-success-log . #f))) (checksum . "7ea60c39b48ac665da7673db53420ec57a3253bd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compiler-lib" "rackunit-lib" "scribble-lib")) (description . "A script to find collections.") (implies . ()) (modules . ((lib "find-collection/run.rkt") (lib "find-collection/raco-fc.scrbl") (lib "find-collection/find-collection.rkt"))) (name . "raco-find-collection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (search . #t) (tools . #t))) (source . "http://github.com/takikawa/raco-find-collection/tree/master") (tags . ("search" "tools")) (versions . #hash((default . #hasheq((checksum . "7ea60c39b48ac665da7673db53420ec57a3253bd") (source . "git://github.com/takikawa/raco-find-collection") (source_url . "http://github.com/takikawa/raco-find-collection/tree/master"))))))) ("raco-format" . #hasheq((author . "dan.hillier.anderson@gmail.com") (authors . ("dan.hillier.anderson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-format.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-format.txt"))) (checksum . "05b167809a891a35d9533f31cf95041860bc80db") (checksum-error . #f) (collection . "raco-format") (conflicts . ()) (date-added . 1622226732) (dependencies . ("base" "threading-lib" "gui-lib")) (description . "Format racket source files") (implies . ()) (modules . ((lib "raco-format/main.rkt"))) (name . "raco-format") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dan.hillier.anderson@gmail.com . #t) (cli . #t) (format . #t) (indent . #t) (raco . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/mxork/raco-format.git#main") (tags . ("cli" "format" "indent" "raco" "tools")) (versions . #hash((default . #hasheq((checksum . "05b167809a891a35d9533f31cf95041860bc80db") (source . "https://github.com/mxork/raco-format.git#main") (source_url . "https://github.com/mxork/raco-format.git#main"))))))) ("raco-invoke" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "invoke-doc" "doc/invoke-doc@raco-invoke/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-invoke.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-invoke.txt"))) (checksum . "418eb21a7f2d2fea3aeaf0b7179532800d298d1c") (checksum-error . #f) (collection . "raco") (conflicts . ()) (date-added . 1641978354) (dependencies . ("base" "base" "racket-doc" "scribble-lib")) (description . "Invoke raco commands from within Racket in a way that cooperates with raco-cross.") (implies . ()) (modules . ((lib "raco/invoke.rkt") (lib "raco/invoke-doc.scrbl"))) (name . "raco-invoke") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (raco . #t) (raco-cross . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/raco-invoke.git") (tags . ("raco" "raco-cross")) (versions . #hash((default . #hasheq((checksum . "418eb21a7f2d2fea3aeaf0b7179532800d298d1c") (source . "https://github.com/Bogdanp/raco-invoke.git") (source_url . "https://github.com/Bogdanp/raco-invoke.git"))))))) ("raco-macro-step" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-macro-step.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-macro-step.txt"))) (checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (checksum-error . #f) (collection . "raco-macro-step") (conflicts . ()) (dependencies . ("macro-debugger" "base")) (description . "Run the macro stepper from the command line") (implies . ()) (modules . ((lib "raco-macro-step/main.rkt"))) (name . "raco-macro-step") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (macro . #t) (raco . #t) (ring:1 . #t))) (source . "http://github.com/samth/raco-macro-step/tree/master") (tags . ("macro" "raco")) (versions . #hash((default . #hasheq((checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (source . "git://github.com/samth/raco-macro-step") (source_url . "http://github.com/samth/raco-macro-step/tree/master"))))))) ("raco-pkg-env" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-pkg-env" "doc/raco-pkg-env@raco-pkg-env/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-pkg-env.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-pkg-env.txt"))) (checksum . "fa11a88d5056ca7552dbb5e8b19dacfdf793a177") (checksum-error . #f) (collection . "raco-pkg-env") (conflicts . ()) (date-added . 1618351527) (dependencies . ("base" "raco-pkg-env-lib" "scribble-lib")) (description . "virtualenv like tool for Racket") (implies . ("raco-pkg-env-lib")) (modules . ((lib "raco-pkg-env/scribblings/raco-pkg-env.scrbl"))) (name . "raco-pkg-env") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "fa11a88d5056ca7552dbb5e8b19dacfdf793a177") (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release") (source_url . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release"))))))) ("raco-pkg-env-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-pkg-env-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-pkg-env-lib.txt"))) (checksum . "fa11a88d5056ca7552dbb5e8b19dacfdf793a177") (checksum-error . #f) (collection . "raco-pkg-env") (conflicts . ()) (date-added . 1618351486) (dependencies . ("base" "at-exp-lib")) (description . "virtualenv like tool for Racket") (implies . ()) (modules . ((lib "raco-pkg-env/main.rkt"))) (name . "raco-pkg-env-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "fa11a88d5056ca7552dbb5e8b19dacfdf793a177") (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release") (source_url . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release"))))))) ("raco-run" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-run" "doc/raco-run@raco-run/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-run.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-run.txt"))) (checksum . "a57165d1ba73436476cd9466b74dc1ff71d6b19a") (checksum-error . #f) (collection . "raco-run") (conflicts . ()) (date-added . 1603685884) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Run submodules from the command line") (implies . ()) (modules . ((lib "raco-run/scribblings/raco-run.scrbl") (lib "raco-run/main.rkt"))) (name . "raco-run") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-run.git#main") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "a57165d1ba73436476cd9466b74dc1ff71d6b19a") (source . "https://github.com/samdphillips/raco-run.git#main") (source_url . "https://github.com/samdphillips/raco-run.git#main"))))))) ("raco-static-web" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-static-web.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-static-web.txt"))) (checksum . "436d03a671f35e78695edc3711127880174c83a1") (checksum-error . #f) (collection . "raco-static-web") (conflicts . ()) (date-added . 1635886423) (dependencies . ("base" "web-server-lib" "mime-type-lib")) (description . "Serve some static files from raco") (implies . ()) (modules . ((lib "raco-static-web/main.rkt"))) (name . "raco-static-web") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/samdphillips/raco-static-web.git#release") (tags . ("raco" "web")) (versions . #hash((default . #hasheq((checksum . "436d03a671f35e78695edc3711127880174c83a1") (source . "https://github.com/samdphillips/raco-static-web.git#release") (source_url . "https://github.com/samdphillips/raco-static-web.git#release"))))))) ("raco-watch" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-watch" "doc/raco-watch@raco-watch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-watch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-watch.txt"))) (checksum . "53d21037b19dd56fd191b264aede919fb5e52bff") (checksum-error . #f) (collection . "raco-watch") (conflicts . ()) (date-added . 1609739727) (dependencies . ("base" "file-watchers" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "\r\nAn extension of raco command that watching files and re-executing subcommand ") (implies . ()) (modules . ((lib "raco-watch/scribblings/raco-watch.scrbl") (lib "raco-watch/main.rkt"))) (name . "raco-watch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/raco-watch.git#develop") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "53d21037b19dd56fd191b264aede919fb5e52bff") (source . "https://github.com/dannypsnl/raco-watch.git#develop") (source_url . "https://github.com/dannypsnl/raco-watch.git#develop"))))))) ("racquel" . #hasheq((author . "brown131@yahoo.com") (authors . ("brown131@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racquel" "doc/racquel@racquel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racquel.txt") (test-failure-log . "server/built/test-fail/racquel.txt") (test-success-log . #f))) (checksum . "e5ae8cf5a848be390596122cd43f777efa683549") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "rackunit-lib" "racket-doc")) (description . "Racquel is an object/relational mapper for Racket.") (implies . ()) (modules . ((lib "racquel/racquel.scrbl") (lib "racquel/doc/racquel.scrbl") (lib "racquel/keywords.rkt") (lib "racquel/stxclass.rkt") (lib "racquel/metadata.rkt") (lib "racquel/util.rkt") (lib "racquel/test.rkt") (lib "racquel/main.rkt") (lib "racquel/schema.rkt") (lib "racquel/test-chinook.rkt"))) (name . "racquel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:brown131@yahoo.com . #t) (db . #t) (ring:1 . #t))) (source . "http://github.com/brown131/racquel/tree/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "e5ae8cf5a848be390596122cd43f777efa683549") (source . "git://github.com/brown131/racquel") (source_url . "http://github.com/brown131/racquel/tree/master"))))))) ("racr" . #hasheq((author . "eeide@cs.utah.edu") (authors . ("eeide@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racr" "doc/racr@racr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racr.txt"))) (checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (checksum-error . #f) (collection . "racr") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A Racket port of RACR, a library for reference attribute grammar controlled rewriting.") (implies . ()) (modules . ((lib "racr/main.rkt") (lib "racr/testing.rkt") (lib "racr/core.rkt") (lib "racr/scribblings/racr.scrbl"))) (name . "racr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eeide@cs.utah.edu . #t) (ring:1 . #t))) (source . "http://github.com/eeide/racr/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (source . "git://github.com/eeide/racr") (source_url . "http://github.com/eeide/racr/tree/master"))))))) ("ragg" . #hasheq((author . "mb@mbtype.com clements@racket-lang.org dyoo@hashcollision.org") (authors . ("mb@mbtype.com" "clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ragg" "doc/ragg@ragg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ragg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ragg.txt"))) (checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "rackunit-lib" "python-tokenizer" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Given a grammar in EBNF, `ragg` produces a parser that generates a syntax object with source locations. This package is maintained for backward compatibility. `brag` is an updated version.") (implies . ()) (modules . ((lib "ragg/private/internal-support.rkt") (lib "ragg/rules/lexer.rkt") (lib "ragg/examples/statlist-grammar.rkt") (lib "ragg/examples/simple-line-drawing/grammar.rkt") (lib "ragg/test/test-wordy.rkt") (lib "ragg/ragg.scrbl") (lib "ragg/examples/0n1n.rkt") (lib "ragg/rules/runtime.rkt") (lib "ragg/test/test-simple-arithmetic-grammar.rkt") (lib "ragg/test/test-simple-line-drawing.rkt") (lib "ragg/examples/simple-line-drawing/semantics.rkt") (lib "ragg/test/test-baby-json.rkt") (lib "ragg/rules/rule-structs.rkt") (lib "ragg/examples/simple-line-drawing.rkt") (lib "ragg/examples/01-equal.rkt") (lib "ragg/rules/stx.rkt") (lib "ragg/test/test-lexer.rkt") (lib "ragg/codegen/codegen.rkt") (lib "ragg/support.rkt") (lib "ragg/examples/simple-line-drawing/interpret.rkt") (lib "ragg/examples/simple-line-drawing/lexer.rkt") (lib "ragg/examples/wordy.rkt") (lib "ragg/test/weird-grammar.rkt") (lib "ragg/test/test-weird-grammar.rkt") (lib "ragg/test/test-old-token.rkt") (lib "ragg/test/test-0n1n.rkt") (lib "ragg/examples/python-grammar.rkt") (lib "ragg/examples/0n1.rkt") (lib "ragg/examples/bnf.rkt") (lib "ragg/codegen/flatten.rkt") (lib "ragg/test/test-0n1.rkt") (lib "ragg/examples/baby-json.rkt") (lib "ragg/examples/simple-line-drawing/examples/letter-i.rkt") (lib "ragg/test/test-all.rkt") (lib "ragg/examples/lua-parser.rkt") (lib "ragg/test/test-errors.rkt") (lib "ragg/test/exercise-python-grammar.rkt") (lib "ragg/codegen/lang/reader.rkt") (lib "ragg/test/test-parser.rkt") (lib "ragg/codegen/runtime.rkt") (lib "ragg/codegen/satisfaction.rkt") (lib "ragg/examples/simple-arithmetic-grammar.rkt") (lib "ragg/test/test-01-equal.rkt") (lib "ragg/rules/parser.rkt") (lib "ragg/test/test-flatten.rkt") (lib "ragg/examples/nested-word-list.rkt") (lib "ragg/rules/stx-types.rkt") (lib "ragg/codegen/sexp-based-lang.rkt") (lib "ragg/cfg-parser/cfg-parser.rkt") (lib "ragg/lang/reader.rkt") (lib "ragg/examples/simple-line-drawing/lang/reader.rkt"))) (name . "ragg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (author:mb@mbtype.com . #t) (legacy . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/ragg.git") (tags . ("legacy" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (source . "https://github.com/jbclements/ragg.git") (source_url . "https://github.com/jbclements/ragg.git"))))))) ("ralist" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ralist" "doc/ralist@ralist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ralist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ralist.txt"))) (checksum . "8f830a01463c547d2588671e76202cfe566a3fb1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Purely Functional Random Access Lists") (implies . ()) (modules . ((lib "data/ralist/scribblings/run-tests.scrbl") (lib "data/ralist/contract.rkt") (lib "data/ralist/tests/freq-count.rkt") (lib "data/ralist/scribblings/run-benchmarks.scrbl") (lib "data/ralist/tests/tree.rkt") (lib "data/ralist/scribblings/ralist.scrbl") (lib "data/ralist/benchmarks/ra-list.rkt") (lib "data/ralist/run-benchmarks.rkt") (lib "data/ralist/tests/garden-fence.rkt") (lib "data/ralist/scribblings/bindings.scrbl") (lib "data/ralist/tests/private/ra-list-contracted.rkt") (lib "data/ralist.rkt") (lib "data/ralist/benchmarks/garden-fence.rkt") (lib "data/ralist/tests/private/ra-list-uncontracted.rkt") (lib "data/ralist/run-tests.rkt") (lib "data/ralist/tests/ra-list.rkt") (lib "data/ralist/benchmarks/freq-count.rkt") (lib "data/ralist/scribblings/contract.scrbl") (lib "data/ralist/benchmarks/contract.rkt"))) (name . "ralist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/dvanhorn/ralist/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "8f830a01463c547d2588671e76202cfe566a3fb1") (source . "github://github.com/dvanhorn/ralist/master") (source_url . "http://github.com/dvanhorn/ralist/tree/master"))))))) ("ranked-programming" . #hasheq((author . "tjitze@gmail.com") (authors . ("tjitze@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ranked-programming" "doc/ranked-programming@ranked-programming/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ranked-programming.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ranked-programming.txt"))) (checksum . "5503146a8ac9779d949905b778f0d9fd6d8c0d1a") (checksum-error . #f) (collection . "ranked-programming") (conflicts . ()) (date-added . 1557931225) (dependencies . ("sandbox-lib" "scribble-lib" "srfi-lite-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library that provides ranked programming functionality in Racket.") (implies . ()) (modules . ((lib "ranked-programming/examples/ranking_network.rkt") (lib "ranked-programming/examples/hidden_markov.rkt") (lib "ranked-programming/examples/boolean_circuit.rkt") (lib "ranked-programming/examples/ranked_procedure_call.rkt") (lib "ranked-programming/examples/localisation.rkt") (lib "ranked-programming/examples/ranked_let.rkt") (lib "ranked-programming/main.rkt") (lib "ranked-programming/scribblings/ranked-programming.scrbl") (lib "ranked-programming/examples/spelling_correction.rkt") (lib "ranked-programming/rp-core.rkt") (lib "ranked-programming/rp-api.rkt") (lib "ranked-programming/examples/recursion.rkt") (lib "ranked-programming/rp-test.rkt"))) (name . "ranked-programming") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tjitze@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/tjitze/ranked-programming.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5503146a8ac9779d949905b778f0d9fd6d8c0d1a") (source . "https://github.com/tjitze/ranked-programming.git") (source_url . "https://github.com/tjitze/ranked-programming.git"))))))) ("rascas" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rascas" "doc/rascas@rascas/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rascas.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rascas.txt"))) (checksum . "0d588584da13673e28d8d1276794620c51130c64") (checksum-error . #f) (collection . "rascas") (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "rackunit-lib" "srfi-lite-lib" "plot-gui-lib" "plot-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "data-lib")) (description . "Computer algebra system for Racket. Port of dharmatech/mpl without dependencies.") (implies . ()) (modules . ((lib "rascas/coefficient-gpe.rkt") (lib "rascas/separate-sin-cos.rkt") (lib "rascas/derivative.rkt") (lib "rascas/cos.rkt") (lib "rascas/trig-functions.rkt") (lib "rascas/collect-terms.rkt") (lib "rascas/alge.rkt") (lib "rascas/order-relation.rkt") (lib "rascas/taylor.rkt") (lib "rascas/monomial-gpe.rkt") (lib "rascas/polynomial-gpe.rkt") (lib "rascas/numerator.rkt") (lib "rascas/polynomial-gcd.rkt") (lib "rascas/rational-expand.rkt") (lib "rascas/rational-variables.rkt") (lib "rascas/main.rkt") (lib "rascas/denominator.rkt") (lib "rascas/rational-gre.rkt") (lib "rascas/tests/stress-test-arithmetic.rkt") (lib "rascas/eval-module.rkt") (lib "rascas/contains.rkt") (lib "rascas/substitute.rkt") (lib "rascas/rich-return.rkt") (lib "rascas/quadratic.rkt") (lib "rascas/extended-euclidean-algorithm.rkt") (lib "rascas/polynomial-expansion.rkt") (lib "rascas/infix-parser.rkt") (lib "rascas/scribblings/rascas.scrbl") (lib "rascas/tests/tests.rkt") (lib "rascas/inverse.rkt") (lib "rascas/special-functions.rkt") (lib "rascas/alg-polynomial-division.rkt") (lib "rascas/trig-substitute.rkt") (lib "rascas/expand-trig.rkt") (lib "rascas/tests/derivative.rkt") (lib "rascas/arithmetic.rkt") (lib "rascas/smart-simplify.rkt") (lib "rascas/misc.rkt") (lib "rascas/distribute.rkt") (lib "rascas/partial-fraction-1.rkt") (lib "rascas/algebraic-expand.rkt") (lib "rascas/tests/letstar.rkt") (lib "rascas/factor.rkt") (lib "rascas/examples/plot-derivatives.rkt") (lib "rascas/color-printf.rkt") (lib "rascas/leading-coefficient-gpe.rkt") (lib "rascas/letstar.rkt") (lib "rascas/format.rkt") (lib "rascas/automatic-simplify.rkt") (lib "rascas/rackunit.rkt") (lib "rascas/algorithmic.rkt") (lib "rascas/simplify-trig.rkt") (lib "rascas/alg-polynomial-gcd.rkt") (lib "rascas/sin.rkt") (lib "rascas/rationalize-expression.rkt") (lib "rascas/degree-gpe.rkt") (lib "rascas/variables.rkt") (lib "rascas/polynomial-division.rkt") (lib "rascas/contract-trig.rkt") (lib "rascas/coeff-var-monomial.rkt"))) (name . "rascas") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/rascas.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "0d588584da13673e28d8d1276794620c51130c64") (source . "https://github.com/Metaxal/rascas.git") (source_url . "https://github.com/Metaxal/rascas.git"))))))) ("rash" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rash" "doc/rash@rash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rash.txt"))) (checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151841) (dependencies . ("base" "basedir" "shell-pipeline" "linea" "udelim" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-lib" "readline-lib")) (description . "The Reckless Racket Shell.  For interactions and scripting.") (implies . ()) (modules . ((lib "rash/prompt-helpers/string-style.rkt") (lib "rash/repl.rkt") (lib "rash/private/repl-startup-hint.rkt") (lib "rash/private/cd.rkt") (lib "rash/private/rashrc-lib.rkt") (lib "rash/private/syntax-walk.rkt") (lib "rash/private/help-line-macro.rkt") (lib "rash/private/test/hash-lang-sanity-test.rkt") (lib "rash/private/test/unix-pipe-misc.rkt") (lib "rash/private/top-level-print.rkt") (lib "rash/main.rkt") (lib "rash/private/or-exn.rkt") (lib "rash/private/lang-funcs.rkt") (lib "rash/private/template-escape-detect.rkt") (lib "rash/private/test/empty-test.rkt") (lib "rash/private/drracket-submit-predicate.rkt") (lib "rash/private/repl-startup-hint-db.rkt") (lib "rash/private/test/port-exhaustion-test.rkt") (lib "rash/private/escapable-template.rkt") (lib "rash/private/basic-module-begin.rkt") (lib "rash/prompt-helpers/git-info.rkt") (lib "rash/scribblings/rash.scrbl") (lib "rash/experimental.rkt") (lib "rash/private/option-app.rkt") (lib "rash/private/repl-namespace.rkt"))) (name . "rash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (repl . #t) (ring:1 . #t) (shell . #t) (unix . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=rash") (tags . ("repl" "shell" "unix")) (versions . #hash((default . #hasheq((checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (source . "https://github.com/willghatch/racket-rash.git?path=rash") (source_url . "https://github.com/willghatch/racket-rash.git?path=rash"))))))) ("ratchet" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/ratchet.txt") (docs . (("extract" "manual" "doc/manual@ratchet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ratchet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ratchet.txt"))) (checksum . "6dcd99e9ad43e37feeae41838282ce3b94945ca1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550794102) (dependencies . ("lang-file")) (description . "Toolkit for defining visual languages.") (implies . ()) (modules . ((lib "ratchet/visual-language-maker/gui/widgets/main.rkt") (lib "ratchet/util.rkt") (lib "ratchet/scribblings/manual.scrbl") (lib "ratchet/visual-language-maker/gui/widgets/basic-input-editor.rkt") (lib "ratchet/demos/hello-world/demos/module-demo.rkt") (lib "ratchet/demos/hello-world/main.rkt") (lib "ratchet/visual-language-maker/renderer/main.rkt") (lib "ratchet/demos/hello-world/util.rkt") (lib "ratchet/visual-language-maker/main.rkt") (lib "ratchet/visual-language-maker/base.rkt") (lib "ratchet/launch.rkt") (lib "ratchet/tools/main.rkt") (lib "ratchet/visual-language-maker/tangeables/main.rkt") (lib "ratchet/main.rkt") (lib "ratchet/demos/hello-world/demos/lang-demo.rkt"))) (name . "ratchet") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ratchet.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6dcd99e9ad43e37feeae41838282ce3b94945ca1") (source . "https://github.com/thoughtstem/ratchet.git") (source_url . "https://github.com/thoughtstem/ratchet.git"))))))) ("ratel" . #hasheq((author . "john@nineteeneightd.com") (authors . ("john@nineteeneightd.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/ratel.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ratel.txt") (test-failure-log . "server/built/test-fail/ratel.txt") (test-success-log . #f))) (checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "threading")) (description . "") (implies . ()) (modules . ((lib "ratel/web/actions.rkt") (lib "ratel/commands/suid-helper/mount.rkt") (lib "ratel/suid-helper.rkt") (lib "ratel/ffi/libecryptfs.rkt") (lib "ratel/web/dispatcher.rkt") (lib "ratel/config.rkt") (lib "ratel/commands/show.rkt") (lib "ratel/commands/mount.rkt") (lib "ratel/commands/suid-helper/umount.rkt") (lib "ratel/commands/umount.rkt") (lib "ratel/system.rkt") (lib "ratel/commands/suid-helper/main.rkt") (lib "ratel/ffi/libkeyutils.rkt") (lib "ratel/ffi/libc.rkt") (lib "ratel/commands/register.rkt") (lib "ratel/commands/main.rkt") (lib "ratel/commands/suid-helper/unshare.rkt") (lib "ratel/commands/web.rkt") (lib "ratel/passphrase.rkt") (lib "ratel/web/http.rkt"))) (name . "ratel") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:john@nineteeneightd.com . #t) (ring:1 . #t))) (source . "http://github.com/198d/ratel/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (source . "git://github.com/198d/ratel") (source_url . "http://github.com/198d/ratel/tree/master"))))))) ("raw-string" . #hasheq((author . "cmpitg@gmail.com") (authors . ("cmpitg@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raw-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raw-string.txt"))) (checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Raw string support without at-exp") (implies . ()) (modules . ((lib "raw-string/raw-string/lang/reader-extension.rkt") (lib "raw-string/raw-string/lang/reader.rkt"))) (name . "raw-string") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cmpitg@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/cmpitg/racket-raw-string/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (source . "github://github.com/cmpitg/racket-raw-string/master") (source_url . "http://github.com/cmpitg/racket-raw-string/tree/master"))))))) ("raylib" . #hasheq((author . "benedek.szilvasy@gmail.com") (authors . ("benedek.szilvasy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raylib" "doc/raylib@raylib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raylib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raylib.txt"))) (checksum . "c3af4874d3c50e44cf4a08cc55051d147e2440e3") (checksum-error . #f) (collection . "raylib") (conflicts . ()) (date-added . 1649954749) (dependencies . ("base" "scribble-lib" "racket-doc" "gui-doc" "gui-lib" "net-doc")) (description . "Semi-automatically generated Raylib bindings.") (implies . ()) (modules . ((lib "raylib/2d/unsafe.rkt") (lib "raylib/configs/2d.rkt") (lib "raylib/configs/templates/root.rkt") (lib "raylib/configs/templates/functions.rkt") (lib "raylib/codegen/util.rkt") (lib "raylib/configs/templates/structs.rkt") (lib "raylib/codegen/codegen.rkt") (lib "raylib/configs/templates/root.scrbl") (lib "raylib/scribblings/raylib.scrbl") (lib "raylib/codegen/config.rkt") (lib "raylib/configs/templates/functions.scrbl") (lib "raylib/2d/enums.rkt") (lib "raylib/2d/scribblings/unsafe/functions.scrbl") (lib "raylib/generated/version.rkt") (lib "raylib/raymath/unsafe.rkt") (lib "raylib/configs/templates/structs.scrbl") (lib "raylib/configs/generated.rkt") (lib "raylib/generated/structs.rkt") (lib "raylib/configs/templates/reexport.rkt") (lib "raylib/support.rkt") (lib "raylib/configs/templates/enums.rkt") (lib "raylib/generated/constants.rkt") (lib "raylib/codegen/objects.rkt") (lib "raylib/configs/templates/constants.rkt") (lib "raylib/generated/unsafe/functions.rkt") (lib "raylib/x.rkt") (lib "raylib/examples/drop-files.rkt") (lib "raylib/generated/scribblings/structs.scrbl") (lib "raylib/2d/scribblings/raylib-2d.scrbl") (lib "raylib/2d/constants.rkt") (lib "raylib/2d/structs.rkt") (lib "raylib/derived/unsafe.rkt") (lib "raylib/2d/unsafe/functions.rkt") (lib "raylib/generated/scribblings/enums.scrbl") (lib "raylib/codegen/logger.rkt") (lib "raylib/raymath/private/defs.rkt") (lib "raylib/raymath/raylib-raymath.scrbl") (lib "raylib/generated/scribblings/raylib-generated.scrbl") (lib "raylib/codegen/config-dsl.rkt") (lib "raylib/configs/templates/constants.scrbl") (lib "raylib/scribblings/raylib-support.scrbl") (lib "raylib/scribblings/raylib-derived.scrbl") (lib "raylib/examples/basic-example.rkt") (lib "raylib/generated/scribblings/unsafe/functions.scrbl") (lib "raylib/generated/enums.rkt") (lib "raylib/generated/scribblings/constants.scrbl") (lib "raylib/configs/templates/enums.scrbl") (lib "raylib/generated/unsafe.rkt") (lib "raylib/configs/templates/common.rkt"))) (name . "raylib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:benedek.szilvasy@gmail.com . #t) (ffi . #t) (game-engine . #t) (graphics . #t) (raylib . #t) (ring:1 . #t))) (source . "https://github.com/eutro/racket-raylib.git#main") (tags . ("audio" "ffi" "game-engine" "graphics" "raylib")) (versions . #hash((default . #hasheq((checksum . "c3af4874d3c50e44cf4a08cc55051d147e2440e3") (source . "https://github.com/eutro/racket-raylib.git#main") (source_url . "https://github.com/eutro/racket-raylib.git#main"))))))) ("rbulkresizer" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rbulkresizer" "doc/rbulkresizer@rbulkresizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rbulkresizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rbulkresizer.txt"))) (checksum . "6c9993019041fddf9b4578cf45486cac02f61712") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1620119070) (dependencies . ("base" "gui-lib" "htdp-lib" "net-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Graphical bulk picture resize tool") (implies . ()) (modules . ((lib "rbulkresizer/private/gui.rkt") (lib "rbulkresizer/main.rkt") (lib "rbulkresizer/private/resize.rkt") (lib "rbulkresizer/private/resize-functions.rkt") (lib "rbulkresizer/scribblings/rbulkresizer.scrbl") (lib "rbulkresizer/private/resize-helpers.rkt") (lib "rbulkresizer/private/gui-helpers.rkt") (lib "rbulkresizer/private/program-name.rkt"))) (name . "rbulkresizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:xgqt@riseup.net . #t) (gui . #t) (ring:1 . #t) (utility . #t))) (source . "https://gitlab.com/xgqt/rbulkresizer.git") (tags . ("application" "gui" "utility")) (versions . #hash((default . #hasheq((checksum . "6c9993019041fddf9b4578cf45486cac02f61712") (source . "https://gitlab.com/xgqt/rbulkresizer.git") (source_url . "https://gitlab.com/xgqt/rbulkresizer.git"))))))) ("rchess" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "rchess"))) (failure-log . "server/built/fail/rchess.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "77bcee50f661b638d9f05bc74149f75b21b03fed") (checksum-error . #f) (collection . "rchess") (conflicts . ()) (date-added . 1568646021) (dependencies . ("base" "chess" "brag" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Simple toolkit for chess stuff") (implies . ()) (modules . ((lib "rchess/moves/move.rkt") (lib "rchess/puzzles/main.rkt") (lib "rchess/test/main.rkt") (lib "rchess/main.rkt") (lib "rchess/puzzles/chessblunders/main.rkt") (lib "rchess/moves/main.rkt") (lib "rchess/images/main.rkt") (lib "rchess/pgn/main.rkt") (lib "rchess/pgn.rkt") (lib "rchess/moves/util.rkt") (lib "rchess/pgn/patch-test.rkt") (lib "rchess/moves/all-squares.rkt") (lib "rchess/moves/current-board.rkt") (lib "rchess/scribblings/rchess.scrbl") (lib "rchess/fen/main.rkt") (lib "rchess/pgn/deepblue-kasparov-1997.rkt") (lib "rchess/pgn/napoleon-turk-1809.rkt"))) (name . "rchess") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:stephen@thoughtstem.com . #t) (chess . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/rchess.git") (tags . ("chess")) (versions . #hash((default . #hasheq((checksum . "77bcee50f661b638d9f05bc74149f75b21b03fed") (source . "https://github.com/srfoster/rchess.git") (source_url . "https://github.com/srfoster/rchess.git"))))))) ("reactor" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reactor" "doc/reactor@reactor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reactor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reactor.txt"))) (checksum . "c4687bd43fafcd09802042648900d4737b04f923") (checksum-error . #f) (collection . "reactor") (conflicts . ()) (dependencies . ("seq-no-order" "base" "rackunit-lib" "racket-doc" "scribble-lib" "rackunit")) (description . "An embedded synchronous reactive language, a la reactiveML") (implies . ()) (modules . ((lib "reactor/tests/contract.rkt") (lib "reactor/control.rkt") (lib "reactor/ct.rkt") (lib "reactor/tests/control.rkt") (lib "reactor/data.rkt") (lib "reactor/tests/reentrance.rkt") (lib "reactor/runtime.rkt") (lib "reactor/tests/multivalues.rkt") (lib "reactor/main.rkt") (lib "reactor/lang.rkt") (lib "reactor/tests/basics.rkt") (lib "reactor/compiler.rkt") (lib "reactor/tests/values.rkt") (lib "reactor/tests/marks.rkt") (lib "reactor/tests/with-handlers.rkt") (lib "reactor/scribblings/reactor.scrbl"))) (name . "reactor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (concurrency . #t) (language . #t) (programming-languages . #t) (reactive . #t) (ring:1 . #t))) (source . "https://github.com/florence/reactor.git") (tags . ("concurrency" "language" "programming-languages" "reactive")) (versions . #hash((default . #hasheq((checksum . "c4687bd43fafcd09802042648900d4737b04f923") (source . "https://github.com/florence/reactor.git") (source_url . "https://github.com/florence/reactor.git"))))))) ("readline-gpl" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/readline-gpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/readline-gpl.txt"))) (checksum . "6c231bdba7086c397349a934db768441ca648fec") (checksum-error . #f) (collection . "readline-gpl") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Cause readline collection to use GNU's readline library.") (implies . ()) (modules . ((lib "readline-gpl/private/readline-lib.rkt"))) (name . "readline-gpl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (readline . #t) (ring:1 . #t))) (source . "http://github.com/racket/readline-gpl/tree/master") (tags . ("readline")) (versions . #hash((default . #hasheq((checksum . "6c231bdba7086c397349a934db768441ca648fec") (source . "git://github.com/racket/readline-gpl") (source_url . "http://github.com/racket/readline-gpl/tree/master"))))))) ("rebellion" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rebellion" "doc/rebellion@rebellion/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rebellion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rebellion.txt"))) (checksum . "0c135eea96cf92cf36190e1dd3d062ad6c41ab80") (checksum-error . #f) (collection . "rebellion") (conflicts . ()) (date-added . 1552643878) (dependencies . ("base" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A collection of infrastructure libraries") (implies . ()) (modules . ((lib "rebellion/streaming/reducer/private/base-test.rkt") (lib "rebellion/collection/private/sorted-subset.rkt") (lib "rebellion/collection/association-list.rkt") (lib "rebellion/media/application/octet-stream.rkt") (lib "rebellion/base/pair.scrbl") (lib "rebellion/type/record.rkt") (lib "rebellion/streaming/transducer/private/enumerating-test.rkt") (lib "rebellion/collection/private/mutable-sorted-set.rkt") (lib "rebellion/type/tuple/binding-test.rkt") (lib "rebellion/collection/entry.scrbl") (lib "rebellion/collection/list.scrbl") (lib "rebellion/private/scribble-index-attribute.rkt") (lib "rebellion/collection/sorted-map.scrbl") (lib "rebellion/concurrency/lock.rkt") (lib "rebellion/point.scrbl") (lib "rebellion/binary/byte.rkt") (lib "rebellion/collection/private/sorted-submap.rkt") (lib "rebellion/type/enum/private/definition-macro.rkt") (lib "rebellion/collection/sorted-set.scrbl") (lib "rebellion/private/static-name.rkt") (lib "rebellion/collection/entry.rkt") (lib "rebellion/streaming/transducer/private/sorting-test.rkt") (lib "rebellion/equal+hash.scrbl") (lib "rebellion/streaming/transducer/private/taking-local-maxima.rkt") (lib "rebellion/type/singleton/private/definition-macro.rkt") (lib "rebellion/base/option.rkt") (lib "rebellion/private/subsequence.rkt") (lib "rebellion/collection/private/mutable-red-black-tree-permutation-test.rkt") (lib "rebellion/collection/vector/builder.rkt") (lib "rebellion/collection/multiset.rkt") (lib "rebellion/base/converter.scrbl") (lib "rebellion/private/for-body.rkt") (lib "rebellion/collection/private/sorted-map-key-set.rkt") (lib "rebellion/collection/set.scrbl") (lib "rebellion/streaming/transducer/private/deduplicating.rkt") (lib "rebellion/collection/range-set.scrbl") (lib "rebellion/streaming/transducer/private/transposing.rkt") (lib "rebellion/binary/immutable-bytes.scrbl") (lib "rebellion/module.scrbl") (lib "rebellion/base/variant.scrbl") (lib "rebellion/base/option.scrbl") (lib "rebellion/type/enum.scrbl") (lib "rebellion/streaming/reducer/private/base.rkt") (lib "rebellion/collection/private/persistent-sorted-map.rkt") (lib "rebellion/web-graph.scrbl") (lib "rebellion/collection/hash.scrbl") (lib "rebellion/type/object/private/definition-macro.rkt") (lib "rebellion/streaming/transducer/private/taking-duplicates.rkt") (lib "rebellion/type/singleton/binding.rkt") (lib "rebellion/type/wrapper.rkt") (lib "rebellion/streaming/transducer/composition-test.rkt") (lib "rebellion/permutation.scrbl") (lib "rebellion/web-graph.rkt") (lib "rebellion/collection/vector.scrbl") (lib "rebellion/collection/private/sorted-set-builder.rkt") (lib "rebellion/collection.rkt") (lib "rebellion/collection.scrbl") (lib "rebellion/base/converter.rkt") (lib "rebellion/collection/private/regular-immutable-sorted-map.rkt") (lib "rebellion/private/scribble-evaluator-factory.rkt") (lib "rebellion/private/struct-definition-util.rkt") (lib "rebellion/type/enum/base.rkt") (lib "rebellion/collection/table.scrbl") (lib "rebellion/private/sequence-empty.rkt") (lib "rebellion/binary/bitstring.rkt") (lib "rebellion/base/generative-token.rkt") (lib "rebellion/base/immutable-string.rkt") (lib "rebellion/type/singleton/base.rkt") (lib "rebellion/binary/immutable-bytes.rkt") (lib "rebellion/collection/private/mutable-sorted-map.rkt") (lib "rebellion/streaming/transducer/composition.rkt") (lib "rebellion/type/record/private/definition-macro.rkt") (lib "rebellion/collection/immutable-vector.rkt") (lib "rebellion/streaming/transducer/private/taking-local-maxima-test.rkt") (lib "rebellion/collection/private/sorted-map-interface.rkt") (lib "rebellion/collection/association-list.scrbl") (lib "rebellion/base/variant.rkt") (lib "rebellion/streaming/transducer/base.rkt") (lib "rebellion/type/record/binding.rkt") (lib "rebellion/base/equivalence-relation.scrbl") (lib "rebellion/type/record/binding-test.rkt") (lib "rebellion/type/record.scrbl") (lib "rebellion/streaming/transducer/private/batching.rkt") (lib "rebellion/concurrency/atomic/fixnum.scrbl") (lib "rebellion/base/generative-token.scrbl") (lib "rebellion/type/struct.rkt") (lib "rebellion/collection/private/mutable-red-black-tree-iteration.rkt") (lib "rebellion/collection/private/persistent-red-black-tree.rkt") (lib "rebellion/collection/hash.rkt") (lib "rebellion/streaming/transducer/private/windowing-test.rkt") (lib "rebellion/type/private/naming.rkt") (lib "rebellion/collection/private/sorted-map-entry-set.rkt") (lib "rebellion/module/binding.rkt") (lib "rebellion/base/impossible-function.scrbl") (lib "rebellion/collection/list.rkt") (lib "rebellion/collection/multidict.scrbl") (lib "rebellion/module/phase.scrbl") (lib "rebellion/collection/private/mutable-red-black-tree-batch-deletion.rkt") (lib "rebellion/type/wrapper/binding-test.rkt") (lib "rebellion/collection/set.rkt") (lib "rebellion/collection/vector.rkt") (lib "rebellion/private/printer-markup.rkt") (lib "rebellion/type/object/binding.rkt") (lib "rebellion/collection/private/mutable-red-black-tree.rkt") (lib "rebellion/streaming/transducer/private/contract.rkt") (lib "rebellion/streaming/reducer/private/zip.rkt") (lib "rebellion/type/struct.scrbl") (lib "rebellion/streaming/transducer.scrbl") (lib "rebellion/streaming/transducer.rkt") (lib "rebellion/base/comparator.scrbl") (lib "rebellion/collection/private/mutable-red-black-tree-deletion.rkt") (lib "rebellion/web-link.scrbl") (lib "rebellion/type/wrapper/binding.rkt") (lib "rebellion/streaming/transducer/private/taking-duplicates-test.rkt") (lib "rebellion/private/guarded-block.rkt") (lib "rebellion/collection/sorted-set-test.rkt") (lib "rebellion/collection/vector/builder.scrbl") (lib "rebellion/collection/table.rkt") (lib "rebellion/streaming/transducer/private/taking-maxima.rkt") (lib "rebellion/private/contract-projection.rkt") (lib "rebellion/media/application/octet-stream.scrbl") (lib "rebellion/streaming/transducer/private.rkt") (lib "rebellion/equal+hash.rkt") (lib "rebellion/media/text/plain.scrbl") (lib "rebellion/type/record/base.rkt") (lib "rebellion/streaming/transducer/private/reducer-test.rkt") (lib "rebellion/type/singleton.scrbl") (lib "rebellion/streaming.scrbl") (lib "rebellion/binary/bitstring.scrbl") (lib "rebellion/collection/private/mutable-red-black-tree-batch-insertion.rkt") (lib "rebellion/streaming/transducer/private/sorting.rkt") (lib "rebellion/collection/range-set.rkt") (lib "rebellion/binary.scrbl") (lib "rebellion/type/wrapper/private/definition-macro.rkt") (lib "rebellion/type/record/descriptor.rkt") (lib "rebellion/collection/private/testing/literal-mutable-red-black-tree.rkt") (lib "rebellion/private/total-match.rkt") (lib "rebellion/private/scribble-cross-document-tech.rkt") (lib "rebellion/collection/multidict.rkt") (lib "rebellion/base/result.scrbl") (lib "rebellion/streaming/transducer/private/transposing-test.rkt") (lib "rebellion/type/enum/descriptor.rkt") (lib "rebellion/other.scrbl") (lib "rebellion/type/enum/binding-test.rkt") (lib "rebellion/private/impersonation.rkt") (lib "rebellion/base/comparator.rkt") (lib "rebellion/base/impossible-function.rkt") (lib "rebellion/collection/record.scrbl") (lib "rebellion/concurrency/atomic/boolean.rkt") (lib "rebellion/custom-write.scrbl") (lib "rebellion/collection/private/unmodifiable-sorted-set.rkt") (lib "rebellion/type.scrbl") (lib "rebellion/main.rkt") (lib "rebellion/collection/private/mutable-red-black-tree-search.rkt") (lib "rebellion/streaming/transducer/private/windowing.rkt") (lib "rebellion/collection/private/testing/mutable-red-black-tree-invariants.rkt") (lib "rebellion/private/cut.rkt") (lib "rebellion/media/text/plain.rkt") (lib "rebellion/base/equivalence-relation.rkt") (lib "rebellion/streaming/reducer/private/zip-test.rkt") (lib "rebellion/binary/bit.rkt") (lib "rebellion/point.rkt") (lib "rebellion/base/range.scrbl") (lib "rebellion/module/phase.rkt") (lib "rebellion/base/range.rkt") (lib "rebellion/type/enum.rkt") (lib "rebellion/collection/sorted-set.rkt") (lib "rebellion/type/object/base.rkt") (lib "rebellion/streaming/transducer/private/taking-maxima-test.rkt") (lib "rebellion/type/wrapper/descriptor.rkt") (lib "rebellion/media.scrbl") (lib "rebellion/type/enum/binding.rkt") (lib "rebellion/streaming/transducer/private/deduplicating-test.rkt") (lib "rebellion/filter.rkt") (lib "rebellion/streaming/transducer/private/contract-test.rkt") (lib "rebellion/custom-write.rkt") (lib "rebellion/base/option/private/guard.rkt") (lib "rebellion/collection/keyset/private/reducer.rkt") (lib "rebellion/collection/private/mutable-red-black-tree-base.rkt") (lib "rebellion/binary/bit.scrbl") (lib "rebellion/type/wrapper/base.rkt") (lib "rebellion/type/type-descriptor-printing-test.rkt") (lib "rebellion/private/precondition.rkt") (lib "rebellion/permutation.rkt") (lib "rebellion/collection/sorted-map.rkt") (lib "rebellion/streaming/transducer/testing.rkt") (lib "rebellion/streaming/transducer/private/batching-test.rkt") (lib "rebellion/type/tuple/binding.rkt") (lib "rebellion/type/tuple.scrbl") (lib "rebellion/streaming/transducer/private/enumerating.rkt") (lib "rebellion/collection/keyset.scrbl") (lib "rebellion/type/singleton/descriptor.rkt") (lib "rebellion/type/object/descriptor.rkt") (lib "rebellion/private/strict-cond.rkt") (lib "rebellion/type/object.rkt") (lib "rebellion/base/symbol.scrbl") (lib "rebellion/collection/private/reversed-sorted-set.rkt") (lib "rebellion/type/tuple/base.rkt") (lib "rebellion/module/binding.scrbl") (lib "rebellion/collection/record.rkt") (lib "rebellion/collection/multiset.scrbl") (lib "rebellion/collection/private/mutable-red-black-tree-regression-test.rkt") (lib "rebellion/concurrency/atomic/boolean.scrbl") (lib "rebellion/streaming/reducer.scrbl") (lib "rebellion/concurrency/atomic/fixnum.rkt") (lib "rebellion/base/immutable-string.scrbl") (lib "rebellion/private/filter.rkt") (lib "rebellion/collection/private/synchronized-sorted-set.rkt") (lib "rebellion/collection/private/reversed-sorted-map.rkt") (lib "rebellion/collection/immutable-vector.scrbl") (lib "rebellion/collection/private/persistent-sorted-set.rkt") (lib "rebellion/type/object.scrbl") (lib "rebellion/type/singleton/binding-test.rkt") (lib "rebellion/type/object/binding-test.rkt") (lib "rebellion/base/symbol.rkt") (lib "rebellion/media.rkt") (lib "rebellion/type/singleton.rkt") (lib "rebellion/collection/keyset.rkt") (lib "rebellion/collection/private/sorted-map-builder.rkt") (lib "rebellion/web-link.rkt") (lib "rebellion/equal+hash/struct.rkt") (lib "rebellion/streaming/transducer/private/impersonation-test.rkt") (lib "rebellion/streaming/transducer/private/reducer.rkt") (lib "rebellion/type/wrapper.scrbl") (lib "rebellion/streaming/reducer.rkt") (lib "rebellion/collection/keyset/low-dependency.rkt") (lib "rebellion/base/pair.rkt") (lib "rebellion/binary/byte.scrbl") (lib "rebellion/type/tuple.rkt") (lib "rebellion/collection/private/vector-binary-search.rkt") (lib "rebellion/base.scrbl") (lib "rebellion/collection/private/mutable-red-black-tree-insertion.rkt") (lib "rebellion/collection/choosing-collections.scrbl") (lib "rebellion/collection/sorted-map-test.rkt") (lib "rebellion/collection/private/regular-immutable-sorted-set.rkt") (lib "rebellion/collection/private/mutable-red-black-tree-clear-test.rkt") (lib "rebellion/main.scrbl") (lib "rebellion/collection/private/sorted-set-interface.rkt") (lib "rebellion/type/record/private/provide-transformer.rkt") (lib "rebellion/type/tuple/private/definition-macro.rkt") (lib "rebellion/type/tuple/descriptor.rkt") (lib "rebellion/concurrency/lock.scrbl") (lib "rebellion/concurrency.scrbl") (lib "rebellion/base/result.rkt"))) (name . "rebellion") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (experimental . #t) (ring:1 . #t) (tabular . #t) (utility . #t))) (source . "https://github.com/jackfirth/rebellion.git") (tags . ("data" "experimental" "tabular" "utility")) (versions . #hash((default . #hasheq((checksum . "0c135eea96cf92cf36190e1dd3d062ad6c41ab80") (source . "https://github.com/jackfirth/rebellion.git") (source_url . "https://github.com/jackfirth/rebellion.git"))))))) ("recaptcha" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reCAPTCHA" "doc/reCAPTCHA@recaptcha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/recaptcha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/recaptcha.txt"))) (checksum . "95cd84588b93128a6becb005e885bcc3fb16d648") (checksum-error . #f) (collection . "recaptcha") (conflicts . ()) (dependencies . ("base" "web-server-lib" "scribble-lib" "racket-doc" "web-server-doc")) (description . "Utilities for using reCAPTCHA with the web-server/formlets API") (implies . ()) (modules . ((lib "recaptcha/main.rkt") (lib "recaptcha/keys.rkt") (lib "recaptcha/scribblings/recaptcha.scrbl"))) (name . "recaptcha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (google . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/LiberalArtist/recaptcha.git") (tags . ("google" "net" "web")) (versions . #hash((default . #hasheq((checksum . "95cd84588b93128a6becb005e885bcc3fb16d648") (source . "https://github.com/LiberalArtist/recaptcha.git") (source_url . "https://github.com/LiberalArtist/recaptcha.git"))))))) ("reconstruct-template" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reconstruct-template-list-ctx" "doc/reconstruct-template-list-ctx@reconstruct-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reconstruct-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reconstruct-template.txt"))) (checksum . "2d055080bdbd0e59bcbe4d4ed644565135a1d80e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594046849) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "`~list/ctx` pattern and `?list/ctx` template for reconstructing syntax objects for core-form languages") (implies . ()) (modules . ((lib "reconstruct-template/list-ctx.rkt") (lib "reconstruct-template/util/stx-equal.rkt") (lib "reconstruct-template/util/stx-e-restore.rkt") (lib "reconstruct-template/scribblings/reconstruct-template-list-ctx.scrbl"))) (name . "reconstruct-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/AlexKnauth/reconstruct-template.git#main") (tags . ("experimental" "syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "2d055080bdbd0e59bcbe4d4ed644565135a1d80e") (source . "https://github.com/AlexKnauth/reconstruct-template.git#main") (source_url . "https://github.com/AlexKnauth/reconstruct-template.git#main"))))))) ("recursive-language" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "recursive-language" "doc/recursive-language@recursive-language/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/recursive-language.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/recursive-language.txt"))) (checksum . "5d1df9344f27e4e503585a56e64485b6d9d4a917") (checksum-error . #f) (collection . "recursive-language") (conflicts . ()) (date-added . 1661645114) (dependencies . ("rackunit-lib" "base" "parser-tools-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A language for writing recursively computable functions") (implies . ()) (modules . ((lib "recursive-language/parser.rkt") (lib "recursive-language/construct.rkt") (lib "recursive-language/error.rkt") (lib "recursive-language/lang/lang-info.rkt") (lib "recursive-language/scribblings/recursive-language.scrbl") (lib "recursive-language/lexer.rkt") (lib "recursive-language/lang/configure-runtime.rkt") (lib "recursive-language/tool/syntax-color.rkt") (lib "recursive-language/main.rkt") (lib "recursive-language/misc.rkt") (lib "recursive-language/lang/reader.rkt") (lib "recursive-language/tool/submit.rkt"))) (name . "recursive-language") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (language . #t) (recursion-theory . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/recursive-language.git") (tags . ("language" "recursion-theory")) (versions . #hash((default . #hasheq((checksum . "5d1df9344f27e4e503585a56e64485b6d9d4a917") (source . "https://github.com/sorawee/recursive-language.git") (source_url . "https://github.com/sorawee/recursive-language.git"))))))) ("redex-aam-tutorial" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tutorial" "doc/tutorial@redex-aam-tutorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-aam-tutorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-aam-tutorial.txt"))) (checksum . "1fdb038225b03d5ea9cf4258503cb8c83f108671") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "redex-lib" "scheme-lib" "scribble-lib" "racket-doc" "redex-doc" "redex-gui-lib" "sandbox-lib")) (description . "A brief introduction to the Redex  and Abstracting Abstract Machines.") (implies . ()) (modules . ((lib "redex-aam-tutorial/counter.rkt") (lib "redex-aam-tutorial/subst.rkt") (lib "redex-aam-tutorial/shared.rkt") (lib "redex-aam-tutorial/tutorial.scrbl") (lib "redex-aam-tutorial/bib.rkt") (lib "redex-aam-tutorial/tutorial.rkt") (lib "redex-aam-tutorial/ex.rkt"))) (name . "redex-aam-tutorial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "1fdb038225b03d5ea9cf4258503cb8c83f108671") (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (source_url . "https://github.com/dvanhorn/redex-aam-tutorial.git"))))))) ("redex-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs.txt"))) (checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092402) (dependencies . ("redex-abbrevs-lib" "redex-abbrevs-doc")) (description . "Tools for PLT Redex") (implies . ("redex-abbrevs-lib" "redex-abbrevs-doc")) (modules . ()) (name . "redex-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs") (tags . ("macro" "redex" "testing")) (versions . #hash((default . #hasheq((checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs"))))))) ("redex-abbrevs-doc" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-abbrevs" "doc/redex-abbrevs@redex-abbrevs-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs-doc.txt"))) (checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092551) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-doc" "redex-doc" "redex-lib" "redex-abbrevs-lib")) (description . "documentation for \"redex-abbrevs\"") (implies . ()) (modules . ((lib "redex-abbrevs/scribblings/redex-abbrevs.scrbl"))) (name . "redex-abbrevs-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc"))))))) ("redex-abbrevs-lib" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs-lib.txt"))) (checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092488) (dependencies . ("redex-lib" "base" "rackunit-lib")) (description . "Implementation of \"redex-abbrevs\"") (implies . ()) (modules . ((lib "redex-abbrevs/private/redex-abbrevs.rkt") (lib "redex-abbrevs/main.rkt") (lib "redex-abbrevs/unstable.rkt"))) (name . "redex-abbrevs-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9e08f5a3ea0c2b70c5324c73969397c161a624df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib"))))))) ("redex-chk" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-chk.txt"))) (checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("redex-lib" "base" "rackunit-lib")) (description . "rackunit/chk style checks for redex ('term' quotes automatically)") (implies . ()) (modules . ((lib "redex-chk/main.rkt"))) (name . "redex-chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/pnwamk/redex-chk/tree/master#master") (tags . ("redex" "testing")) (versions . #hash((default . #hasheq((checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (source . "git://github.com/pnwamk/redex-chk#master") (source_url . "http://github.com/pnwamk/redex-chk/tree/master#master"))))))) ("redex-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-etc" "doc/redex-etc@redex-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-etc.txt"))) (checksum . "ee18a8030f9d3358004fd89e7c3b34fdc1d64145") (checksum-error . #f) (collection . "redex-etc") (conflicts . ()) (date-added . 1590732437) (dependencies . ("typed-racket-lib" "latex-utils" "redex-pict-lib" "unstable-redex" "base" "redex-lib" "private-in" "draw-lib" "pict-lib" "redex-doc" "chk-lib" "racket-doc" "scribble-lib" "pict-doc")) (description . "Miscellanea for Redex.") (implies . ()) (modules . ((lib "redex-etc/private/functions.rkt") (lib "redex-etc/language/private/plstx.rkt") (lib "redex-etc/private/require-typed-primitives.rkt") (lib "redex-etc/language/private/render.rkt") (lib "redex-etc/language/lang/reader.rkt") (lib "redex-etc/main.rkt") (lib "redex-etc/private/rewriter.rkt") (lib "redex-etc/language/main.rkt") (lib "redex-etc/private/language.rkt") (lib "redex-etc/language/private/parameter.rkt") (lib "redex-etc/private/macros.rkt") (lib "redex-etc/private/tex-typography.rkt") (lib "redex-etc/private/rule-style.rkt") (lib "redex-etc/language/private/util.rkt") (lib "redex-etc/private/texexpr.rkt") (lib "redex-etc/scribblings/redex-etc.scrbl") (lib "redex-etc/private/metas.rkt") (lib "redex-etc/test/common.rkt") (lib "redex-etc/private/typography.rkt"))) (name . "redex-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/camoy/redex-etc.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "ee18a8030f9d3358004fd89e7c3b34fdc1d64145") (source . "https://github.com/camoy/redex-etc.git") (source_url . "https://github.com/camoy/redex-etc.git"))))))) ("redex-parameter" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-parameter" "doc/redex-parameter@redex-parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-parameter.txt"))) (checksum . "d49cc98f1153ccf256d84045e6d20892275f32db") (checksum-error . #f) (collection . "redex") (conflicts . ()) (date-added . 1578492708) (dependencies . ("base" "redex-lib" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib" "redex-doc" "sandbox-lib")) (description . " Parameters for extensions in Redex.") (implies . ()) (modules . ((lib "redex/scribblings/redex-parameter.scrbl") (lib "redex/test/parameter-require.rkt") (lib "redex/test/parameter.rkt") (lib "redex/parameter.rkt"))) (name . "redex-parameter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/camoy/redex-parameter.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "d49cc98f1153ccf256d84045e6d20892275f32db") (source . "https://github.com/camoy/redex-parameter.git") (source_url . "https://github.com/camoy/redex-parameter.git"))))))) ("redis" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis.txt"))) (checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib")) (description . "A redis client for Racket.") (implies . ()) (modules . ((lib "redis/redis.rkt") (lib "redis/main.rkt") (lib "redis/test-utils.rkt") (lib "redis/redis-tests.rkt") (lib "redis/bytes-utils.rkt") (lib "redis/redis-cmds.rkt"))) (name . "redis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (db . #t) (redis . #t) (ring:1 . #t))) (source . "http://github.com/stchang/redis/tree/master") (tags . ("db" "redis")) (versions . #hash((default . #hasheq((checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (source . "github://github.com/stchang/redis/master") (source_url . "http://github.com/stchang/redis/tree/master"))))))) ("redis-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . (("extract" "redis" "doc/redis@redis-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-doc.txt"))) (checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (checksum-error . #f) (collection . "redis") (conflicts . ()) (date-added . 1567090542) (dependencies . ("base" "racket-doc" "redis-lib" "scribble-lib")) (description . "Fast, idiomatic bindings for Redis. (docs only)") (implies . ()) (modules . ((lib "redis/scribblings/redis.scrbl") (lib "redis/scribblings/redis.rkt"))) (name . "redis-doc") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc"))))))) ("redis-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-lib.txt"))) (checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (checksum-error . #f) (collection . "redis") (conflicts . ("redis")) (date-added . 1567073272) (dependencies . ("base" "resource-pool-lib" "unix-socket-lib")) (description . "Fast, idiomatic bindings for Redis. (implementation only)") (implies . ()) (modules . ((lib "redis/private/protocol.rkt") (lib "redis/easy.rkt") (lib "redis/private/pool.rkt") (lib "redis/main.rkt") (lib "redis/private/script.rkt") (lib "redis/private/error.rkt") (lib "redis/private/client.rkt"))) (name . "redis-lib") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:2 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib"))))))) ("redis-rkt" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-rkt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-rkt.txt"))) (checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (checksum-error . #f) (collection . "redis") (conflicts . ()) (date-added . 1567090600) (dependencies . ("base" "redis-doc" "redis-lib")) (description . "Fast, idiomatic bindings for Redis. (docs & implementation)") (implies . ("redis-doc" "redis-lib")) (modules . ()) (name . "redis-rkt") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis"))))))) ("redis-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-test.txt") (test-failure-log . "server/built/test-fail/redis-test.txt") (test-success-log . #f))) (checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1567192331) (dependencies . ("base" "rackunit-lib" "redis-lib")) (description . "Fast, idiomatic bindings for Redis. (tests only)") (implies . ()) (modules . ((lib "tests/redis/hash.rkt") (lib "tests/redis/pool.rkt") (lib "tests/redis/client.rkt") (lib "tests/redis/url.rkt") (lib "tests/redis/set.rkt") (lib "tests/redis/script.rkt") (lib "tests/redis/easy.rkt") (lib "tests/redis/bytes.rkt") (lib "tests/redis/zset.rkt") (lib "tests/redis/common.rkt") (lib "tests/redis/pubsub.rkt") (lib "tests/redis/protocol.rkt"))) (name . "redis-test") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-test") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "341e7a26fedd63f003488b46b9cc499de98002d2") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-test") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-test"))))))) ("reed-solomon" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reed-solomon" "doc/reed-solomon@reed-solomon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reed-solomon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reed-solomon.txt"))) (checksum . "db00b7536f64b6f31a15819d7ba5f6783a4f9d31") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Reed-Solomon implementation") (implies . ()) (modules . ((lib "reed-solomon/lib/encode/express/input/input.rkt") (lib "reed-solomon/lib/encode/express/error-code/error-code.rkt") (lib "reed-solomon/lib/decode/express/no-error/no-error.rkt") (lib "reed-solomon/tests/decode/syndrome-test.rkt") (lib "reed-solomon/lib/decode/express/forney/forney.rkt") (lib "reed-solomon/lib/encode/express/galois-fields/galois-fields.rkt") (lib "reed-solomon/lib/decode/decode.rkt") (lib "reed-solomon/tests/decode/forney-test.rkt") (lib "reed-solomon/tests/decode/correct-error-test.rkt") (lib "reed-solomon/lib/encode/express/express.rkt") (lib "reed-solomon/lib/decode/correct-error.rkt") (lib "reed-solomon/lib/share/poly.rkt") (lib "reed-solomon/tests/share/euclidean-test.rkt") (lib "reed-solomon/lib/share/euclidean.rkt") (lib "reed-solomon/scribble/reed-solomon.scrbl") (lib "reed-solomon/lib/decode/forney.rkt") (lib "reed-solomon/lib/decode/express/too-many-errors/too-many-errors.rkt") (lib "reed-solomon/tests/encode/generate-poly-test.rkt") (lib "reed-solomon/lib/decode/express/start.rkt") (lib "reed-solomon/lib/decode/express/express.rkt") (lib "reed-solomon/lib/decode/error-locator-poly.rkt") (lib "reed-solomon/lib/decode/express/chien-search/chien-search.rkt") (lib "reed-solomon/lib/encode/generator-poly.rkt") (lib "reed-solomon/lib/encode/express/message-poly/message-poly.rkt") (lib "reed-solomon/lib/encode/express/primitive-poly/primitive-poly.rkt") (lib "reed-solomon/tests/share/poly-test.rkt") (lib "reed-solomon/lib/decode/syndrome.rkt") (lib "reed-solomon/lib/encode/express/generator-poly/generator-poly.rkt") (lib "reed-solomon/lib/decode/express/input/input.rkt") (lib "reed-solomon/tests/encode/encode-test.rkt") (lib "reed-solomon/lib/encode/encode.rkt") (lib "reed-solomon/tests/decode/decode-test.rkt") (lib "reed-solomon/lib/decode/express/finally/finally.rkt") (lib "reed-solomon/lib/share/lib.rkt") (lib "reed-solomon/lib/share/gf.rkt") (lib "reed-solomon/tests/decode/chien-search-test.rkt") (lib "reed-solomon/lib/decode/chien-search.rkt") (lib "reed-solomon/main.rkt") (lib "reed-solomon/lib/decode/express/euclidean-decode/euclidean-decode.rkt") (lib "reed-solomon/example/example.rkt") (lib "reed-solomon/lib/decode/express/syndrome-poly/syndrome-poly.rkt") (lib "reed-solomon/tests/share/gf-field-test.rkt") (lib "reed-solomon/tests/decode/error-locator-poly-test.rkt") (lib "reed-solomon/lib/encode/express/start.rkt"))) (name . "reed-solomon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (reed-solomon . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-reed-solomon.git") (tags . ("reed-solomon")) (versions . #hash((default . #hasheq((checksum . "db00b7536f64b6f31a15819d7ba5f6783a4f9d31") (source . "https://github.com/simmone/racket-reed-solomon.git") (source_url . "https://github.com/simmone/racket-reed-solomon.git"))))))) ("refined-acl2" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/refined-acl2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (checksum-error . #f) (collection . "refined-acl2") (conflicts . ()) (dependencies . ("mischief")) (description . "Refined ACL2: experimental implementation of ACL2-verifiable code with ML modules and Racket macros.") (implies . ()) (modules . ((lib "refined-acl2/examples/ast.rkt") (lib "refined-acl2/tests/suite/surface.rkt") (lib "refined-acl2/model/data.rkt") (lib "refined-acl2/proof/static.rkt") (lib "refined-acl2/prelude/core/atomic.rkt") (lib "refined-acl2/main.rkt") (lib "refined-acl2/examples/id-non-dracula/fresh.rkt") (lib "refined-acl2/base.rkt") (lib "refined-acl2/examples/virtual-machine/soundness.rkt") (lib "refined-acl2/examples/diss.rkt") (lib "refined-acl2/legacy/registry.rkt") (lib "refined-acl2/expansion/names.rkt") (lib "refined-acl2/legacy/type.rkt") (lib "refined-acl2/primitive.rkt") (lib "refined-acl2/proof/dynamic.rkt") (lib "refined-acl2/model/subst.rkt") (lib "refined-acl2/tests/run.rkt") (lib "refined-acl2/legacy/proof.rkt") (lib "refined-acl2/prelude/list-of.rkt") (lib "refined-acl2/examples/sexp.rkt") (lib "refined-acl2/examples/id-non-dracula/original.rkt") (lib "refined-acl2/tests/suite/modular.rkt") (lib "refined-acl2/legacy/type/theorem.rkt") (lib "refined-acl2/certify.rkt") (lib "refined-acl2/expansion/dependency.rkt") (lib "refined-acl2/examples/id-non-dracula/different.rkt") (lib "refined-acl2/prelude/type.rkt") (lib "refined-acl2/model/names.rkt") (lib "refined-acl2/examples/id-non-dracula/identical.rkt") (lib "refined-acl2/expansion/grammar.rkt") (lib "refined-acl2/examples/id-non-dracula/check.rkt") (lib "refined-acl2/examples/bug.rkt") (lib "refined-acl2/core.rkt") (lib "refined-acl2/prelude/base/shorthand.rkt") (lib "refined-acl2/model/unparse.rkt") (lib "refined-acl2/model/syntax.rkt") (lib "refined-acl2/prelude/core/expressions.rkt") (lib "refined-acl2/legacy/unique.rkt") (lib "refined-acl2/prelude/base/primitive.rkt") (lib "refined-acl2/legacy/ref.rkt") (lib "refined-acl2/expansion/alpha.rkt") (lib "refined-acl2/prelude/core/support.rkt") (lib "refined-acl2/model/proof-term.rkt") (lib "refined-acl2/prelude/base.rkt") (lib "refined-acl2/expansion/paths.rkt") (lib "refined-acl2/prelude/core/expansion.rkt") (lib "refined-acl2/prelude/core/imported.rkt") (lib "refined-acl2/model/verify.rkt") (lib "refined-acl2/prelude/core/description.rkt") (lib "refined-acl2/tests/harness.rkt") (lib "refined-acl2/prelude.rkt") (lib "refined-acl2/legacy/type/generic.rkt") (lib "refined-acl2/prelude/core/keywords.rkt") (lib "refined-acl2/legacy/rename.rkt") (lib "refined-acl2/prelude/core/input-streams.rkt") (lib "refined-acl2/legacy/type/component.rkt") (lib "refined-acl2/prelude/set-of.rkt") (lib "refined-acl2/legacy/type/value.rkt") (lib "refined-acl2/prelude/base/mutual.rkt") (lib "refined-acl2/prelude/sexp.rkt") (lib "refined-acl2/kernel.rkt") (lib "refined-acl2/model/parse.rkt") (lib "refined-acl2/prelude/core/component.rkt") (lib "refined-acl2/legacy/type/function.rkt") (lib "refined-acl2/legacy/type/field.rkt") (lib "refined-acl2/expansion/simplify.rkt") (lib "refined-acl2/legacy/api.rkt") (lib "refined-acl2/tests/suite/component.rkt") (lib "refined-acl2/model/api.rkt") (lib "refined-acl2/examples/generic.rkt") (lib "refined-acl2/tests/suite/atomic.rkt") (lib "refined-acl2/examples/vm.rkt") (lib "refined-acl2/examples/virtual-machine/descriptions.rkt") (lib "refined-acl2/legacy/check.rkt") (lib "refined-acl2/prelude/base/datatype.rkt") (lib "refined-acl2/model/acl2.rkt") (lib "refined-acl2/prelude/base/match.rkt") (lib "refined-acl2/expansion/runtime.rkt") (lib "refined-acl2/model/quote.rkt") (lib "refined-acl2/tests/suite/macro.rkt") (lib "refined-acl2/model.rkt") (lib "refined-acl2/legacy/type/base.rkt") (lib "refined-acl2/legacy/type/description.rkt") (lib "refined-acl2/proof/term.rkt") (lib "refined-acl2/prelude/core.rkt") (lib "refined-acl2/tests/diff.rkt") (lib "refined-acl2/prelude/base/struct.rkt"))) (name . "refined-acl2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:cce@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/carl-eastlund/refined-acl2/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (source . "github://github.com/carl-eastlund/refined-acl2/master") (source_url . "http://github.com/carl-eastlund/refined-acl2/tree/master"))))))) ("regex-machine" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "regex-machine" "doc/regex-machine@regex-machine/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/regex-machine.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/regex-machine.txt"))) (checksum . "25754a4dc2aae351e2fe5db1b98101abb9ce088e") (checksum-error . #f) (collection . "regex-machine") (conflicts . ()) (date-added . 1549322621) (dependencies . ("base" "gui-lib" "pict-lib" "reprovide-lang" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "An implementation of Russ Cox's regular expression machine language") (implies . ()) (modules . ((lib "regex-machine/main.scrbl") (lib "regex-machine/main.rkt") (lib "regex-machine/program.rkt") (lib "regex-machine/vm.rkt") (lib "regex-machine/gui.rkt"))) (name . "regex-machine") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (regular-expressions . #t) (ring:1 . #t) (teaching . #t) (virtual-machine . #t))) (source . "https://github.com/jackfirth/regex-machine.git") (tags . ("regular-expressions" "teaching" "virtual-machine")) (versions . #hash((default . #hasheq((checksum . "25754a4dc2aae351e2fe5db1b98101abb9ce088e") (source . "https://github.com/jackfirth/regex-machine.git") (source_url . "https://github.com/jackfirth/regex-machine.git"))))))) ("regraph" . #hasheq((author . "alex.sanchezstern@gmail.com me@pavpanchekha.com") (authors . ("alex.sanchezstern@gmail.com" "me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/regraph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/regraph.txt"))) (checksum . "53177afac7697c1e46e16b145bb7a8793573e7c2") (checksum-error . #f) (collection . "regraph") (conflicts . ()) (date-added . 1577979150) (dependencies . ("math-lib" "plot-lib" "base" "rackunit-lib")) (description . "A pure-Racket equivalence graph") (implies . ()) (modules . ((lib "regraph/infra/time-regraph.rkt") (lib "regraph/enode.rkt") (lib "regraph/infra/precompute.rkt") (lib "regraph/main.rkt") (lib "regraph/egraph.rkt") (lib "regraph/ematch.rkt") (lib "regraph/extraction.rkt") (lib "regraph/infra/index.rkt"))) (name . "regraph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alex.sanchezstern@gmail.com . #t) (author:me@pavpanchekha.com . #t) (data-structures . #t) (equality . #t) (ring:1 . #t) (simplification . #t))) (source . "https://github.com/herbie-fp/regraph.git") (tags . ("data-structures" "equality" "simplification")) (versions . #hash((default . #hasheq((checksum . "53177afac7697c1e46e16b145bb7a8793573e7c2") (source . "https://github.com/herbie-fp/regraph.git") (source_url . "https://github.com/herbie-fp/regraph.git"))))))) ("relation" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "relation" "doc/relation@relation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/relation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/relation.txt"))) (checksum . "1e5d06266644282a5649dcaf6d861166b0f74e8b") (checksum-error . #f) (collection . "relation") (conflicts . ()) (date-added . 1574201236) (dependencies . ("base" "collections-lib" "describe" "functional-lib" "arguments" "point-free" "threading-lib" "mischief" "social-contract" "qi-lib" "kw-utils" "typed-stack" "version-case" "rackunit-lib" "scribble-lib" "scribble-abbrevs" "racket-doc" "algebraic" "sugar" "fancy-app" "collections-doc" "functional-doc" "rackjure" "threading-doc" "sandbox-lib" "cover" "cover-coveralls" "at-exp-lib")) (description . "Generic interfaces and convenient utilities for using relations.") (implies . ()) (modules . ((lib "relation/scribblings/relation.scrbl") (lib "relation/tests/function.rkt") (lib "relation/scribblings/equivalence.scrbl") (lib "relation/scribblings/function.scrbl") (lib "relation/private/util.rkt") (lib "relation/scribblings/order.scrbl") (lib "relation/function/type/application-scheme/partial.rkt") (lib "relation/function.rkt") (lib "relation/tests/private/util.rkt") (lib "relation/tests/equivalence.rkt") (lib "relation/function/syntax.rkt") (lib "relation/scribblings/composition.scrbl") (lib "relation/function/type.rkt") (lib "relation/composition.rkt") (lib "relation/function/type/application-scheme/curried.rkt") (lib "relation/function/util.rkt") (lib "relation/logic.rkt") (lib "relation/equivalence.rkt") (lib "relation/function/type/util.rkt") (lib "relation/private/contract.rkt") (lib "relation/function/type/power.rkt") (lib "relation/function/type/application-scheme/interface.rkt") (lib "relation/tests/composition.rkt") (lib "relation/tests/order.rkt") (lib "relation/tests/logic.rkt") (lib "relation/function/intf.rkt") (lib "relation/tests/type.rkt") (lib "relation/function/type/base.rkt") (lib "relation/order.rkt") (lib "relation/function/type/composed.rkt") (lib "relation/function/type/interface.rkt") (lib "relation/scribblings/logic.scrbl") (lib "relation/function/type/application-scheme.rkt") (lib "relation/main.rkt") (lib "relation/function/type/application-scheme/private/util.rkt") (lib "relation/function/type/application-scheme/template.rkt") (lib "relation/scribblings/type.scrbl") (lib "relation/function/composition.rkt") (lib "relation/type.rkt"))) (name . "relation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (comparison . #t) (generic . #t) (relations . #t) (ring:1 . #t))) (source . "https://github.com/countvajhula/relation.git?path=relation") (tags . ("comparison" "generic" "relations")) (versions . #hash((default . #hasheq((checksum . "1e5d06266644282a5649dcaf6d861166b0f74e8b") (source . "https://github.com/countvajhula/relation.git?path=relation") (source_url . "https://github.com/countvajhula/relation.git?path=relation"))))))) ("reloadable" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reloadable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reloadable.txt"))) (checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Support for code-reloading for long-running racket programs (such as web-servers).") (implies . ()) (modules . ((lib "reloadable/main.rkt"))) (name . "reloadable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (system . #t) (web . #t))) (source . "http://github.com/tonyg/racket-reloadable/tree/master") (tags . ("system" "web")) (versions . #hash((default . #hasheq((checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (source . "github://github.com/tonyg/racket-reloadable/master") (source_url . "http://github.com/tonyg/racket-reloadable/tree/master"))))))) ("remap" . #hasheq((author . "hashim.muqtadir@gmail.com") (authors . ("hashim.muqtadir@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "remap"))) (failure-log . "server/built/fail/remap.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d51fb2169b79e6bf5cfdd175af08239d3362445c") (checksum-error . #f) (collection . "remap") (conflicts . ()) (date-added . 1551713661) (dependencies . ("base" "db-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-typed")) (description . "An ORM kinda thing for Racket, without the objects.") (implies . ()) (modules . ((lib "remap/private/tables.rkt") (lib "remap/private/creates-and-updates.rkt") (lib "remap/scribblings/remap.scrbl") (lib "remap/private/query.rkt") (lib "remap/private/to-sql.rkt") (lib "remap/private/fancy-select.rkt") (lib "remap/private/grouping-v2.rkt") (lib "remap/private/parser.rkt") (lib "remap/private/utils.rkt") (lib "remap/private/grouping.rkt") (lib "remap/private/tests.rkt") (lib "remap/main.rkt") (lib "remap/private/delete.rkt"))) (name . "remap") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (ORM . #t) (SQL . #t) (author:hashim.muqtadir@gmail.com . #t) (db . #t) (mapper . #t) (object . #t) (relational . #t) (ring:1 . #t))) (source . "https://gitlab.com/hashimmm/remap.git") (tags . ("db" "mapper" "object" "ORM" "relational" "SQL")) (versions . #hash((default . #hasheq((checksum . "d51fb2169b79e6bf5cfdd175af08239d3362445c") (source . "https://gitlab.com/hashimmm/remap.git") (source_url . "https://gitlab.com/hashimmm/remap.git"))))))) ("remember" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remember-implementation.hl" "doc/remember-implementation.hl@remember/index.html") ("main" "remember" "doc/remember@remember/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remember.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remember.txt"))) (checksum . "cb47dd8b081ad14800fd668898f6f938a4a40e91") (checksum-error . #f) (collection . "remember") (conflicts . ()) (date-added . 1614799520) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scribble-lib" "typed-racket-lib" "phc-toolkit" "hyper-literate" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-enhanced")) (description . "Compile-time memoize across compilations. Writes values to a file, so that they will be remembered during the next compilation.") (implies . ()) (modules . ((lib "remember/scribblings/remember.scrbl") (lib "remember/test/input1.rkt") (lib "remember/test/test3.rkt") (lib "remember/remember-implementation.hl.rkt") (lib "remember/test/test1.rkt") (lib "remember/test/io2.rkt") (lib "remember/main.rkt") (lib "remember/test/input-error.rkt") (lib "remember/test/test-error.rkt") (lib "remember/test/input3.rkt") (lib "remember/test/test2.rkt"))) (name . "remember") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (memoization . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/remember.git#main") (tags . ("memoization" "syntax")) (versions . #hash((default . #hasheq((checksum . "cb47dd8b081ad14800fd668898f6f938a4a40e91") (source . "https://github.com/jsmaniac/remember.git#main") (source_url . "https://github.com/jsmaniac/remember.git#main"))))))) ("remix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "remix"))) (failure-log . "server/built/fail/remix.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "982529019d12252b5f6ab49c17a1a8283ccfb9df") (checksum-error . #f) (collection . "remix") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "datalog" "scribble-doc" "rackunit-lib" "base" "racket-doc" "scribble-lib" "typed-racket-lib" "unstable-lib")) (description . "a revised version of Racket") (implies . ()) (modules . ((lib "remix/tests/2-required.rkt") (lib "remix/scribblings/racket2.scrbl") (lib "remix/tests/2-reader.rkt") (lib "remix/tests/expand-from.rkt") (lib "remix/static-interface.rkt") (lib "remix/stx.rkt") (lib "remix/tests/theory.rkt") (lib "remix/test.rkt") (lib "remix/tests/module.rkt") (lib "remix/private/required-helper.rkt") (lib "remix/main.rkt") (lib "remix/module.rkt") (lib "remix/stx/raw.rkt") (lib "remix/tests/2-required-server.rkt") (lib "remix/default-in.rkt") (lib "remix/racket.rkt") (lib "remix/tests/stx.rkt") (lib "remix/tests/layout.rkt") (lib "remix/class.rkt") (lib "remix/tests/racket/remixd.rkt") (lib "remix/datalog.rkt") (lib "remix/tests/expand-to.rkt") (lib "remix/tests/2-require-star-d.rkt") (lib "remix/tests/class.rkt") (lib "remix/base.rkt") (lib "remix/exp/unit-test.rkt") (lib "remix/layout.rkt") (lib "remix/stx/singleton-struct.rkt") (lib "remix/exp/unit.rkt") (lib "remix/scribblings/remix.scrbl") (lib "remix/tests/static-interface.rkt") (lib "remix/theory.rkt"))) (name . "remix") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:jay.mccarthy@gmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/remix/tree/master") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "982529019d12252b5f6ab49c17a1a8283ccfb9df") (source . "git://github.com/jeapostrophe/remix") (source_url . "http://github.com/jeapostrophe/remix/tree/master"))))))) ("remote-shell" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("remote-shell-lib" "remote-shell-doc")) (description . "Tools for running on remote and virtual-machine hosts") (implies . ("remote-shell-lib" "remote-shell-doc")) (modules . ()) (name . "remote-shell") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/remote-shell/?path=remote-shell") (tags . ()) (versions . #hash((default . #hasheq((checksum . "002cc96693bb7ca24e50614bae36d8070eacbd14") (source . "git://github.com/racket/remote-shell/?path=remote-shell") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell"))))))) ("remote-shell-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remote-shell" "doc/remote-shell@remote-shell-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "remote-shell") (conflicts . ()) (dependencies . ("base" "racket-doc" "remote-shell-lib" "scribble-lib")) (description . "documentation part of \"remote-shell\"") (implies . ()) (modules . ((lib "remote-shell/remote-shell.scrbl"))) (name . "remote-shell-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/remote-shell/?path=remote-shell-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "002cc96693bb7ca24e50614bae36d8070eacbd14") (source . "git://github.com/racket/remote-shell/?path=remote-shell-doc") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell-doc"))))))) ("remote-shell-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "remote-shell") (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) part of \"remote-shell\"") (implies . ()) (modules . ((lib "remote-shell/vbox.rkt") (lib "remote-shell/docker.rkt") (lib "remote-shell/ssh.rkt"))) (name . "remote-shell-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/remote-shell/?path=remote-shell-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "002cc96693bb7ca24e50614bae36d8070eacbd14") (source . "git://github.com/racket/remote-shell/?path=remote-shell-lib") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell-lib"))))))) ("repeated-application" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repeated-application" "doc/repeated-application@repeated-application/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repeated-application.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/repeated-application.txt"))) (checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (checksum-error . #f) (collection . "repeated-application") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" "sugar")) (description . "Variants of apply which compute a least fixpoint or run a number of consecutive applications.") (implies . ()) (modules . ((lib "repeated-application/scribblings/repeated-application.scrbl") (lib "repeated-application/main.rkt"))) (name . "repeated-application") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:vincentnys@gmail.com . #t) (fixpoint . #t) (recursion . #t) (ring:1 . #t))) (source . "http://github.com/v-nys/repeated-application/tree/master") (tags . ("application" "fixpoint" "recursion")) (versions . #hash((default . #hasheq((checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (source . "git://github.com/v-nys/repeated-application") (source_url . "http://github.com/v-nys/repeated-application/tree/master"))))))) ("repltest" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repltest" "doc/repltest@repltest/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repltest.txt") (test-failure-log . "server/built/test-fail/repltest.txt") (test-success-log . #f))) (checksum . "3667dd5433f805738b4990828112450c5546fd77") (checksum-error . #f) (collection . "repltest") (conflicts . ()) (date-added . 1614799524) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "afl" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "REPL test: copy-paste REPL interactions and run them as tests") (implies . ()) (modules . ((lib "repltest/scribblings/repltest.scrbl") (lib "repltest/test/doc1.rkt") (lib "repltest/test/doc2-newline-at-end-of-file.rkt") (lib "repltest/main.rkt") (lib "repltest/private/util.rkt") (lib "repltest/lang/reader.rkt") (lib "repltest/test/doc3.rkt") (lib "repltest/test/simple.rkt") (lib "repltest/test/test.rkt") (lib "repltest/test/meta.rkt") (lib "repltest/private/run-interactions.rkt") (lib "repltest/test/doc4.rkt") (lib "repltest/test/doc5.rkt") (lib "repltest/test/doc2-no-newline-at-end-of-file.rkt"))) (name . "repltest") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/jsmaniac/repltest.git#main") (tags . ("lang-extension" "repl" "testing")) (versions . #hash((default . #hasheq((checksum . "3667dd5433f805738b4990828112450c5546fd77") (source . "https://github.com/jsmaniac/repltest.git#main") (source_url . "https://github.com/jsmaniac/repltest.git#main"))))))) ("reporter" . #hasheq((author . "dannypsnl@gmail.com racket@racket.tw") (authors . ("dannypsnl@gmail.com" "racket@racket.tw")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reporter" "doc/reporter@reporter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reporter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reporter.txt"))) (checksum . "dc3243e339c3dfaa2961cb2bc43e6c1037efa5a0") (checksum-error . #f) (collection . "reporter") (conflicts . ()) (date-added . 1608398568) (dependencies . ("base" "ansi-color" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "c-utils")) (description . "A util toolbox for compiler error reporting ") (implies . ()) (modules . ((lib "reporter/example/main.rkt") (lib "reporter/text.rkt") (lib "reporter/scribblings/reporter.scrbl") (lib "reporter/label.rkt") (lib "reporter/color.rkt") (lib "reporter/collect.rkt") (lib "reporter/report.rkt") (lib "reporter/loc.rkt") (lib "reporter/main.rkt"))) (name . "reporter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (compiler . #t) (error . #t) (report . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/reporter.git#develop") (tags . ("compiler" "error" "report")) (versions . #hash((default . #hasheq((checksum . "dc3243e339c3dfaa2961cb2bc43e6c1037efa5a0") (source . "https://github.com/racket-tw/reporter.git#develop") (source_url . "https://github.com/racket-tw/reporter.git#develop"))))))) ("reprovide-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reprovide" "doc/reprovide@reprovide-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang.txt"))) (checksum . "f38e629f9713d2bc2691538b2ce5784bb1187252") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563233893) (dependencies . ("base" "reprovide-lang-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a #lang for reproviding modules") (implies . ("reprovide-lang-lib")) (modules . ((lib "reprovide/test/test.rkt") (lib "reprovide/test/test-combine-in-except.rkt") (lib "reprovide/test/use-combine-in-fallback.rkt") (lib "reprovide/test/use.rkt") (lib "reprovide/test/example-directory/b.rkt") (lib "reprovide/test/example-directory/c.rkt") (lib "reprovide/test/test-combine-in-fallback.rkt") (lib "reprovide/test/other-subdir/indirect-glob-in.rkt") (lib "reprovide/test/use-glob-in.rkt") (lib "reprovide/test/example-directory/a.rkt") (lib "reprovide/test/use-combine-in-except.rkt") (lib "reprovide/scribblings/reprovide.scrbl"))) (name . "reprovide-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (provide . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang") (tags . ("provide" "require")) (versions . #hash((default . #hasheq((checksum . "f38e629f9713d2bc2691538b2ce5784bb1187252") (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang") (source_url . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang"))))))) ("reprovide-lang-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang-lib.txt"))) (checksum . "f38e629f9713d2bc2691538b2ce5784bb1187252") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563233844) (dependencies . ("base" "lang-file-lib" "srfi-lite-lib" "syntax-macro-lang")) (description . "a #lang for reproviding modules") (implies . ()) (modules . ((lib "reprovide/require-transformer/combine-in-except.rkt") (lib "reprovide/require-transformer/private/this-expression-source-file.rkt") (lib "reprovide/require-transformer/combine-in-fallback.rkt") (lib "reprovide/main.rkt") (lib "reprovide/require-transformer/glob-in.rkt") (lib "reprovide/require-transformer/directory-in.rkt") (lib "reprovide/reprovide.rkt"))) (name . "reprovide-lang-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (provide . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib") (tags . ("provide" "require")) (versions . #hash((default . #hasheq((checksum . "f38e629f9713d2bc2691538b2ce5784bb1187252") (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib") (source_url . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib"))))))) ("req" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/req.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/req.txt"))) (checksum . "628900c275c58607b754d9859781a419ab813283") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662262266) (dependencies . ("base" "req-doc" "req-lib" "req-test")) (description . "Dependency manager for Racket projects. Metapackage.") (implies . ()) (modules . ()) (name . "req") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (raco . #t) (ring:1 . #t) (tool . #t))) (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq") (tags . ("raco" "tool")) (versions . #hash((default . #hasheq((checksum . "628900c275c58607b754d9859781a419ab813283") (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq") (source_url . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq"))))))) ("req-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "req" "doc/req@req-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/req-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/req-doc.txt"))) (checksum . "628900c275c58607b754d9859781a419ab813283") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662261991) (dependencies . ("base" "racket-doc" "scribble-lib" "ziptie-git" "req-lib")) (description . "Dependency manager for Racket projects. Documentation.") (implies . ()) (modules . ((lib "req/scribblings/external.scrbl") (lib "req/scribblings/venv.scrbl") (lib "req/scribblings/formats.scrbl") (lib "req/scribblings/comparison.scrbl") (lib "req/scribblings/cli.scrbl") (lib "req/scribblings/main.scrbl") (lib "req/scribblings/assimilation.scrbl"))) (name . "req-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (raco . #t) (ring:1 . #t) (tool . #t))) (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-doc") (tags . ("raco" "tool")) (versions . #hash((default . #hasheq((checksum . "628900c275c58607b754d9859781a419ab813283") (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-doc") (source_url . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-doc"))))))) ("req-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/req-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/req-lib.txt"))) (checksum . "628900c275c58607b754d9859781a419ab813283") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662261828) (dependencies . ("base" "threading-lib" "upi-lib")) (description . "Dependency manager for Racket projects. Core.") (implies . ()) (modules . ((lib "req/install.rkt") (lib "req/req-file.rkt") (lib "req/raco-req.rkt") (lib "req/info-file.rkt") (lib "req/req.rkt") (lib "req/version.rkt") (lib "req/cmdline.rkt"))) (name . "req-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (raco . #t) (ring:1 . #t) (tool . #t))) (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-lib") (tags . ("raco" "tool")) (versions . #hash((default . #hasheq((checksum . "628900c275c58607b754d9859781a419ab813283") (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-lib") (source_url . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-lib"))))))) ("req-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/req-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/req-test.txt"))) (checksum . "628900c275c58607b754d9859781a419ab813283") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1662262163) (dependencies . ("base" "req-lib" "rackunit-lib")) (description . "Dependency manager for Racket projects. Tests.") (implies . ()) (modules . ((lib "req/tests/unit/install-test.rkt") (lib "req/tests/unit/req-file-test.rkt") (lib "req/tests/unit/test-eequal.rkt"))) (name . "req-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (raco . #t) (ring:1 . #t) (tool . #t))) (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-test") (tags . ("raco" "tool")) (versions . #hash((default . #hasheq((checksum . "628900c275c58607b754d9859781a419ab813283") (source . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-test") (source_url . "https://gitlab.com/xgqt/racket-req.git?path=src%2Freq-test"))))))) ("request" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "request" "doc/request@request/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/request.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/request.txt"))) (checksum . "d010a60ad227a540f40b4707cd570d101d5530b3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "fancy-app" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "net-doc" "rackunit-lib" "rackunit-doc" "racket-doc")) (description . "A package for constructing HTTP and REST-ful requesters and integration tests. Currently unstable.") (implies . ()) (modules . ((lib "request/private/wrap.rkt") (lib "request/main.scrbl") (lib "request/private/base.scrbl") (lib "request/param.rkt") (lib "request/check.rkt") (lib "request/private/base.rkt") (lib "request/doc-utils/def.rkt") (lib "request/private/struct.rkt") (lib "request/private/struct.scrbl") (lib "request/param.scrbl") (lib "request/private/http-location.rkt") (lib "request/private/call-response.rkt") (lib "request/private/wrap.scrbl") (lib "request/main.rkt") (lib "request/check.scrbl") (lib "request/private/http-location.scrbl") (lib "request/doc-utils/examples.rkt") (lib "request/private/exn.rkt") (lib "request/private/exn.scrbl"))) (name . "request") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (http . #t) (rest . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/jackfirth/racket-request/tree/master") (tags . ("experimental" "http" "rest" "testing")) (versions . #hash((default . #hasheq((checksum . "d010a60ad227a540f40b4707cd570d101d5530b3") (source . "git://github.com/jackfirth/racket-request") (source_url . "http://github.com/jackfirth/racket-request/tree/master"))))))) ("require-latency" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/require-latency.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/require-latency.txt"))) (checksum . "f5e3ca6a645deeff96684e2c5089183ce1c06ec5") (checksum-error . #f) (collection . "pkg") (conflicts . ()) (date-added . 1662782984) (dependencies . ("base" "cli")) (description . "A raco command for measuring the latency in requiring any module.") (implies . ()) (modules . ((lib "pkg/require-latency.rkt"))) (name . "require-latency") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:skasivaj@gmail.com . #t) (modules . #t) (performance . #t) (pkg . #t) (profiling . #t) (require . #t) (ring:2 . #t))) (source . "https://github.com/countvajhula/require-latency.git?path=require-latency#main") (tags . ("modules" "performance" "pkg" "profiling" "require")) (versions . #hash((default . #hasheq((checksum . "f5e3ca6a645deeff96684e2c5089183ce1c06ec5") (source . "https://github.com/countvajhula/require-latency.git?path=require-latency#main") (source_url . "https://github.com/countvajhula/require-latency.git?path=require-latency#main"))))))) ("require-typed-check" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "require-typed-check" "doc/require-typed-check@require-typed-check/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/require-typed-check.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/require-typed-check.txt"))) (checksum . "3103e8483ee9665bdeab8935a11bef2453d7fb42") (checksum-error . #f) (collection . "require-typed-check") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc")) (description . "require/typed, but skips contracts on already-typed imports") (implies . ()) (modules . ((lib "require-typed-check/test/opaque/untyped.rkt") (lib "require-typed-check/test/bogus/main.rkt") (lib "require-typed-check/test/basic/typed.rkt") (lib "require-typed-check/scribblings/require-typed-check.scrbl") (lib "require-typed-check/main.rkt") (lib "require-typed-check/test/pr/1.rkt") (lib "require-typed-check/private/test-util.rkt") (lib "require-typed-check/test/fsm/utilities.rkt") (lib "require-typed-check/test/fsm/automata.rkt") (lib "require-typed-check/test/opaque/typed.rkt") (lib "require-typed-check/test/bogus/typed.rkt") (lib "require-typed-check/private/require-typed-check.rkt") (lib "require-typed-check/test/fsm/population.rkt") (lib "require-typed-check/private/log.rkt") (lib "require-typed-check/test/pr/3.rkt") (lib "require-typed-check/test/fsm/main.rkt") (lib "require-typed-check/test/submodule/main.rkt") (lib "require-typed-check/test/opaque/main.rkt") (lib "require-typed-check/test/basic/untyped.rkt") (lib "require-typed-check/test/fsm/automata-adapted.rkt") (lib "require-typed-check/test/basic/main.rkt") (lib "require-typed-check/logging.rkt"))) (name . "require-typed-check") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (contracts . #t) (require . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/bennn/require-typed-check/tree/master") (tags . ("contracts" "require" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "3103e8483ee9665bdeab8935a11bef2453d7fb42") (source . "git://github.com/bennn/require-typed-check") (source_url . "http://github.com/bennn/require-typed-check/tree/master"))))))) ("resource-pool" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pool" "doc/pool@resource-pool/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/resource-pool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/resource-pool.txt"))) (checksum . "e3952e03585eb304edd2275d6807a3cdca20dbaf") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617703199) (dependencies . ("base" "resource-pool-lib" "rackcheck" "racket-doc" "rackunit-lib" "resource-pool-lib" "scribble-lib")) (description . "A generic blocking resource pool. (docs & implementation)") (implies . ("resource-pool-lib")) (modules . ((lib "data/scribblings/pool.scrbl") (lib "test/data/pool.rkt"))) (name . "resource-pool") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (data-structures . #t) (pool . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool") (tags . ("data-structures" "pool" "web")) (versions . #hash((default . #hasheq((checksum . "e3952e03585eb304edd2275d6807a3cdca20dbaf") (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool") (source_url . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool"))))))) ("resource-pool-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/resource-pool-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/resource-pool-lib.txt"))) (checksum . "e3952e03585eb304edd2275d6807a3cdca20dbaf") (checksum-error . #f) (collection . "data") (conflicts . ()) (date-added . 1617703172) (dependencies . ("base")) (description . "A generic blocking resource pool. (implementation)") (implies . ()) (modules . ((lib "data/pool.rkt"))) (name . "resource-pool-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (data-structures . #t) (pool . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib") (tags . ("data-structures" "pool" "web")) (versions . #hash((default . #hasheq((checksum . "e3952e03585eb304edd2275d6807a3cdca20dbaf") (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib") (source_url . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib"))))))) ("response-ext" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "response-ext" "doc/response-ext@response-ext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/response-ext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/response-ext.txt"))) (checksum . "07876ddf1e41c3652b6076d6053755cb29bf8832") (checksum-error . #f) (collection . "response-ext") (conflicts . ()) (date-added . 1552838218) (dependencies . ("base" "web-server-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib" "web-server-doc")) (description . "Extended HTTP response functions for Racket Web Server") (implies . ()) (modules . ((lib "response-ext/main.rkt") (lib "response-ext/test.rkt") (lib "response-ext/scribblings/response-ext.scrbl"))) (name . "response-ext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (http . #t) (response . #t) (ring:1 . #t) (web-server . #t))) (source . "https://github.com/Junker/response-ext.git") (tags . ("http" "response" "web-server")) (versions . #hash((default . #hasheq((checksum . "07876ddf1e41c3652b6076d6053755cb29bf8832") (source . "https://github.com/Junker/response-ext.git") (source_url . "https://github.com/Junker/response-ext.git"))))))) ("restore" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/restore.txt") (test-failure-log . "server/built/test-fail/restore.txt") (test-success-log . #f))) (checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (checksum-error . #f) (collection . "restore") (conflicts . ()) (dependencies . ("base" "unstable-lib")) (description . "protocol for restore program state") (implies . ()) (modules . ((lib "restore/tests/server.rkt") (lib "restore/main.rkt") (lib "restore/tests/client.rkt"))) (name . "restore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (environment . #t) (filesystem . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/restore/tree/master") (tags . ("data" "environment" "filesystem")) (versions . #hash((default . #hasheq((checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (source . "git://github.com/jeapostrophe/restore") (source_url . "http://github.com/jeapostrophe/restore/tree/master"))))))) ("retry" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "retry" "doc/retry@retry/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/retry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/retry.txt"))) (checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (checksum-error . #f) (collection . "retry") (conflicts . ()) (dependencies . ("compose-app" "fancy-app" "gregor-lib" "reprovide-lang" "base" "mock" "at-exp-lib" "gregor-doc" "scribble-text-lib" "racket-doc" "scribble-lib" "rackunit-lib" "mock-rackunit")) (description . "Composable configurable retryers for flakily failing operations.") (implies . ()) (modules . ((lib "retry/scribblings/main.scrbl") (lib "retry/private/higher-order.rkt") (lib "retry/scribblings/guide.scrbl") (lib "retry/private/retryers.rkt") (lib "retry/scribblings/reference.scrbl") (lib "retry/main.rkt") (lib "retry/scribblings/base.rkt") (lib "retry/private/inject.rkt") (lib "retry/private/gregor.rkt") (lib "retry/private/base.rkt"))) (name . "retry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "http://github.com/jackfirth/racket-retry/tree/master") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (source . "git://github.com/jackfirth/racket-retry") (source_url . "http://github.com/jackfirth/racket-retry/tree/master"))))))) ("review" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/review.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/review.txt"))) (checksum . "c7516902108183d329bd502f79ab8a017ad57855") (checksum-error . #f) (collection . "review") (conflicts . ()) (date-added . 1574853608) (dependencies . ("base" "base" "at-exp-lib")) (description . "A surface-level linter for #lang racket modules.") (implies . ()) (modules . ((lib "review/tests/lint/unused-bindings.rkt") (lib "review/tests/lint/punted-bindings.rkt") (lib "review/tests/lint/underscores-dont-shadow.rkt") (lib "review/tests/lint/struct.rkt") (lib "review/tests/lint/require-unsorted.rkt") (lib "review/tests/lint/no-lang.rkt") (lib "review/tests/lint/already-defined-argument.rkt") (lib "review/tests/lint/lambda-scope.rkt") (lib "review/tests/lint/let-with-parens.rkt") (lib "review/cli.rkt") (lib "review/tests/lint/already-defined-let.rkt") (lib "review/tests/lint/struct-fields.rkt") (lib "review/tests/lint/require-unsorted-local-1.rkt") (lib "review/tests/lint/define-values-shadowing.rkt") (lib "review/tests/lint/require-unsorted-for-syntax.rkt") (lib "review/tests/lint/binding-else-in-match.rkt") (lib "review/tests/lint/for-expressions.rkt") (lib "review/tests/lint/define-logger.rkt") (lib "review/tests/lint/rackunit-test-case.rkt") (lib "review/tests/lint/struct-out.rkt") (lib "review/tests/lint/partial-lang.rkt") (lib "review/tests/lint/tilde-ids.rkt") (lib "review/tests/lint/nested-modules.rkt") (lib "review/tests/lint/begin-inside-if.rkt") (lib "review/tests/lint/component-lib-system.rkt") (lib "review/tests/lint/struct-mutable-field.rkt") (lib "review/tests/lint/cond-without-else.rkt") (lib "review/tests/lint/struct-mutable.rkt") (lib "review/tests/lint/case.rkt") (lib "review/tests/lint/invalid-base-lang.rkt") (lib "review/tests/lint/require-sorted-local.rkt") (lib "review/tests/lint/match-lambda.rkt") (lib "review/tests/lint/struct-plus-plus.rkt") (lib "review/tests/lint/provided-but-not-defined.rkt") (lib "review/lint.rkt") (lib "review/tests/lint/provided-all-defined.rkt") (lib "review/tests/lint/use-before-define.rkt") (lib "review/run-tests.rkt") (lib "review/tests/lint/if-without-else.rkt") (lib "review/tests/lint/require-unsorted-local-2.rkt") (lib "review/tests/lint/function-varargs.rkt") (lib "review/tests/lint/let-can-shadow.rkt") (lib "review/tests/lint/define-match.rkt") (lib "review/tests/lint/bad-brackets.rkt") (lib "review/tests/lint/empty-let.rkt") (lib "review/tests/lint/lambda-varargs.rkt") (lib "review/tests/lint/already-defined-values.rkt") (lib "review/tests/lint/match.rkt") (lib "review/tests/lint/require-sorted.rkt") (lib "review/tests/lint/already-defined.rkt") (lib "review/tests/lint/require-unsorted-prefix-in.rkt") (lib "review/tests/lint/define-generics.rkt") (lib "review/tests/lint/syntax-error.rkt") (lib "review/tests/lint/empty.rkt"))) (name . "review") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (linter . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-review.git") (tags . ("linter")) (versions . #hash((default . #hasheq((checksum . "c7516902108183d329bd502f79ab8a017ad57855") (source . "https://github.com/Bogdanp/racket-review.git") (source_url . "https://github.com/Bogdanp/racket-review.git"))))))) ("rex" . #hasheq((author . "ahedges@ethz.ch") (authors . ("ahedges@ethz.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rex" "doc/rex@rex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rex.txt"))) (checksum . "e3b41f706b4b72ea5f168b0f2a2600d77ee07ea0") (checksum-error . #f) (collection . "rex") (conflicts . ()) (dependencies . ("base" "br-parser-tools-lib" "brag" "data-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Language for deterministic finite state machines") (implies . ()) (modules . ((lib "rex/reader.rkt") (lib "rex/tests/test-parser.rkt") (lib "rex/expander.rkt") (lib "rex/parser.rkt") (lib "rex/tests/test-branches.rkt") (lib "rex/tests/test-expander.rkt") (lib "rex/tokenizer.rkt") (lib "rex/tests/test-not.rkt") (lib "rex/main.rkt") (lib "rex/tests/test-basic.rkt") (lib "rex/tests/test-cycles.rkt") (lib "rex/tests/helper.rkt") (lib "rex/scribblings/rex.scrbl"))) (name . "rex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DFA . #t) (author:ahedges@ethz.ch . #t) (dsl . #t) (ring:1 . #t))) (source . "https://github.com/alehed/rex.git") (tags . ("DFA" "dsl")) (versions . #hash((default . #hasheq((checksum . "e3b41f706b4b72ea5f168b0f2a2600d77ee07ea0") (source . "https://github.com/alehed/rex.git") (source_url . "https://github.com/alehed/rex.git"))))))) ("rfc6455" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rfc6455" "doc/rfc6455@rfc6455/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc6455.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc6455.txt"))) (checksum . "abdf0099c6930986a4ea9f352b9fb34ba73afea5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-lib" "rackunit-lib" "web-server-lib" "scribble-lib" "net-doc" "racket-doc" "web-server-doc")) (description . "RFC 6455 WebSockets support for Racket.") (implies . ()) (modules . ((lib "net/rfc6455/examples/time-client-with-threads.rkt") (lib "net/rfc6455/http.rkt") (lib "net/rfc6455/examples/time-client-with-sync.rkt") (lib "net/rfc6455/rfc6455/conn.rkt") (lib "net/rfc6455/hybi00/conn.rkt") (lib "net/rfc6455/rfc6455/client.rkt") (lib "net/rfc6455/hybi00/dispatcher.rkt") (lib "net/rfc6455/examples/test-server.rkt") (lib "net/rfc6455.rkt") (lib "net/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/test-service-mapper.rkt") (lib "net/rfc6455/hybi00/handshake.rkt") (lib "net/rfc6455/rfc6455/handshake.rkt") (lib "net/rfc6455/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/cat.rkt") (lib "net/rfc6455/examples/client.rkt") (lib "net/rfc6455/conn-api.rkt") (lib "net/rfc6455/scribblings/rfc6455.scrbl") (lib "net/rfc6455/client.rkt") (lib "net/rfc6455/timeout.rkt") (lib "net/rfc6455/server.rkt") (lib "net/rfc6455/examples/time-server.rkt") (lib "net/rfc6455/rfc6455/frame.rkt") (lib "net/rfc6455/url.rkt") (lib "net/rfc6455/service-mapper.rkt") (lib "net/rfc6455/hybi00/client.rkt") (lib "net/rfc6455/private/connection-manager.rkt") (lib "net/rfc6455/examples/echo-server.rkt"))) (name . "rfc6455") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/tonyg/racket-rfc6455/tree/master") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "abdf0099c6930986a4ea9f352b9fb34ba73afea5") (source . "git://github.com/tonyg/racket-rfc6455") (source_url . "http://github.com/tonyg/racket-rfc6455/tree/master"))))))) ("rhombus-prototype" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/rhombus-prototype.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "edd3fd63cd00a52b374a32173b393a59af36d0fe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1639058568) (dependencies . ("base" "syntax-color-lib" "parser-tools-lib" "scribble-lib" "sandbox-lib" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Prototype language as part of the Rhombus project") (implies . ()) (modules . ((lib "rhombus/scribblings/ref-stxobj.scrbl") (lib "enforest/private/name-path-op.rkt") (lib "rhombus/private/value.rkt") (lib "rhombus/private/literal.rkt") (lib "rhombus/private/meta.rkt") (lib "rhombus/scribblings/ref-static-lib.scrbl") (lib "shrubbery/write.rkt") (lib "enforest/proc-name.rkt") (lib "shrubbery/scribblings/example.scrbl") (lib "rhombus/scribblings/ref-list.scrbl") (lib "rhombus/scribblings/annotation-vs-bind.scrbl") (lib "rhombus/scribblings/ref-set.scrbl") (lib "rhombus/scribblings/ref-def.scrbl") (lib "shrubbery/private/emoji-parse.rkt") (lib "rhombus/private/import-lower-require.rkt") (lib "shrubbery/tests/armor.rkt") (lib "rhombus/private/dot-parse.rkt") (lib "shrubbery/armor.rkt") (lib "rhombus/private/arithmetic.rkt") (lib "scribble/rhombus.rkt") (lib "rhombus/private/dot.rkt") (lib "rhombus/scribblings/operator.scrbl") (lib "enforest/operator.rkt") (lib "rhombus/private/static-info-syntax.rkt") (lib "enforest/implicit.rkt") (lib "rhombus/scribblings/syntax.scrbl") (lib "rhombus/scribblings/ref-match.scrbl") (lib "rhombus/scribblings/ref-values.scrbl") (lib "rhombus/private/binding-syntax.rkt") (lib "shrubbery/interaction.rkt") (lib "scribble/private/line-shape.rkt") (lib "rhombus/private/for-clause-syntax.rkt") (lib "enforest/name-root.rkt") (lib "rhombus/private/eval.rkt") (lib "rhombus/scribblings/notation.scrbl") (lib "rhombus/scribblings/ref-pair.scrbl") (lib "rhombus/private/match.rkt") (lib "rhombus/scribblings/definition.scrbl") (lib "shrubbery/private/emoji.rkt") (lib "enforest/scribblings/syntactic-categories.scrbl") (lib "rhombus/private/repetition.rkt") (lib "design/equality/poc/equality/base/api.rkt") (lib "rhombus/private/export-syntax.rkt") (lib "rhombus/runtime-config.rkt") (lib "rhombus/private/adjust-name.rkt") (lib "shrubbery/scribblings/at-parsing.scrbl") (lib "rhombus/private/ellipsis.rkt") (lib "shrubbery/private/paren.rkt") (lib "rhombus/private/ref-result-key.rkt") (lib "rhombus/private/composite.rkt") (lib "rhombus/private/export.rkt") (lib "shrubbery/navigation.rkt") (lib "rhombus/scribblings/ref-class.scrbl") (lib "rhombus/private/syntax-meta-value.rkt") (lib "rhombus/private/static-info.rkt") (lib "enforest/scribblings/racket.rkt") (lib "design/equality/poc/equality/key/api.rkt") (lib "rhombus/scribblings/ref-dynamic-static.scrbl") (lib "shrubbery/tests/indent.rkt") (lib "rhombus/scribblings/syntax-class.scrbl") (lib "scribble/private/defining-element.rkt") (lib "rhombus/private/cond.rkt") (lib "design/equality/poc/equality/data/objects.rkt") (lib "rhombus/scribblings/overview.scrbl") (lib "shrubbery/scribblings/lexeme-parsing.scrbl") (lib "shrubbery/tests/color.rkt") (lib "rhombus/private/syntax-class-syntax.rkt") (lib "rhombus/private/begin.rkt") (lib "rhombus/scribblings/ref-begin.scrbl") (lib "shrubbery/scribblings/at-notation.scrbl") (lib "rhombus/scribblings/ref-parameter.scrbl") (lib "rhombus/private/import-invert.rkt") (lib "rhombus/private/introducer.rkt") (lib "rhombus/private/nested-bindings.rkt") (lib "scribble/private/add-space.rkt") (lib "shrubbery/private/at-space.rkt") (lib "rhombus/scribblings/ref-import.scrbl") (lib "rhombus/scribblings/ref-mutable.scrbl") (lib "rhombus/scribblings/bind-macro.scrbl") (lib "rhombus/private/infer-name.rkt") (lib "rhombus/scribblings/ref-function.scrbl") (lib "rhombus/scribblings/ref-export.scrbl") (lib "shrubbery/indentation.rkt") (lib "rhombus/private/tag.rkt") (lib "shrubbery/scribblings/group-and-block.scrbl") (lib "rhombus/scribblings/ref-annotation-macro.scrbl") (lib "rhombus/parse.rkt") (lib "enforest/main.rkt") (lib "rhombus/meta.rkt") (lib "shrubbery/srcloc.rkt") (lib "rhombus/private/static-info-pack.rkt") (lib "enforest/scribblings/motivation.scrbl") (lib "rhombus/main.rkt") (lib "rhombus/scribblings/for.scrbl") (lib "rhombus/private/pack.rkt") (lib "rhombus/private/declaration-syntax.rkt") (lib "rhombus/private/boolean-pattern.rkt") (lib "shrubbery/tests/incremental.rkt") (lib "rhombus/private/annotation.rkt") (lib "enforest/scribblings/enforest.scrbl") (lib "rhombus/private/print.rkt") (lib "scribble/rhombus/manual.rkt") (lib "rhombus/private/import-cover.rkt") (lib "rhombus/scribblings/keyword-argument.scrbl") (lib "rhombus/scribblings/map.scrbl") (lib "design/equality/poc/equality/main.rkt") (lib "rhombus/private/parameterize.rkt") (lib "rhombus/scribblings/ref-dot-provider.scrbl") (lib "shrubbery/syntax-color.rkt") (lib "rhombus/scribblings/ref-void.scrbl") (lib "rhombus/scribblings/ref-cond.scrbl") (lib "shrubbery/keystroke.rkt") (lib "rhombus/private/pair.rkt") (lib "shrubbery/tests/input.rkt") (lib "rhombus/private/string.rkt") (lib "enforest/hier-name-parse.rkt") (lib "shrubbery/tests/parse.rkt") (lib "shrubbery/scribblings/shrubbery.scrbl") (lib "rhombus/scribblings/more-arguments.scrbl") (lib "rhombus/private/expression-syntax.rkt") (lib "shrubbery/tests/delta-text.rkt") (lib "rhombus/scribblings/list.scrbl") (lib "enforest/private/check.rkt") (lib "rhombus/private/symbol.rkt") (lib "rhombus/private/module-path.rkt") (lib "rhombus/private/name-root.rkt") (lib "rhombus/private/begin-for-meta.rkt") (lib "enforest/transformer.rkt") (lib "rhombus/scribblings/set.scrbl") (lib "shrubbery/lex-comment.rkt") (lib "rhombus/private/map-ref.rkt") (lib "rhombus/private/syntax-class-mixin.rkt") (lib "rhombus/private/forwarding-sequence.rkt") (lib "rhombus/private/realm.rkt") (lib "design/equality/poc/equality/key/util.rkt") (lib "shrubbery/private/delta-text.rkt") (lib "shrubbery/parse.rkt") (lib "enforest/property.rkt") (lib "enforest/scribblings/enforest-algorithm.scrbl") (lib "rhombus/scribblings/ref-keyword.scrbl") (lib "enforest/scribblings/precedence.scrbl") (lib "rhombus/static/and_meta.rkt") (lib "rhombus/private/function.rkt") (lib "rhombus/scribblings/ref-for.scrbl") (lib "rhombus/scribblings/ref-dot.scrbl") (lib "rhombus/private/syntax-object.rkt") (lib "rhombus/private/define.rkt") (lib "rhombus/private/empty-group.rkt") (lib "scribble/private/typeset-help.rkt") (lib "enforest/scribblings/api.scrbl") (lib "rhombus/tests/call-capture-exn.rkt") (lib "shrubbery/scribblings/grammar-s-exp.rkt") (lib "design/equality/poc/equality/comparison.rkt") (lib "rhombus/private/set.rkt") (lib "rhombus/private/syntax.rkt") (lib "rhombus/private/dollar.rkt") (lib "shrubbery/scribblings/prior-art.scrbl") (lib "rhombus/private/define-operator.rkt") (lib "rhombus/scribblings/ref-implicit.scrbl") (lib "rhombus/private/namespace.rkt") (lib "rhombus/private/declaration.rkt") (lib "shrubbery/lex.rkt") (lib "rhombus/scribblings/reference.scrbl") (lib "rhombus/private/call-result-key.rkt") (lib "rhombus/private/expression.rkt") (lib "rhombus/scribblings/namespace.scrbl") (lib "rhombus/scribblings/ref-boolean.scrbl") (lib "rhombus/private/syntax-class.rkt") (lib "rhombus/private/bounce.rkt") (lib "rhombus/private/name-root-ref.rkt") (lib "rhombus/scribblings/ref-string.scrbl") (lib "enforest/name-parse.rkt") (lib "scribble/private/rhombus-spacer.rkt") (lib "rhombus/private/implicit.rkt") (lib "rhombus/private/definition.rkt") (lib "shrubbery/print.rkt") (lib "rhombus/private/op-literal.rkt") (lib "rhombus/private/expression+binding.rkt") (lib "shrubbery/scribblings/meta.scrbl") (lib "rhombus/scribblings/annotation-macro.scrbl") (lib "rhombus/private/dotted-sequence-parse.rkt") (lib "rhombus/scribblings/ref-symbol.scrbl") (lib "rhombus/scribblings/ref-bind-macro.scrbl") (lib "rhombus/scribblings/expr-macro.scrbl") (lib "rhombus/private/map-ref-set-key.rkt") (lib "rhombus/private/underscore.rkt") (lib "shrubbery/scribblings/parsed-representation.scrbl") (lib "rhombus/private/syntax-rhs.rkt") (lib "design/equality/poc/equality/hashing.rkt") (lib "rhombus/static.rkt") (lib "shrubbery/scribblings/rationale.scrbl") (lib "rhombus/private/consistent.rkt") (lib "rhombus/scribblings/ref-defn-macro.scrbl") (lib "rhombus/scribblings/bind-macro-protocol.scrbl") (lib "rhombus/static/meta.rkt") (lib "rhombus/private/map.rkt") (lib "rhombus/private/error.rkt") (lib "rhombus/private/annotation-syntax.rkt") (lib "rhombus/private/reducer-syntax.rkt") (lib "rhombus/private/values.rkt") (lib "rhombus/scribblings/ref-annotation.scrbl") (lib "enforest/private/transform.rkt") (lib "rhombus/private/keyword.rkt") (lib "rhombus/scribblings/static-overview.scrbl") (lib "rhombus/scribblings/ref-map.scrbl") (lib "rhombus/private/import-from-namespace.rkt") (lib "rhombus/private/class.rkt") (lib "rhombus/private/assign.rkt") (lib "shrubbery/main.rkt") (lib "rhombus/private/operator.rkt") (lib "rhombus/scribblings/ref-stxobj-meta.scrbl") (lib "shrubbery/private/peek-port.rkt") (lib "rhombus/scribblings/rhombus.scrbl") (lib "rhombus/scribblings/defn-macro.scrbl") (lib "rhombus/scribblings/ref-static-info.scrbl") (lib "rhombus/private/definition-syntax.rkt") (lib "rhombus/private/operator-parse.rkt") (lib "rhombus/scribblings/ref-eval.scrbl") (lib "rhombus/scribblings/ref-expr-macro.scrbl") (lib "rhombus/private/syntax-error.rkt") (lib "rhombus/scribblings/ref-number.scrbl") (lib "rhombus/scribblings/multiple-value.scrbl") (lib "enforest/scribblings/macro-protocol.scrbl") (lib "rhombus/private/import.rkt") (lib "rhombus/private/dot-syntax.rkt") (lib "rhombus/scribblings/ref-equal.scrbl") (lib "rhombus/private/list.rkt") (lib "enforest/scribblings/hierarchical-naming.scrbl") (lib "rhombus/private/nestable-declaration.rkt") (lib "rhombus/scribblings/function.scrbl") (lib "rhombus/private/for-clause.rkt") (lib "rhombus/private/wrap-expression.rkt") (lib "design/equality/poc/equality/util.rkt") (lib "rhombus/private/parse.rkt") (lib "rhombus/private/range.rkt") (lib "rhombus/private/quasiquote.rkt") (lib "rhombus/private/with-syntax.rkt") (lib "rhombus/and_meta.rkt") (lib "design/equality/poc/equality/key/interface.rkt") (lib "rhombus/private/dot-provider-key.rkt") (lib "shrubbery/tests/like-text.rkt") (lib "rhombus/private/builtin-dot.rkt") (lib "rhombus/private/parens.rkt") (lib "enforest/syntax-local.rkt") (lib "rhombus/scribblings/mutable-var.scrbl") (lib "design/equality/poc/equality/data/types.rkt") (lib "enforest/transformer-result.rkt") (lib "rhombus/private/reducer.rkt") (lib "rhombus/private/parsed.rkt") (lib "rhombus/scribblings/annotation.scrbl") (lib "enforest/sequence.rkt") (lib "rhombus/scribblings/ref-io.scrbl") (lib "rhombus/private/name-path-op.rkt") (lib "scribble/private/typeset-example.rkt") (lib "rhombus/scribblings/ref-array.scrbl") (lib "enforest/scribblings/transformer.scrbl") (lib "rhombus/private/import-syntax.rkt") (lib "enforest/scribblings/example.scrbl") (lib "rhombus/private/binding.rkt") (lib "scribble/private/property.rkt") (lib "rhombus/scribblings/ref-meta.scrbl") (lib "rhombus/private/setmap.rkt") (lib "rhombus/scribblings/conditional.scrbl") (lib "enforest/scribblings/implicit-operator.scrbl") (lib "rhombus/scribblings/static-info.scrbl") (lib "rhombus/scribblings/ref-namespace.scrbl") (lib "rhombus/private/expression+definition.rkt") (lib "rhombus/private/array.rkt") (lib "shrubbery/property.rkt") (lib "rhombus/scribblings/ref-meta-lib.scrbl") (lib "rhombus/private/setmap-parse.rkt") (lib "shrubbery/private/property.rkt") (lib "rhombus/scribblings/module.scrbl") (lib "rhombus/private/for.rkt") (lib "rhombus/private/srcloc.rkt") (lib "rhombus/private/dynamic-static.rkt") (lib "scribble/private/typeset-doc.rkt") (lib "rhombus/private/annotation-string.rkt") (lib "rhombus/private/default-stub.rkt") (lib "rhombus/scribblings/ref-repetition.scrbl") (lib "design/equality/poc/equality/data/util.rkt") (lib "scribble/private/typeset-rhombus.rkt") (lib "rhombus/private/misuse.rkt") (lib "shrubbery/private/edit-help.rkt") (lib "rhombus/scribblings/ref-syntax-class.scrbl") (lib "rhombus/private/equal.rkt"))) (name . "rhombus-prototype") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:mflatt@racket-lang.org . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/racket/rhombus-prototype.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "edd3fd63cd00a52b374a32173b393a59af36d0fe") (source . "https://github.com/racket/rhombus-prototype.git") (source_url . "https://github.com/racket/rhombus-prototype.git"))))))) ("ricoeur-kernel" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ricoeur-kernel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ricoeur-kernel.txt"))) (checksum . "1192906c24f8714cc179131ca921887ccdd5a2aa") (checksum-error . #f) (collection . "ricoeur") (conflicts . ()) (date-added . 1554233392) (dependencies . ("base" "adjutor" "reprovide-lang" "gregor" "functional-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A \"standard library\" for Digital Ricoeur") (implies . ()) (modules . ((lib "ricoeur/kernel/maybe.rkt") (lib "ricoeur/kernel.rkt") (lib "ricoeur/kernel/xml-path.rkt") (lib "ricoeur/kernel/utils.rkt") (lib "ricoeur/kernel/pre-kernel-lib.rkt") (lib "ricoeur/kernel/main.rkt") (lib "ricoeur/kernel/output-to-file.rkt") (lib "ricoeur/stdlib/json.rkt"))) (name . "ricoeur-kernel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DigitalRicoeur . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (util . #t) (utilities . #t) (utility . #t) (utils . #t))) (source . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git") (tags . ("DigitalRicoeur" "util" "utilities" "utility" "utils")) (versions . #hash((default . #hasheq((checksum . "1192906c24f8714cc179131ca921887ccdd5a2aa") (source . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git") (source_url . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git"))))))) ("ricoeur-tei-utils" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ricoeur-tei-guidelines" "doc/ricoeur-tei-guidelines@ricoeur-tei-utils/index.html") ("main" "ricoeur-tei-utils" "doc/ricoeur-tei-utils@ricoeur-tei-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ricoeur-tei-utils.txt") (test-failure-log . "server/built/test-fail/ricoeur-tei-utils.txt") (test-success-log . #f))) (checksum . "545c192aff9138d05bdd1aeb97d0f145508b84a8") (checksum-error . #f) (collection . "ricoeur") (conflicts . ()) (dependencies . ("base" "adjutor" "ricoeur-kernel" "functional-lib" "roman-numeral" "gregor-lib" "gui-lib" "pict-lib" "scribble-lib" "data-lib" "db-lib" "sql" "draw-lib" "icns" "parser-tools-lib" "pict-snip-lib" "nanopass" "reprovide-lang-lib" "typed-racket-lib" "typed-racket-more" "xmllint-win32-x86_64" "at-exp-lib" "syntax-color-lib" "scribble-lib" "racket-doc" "at-exp-lib" "functional-doc" "gregor-doc" "rackunit-lib" "_-exp" "db-doc" "data-doc" "gui-doc" "scribble-doc" "todo-list" "racket-index")) (description . "Digital Ricoeur library for TEI XML files") (implies . ()) (modules . ((lib "ricoeur/tei/tools/tei-lint/new-tei-document/from-file.rkt") (lib "ricoeur/tei/tools/tei-lint/lib.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document/pb-report.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document/warning-components.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/proto-frame.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/ed.rkt") (lib "ricoeur/scribblings/guidelines/for-guidelines.rkt") (lib "ricoeur/tei/spec-lang/test/extend.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/menu-bar.rkt") (lib "ricoeur/scribblings/guidelines/refining.scrbl") (lib "ricoeur/tei/base/specification/textClass.rkt") (lib "ricoeur/scribblings/tei-utils/general.scrbl") (lib "ricoeur/core-doc-lang/color-lexer.rkt") (lib "ricoeur/tei/kernel/interfaces.rkt") (lib "ricoeur/tei/spec-lang.rkt") (lib "ricoeur/tei/kernel/xexpr/normalize.rkt") (lib "ricoeur/secondary-lit/preprocessor/interactive.rkt") (lib "ricoeur/secondary-lit/preprocessor/read.rkt") (lib "ricoeur/tei/spec-lang/test/test3.rkt") (lib "ricoeur/tei/base/segments.rkt") (lib "ricoeur/core-doc-lang/examples/module-star.rkt") (lib "ricoeur/tei/kernel/instance-info.rkt") (lib "ricoeur/tei/spec-lang/stxparam.rkt") (lib "ricoeur/tei/tools/tei-lint/tei-lint.rkt") (lib "ricoeur/core-doc-lang/lift.rkt") (lib "ricoeur/tei/base/specification/content-elements.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/error.rkt") (lib "ricoeur/core-doc-lang/examples/derived-macro/provider.rkt") (lib "ricoeur/tei/tools/raco/raco.rkt") (lib "ricoeur/tei/corpus.rkt") (lib "ricoeur/tei/base/segments/location-stack.rkt") (lib "ricoeur/tei/kernel/xexpr/plain-contracts.rkt") (lib "ricoeur/tei/base/specification/teiHeader.rkt") (lib "ricoeur/tei/kernel.rkt") (lib "ricoeur/tei/spec-lang/ir/syntax-class.rkt") (lib "ricoeur/core-doc-lang/examples/good.rkt") (lib "ricoeur/tei/spec-lang/adt/base.rkt") (lib "ricoeur/tei/spec-lang/interface-macros.rkt") (lib "ricoeur/term-search/backend/postgresql.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/long-path.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/parse.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/file-snip.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/doc-lang.scrbl") (lib "ricoeur/secondary-lit/preprocessor/parse/support.rkt") (lib "ricoeur/scribblings/guidelines/tools.scrbl") (lib "ricoeur/secondary-lit/demo.rkt") (lib "ricoeur/secondary-lit/kernel/types.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/tei-lint.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/interfaces.rkt") (lib "ricoeur/term-search/backend/common.rkt") (lib "ricoeur/tei/spec-lang/adt.rkt") (lib "ricoeur/term-search/backend/regexp.rkt") (lib "ricoeur/scribblings/tei-utils/xexpr+xml.scrbl") (lib "ricoeur/scribblings/tei-utils/installing.scrbl") (lib "ricoeur/tei/tools/tei-lint/convert-icon.rkt") (lib "ricoeur/tei/base/specification/sourceDesc.rkt") (lib "ricoeur/tei/base/guess-paragraphs.rkt") (lib "ricoeur/new-core-tangled-lang/untangle.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/xml-preview.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/objectives.scrbl") (lib "ricoeur/secondary-lit/preprocessor.rkt") (lib "ricoeur/tei/tools/raco/encode-xml-entities.rkt") (lib "ricoeur/core-doc-lang/module-reader.rkt") (lib "ricoeur/tei/spec-lang/static-info.rkt") (lib "ricoeur/tei/tools/raco/directory-clean-filenames.rkt") (lib "ricoeur/tei/base/specification/titleStmt.rkt") (lib "ricoeur/tei/tools/raco/guess-paragraphs.rkt") (lib "ricoeur/tei/corpus/directory-corpus.rkt") (lib "ricoeur/tei/spec-lang/test/scope.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/common.rkt") (lib "ricoeur/tei/spec-lang/test/combine.rkt") (lib "ricoeur/tei/kernel/instance-set.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/new-tei-document-frame.rkt") (lib "ricoeur/new-core-tangled-lang/use-demo.rkt") (lib "ricoeur/tei/base/segments/meta.rkt") (lib "ricoeur/tei/spec-lang/adt/sugar.rkt") (lib "ricoeur/scribblings/tei-utils/implementation.scrbl") (lib "ricoeur/tei/kernel/xexpr/entity-utils.rkt") (lib "ricoeur/tei/corpus/class-exptime.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/component.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/bib-info.rkt") (lib "ricoeur/tei/spec-lang/test/test-use.rkt") (lib "ricoeur/core-doc-lang/examples/derived-macro/user.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/status-dot.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/for-lang-kernel.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document.rkt") (lib "ricoeur/tei/tools/raco/to-plain-text.rkt") (lib "ricoeur/core-doc-lang/make-module-begin.rkt") (lib "ricoeur/tei/corpus/test.rkt") (lib "ricoeur/tei/base/specification/structural-elements.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/common.rkt") (lib "ricoeur/scribblings/tei-utils/ricoeur-tei-utils.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/document/info-components.rkt") (lib "ricoeur/scribblings/tei-utils/corpus.scrbl") (lib "ricoeur/tei/tools/tei-lint/lib/xml-color.rkt") (lib "ricoeur/tei/kernel/schema.rkt") (lib "ricoeur/tei/spec-lang/ir/struct.rkt") (lib "ricoeur/tei/base/specification/text.rkt") (lib "ricoeur/tei/kernel/xmllint.rkt") (lib "ricoeur/tei/spec-lang/doc-support.rkt") (lib "ricoeur/scribblings/tei-utils/instance-info.scrbl") (lib "ricoeur/secondary-lit/preprocessor/write.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit.rkt") (lib "ricoeur/tei/spec-lang/test/test.rkt") (lib "ricoeur/term-search/backend.rkt") (lib "ricoeur/tei/spec-lang/test/test-stx.rkt") (lib "ricoeur/scribblings/tei-utils/element.scrbl") (lib "ricoeur/secondary-lit/front-end/types.rkt") (lib "ricoeur/term-search/backend/data-source-contract.rkt") (lib "ricoeur/core-doc-lang/examples/ambiguous.rkt") (lib "ricoeur/core-doc-lang/begin-for-runtime.rkt") (lib "ricoeur/tei/kernel/xexpr/contract-utils.rkt") (lib "ricoeur/core-doc-lang/examples/parent-for-label.rkt") (lib "ricoeur/tei/spec-lang/test/test4.rkt") (lib "ricoeur/scribblings/tei-utils/document.scrbl") (lib "ricoeur/tei/spec-lang/test/adt-test.rkt") (lib "ricoeur/tei/spec-lang/elem-for-runtime.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/search.scrbl") (lib "ricoeur/scribblings/tei-utils/term-search.scrbl") (lib "ricoeur/scribblings/tei-utils/implementation/lang/linking.scrbl") (lib "ricoeur/scribblings/tei-utils/for-manual.rkt") (lib "ricoeur/term-search/backend/sql-support.rkt") (lib "ricoeur/secondary-lit/kernel/topic-model.rkt") (lib "ricoeur/tei/corpus/current-corpus.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/shutdown.rkt") (lib "ricoeur/tei/kernel/base-structs.rkt") (lib "ricoeur/tei/spec-lang/link.rkt") (lib "ricoeur/tei/spec-lang/specification-lang.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/lint-file.rkt") (lib "ricoeur/tei/base/def-from-spec.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/book.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/article.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/prompt.rkt") (lib "ricoeur/tei/base.rkt") (lib "ricoeur/tei/base/get-page-breaks.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/make-doc-class.rkt") (lib "ricoeur/tei/spec-lang/test/test2.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/pages.rkt") (lib "ricoeur/term-search/backend/noop.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/confirm.rkt") (lib "ricoeur/tei/tools/raco/validate-directory.rkt") (lib "ricoeur/tei.rkt") (lib "ricoeur/core-doc-lang/main.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/define-element.scrbl") (lib "ricoeur/tei/corpus/plain-corpus.rkt") (lib "ricoeur/scribblings/guidelines/background.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/directory-frame.rkt") (lib "ricoeur/tei/corpus/exptime-common.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse.rkt") (lib "ricoeur/core-doc-lang.rkt") (lib "ricoeur/scribblings/guidelines/getting-started.scrbl") (lib "ricoeur/term-search/term-search-corpus.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/menu.rkt") (lib "ricoeur/scribblings/guidelines/ricoeur-tei-guidelines.scrbl") (lib "ricoeur/tei/spec-lang/test/test-duplicate.rkt") (lib "ricoeur/scribblings/tei-utils/segment.scrbl") (lib "ricoeur/scribblings/tei-utils/implementation/lang/lang-kernel.scrbl") (lib "ricoeur/tei/base/specification/specification.rkt") (lib "ricoeur/tei/tools/tei-lint/lint.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/module-structure.scrbl") (lib "ricoeur/term-search.rkt") (lib "ricoeur/secondary-lit/preprocessor/types.rkt") (lib "ricoeur/new-core-tangled-lang/demo-lang.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/nanopass.rkt") (lib "ricoeur/tei/spec-lang/doc-lang.rkt") (lib "ricoeur/core-doc-lang/doc-time.rkt"))) (name . "ricoeur-tei-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://bitbucket.org/digitalricoeur/tei-utils.git") (tags . ("application" "xml")) (versions . #hash((default . #hasheq((checksum . "545c192aff9138d05bdd1aeb97d0f145508b84a8") (source . "https://bitbucket.org/digitalricoeur/tei-utils.git") (source_url . "https://bitbucket.org/digitalricoeur/tei-utils.git"))))))) ("riff" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/riff.txt") (test-failure-log . "server/built/test-fail/riff.txt") (test-success-log . #f))) (checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "riff is a racket wrapper for FLIF") (implies . ()) (modules . ((lib "riff/main.rkt") (lib "riff/enc.rkt") (lib "riff/doc/dec.scrbl") (lib "riff/flif.rkt") (lib "riff/doc/enc.scrbl") (lib "riff/doc/flif.scrbl") (lib "riff/dec.rkt") (lib "riff/doc/manual.scrbl"))) (name . "riff") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (ffi . #t) (flif . #t) (images . #t) (ring:1 . #t) (wrapper . #t))) (source . "http://github.com/lehitoskin/riff/tree/master") (tags . ("compression" "decompression" "ffi" "flif" "images" "wrapper")) (versions . #hash((default . #hasheq((checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (source . "git://github.com/lehitoskin/riff") (source_url . "http://github.com/lehitoskin/riff/tree/master"))))))) ("rilouworld" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rilouworld.txt") (docs . (("main" "rilouworld" "doc/rilouworld@rilouworld/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rilouworld.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rilouworld.txt"))) (checksum . "184dea6c187f4f94da6616b89ec15cc8ba6bb786") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551127368) (dependencies . ("base" "math-lib" "draw-lib" "anaphoric" "web-server-lib" "mode-lambda" "lux" "reprovide-lang" "racket-doc" "scribble-lib")) (description . "Decentralized game universe in which players create and share their own levels") (implies . ()) (modules . ((lib "rilouworld/private/core/state-machine.rkt") (lib "rilouworld/scribblings/vocabulary.scrbl") (lib "rilouworld/engine.rkt") (lib "rilouworld/private/quest/props.rkt") (lib "rilouworld/private/utils/struct.rkt") (lib "rilouworld/private/core/receiver.rkt") (lib "rilouworld/private/bundle/reader.rkt") (lib "rilouworld/private/quest/loader.rkt") (lib "rilouworld/scribblings/reference/account.scrbl") (lib "rilouworld/private/core/event.rkt") (lib "rilouworld/private/ai/ai.rkt") (lib "rilouworld/bundles/quest.rkt") (lib "rilouworld/private/core/engine.rkt") (lib "rilouworld/private/core/player.rkt") (lib "rilouworld/main.rkt") (lib "rilouworld/private/core/database.rkt") (lib "rilouworld/scribblings/reference/reference.scrbl") (lib "rilouworld/private/quest/expander.rkt") (lib "rilouworld/private/bundle/expander.rkt") (lib "rilouworld/private/utils/log.rkt") (lib "rilouworld/scribblings/bundles/rilouw.scrbl") (lib "rilouworld/scribblings/quest-guide.scrbl") (lib "rilouworld/quest.rkt") (lib "rilouworld/private/network/api.rkt") (lib "rilouworld/account.rkt") (lib "rilouworld/scribblings/networking-guide.scrbl") (lib "rilouworld/scribblings/bundles/spacecat.scrbl") (lib "rilouworld/private/ai/ai-xor.rkt") (lib "rilouworld/scribblings/bundles/bundles.scrbl") (lib "rilouworld/scribblings/reference/quest.scrbl") (lib "rilouworld/private/network/account.rkt") (lib "rilouworld/bundle.rkt") (lib "rilouworld/bundles/spacecat.rkt") (lib "rilouworld/scribblings/rilouworld.scrbl") (lib "rilouworld/private/core/sprite.rkt") (lib "rilouworld/private/quest/world.rkt") (lib "rilouworld/private/quest/props-meta.rkt") (lib "rilouworld/private/quest/reader.rkt") (lib "rilouworld/bundles/rilouw.rkt") (lib "rilouworld/scribblings/reference/engine.scrbl"))) (name . "rilouworld") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jerome.martin.dev@gmail.com . #t) (game . #t) (game-engine . #t) (games . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/euhmeuh/rilouworld.git") (tags . ("2d" "game" "game-engine" "games" "network")) (versions . #hash((default . #hasheq((checksum . "184dea6c187f4f94da6616b89ec15cc8ba6bb786") (source . "https://github.com/euhmeuh/rilouworld.git") (source_url . "https://github.com/euhmeuh/rilouworld.git"))))))) ("rince" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rince" "doc/rince@rince/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rince.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rince.txt"))) (checksum . "61664bfee27a53d18fcb9880e1202eb5cc8f4a5f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1628603014) (dependencies . ("base" "c-utils" "parser-tools-lib" "rackunit-lib" "turnstile-lib" "racket-doc" "scribble-lib")) (description . "A runtime library and C->Racket compiler to allow running C programs on top of Racket (no FFI!)") (implies . ()) (modules . ((lib "rince/lang/keywords.rkt") (lib "rince/lang/convert-type.rkt") (lib "rince/libc.rkt") (lib "rince/lang/types.rkt") (lib "rince/lang/rep.rkt") (lib "rince/scribblings/internal.scrbl") (lib "rince/compile.rkt") (lib "rince/lang/syntax.rkt") (lib "rince/tests/readme.rkt") (lib "rince/lang/expression.rkt") (lib "rince/c/lang/main.rkt") (lib "rince/lang/goto.rkt") (lib "rince/lang/cpp.rkt") (lib "rince/lang/scope.rkt") (lib "rince/link.rkt") (lib "rince/lang/statement.rkt") (lib "rince/commands/run-c.rkt") (lib "rince/lib/stdio.rkt") (lib "rince/lang/parse.rkt") (lib "rince/tests/unit.rkt") (lib "rince/c/lang/reader.rkt") (lib "rince/lib.rkt") (lib "rince/scribblings/rince.scrbl"))) (name . "rince") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (c . #t) (experimental . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/lwhjp/rince.git") (tags . ("c" "experimental" "language")) (versions . #hash((default . #hasheq((checksum . "61664bfee27a53d18fcb9880e1202eb5cc8f4a5f") (source . "https://github.com/lwhjp/rince.git") (source_url . "https://github.com/lwhjp/rince.git"))))))) ("ring-buffer" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ring-buffer" "doc/ring-buffer@ring-buffer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ring-buffer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ring-buffer.txt"))) (checksum . "e93665407487ca0d31e1dadebc570371044f0c27") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An imperative overwriting ring buffer data structure") (implies . ()) (modules . ((lib "data/ring-buffer/ring-buffer.scrbl") (lib "data/ring-buffer.rkt") (lib "tests/data/ring-buffer.rkt"))) (name . "ring-buffer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/ring-buffer/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "e93665407487ca0d31e1dadebc570371044f0c27") (source . "github://github.com/jeapostrophe/ring-buffer/master") (source_url . "http://github.com/jeapostrophe/ring-buffer/tree/master"))))))) ("riposte" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "riposte" "doc/riposte@riposte/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/riposte.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/riposte.txt"))) (checksum . "73ae0b0086d3e8a8d38df095533d9f0a8ea6b31b") (checksum-error . #f) (collection . "riposte") (conflicts . ()) (date-added . 1607664711) (dependencies . ("br-parser-tools-lib" "brag-lib" "net-cookies-lib" "web-server-lib" "base" "racket-doc" "brag-lib" "br-parser-tools-lib" "beautiful-racket-lib" "http" "net-cookies-lib" "argo" "dotenv" "json-pointer" "misc1" "scribble-lib" "rackunit-lib" "web-server-lib" "net-cookies-lib" "beautiful-racket-lib")) (description . "Language for testing JSON-based HTTP APIs") (implies . ()) (modules . ((lib "riposte/scribblings/assignments.scrbl") (lib "riposte/grammar.rkt") (lib "riposte/examples/schema.rkt") (lib "riposte/examples/echo.rkt") (lib "riposte/examples/exec.rkt") (lib "riposte/cmd.rkt") (lib "riposte/examples/presence.rkt") (lib "riposte/examples/empty.rkt") (lib "riposte/examples/positive-integer.rkt") (lib "riposte/main.rkt") (lib "riposte/parser.rkt") (lib "riposte/server.rkt") (lib "riposte/examples/template.rkt") (lib "riposte/scribblings/riposte.scrbl") (lib "riposte/scribblings/wishlist.scrbl") (lib "riposte/response.rkt") (lib "riposte/json.rkt") (lib "riposte/examples/headers.rkt") (lib "riposte/examples/common.rkt") (lib "riposte/scribblings/parameters.scrbl") (lib "riposte/examples/equals.rkt") (lib "riposte/examples/json-pointer.rkt") (lib "riposte/scribblings/briefly.scrbl") (lib "riposte/util.rkt") (lib "riposte/scribblings/commands.scrbl") (lib "riposte/reader.rkt") (lib "riposte/scribblings/language.scrbl") (lib "riposte/scribblings/use.scrbl") (lib "riposte/scribblings/import.scrbl") (lib "riposte/examples/issue-2.rkt") (lib "riposte/tokenizer.rkt") (lib "riposte/scribblings/limitations.scrbl") (lib "riposte/examples/whole.rkt") (lib "riposte/scribblings/installation.scrbl") (lib "riposte/respond.rkt") (lib "riposte/examples/timeout.rkt") (lib "riposte/parameters.rkt") (lib "riposte/examples/cart.rkt") (lib "riposte/scribblings/misc.scrbl") (lib "riposte/scribblings/assertions.scrbl") (lib "riposte/examples/import.rkt") (lib "riposte/riposte.rkt") (lib "riposte/scribblings/origins.scrbl") (lib "riposte/scribblings/philosophy.scrbl") (lib "riposte/expander.rkt"))) (name . "riposte") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (http . #t) (json . #t) (lang . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/vicampo/riposte.git") (tags . ("http" "json" "lang" "testing")) (versions . #hash((default . #hasheq((checksum . "73ae0b0086d3e8a8d38df095533d9f0a8ea6b31b") (source . "https://github.com/vicampo/riposte.git") (source_url . "https://github.com/vicampo/riposte.git"))))))) ("rival" . #hasheq((author . "me@pavpanchekha.com") (authors . ("me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rival" "doc/rival@rival/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rival.txt") (test-failure-log . "server/built/test-fail/rival.txt") (test-success-log . #f))) (checksum . "4b01bb474726da861e54f28956e41c23455d6635") (checksum-error . #f) (collection . "rival") (conflicts . ()) (date-added . 1589823303) (dependencies . ("base" "math-lib" "rackunit-lib" "rackunit-lib" "scribble-lib" "racket-doc" "math-doc" "sandbox-lib")) (description . "Interval analysis for real computation") (implies . ()) (modules . ((lib "rival/infra/format-mathematica.rkt") (lib "rival/infra/generate-points.rkt") (lib "rival/rival.scrbl") (lib "rival/test.rkt") (lib "rival/infra/run-mpfi.rkt") (lib "rival/infra/interval-evaluate.rkt") (lib "rival/infra/report.rkt") (lib "rival/main.rkt") (lib "rival/infra/run-mathematica.rkt"))) (name . "rival") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (analysis . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (numerical . #t) (ring:1 . #t))) (source . "https://github.com/herbie-fp/rival.git") (tags . ("analysis" "floating-point" "numerical")) (versions . #hash((default . #hasheq((checksum . "4b01bb474726da861e54f28956e41c23455d6635") (source . "https://github.com/herbie-fp/rival.git") (source_url . "https://github.com/herbie-fp/rival.git"))))))) ("rkt-tree-widget" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rkt-tree-widget" "doc/rkt-tree-widget@rkt-tree-widget/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rkt-tree-widget.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rkt-tree-widget.txt"))) (checksum . "0c6e354874f063338cb4549f7d4a0338d6ea6586") (checksum-error . #f) (collection . "rkt-tree-widget") (conflicts . ()) (date-added . 1626268032) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "gui-doc" "rackunit-lib")) (description . "Yet another tree widget for racket/gui") (implies . ()) (modules . ((lib "rkt-tree-widget/tests/pos-tree.rkt") (lib "rkt-tree-widget/scribblings/rkt-tree-widget.scrbl") (lib "rkt-tree-widget/examples/dir.rkt") (lib "rkt-tree-widget/private/interfaces.rkt") (lib "rkt-tree-widget/base.rkt") (lib "rkt-tree-widget/main.rkt") (lib "rkt-tree-widget/private/tree-mixin.rkt") (lib "rkt-tree-widget/private/pos-tree.rkt") (lib "rkt-tree-widget/private/manual-scroll.rkt") (lib "rkt-tree-widget/private/tree-widget.rkt") (lib "rkt-tree-widget/private/pos-tree-helper.rkt") (lib "rkt-tree-widget/tests/tree-pos-cache.rkt") (lib "rkt-tree-widget/private/tree-pos-cache.rkt") (lib "rkt-tree-widget/examples/tree.rkt"))) (name . "rkt-tree-widget") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yj_qww6@126.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/rkt-tree-widget.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "0c6e354874f063338cb4549f7d4a0338d6ea6586") (source . "https://github.com/yjqww6/rkt-tree-widget.git") (source_url . "https://github.com/yjqww6/rkt-tree-widget.git"))))))) ("rktermios" . #hasheq((author . "dominik.pantucek@trustica.cz") (authors . ("dominik.pantucek@trustica.cz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rktermios" "doc/rktermios@rktermios/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rktermios.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rktermios.txt"))) (checksum . "cbcdd5b15542bf6f45907e6a6ba2932f0c4cd501") (checksum-error . #f) (collection . "rktermios") (conflicts . ()) (date-added . 1600709144) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "at-exp-lib")) (description . "This module allows the programmer to set the terminal to \"raw\" mode. It works both under Racket BC and Racket CS.\r\n") (implies . ()) (modules . ((lib "rktermios/main.rkt") (lib "rktermios/scribblings/rktermios.scrbl"))) (name . "rktermios") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dominik.pantucek@trustica.cz . #t) (ffi . #t) (posix . #t) (ring:1 . #t) (termios . #t))) (source . "https://gitlab.com/racketeer/rktermios.git") (tags . ("ffi" "posix" "termios")) (versions . #hash((default . #hasheq((checksum . "cbcdd5b15542bf6f45907e6a6ba2932f0c4cd501") (source . "https://gitlab.com/racketeer/rktermios.git") (source_url . "https://gitlab.com/racketeer/rktermios.git"))))))) ("rktfetch" . #hasheq((author . "ValleyKnight@protonmail.com xgqt@riseup.net") (authors . ("ValleyKnight@protonmail.com" "xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rktfetch" "doc/rktfetch@rktfetch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rktfetch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rktfetch.txt"))) (checksum . "17df179c7ff1f9aeea349bab1107cf2393055b95") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621104344) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "rktfetch is an info fetch tool (like neofetch) but written in Racket") (implies . ()) (modules . ((lib "rktfetch/main.rkt") (lib "rktfetch/private/get/device.rkt") (lib "rktfetch/private/get/distro.rkt") (lib "rktfetch/private/get/logo.rkt") (lib "rktfetch/private/get/helpers/logos.rkt") (lib "rktfetch/private/get.rkt") (lib "rktfetch/private/get/helpers/separator.rkt") (lib "rktfetch/private/get/helpers/basename.rkt") (lib "rktfetch/private/get/cpu.rkt") (lib "rktfetch/private/get/os.rkt") (lib "rktfetch/private/get/editor.rkt") (lib "rktfetch/private/get/helpers/is.rkt") (lib "rktfetch/private/get/uptime.rkt") (lib "rktfetch/private/get/helpers/string.rkt") (lib "rktfetch/private/get/helpers/grep.rkt") (lib "rktfetch/scribblings/rktfetch.scrbl") (lib "rktfetch/private/get/kernel.rkt") (lib "rktfetch/private/get/user.rkt") (lib "rktfetch/private/get/helpers/time.rkt") (lib "rktfetch/private/get/helpers/cmd.rkt") (lib "rktfetch/private/get/memory.rkt") (lib "rktfetch/private/get/desktop.rkt") (lib "rktfetch/private/get/pkg.rkt") (lib "rktfetch/private/get/shell.rkt"))) (name . "rktfetch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ValleyKnight@protonmail.com . #t) (author:xgqt@riseup.net . #t) (information . #t) (ring:1 . #t) (system . #t))) (source . "https://github.com/mythical-linux/rktfetch.git") (tags . ("information" "system")) (versions . #hash((default . #hasheq((checksum . "17df179c7ff1f9aeea349bab1107cf2393055b95") (source . "https://github.com/mythical-linux/rktfetch.git") (source_url . "https://github.com/mythical-linux/rktfetch.git"))))))) ("rmacs" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/rmacs.txt") (success-log . "server/built/install/rmacs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rmacs.txt"))) (checksum . "8c99dd5dfa22f1f34707bbe957de268dc6a7a632") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "ansi" "syntax-color-lib" "gui-lib" "unix-signals" "diff-merge" "web-server-lib" "profile-lib" "rackunit-lib")) (description . "An EMACS written in Racket. Runs in ANSI-compatible terminals.") (implies . ()) (modules . ((lib "rmacs/topsort.rkt") (lib "rmacs/buffer.rkt") (lib "rmacs/mode.rkt") (lib "rmacs/display-gui-check.rkt") (lib "rmacs/rope/range.rkt") (lib "rmacs/mode/fundamental.rkt") (lib "rmacs/keys.rkt") (lib "rmacs/rope.rkt") (lib "rmacs/main.rkt") (lib "rmacs/search.rkt") (lib "rmacs/minibuf.rkt") (lib "rmacs/window.rkt") (lib "rmacs/file.rkt") (lib "rmacs/rope/index.rkt") (lib "rmacs/rope/piece.rkt") (lib "rmacs/mark.rkt") (lib "rmacs/wrap.rkt") (lib "rmacs/local.rkt") (lib "rmacs/strings.rkt") (lib "rmacs/rope/string.rkt") (lib "rmacs/render.rkt") (lib "rmacs/ring.rkt") (lib "rmacs/colorize.rkt") (lib "rmacs/circular-list.rkt") (lib "rmacs/display-terminal.rkt") (lib "rmacs/api.rkt") (lib "rmacs/display-gui.rkt") (lib "rmacs/syntax.rkt") (lib "rmacs/lists.rkt") (lib "rmacs/rope/test.rkt") (lib "rmacs/timing.rkt") (lib "rmacs/editor.rkt") (lib "rmacs/history.rkt") (lib "rmacs/display.rkt"))) (name . "rmacs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (editor . #t) (ring:1 . #t) (terminal . #t))) (source . "http://github.com/tonyg/rmacs/tree/master") (tags . ("editor" "terminal")) (versions . #hash((default . #hasheq((checksum . "8c99dd5dfa22f1f34707bbe957de268dc6a7a632") (source . "github://github.com/tonyg/rmacs/master") (source_url . "http://github.com/tonyg/rmacs/tree/master"))))))) ("rmc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rmc.txt") (test-failure-log . "server/built/test-fail/rmc.txt") (test-success-log . #f))) (checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (checksum-error . #f) (collection . "rmc") (conflicts . ()) (dependencies . ("pprint" "chk" "base" "rackunit-lib")) (description . "Racket-made C") (implies . ()) (modules . ((lib "rmc/t.rkt") (lib "rmc/t/lib.rkt") (lib "rmc/t/ts.rkt") (lib "rmc/h.rkt") (lib "rmc/private/class.rkt") (lib "rmc/main.rkt") (lib "rmc/t/fac.rkt") (lib "rmc/t/libc.rkt") (lib "rmc/lib.rkt") (lib "rmc/h/glfw.rkt") (lib "rmc/h/libc.rkt"))) (name . "rmc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (dsl . #t) (ffi . #t) (ring:1 . #t) (systems . #t))) (source . "http://github.com/jeapostrophe/rmc/tree/master") (tags . ("c" "dsl" "ffi" "systems")) (versions . #hash((default . #hasheq((checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (source . "git://github.com/jeapostrophe/rmc") (source_url . "http://github.com/jeapostrophe/rmc/tree/master"))))))) ("rml-neural" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rml-neural" "doc/rml-neural@rml-neural/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rml-neural.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rml-neural.txt"))) (checksum . "5e3c95ab118007e16ac25627229674894e8c5302") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550686995) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "rackunit-lib" "scribble-lib" "scribble-math" "racket-doc" "racket-index" "sandbox-lib" "cover-coveralls")) (description . "Pedantic implementation of neural networks for deep learning in Racket") (implies . ()) (modules . ((lib "rml-neural/activation.rkt") (lib "rml-neural/scribblings/activation.scrbl") (lib "rml-neural/private/act-struct.rkt") (lib "rml-neural/main.rkt") (lib "rml-neural/private/act-syntax.rkt") (lib "rml-neural/private/act-plot.rkt") (lib "rml-neural/private/contract.rkt") (lib "rml-neural/tests/rml-neural.rkt") (lib "rml-neural/perceptron.rkt") (lib "rml-neural/scribblings/rml-neural.scrbl") (lib "rml-neural/scribblings/_rml-neural.scrbl") (lib "rml-neural/tests/test-doc-complete.rkt") (lib "rml-neural/private/rml-neural.rkt") (lib "rml-neural/cost.rkt") (lib "rml-neural/flmatrix.rkt") (lib "rml-neural/scribblings/act-plots.rkt"))) (name . "rml-neural") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ml . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/rml-neural.git") (tags . ("ml")) (versions . #hash((default . #hasheq((checksum . "5e3c95ab118007e16ac25627229674894e8c5302") (source . "https://github.com/johnstonskj/rml-neural.git") (source_url . "https://github.com/johnstonskj/rml-neural.git"))))))) ("rockstar" . #hasheq((author . "whichxjy@gmail.com") (authors . ("whichxjy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rockstar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rockstar.txt"))) (checksum . "47723774e7ec6995eedd8fba27856b58ab056f71") (checksum-error . #f) (collection . "rockstar") (conflicts . ()) (date-added . 1568235950) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib")) (description . "Racket-imple\u00ADmented Rockstar") (implies . ()) (modules . ((lib "rockstar/lexer-test.rkt") (lib "rockstar/expander.rkt") (lib "rockstar/tokenize-only.rkt") (lib "rockstar/tokenizer.rkt") (lib "rockstar/parse-only.rkt") (lib "rockstar/lexer.rkt") (lib "rockstar/parser.rkt") (lib "rockstar/preprocessor-test.rkt") (lib "rockstar/main.rkt") (lib "rockstar/preprocessor.rkt"))) (name . "rockstar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:whichxjy@gmail.com . #t) (ring:1 . #t) (rockstar . #t))) (source . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar") (tags . ("rockstar")) (versions . #hash((default . #hasheq((checksum . "47723774e7ec6995eedd8fba27856b58ab056f71") (source . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar") (source_url . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar"))))))) ("rodot" . #hasheq((author . "src@jsgrant.io") (authors . ("src@jsgrant.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/rodot.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c79986ac71154bed153dd1ea2dec15254369bf05") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/jsgrant/rodot.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . "rodot") (conflicts . ()) (date-added . 1633180113) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "**EXPERIMENTAL** An Attempt At Godot4 x GDExtensions Support For Racket.") (implies . ()) (modules . ((lib "rodot/main.rkt") (lib "rodot/scribblings/rodot.scrbl"))) (name . "rodot") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:src@jsgrant.io . #t) (bindings . #t) (godot . #t) (ring:1 . #t))) (source . "https://github.com/jsgrant/rodot.git") (tags . ("bindings" "godot")) (versions . #hash((default . #hasheq((checksum . "c79986ac71154bed153dd1ea2dec15254369bf05") (source . "https://github.com/jsgrant/rodot.git") (source_url . "https://github.com/jsgrant/rodot.git"))))))) ("rokit-racket" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rokit-racket.txt") (docs . (("main" "rokit-racket" "doc/rokit-racket@rokit-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rokit-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rokit-racket.txt"))) (checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Racket library for compiling to the Rokit Arduino-based robotics kits.  We use these kits in ThoughtSTEM robotics classes. ") (implies . ()) (modules . ((lib "rokit-racket/main.rkt") (lib "rokit-racket/rokit-racket-module.rkt") (lib "rokit-racket/arduino-lang.rkt") (lib "rokit-racket/test.rkt") (lib "rokit-racket/prefs.rkt") (lib "rokit-racket/rokit-racket.scrbl") (lib "rokit-racket/arduino-compile.rkt"))) (name . "rokit-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (source_url . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket"))))))) ("roman-numeral" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "roman-numeral" "doc/roman-numeral@roman-numeral/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roman-numeral.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roman-numeral.txt"))) (checksum . "d13c66b19438060fc42773ed2db526d1a71e8129") (checksum-error . #f) (collection . "roman-numeral") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for parsing and writing Roman numerals") (implies . ()) (modules . ((lib "roman-numeral/scribblings/roman-numeral.scrbl") (lib "roman-numeral/main.rkt"))) (name . "roman-numeral") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t) (util . #t) (utility . #t))) (source . "http://github.com/LiberalArtist/roman-numeral/tree/master") (tags . ("parser" "parsing" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "d13c66b19438060fc42773ed2db526d1a71e8129") (source . "git://github.com/LiberalArtist/roman-numeral") (source_url . "http://github.com/LiberalArtist/roman-numeral/tree/master"))))))) ("rosetta" . #hasheq((author . "antonio.menezes.leitao@gmail.com") (authors . ("antonio.menezes.leitao@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosetta.txt") (test-failure-log . "server/built/test-fail/rosetta.txt") (test-success-log . #f))) (checksum . "1b81b10b0c8eb77d92d6b5ea86d0eb940add0888") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "srfi-lib" "typed-racket-lib")) (description . "") (implies . ()) (modules . ((lib "rosetta/simulation/materials.rkt") (lib "rosetta/archicad/protobuf1/encoding.rkt") (lib "rosetta/base/utils.rkt") (lib "rosetta/base/enums.rkt") (lib "rosetta/base/bim-families.rkt") (lib "rosetta/revit/rosetta/protobuf1/protobuf.rkt") (lib "rosetta/base/connection.rkt") (lib "rosetta/revit/rosetta/protobuf1/syntax.rkt") (lib "rosetta/revit-server.rkt") (lib "rosetta/autocad-server/backend.rkt") (lib "rosetta/revit.rkt") (lib "rosetta/archicad/objects.rkt") (lib "rosetta/archicad/protobuf1/protobuf.rkt") (lib "rosetta/autocad-native.rkt") (lib "rosetta/lighting-simulation.rkt") (lib "rosetta/revit/rosetta/protobuf1/reflection.rkt") (lib "rosetta/autocad-server/primitives.rkt") (lib "rosetta/util/geometry.rkt") (lib "rosetta/autocad-server.rkt") (lib "rosetta/tikz.rkt") (lib "rosetta/base/bim-operations.rkt") (lib "rosetta/revit-server/backend.rkt") (lib "rosetta/archicad/protobuf1/syntax.rkt") (lib "rosetta/main.rkt") (lib "rosetta/rhinoceros/backend.rkt") (lib "rosetta/autocad/ac-enums.rkt") (lib "rosetta/archicad/messages.rkt") (lib "rosetta/archicad/protobuf1/reflection.rkt") (lib "rosetta/revit/main.rkt") (lib "rosetta/archicad/inspector.rkt") (lib "rosetta/tikz/primops.rkt") (lib "rosetta/archicad/backend.rkt") (lib "rosetta/base/typed-com.rkt") (lib "rosetta/revit/rosetta/protobuf1/encoding.rkt") (lib "rosetta/sketchup/primops.rkt") (lib "rosetta/autocad/backend.rkt") (lib "rosetta/simulation/simulation.rkt") (lib "rosetta/base/shapes.rkt") (lib "rosetta/archicad/communication.rkt") (lib "rosetta/util/delaunay.rkt") (lib "rosetta/util/excel.rkt") (lib "rosetta/sketchup.rkt") (lib "rosetta/base/raw-connection.rkt") (lib "rosetta/rhinoceros/rh-com.rkt") (lib "rosetta/robot/backend.rkt") (lib "rosetta/archicad/install.rkt") (lib "rosetta/revit/pbContracts.rkt") (lib "rosetta/autocad.rkt") (lib "rosetta/rhino.rkt") (lib "rosetta/tikz/backend.rkt") (lib "rosetta/robot/robot-com.rkt") (lib "rosetta/archicad.rkt") (lib "rosetta/revit-server/primitives.rkt") (lib "rosetta/base/com.rkt") (lib "rosetta/autocad/main.rkt") (lib "rosetta/revit/backend.rkt") (lib "rosetta/tikz/main.rkt") (lib "rosetta/robot/robot-enums.rkt") (lib "rosetta/revit/racketSide.rkt") (lib "rosetta/autocad/ac-com.rkt") (lib "rosetta/sketchup/backend.rkt") (lib "rosetta/base/coord.rkt") (lib "rosetta/archicad/geometry.rkt"))) (name . "rosetta") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:antonio.menezes.leitao@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/aptmcl/rosetta/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1b81b10b0c8eb77d92d6b5ea86d0eb940add0888") (source . "git://github.com/aptmcl/rosetta") (source_url . "http://github.com/aptmcl/rosetta/tree/master"))))))) ("rosette" . #hasheq((author . "emina@cs.washington.edu") (authors . ("emina@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rosette-guide" "doc/rosette-guide@rosette/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rosette.txt"))) (checksum . "c407b871f2d62d841f150a515f24f44f905ddfa9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("custom-load" "sandbox-lib" "scribble-lib" "racket" "r6rs-lib" "rfc6455" "net-lib" "web-server-lib" "rackunit-lib" "slideshow-lib" "gui-lib" "base" "rackunit-doc" "draw-lib" "errortrace-lib" "pict-lib" "pict-doc" "scribble-lib" "racket-doc" "gui-doc" "errortrace-doc")) (description . "The Rosette Language") (implies . ()) (modules . ((lib "test/profile/benchmarks/exn.rkt") (lib "sdsl/bv/lang/log.rkt") (lib "test/profile/benchmarks/update-at.rkt") (lib "rosette/lib/trace/compile.rkt") (lib "rosette/base/core/function.rkt") (lib "rosette/base/core/distinct.rkt") (lib "test/trace/code/lib.rkt") (lib "test/trace/stress/tail.rkt") (lib "rosette/guide/scribble/util/lifted.rkt") (lib "test/base/solver.rkt") (lib "rosette/guide/scribble/welcome/welcome.scrbl") (lib "sdsl/synthcl/lang/queries.rkt") (lib "test/query/synthax.rkt") (lib "rosette/lib/util/streaming-server.rkt") (lib "rosette/private/install.rkt") (lib "rosette/lib/profile/tool.rkt") (lib "test/trace/code/ex-1-2.rkt") (lib "sdsl/synthcl/examples/toy/verify/kernel.rkt") (lib "rosette/solver/smt/boolector.rkt") (lib "test/trace/test.rkt") (lib "rosette/main.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/kernel.rkt") (lib "sdsl/fsm/demo.rkt") (lib "sdsl/ifc/basic.rkt") (lib "sdsl/synthcl/model/program.rkt") (lib "rosette/lib/destruct.rkt") (lib "rosette/guide/scribble/unsafe/unsafe.scrbl") (lib "sdsl/synthcl/model/buffer.rkt") (lib "rosette/base/core/reporter.rkt") (lib "rosette/solver/smt/cvc4.rkt") (lib "sdsl/bv/lang/program.rkt") (lib "test/config.rkt") (lib "sdsl/bv/test/easy.rkt") (lib "rosette/guide/scribble/libs/racket-libs.scrbl") (lib "rosette/lib/profile/reporter.rkt") (lib "test/base/bvseq.rkt") (lib "test/base/merge.rkt") (lib "rosette/base/core/type.rkt") (lib "rosette/base/core/numerics.rkt") (lib "test/base/term.rkt") (lib "test/base/equality.rkt") (lib "rosette/lib/match.rkt") (lib "sdsl/bv/lang/bvops.rkt") (lib "sdsl/synthcl/test/typecheck.rkt") (lib "test/profile/test.rkt") (lib "test/base/exprs.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_2.rkt") (lib "sdsl/bv/test/all-tests.rkt") (lib "sdsl/synthcl/lang/builtins.rkt") (lib "rosette/lib/profile/renderer/heap.rkt") (lib "sdsl/websynth/test/imdb250_16.rkt") (lib "rosette/base/core/bvlib.rkt") (lib "rosette/guide/scribble/performance/performance.scrbl") (lib "test/query/solve.rkt") (lib "sdsl/synthcl/examples/sobelFilter/host.rkt") (lib "sdsl/websynth/test/all-tests.rkt") (lib "sdsl/websynth/test/alanon_arkansas_8.rkt") (lib "test/query/optimize.rkt") (lib "sdsl/synthcl/model/queue.rkt") (lib "rosette/base/form/define.rkt") (lib "rosette/base/core/procedure.rkt") (lib "rosette/lib/trace/report/fix-path.rkt") (lib "sdsl/synthcl/model/flags.rkt") (lib "sdsl/fsm/viz.rkt") (lib "test/base/vector.rkt") (lib "rosette/guide/scribble/rosette-guide.scrbl") (lib "rosette/lib/profile/renderer/report/solver.rkt") (lib "test/base/uninterpreted.rkt") (lib "rosette/guide/scribble/datatypes/procedures.scrbl") (lib "rosette/guide/scribble/reflection/state-reflection.scrbl") (lib "rosette/base/struct/generics.rkt") (lib "rosette/base/core/bitvector.rkt") (lib "rosette/lib/util/syntax-properties.rkt") (lib "sdsl/websynth/benchmarks/itunes100_4.rkt") (lib "test/query/solve+.rkt") (lib "test/base/bvlib.rkt") (lib "sdsl/synthcl/test/snippets.rkt") (lib "sdsl/synthcl/model/pointers.rkt") (lib "test/base/real.rkt") (lib "test/trace/code/non-tail.rkt") (lib "test/base/forall.rkt") (lib "sdsl/synthcl/model/memory.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/kernel.rkt") (lib "sdsl/websynth/test/itunes100_2.rkt") (lib "rosette/guide/scribble/datatypes/defined-datatypes.scrbl") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host.rkt") (lib "rosette/guide/scribble/datatypes/bools+ints+reals.scrbl") (lib "sdsl/websynth/test/alanon_arkansas_16.rkt") (lib "rosette/lib/trace/mock-server.rkt") (lib "rosette/solver/smt/env.rkt") (lib "sdsl/fsm/automaton.rkt") (lib "rosette/solver/smt/server.rkt") (lib "rosette/lib/angelic.rkt") (lib "rosette/query/finitize.rkt") (lib "rosette/base/core/result.rkt") (lib "rosette/guide/scribble/datatypes/pairs.scrbl") (lib "test/base/quantified.rkt") (lib "sdsl/websynth/benchmarks/itunes100_2.rkt") (lib "rosette/base/core/real.rkt") (lib "rosette/guide/scribble/error-tracing/test.rkt") (lib "sdsl/websynth/test/itunes100_16.rkt") (lib "sdsl/synthcl/lang/typecheck.rkt") (lib "rosette/lib/roseunit.rkt") (lib "sdsl/ifc/call.rkt") (lib "sdsl/bv/test/util.rkt") (lib "sdsl/bv/lang/core.rkt") (lib "rosette/solver/smt/dec.rkt") (lib "sdsl/synthcl/examples/toy/synth/kernel.rkt") (lib "sdsl/websynth/benchmarks/imdb250_4.rkt") (lib "rosette/lib/util/ws-server.rkt") (lib "rosette/base/core/bool.rkt") (lib "test/base/generics.rkt") (lib "sdsl/synthcl/test/work.rkt") (lib "sdsl/bv/examples/reference.rkt") (lib "rosette/guide/scribble/libs/bvmul2.rkt") (lib "test/base/bool.rkt") (lib "rosette/guide/scribble/performance/xform.rkt") (lib "test/query/synthesize.rkt") (lib "sdsl/ifc/value.rkt") (lib "rosette/base/core/store.rkt") (lib "rosette/base/core/reflect.rkt") (lib "rosette/base/adt/bvseq.rkt") (lib "test/all-rosette-tests.rkt") (lib "test/base/store.rkt") (lib "rosette/base/core/equality.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/kernel.rkt") (lib "sdsl/websynth/websynth.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/host.rkt") (lib "rosette/lib/profile/renderer/noop.rkt") (lib "test/trace/code/tail.rkt") (lib "sdsl/synthcl/test/grammar.rkt") (lib "test/base/list.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/test.rkt") (lib "sdsl/ifc/verify-EENI-demo.rkt") (lib "sdsl/bv/examples/medium.rkt") (lib "sdsl/ifc/verify.rkt") (lib "test/base/reflect.rkt") (lib "rosette/base/form/app.rkt") (lib "rosette/solver/solution.rkt") (lib "rosette/base/adt/generic.rkt") (lib "rosette/lib/value-browser.rkt") (lib "rosette/lang/reader.rkt") (lib "test/trace/code/solver-limitation.rkt") (lib "sdsl/synthcl/test/all-tests.rkt") (lib "rosette/guide/scribble/libs/calc-lang.rkt") (lib "rosette/guide/scribble/forms/forms.scrbl") (lib "test/base/type.rkt") (lib "rosette/lib/profile/feature.rkt") (lib "test/trace/code/forall.rkt") (lib "sdsl/synthcl/model/kernel.rkt") (lib "rosette/guide/scribble/forms/racket-forms.scrbl") (lib "rosette/safe.rkt") (lib "rosette/lib/profile/renderer/trace.rkt") (lib "rosette/lib/profile.rkt") (lib "test/trace/code/no-error.rkt") (lib "test/trace/code/error.rkt") (lib "sdsl/websynth/test/imdb250_4.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_4.rkt") (lib "rosette/guide/scribble/refs.scrbl") (lib "sdsl/synthcl/lang/sugar.rkt") (lib "sdsl/synthcl/lang/errors.rkt") (lib "sdsl/websynth/benchmarks/imdb250_8.rkt") (lib "rosette/base/core/lift.rkt") (lib "sdsl/bv/lang/form.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/host.rkt") (lib "sdsl/websynth/benchmarks/itunes100_8.rkt") (lib "test/trace/code/assertion.rkt") (lib "rosette/query/eval.rkt") (lib "rosette/guide/scribble/util/demo.rkt") (lib "rosette/base/adt/vector.rkt") (lib "rosette/guide/scribble/datatypes/uninterpreted.scrbl") (lib "rosette/lib/profile/renderer/syntax.rkt") (lib "rosette/guide/scribble/reflection/symbolic-reflection.scrbl") (lib "sdsl/synthcl/model/objects.rkt") (lib "rosette/base/form/module.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host-buggy.rkt") (lib "test/trace/code/macro.rkt") (lib "rosette/guide/scribble/error-tracing/error-tracing.scrbl") (lib "test/base/distinct.rkt") (lib "sdsl/synthcl/model/runtime.rkt") (lib "rosette/guide/scribble/util/clean.rkt") (lib "sdsl/synthcl/model/type.rkt") (lib "sdsl/ifc/instruction.rkt") (lib "sdsl/websynth/websynthlib.rkt") (lib "sdsl/bv/examples/hard.rkt") (lib "rosette/query/query.rkt") (lib "test/query/grammar.rkt") (lib "rosette/lib/util/module.rkt") (lib "sdsl/synthcl/model/context.rkt") (lib "test/base/bitvector.rkt") (lib "sdsl/websynth/benchmarks/imdb250_2.rkt") (lib "sdsl/synthcl/test/operators.rkt") (lib "rosette/base/struct/struct.rkt") (lib "rosette/guide/scribble/libs/utility-libs.scrbl") (lib "rosette/solver/smt/enc.rkt") (lib "sdsl/synthcl/model/operators.rkt") (lib "test/base/eval-guarded.rkt") (lib "test/trace/code/ex-3.rkt") (lib "test/profile/renderer.rkt") (lib "sdsl/websynth/test/imdb250_2.rkt") (lib "rosette/lib/profile/graph.rkt") (lib "sdsl/synthcl/lang/main.rkt") (lib "test/trace/code/list.rkt") (lib "test/trace/code/ex-2.rkt") (lib "rosette/lib/util/syntax.rkt") (lib "rosette/guide/scribble/datatypes/equality.scrbl") (lib "sdsl/websynth/test/itunes100_4.rkt") (lib "rosette/solver/solver.rkt") (lib "rosette/guide/scribble/datatypes/bitvectors.scrbl") (lib "rosette/guide/scribble/datatypes/vectors.scrbl") (lib "sdsl/ifc/machine.rkt") (lib "rosette/solver/smt/base-solver.rkt") (lib "rosette/guide/scribble/error-tracing/sum.rkt") (lib "test/trace/code/ex-1-3.rkt") (lib "rosette/solver/smt/z3.rkt") (lib "sdsl/websynth/dom.rkt") (lib "test/all-sdsl-tests.rkt") (lib "sdsl/synthcl/test/memory.rkt") (lib "rosette/base/core/union.rkt") (lib "sdsl/synthcl/test/reals.rkt") (lib "rosette/base/form/control.rkt") (lib "test/base/vc.rkt") (lib "sdsl/synthcl/model/errors.rkt") (lib "sdsl/fsm/fsm.rkt") (lib "test/base/common.rkt") (lib "rosette/lib/profile/compile.rkt") (lib "sdsl/bv/test/medium.rkt") (lib "rosette/lib/profile/renderer/report/generic.rkt") (lib "sdsl/ifc/test.rkt") (lib "rosette/query/form.rkt") (lib "sdsl/synthcl/lang/operators.rkt") (lib "rosette/base/core/polymorphic.rkt") (lib "test/base/finitize.rkt") (lib "sdsl/synthcl/lang/types.rkt") (lib "sdsl/websynth/test/imdb250_8.rkt") (lib "test/query/verify.rkt") (lib "rosette/lib/trace/raco.rkt") (lib "test/trace/stress/non-tail.rkt") (lib "rosette/base/core/safe.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_16.rkt") (lib "sdsl/websynth/test/itunes100_8.rkt") (lib "test/query/synthax-external.rkt") (lib "rosette/guide/scribble/error-tracing/select.rkt") (lib "test/trace/code/core-form.rkt") (lib "test/trace/code/infeasible-solver.rkt") (lib "rosette/lib/trace/client-launcher.rkt") (lib "rosette/lib/profile/renderer/report.rkt") (lib "sdsl/websynth/benchmarks/imdb250_16.rkt") (lib "rosette/guide/scribble/essentials/essentials.scrbl") (lib "rosette/lib/trace/sample-data.rkt") (lib "sdsl/synthcl/test/more-snippets.rkt") (lib "test/trace/code/if.rkt") (lib "sdsl/ifc/indistinguishable.rkt") (lib "rosette/lib/profile/renderer/report/callgraph.rkt") (lib "sdsl/bv/bv.rkt") (lib "test/trace/perf-runner.rkt") (lib "rosette/guide/scribble/libs/libraries.scrbl") (lib "rosette/lib/profile/data.rkt") (lib "sdsl/synthcl/examples/sobelFilter/test.rkt") (lib "test/profile/benchmarks/list.rkt") (lib "sdsl/fsm/query.rkt") (lib "test/trace/code/test-track-form.rkt") (lib "sdsl/synthcl/examples/toy/synth/host.rkt") (lib "test/lib/destruct.rkt") (lib "test/trace/code/toplevel.rkt") (lib "test/base/decode.rkt") (lib "rosette/solver/smt/smtlib2.rkt") (lib "rosette/base/core/exn.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/kernel.rkt") (lib "rosette/guide/scribble/datatypes/boxes.scrbl") (lib "test/trace/code/test-stack.rkt") (lib "rosette/lib/trace/tool.rkt") (lib "sdsl/synthcl/lang/env.rkt") (lib "sdsl/websynth/test/alanon_arkansas_4.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/test.rkt") (lib "rosette/base/adt/box.rkt") (lib "rosette/base/adt/list.rkt") (lib "rosette/guide/scribble/forms/rosette-forms.scrbl") (lib "test/base/push-pop.rkt") (lib "rosette/base/core/merge.rkt") (lib "sdsl/synthcl/examples/toy/verify/host.rkt") (lib "test/trace/code/macro-define.rkt") (lib "test/trace/code/infeasible.rkt") (lib "rosette/base/core/eval.rkt") (lib "sdsl/synthcl/model/work.rkt") (lib "rosette/base/struct/struct-type.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/test.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/host.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_8.rkt") (lib "sdsl/synthcl/examples/sobelFilter/kernel.rkt") (lib "rosette/guide/scribble/datatypes/solvers+solutions.scrbl") (lib "sdsl/bv/lang/fragment.rkt") (lib "rosette/base/adt/seq.rkt") (lib "rosette/query/core.rkt") (lib "rosette/guide/scribble/essentials/bvmid.rkt") (lib "rosette/guide/scribble/datatypes/builtin-datatypes.scrbl") (lib "sdsl/synthcl/examples/matrixMultiply/synth/test.rkt") (lib "sdsl/ifc/jump.rkt") (lib "sdsl/bv/examples/easy.rkt") (lib "test/trace/code/ex-1-1.rkt") (lib "rosette/lib/profile/raco.rkt") (lib "rosette/guide/scribble/reflection/value-reflection.scrbl") (lib "rosette/lib/profile/renderer/report/terms.rkt") (lib "rosette/guide/scribble/datatypes/test.rkt") (lib "sdsl/synthcl/examples/sobelFilter/reference.rkt") (lib "sdsl/synthcl/lang/forms.rkt") (lib "rosette/lib/synthax.rkt") (lib "rosette/lib/profile/renderer/renderer.rkt") (lib "sdsl/synthcl/model/reals.rkt") (lib "sdsl/synthcl/lang/util.rkt") (lib "rosette/guide/scribble/libs/rosette-libs.scrbl") (lib "sdsl/fsm/lib.rkt") (lib "rosette/base/core/term.rkt") (lib "sdsl/websynth/benchmarks/itunes100_16.rkt") (lib "rosette/safe/lang/reader.rkt") (lib "rosette/base/base.rkt") (lib "rosette/lib/profile/record.rkt") (lib "rosette/base/core/forall.rkt") (lib "sdsl/websynth/test/alanon_arkansas_2.rkt") (lib "rosette/solver/smt/cmd.rkt") (lib "test/trace/code/list-2.rkt"))) (name . "rosette") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:emina@cs.washington.edu . #t) (ring:1 . #t))) (source . "http://github.com/emina/rosette/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c407b871f2d62d841f150a515f24f44f905ddfa9") (source . "git://github.com/emina/rosette") (source_url . "http://github.com/emina/rosette/tree/master"))))))) ("rosette-extras" . #hasheq((author . "sam@lenary.co.uk") (authors . ("sam@lenary.co.uk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/rosette-extras.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "66f45e9cddd8ac3e2c9b182e38a71dd49c8ef089") (checksum-error . #f) (collection . "rosette-extras") (conflicts . ()) (dependencies . ("base" "rosette" "rackunit-lib")) (description . "A few extra utilities for Rosette") (implies . ()) (modules . ((lib "rosette-extras/main.rkt") (lib "rosette-extras/synthax.rkt"))) (name . "rosette-extras") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:sam@lenary.co.uk . #t) (ring:1 . #t) (rosette . #t))) (source . "https://github.com/lenary/rosette-extras.git") (tags . ("rosette")) (versions . #hash((default . #hasheq((checksum . "66f45e9cddd8ac3e2c9b182e38a71dd49c8ef089") (source . "https://github.com/lenary/rosette-extras.git") (source_url . "https://github.com/lenary/rosette-extras.git"))))))) ("routy" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "routy" "doc/routy@routy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/routy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/routy.txt"))) (checksum . "68409310aa853d2b72030f9029abb92bbbdb170e") (checksum-error . #f) (collection . "routy") (conflicts . ()) (date-added . 1552813635) (dependencies . ("base" "web-server-lib" "rackunit-lib" "racket-route-match" "response-ext" "scribble-lib" "racket-doc" "rackunit-lib" "web-server-doc")) (description . "Routy is a lightweight high performance HTTP request router for Racket.  ") (implies . ()) (modules . ((lib "routy/test.rkt") (lib "routy/scribblings/routy.scrbl") (lib "routy/main.rkt"))) (name . "routy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (framework . #t) (http . #t) (ring:1 . #t) (router . #t) (web . #t))) (source . "https://github.com/Junker/routy.git") (tags . ("framework" "http" "router" "web")) (versions . #hash((default . #hasheq((checksum . "68409310aa853d2b72030f9029abb92bbbdb170e") (source . "https://github.com/Junker/routy.git") (source_url . "https://github.com/Junker/routy.git"))))))) ("rparallel" . #hasheq((author . "fmnt@fmnt.info") (authors . ("fmnt@fmnt.info")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rparallel" "doc/rparallel@rparallel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rparallel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rparallel.txt"))) (checksum . "28a7a131aada4d8d9a7890721a32180a03037624") (checksum-error . #f) (collection . "rparallel") (conflicts . ()) (date-added . 1595338560) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "High-level parallel forms ") (implies . ()) (modules . ((lib "rparallel/test.rkt") (lib "rparallel/rparallel.scrbl") (lib "rparallel/main.rkt"))) (name . "rparallel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:fmnt@fmnt.info . #t) (futures . #t) (parallel . #t) (ring:1 . #t))) (source . "https://codeberg.org/montanari/rparallel.git") (tags . ("futures" "parallel")) (versions . #hash((default . #hasheq((checksum . "28a7a131aada4d8d9a7890721a32180a03037624") (source . "https://codeberg.org/montanari/rparallel.git") (source_url . "https://codeberg.org/montanari/rparallel.git"))))))) ("rpn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rpn" "doc/rpn@rpn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rpn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rpn.txt"))) (checksum . "74ef351cae43bb64ba35a937f7a2ea664a82abdd") (checksum-error . #f) (collection . "rpn") (conflicts . ()) (date-added . 1564559479) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Data structures for working with programs represented in Reverse Polish Notation (RPN), such as programs written in Forth-like languages.") (implies . ()) (modules . ((lib "rpn/main.scrbl") (lib "rpn/main.rkt"))) (name . "rpn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (forth . #t) (reverse-polish-notation . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/rpn.git") (tags . ("data-structures" "forth" "reverse-polish-notation")) (versions . #hash((default . #hasheq((checksum . "74ef351cae43bb64ba35a937f7a2ea664a82abdd") (source . "https://github.com/jackfirth/rpn.git") (source_url . "https://github.com/jackfirth/rpn.git"))))))) ("rpp" . #hasheq((author . "commandos-daniil@yandex.ru") (authors . ("commandos-daniil@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rpp.txt") (docs . (("main" "rpp" "doc/rpp@rpp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rpp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rpp.txt"))) (checksum . "6490fa55caf6250587090a6a773b1f708f245ac8") (checksum-error . #f) (collection . "rpp") (conflicts . ()) (date-added . 1655188800) (dependencies . ("brag-lib" "optimization-coach" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Attempt to make c++ - like syntax in racket. Early development, so subjected to mayor changes") (implies . ()) (modules . ((lib "rpp/lang/expander.rkt") (lib "rpp/lang/buttons.rkt") (lib "rpp/main.rkt") (lib "rpp/lang/parser.rkt") (lib "rpp/lang/utils.rkt") (lib "rpp/scribblings/rpp.scrbl") (lib "rpp/lang/lexer.rkt") (lib "rpp/lang/reader.rkt"))) (name . "rpp") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:commandos-daniil@yandex.ru . #t) (ring:1 . #t))) (source . "https://github.com/derkachdaniil/racket-c-plus-plus.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6490fa55caf6250587090a6a773b1f708f245ac8") (source . "https://github.com/derkachdaniil/racket-c-plus-plus.git#main") (source_url . "https://github.com/derkachdaniil/racket-c-plus-plus.git#main"))))))) ("rs" . #hasheq((author . "matthijs@rommelhok.com") (authors . ("matthijs@rommelhok.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rs" "doc/rs@rs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rs.txt") (test-failure-log . "server/built/test-fail/rs.txt") (test-success-log . #f))) (checksum . "4ec05adf44019ff153e867612d3eeee7ea586082") (checksum-error . #f) (collection . "rs") (conflicts . ()) (date-added . 1589400774) (dependencies . ("base" "rackunit" "rtmidi" "scribble-lib" "racket-doc")) (description . "rs - the Racket Sequencer - is a live coding tool that lets you sequence MIDI using Racket. A sequence is a simple list of events, you can play multiple sequences simultaneously and sequences can have different lengths and subdivisions so it's easy to do complex polyrhythms and Euclidean sequencing.") (implies . ()) (modules . ((lib "rs/main.rkt") (lib "rs/rs-midi-core.rkt") (lib "rs/rs-e.rkt") (lib "rs/rs-t.rkt") (lib "rs/scribblings/rs.scrbl") (lib "rs/rs-m.rkt") (lib "rs/rs-util.rkt"))) (name . "rs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:matthijs@rommelhok.com . #t) (livecoding . #t) (midi . #t) (midi-sequencer . #t) (ring:1 . #t))) (source . "https://github.com/mcdejonge/rs.git") (tags . ("livecoding" "midi" "midi-sequencer")) (versions . #hash((default . #hasheq((checksum . "4ec05adf44019ff153e867612d3eeee7ea586082") (source . "https://github.com/mcdejonge/rs.git") (source_url . "https://github.com/mcdejonge/rs.git"))))))) ("rs-l" . #hasheq((author . "matthijs@rommelhok.com") (authors . ("matthijs@rommelhok.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rs-l" "doc/rs-l@rs-l/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rs-l.txt") (test-failure-log . "server/built/test-fail/rs-l.txt") (test-success-log . #f))) (checksum . "43616cd03e53b0109826736b461086b7146ed971") (checksum-error . #f) (collection . "rs-l") (conflicts . ()) (date-added . 1590249255) (dependencies . ("base" "rackunit" "rs" "scribble-lib" "racket-doc")) (description . "Library with loop and event tools for rs (the Racket Sequencer)") (implies . ()) (modules . ((lib "rs-l/scribblings/rs-l.scrbl") (lib "rs-l/main.rkt"))) (name . "rs-l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:matthijs@rommelhok.com . #t) (livecoding . #t) (midi . #t) (midi-sequencer . #t) (ring:1 . #t))) (source . "https://github.com/mcdejonge/rs-l.git") (tags . ("livecoding" "midi" "midi-sequencer")) (versions . #hash((default . #hasheq((checksum . "43616cd03e53b0109826736b461086b7146ed971") (source . "https://github.com/mcdejonge/rs-l.git") (source_url . "https://github.com/mcdejonge/rs-l.git"))))))) ("rsa" . #hasheq((author . "michael.g.bowe@gmail.com") (authors . ("michael.g.bowe@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rsa.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsa.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rsa.txt"))) (checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "An rsa encryption library for racket") (implies . ()) (modules . ((lib "rsa/rsa.rkt"))) (name . "rsa") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:michael.g.bowe@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/mgbowe1/racket-rsa/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (source . "git://github.com/mgbowe1/racket-rsa") (source_url . "http://github.com/mgbowe1/racket-rsa/tree/master"))))))) ("rsc3" . #hasheq((author . "mushk45@gmail.com mkhafate@calpoly.edu clements@racket-lang.org") (authors . ("mushk45@gmail.com" "mkhafate@calpoly.edu" "clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsc3.txt") (test-failure-log . "server/built/test-fail/rsc3.txt") (test-success-log . #f))) (checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "r6rs-lib" "srfi-lib" "srfi-lite-lib" "rackunit-lib")) (description . "The rsc3 SuperCollider client ported to Racket") (implies . ()) (modules . ((lib "oregano/system.rkt") (lib "rhs/rhs.rkt") (lib "rsc3/main.rkt") (lib "rsc3/tests/regression-tests.rkt") (lib "sosc/sosc.rkt") (lib "rsc3/examples/moog-filter.rkt") (lib "rsc3/examples/ring3.rkt") (lib "rsc3/examples/bus-routing.rkt") (lib "sosc/transport.rkt") (lib "oregano/main.rkt") (lib "oregano/sample.rkt") (lib "oregano/examples/filters.rkt") (lib "rsc3/examples/rsc3-sine-play.rkt") (lib "oregano/examples/instrument-example.rkt") (lib "oregano/instrument.rkt") (lib "sosc/bytevector.rkt") (lib "oregano/examples/gui-example.rkt") (lib "oregano/gui.rkt") (lib "oregano/routing.rkt") (lib "sosc/ip.rkt") (lib "rsc3/rsc3.scrbl"))) (name . "rsc3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (SuperCollider . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:mkhafate@calpoly.edu . #t) (author:mushk45@gmail.com . #t) (music . #t) (osc . #t) (ring:1 . #t))) (source . "http://github.com/quakehead/rsc3/tree/master") (tags . ("audio" "music" "osc" "SuperCollider")) (versions . #hash((default . #hasheq((checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (source . "git://github.com/quakehead/rsc3") (source_url . "http://github.com/quakehead/rsc3/tree/master"))))))) ("rsharp" . #hasheq((author . "commandos-daniil@yandex.ru") (authors . ("commandos-daniil@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rsharp.txt") (docs . (("main" "rsharp" "doc/rsharp@rsharp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsharp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rsharp.txt"))) (checksum . "78b24bd16161b40d24a83eb10c929ccb00c67aba") (checksum-error . #f) (collection . "rsharp") (conflicts . ()) (date-added . 1656606448) (dependencies . ("brag-lib" "optimization-coach" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "attempt at create c# - like syntax for teaching purposes") (implies . ()) (modules . ((lib "rsharp/main.rkt") (lib "rsharp/lang/reader.rkt") (lib "rsharp/lang/parser.rkt") (lib "rsharp/lang/expander.rkt") (lib "rsharp/lang/utils.rkt") (lib "rsharp/lang/lexer.rkt") (lib "rsharp/lang/buttons.rkt") (lib "rsharp/scribblings/rsharp.scrbl"))) (name . "rsharp") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:commandos-daniil@yandex.ru . #t) (ring:1 . #t))) (source . "https://github.com/derkachdaniil/rsharp.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "78b24bd16161b40d24a83eb10c929ccb00c67aba") (source . "https://github.com/derkachdaniil/rsharp.git#main") (source_url . "https://github.com/derkachdaniil/rsharp.git#main"))))))) ("rsound" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsound" "doc/rsound@rsound/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsound.txt") (test-failure-log . "server/built/test-fail/rsound.txt") (test-success-log . #f))) (checksum . "39580725993288d4f8495fd988f3d99e8db60613") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("portaudio" "base" "data-lib" "gui-lib" "htdp-lib" "math-lib" "plot-lib" "plot-gui-lib" "rackunit-lib" "typed-racket-lib" "drracket-plugin-lib" "memoize" "pict-lib" "wxme-lib" "snip-lib" "scribble-lib" "racket-doc" "wxme-lib")) (description . "A framework for manipulating and playing sounds using the portaudio library. Runs on Windows, Mac OS X, and linux.") (implies . ()) (modules . ((lib "rsound/test/manual-play-stream-latency-test.rkt") (lib "rsound/contrib/cs4hs-lib.rkt") (lib "rsound/test/test-sequencer.rkt") (lib "rsound/rsound-commander.rkt") (lib "rsound/examples/random-tone-example.rkt") (lib "rsound/test/manual-test-big-draw.rkt") (lib "rsound/contrib/bassdrum.rkt") (lib "rsound/define-argcheck.rkt") (lib "rsound/examples/test-audio-filtering.rkt") (lib "rsound/contrib/crush.rkt") (lib "rsound/test/test-envelope.rkt") (lib "rsound/test/test-util.rkt") (lib "rsound/drum-samples.rkt") (lib "rsound/test/manual-playing-signal-block-test.rkt") (lib "rsound/rsound.rkt") (lib "rsound/fsound.rkt") (lib "rsound/test/test-paste-util.rkt") (lib "rsound/private/s16vector-add.rkt") (lib "rsound/test/check-timing.rkt") (lib "rsound/test/check-recording.rkt") (lib "rsound/draw.rkt") (lib "rsound/write-wav.rkt") (lib "rsound/contrib/cs4hs-lab.rkt") (lib "rsound/examples/bach-notes.rkt") (lib "rsound/network.rkt") (lib "rsound/single-cycle.rkt") (lib "rsound/test/manual-test-fft.rkt") (lib "rsound/examples/piano-samples.rkt") (lib "rsound/diagnose.rkt") (lib "rsound/test/check-signal-speed.rkt") (lib "rsound/test/check-math-fft-speed.rkt") (lib "rsound/examples/harmonic-overlay.rkt") (lib "rsound/tool.rkt") (lib "rsound/test/test-single-cycle.rkt") (lib "rsound/test/test-network.rkt") (lib "rsound/contrib/cs4hs-lab.scrbl") (lib "rsound/test/test-rsound-commander.rkt") (lib "rsound/test/check-c-lib-speedup.rkt") (lib "rsound/test/test-write-wav.rkt") (lib "rsound/read-wav.rkt") (lib "rsound/test/manual-playing-test.rkt") (lib "rsound/examples/sub-sampling.rkt") (lib "rsound/test/test-filter.rkt") (lib "rsound/util.rkt") (lib "rsound/stream-play.rkt") (lib "rsound/integral-cycles.rkt") (lib "rsound/test/test-s16vector-add.rkt") (lib "rsound/signals.scrbl") (lib "rsound/examples/markov-model.rkt") (lib "rsound/test/plot-signal.rkt") (lib "rsound/test/test-rsound.rkt") (lib "rsound/frequency-response.rkt") (lib "rsound/contrib/adventure-kid-waveforms.rkt") (lib "rsound/examples/quantize-looper.rkt") (lib "rsound/examples/katy-sliders.rkt") (lib "rsound/sequencer.rkt") (lib "rsound/common.rkt") (lib "rsound/wxme-rsound-snip.rkt") (lib "rsound/piano-tones.rkt") (lib "rsound/filter.rkt") (lib "rsound/envelope.rkt") (lib "rsound/test/manual-draw-test.rkt") (lib "rsound/paste-util.rkt") (lib "rsound/wavetable.rkt") (lib "rsound/reverb.rkt") (lib "rsound/test/manual-test-latency.rkt") (lib "rsound/main.rkt") (lib "rsound/test/test-reverb.rkt") (lib "rsound/test/test-read-wav.rkt") (lib "rsound/examples/gogo.rkt") (lib "rsound/private/make-buffer-add-dylib.rkt") (lib "rsound/rsound-snip.rkt") (lib "rsound/examples/sequencer-playing-example.rkt") (lib "rsound/test/test-make-tone.rkt") (lib "rsound/looper.rkt") (lib "rsound/test/test-fsound.rkt") (lib "rsound/filter-typed.rkt") (lib "rsound/prefs.rkt") (lib "rsound/test/manual-stream-play-test.rkt") (lib "rsound/contrib/drum-machine.rkt") (lib "rsound/test/interactive-drr-frequency-response.rkt") (lib "rsound/rsound.scrbl") (lib "rsound/test/check-resample-speed.rkt"))) (name . "rsound") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/RSound/tree/master/") (tags . ("audio" "ffi" "io")) (versions . #hash((default . #hasheq((checksum . "8941634b34281b03eb6527e12a4f98a35e966f69") (source . "github://github.com/jbclements/RSound/master/") (source_url . "http://github.com/jbclements/RSound/tree/master/"))))))) ("rsvg" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsvg" "doc/rsvg@rsvg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsvg.txt") (test-failure-log . "server/built/test-fail/rsvg.txt") (test-success-log . #f))) (checksum . "9a9c82801e40622238794fdac556339ac0a6c912") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "pict-doc" "scribble-lib" "rackunit-lib" "scribble-lib" "pict-lib" "draw-doc" "racket-doc" "slideshow-doc")) (description . "FFI bindings to libRSVG, a library for loading SVG documents") (implies . ()) (modules . ((lib "rsvg/rsvg.rkt") (lib "rsvg/tests/tests.rkt") (lib "rsvg/main.rkt") (lib "rsvg/rsvg.scrbl"))) (name . "rsvg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (graphics . #t) (ring:1 . #t) (svg . #t))) (source . "http://github.com/takikawa/racket-rsvg/tree/master") (tags . ("graphics" "svg")) (versions . #hash((default . #hasheq((checksum . "9a9c82801e40622238794fdac556339ac0a6c912") (source . "github://github.com/takikawa/racket-rsvg/master") (source_url . "http://github.com/takikawa/racket-rsvg/tree/master"))))))) ("rtmidi" . #hasheq((author . "clements@racket-lang.org m4burns@uwaterloo.ca") (authors . ("clements@racket-lang.org" "m4burns@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rtmidi" "doc/rtmidi@rtmidi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtmidi.txt") (test-failure-log . "server/built/test-fail/rtmidi.txt") (test-success-log . #f))) (checksum . "11879d2e6a3eea7d1766d58123fe89363831313f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "RtMidi provides racket bindings for the RtMidi library, thus enabling racket programs to send and receive MIDI events.") (implies . ()) (modules . ((lib "rtmidi/rtmidi-example.rkt") (lib "rtmidi/rtmidi.scrbl") (lib "rtmidi/main.rkt"))) (name . "rtmidi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:m4burns@uwaterloo.ca . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/rtmidi/tree/master") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "11879d2e6a3eea7d1766d58123fe89363831313f") (source . "git://github.com/jbclements/rtmidi") (source_url . "http://github.com/jbclements/rtmidi/tree/master"))))))) ("rtnl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtnl.txt") (test-failure-log . "server/built/test-fail/rtnl.txt") (test-success-log . #f))) (checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Racket FFI Bindings for the Route-Netlink Library") (implies . ()) (modules . ((lib "rtnl/main.rkt"))) (name . "rtnl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-rtnl/tree/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (source . "github://github.com/mordae/racket-rtnl/master") (source_url . "http://github.com/mordae/racket-rtnl/tree/master"))))))) ("ruckus" . #hasheq((author . "code@cliffle.com") (authors . ("code@cliffle.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ruckus" "doc/ruckus@ruckus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruckus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ruckus.txt"))) (checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (checksum-error . #f) (collection . "ruckus") (conflicts . ()) (dependencies . ("base" "gui-lib" "math-lib" "opengl" "racket-doc")) (description . "Procedural CAD system for solid modeling") (implies . ()) (modules . ((lib "ruckus/out/binary-stl.rkt") (lib "ruckus/ex/capsule.rkt") (lib "ruckus/ex/box.rkt") (lib "ruckus/core/compiler/enumerate.rkt") (lib "ruckus/out/marching-tets.rkt") (lib "ruckus/viz/spheretrace-viewer.rkt") (lib "ruckus/out/marching-foo.rkt") (lib "ruckus/doc/prereq.scrbl") (lib "ruckus/ex/reflect-distance.rkt") (lib "ruckus/doc/utils.rkt") (lib "ruckus/core/df-prims.rkt") (lib "ruckus/core/lazy-require.rkt") (lib "ruckus/ex/interpolation-surface.rkt") (lib "ruckus/lang/state.rkt") (lib "ruckus/ex/multi/top.rkt") (lib "ruckus/core/compiler/lower.rkt") (lib "ruckus/core/compiler/racket.rkt") (lib "ruckus/out/marching-cubes.rkt") (lib "ruckus/viz/viewer.rkt") (lib "ruckus/lang/rktdump.rkt") (lib "ruckus/core/model.rkt") (lib "ruckus/ex/holography.rkt") (lib "ruckus/lang/mlang.rkt") (lib "ruckus/core/compiler/canon.rkt") (lib "ruckus/viz/shaderdump.rkt") (lib "ruckus/ex/radial-repeat.rkt") (lib "ruckus/doc/internals/compiler.scrbl") (lib "ruckus/doc/tools.scrbl") (lib "ruckus/lang/evaluator.rkt") (lib "ruckus/out/marching-squares.rkt") (lib "ruckus/main.rkt") (lib "ruckus/lang/colors.rkt") (lib "ruckus/ex/two-d.rkt") (lib "ruckus/doc/internals/math.scrbl") (lib "ruckus/viz/glsl.rkt") (lib "ruckus/lang/edsl.rkt") (lib "ruckus/lang/interpolation.rkt") (lib "ruckus/ex/multi/part-b.rkt") (lib "ruckus/lang/loader.rkt") (lib "ruckus/doc/internals.scrbl") (lib "ruckus/lang/reader.rkt") (lib "ruckus/out/surface.rkt") (lib "ruckus/core/math.rkt") (lib "ruckus/out/outline.rkt") (lib "ruckus/viz/two-viewer.rkt") (lib "ruckus/lang/astdump.rkt") (lib "ruckus/lang/irdump.rkt") (lib "ruckus/ex/multi/part-a.rkt") (lib "ruckus/out/descent3.rkt") (lib "ruckus/doc/whirlwind.scrbl") (lib "ruckus/viz/view2d.rkt") (lib "ruckus/doc/ruckus.scrbl") (lib "ruckus/doc/basics.scrbl") (lib "ruckus/viz/view3d.rkt") (lib "ruckus/ex/test.rkt"))) (name . "ruckus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:code@cliffle.com . #t) (cad . #t) (graphics . #t) (ring:1 . #t) (scientific . #t))) (source . "http://github.com/cbiffle/ruckus/tree/master") (tags . ("cad" "graphics" "scientific")) (versions . #hash((default . #hasheq((checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (source . "git://github.com/cbiffle/ruckus") (source_url . "http://github.com/cbiffle/ruckus/tree/master"))))))) ("ruinit" . #hasheq((author . "lukas.lazarek@eecs.northwestern.edu lukasalazarek@gmail.com") (authors . ("lukas.lazarek@eecs.northwestern.edu" "lukasalazarek@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruinit.txt") (test-failure-log . "server/built/test-fail/ruinit.txt") (test-success-log . #f))) (checksum . "11dc87ac9ff5003471a1956703366f2f6a44d346") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1554313706) (dependencies . ("base" "rackunit" "racket-doc" "scribble-lib")) (description . "A small unit testing framework.") (implies . ()) (modules . ((lib "scribblings/ruinit/ruinit-doc.scrbl") (lib "ruinit/ruinit-tests.rkt") (lib "ruinit/ruinit-result-combinators.rkt") (lib "ruinit/ruinit.rkt") (lib "ruinit/main.rkt") (lib "ruinit/test-env.rkt") (lib "ruinit/diff/diff.rkt"))) (name . "ruinit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lukas.lazarek@eecs.northwestern.edu . #t) (author:lukasalazarek@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/LLazarek/ruinit.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "11dc87ac9ff5003471a1956703366f2f6a44d346") (source . "https://github.com/LLazarek/ruinit.git") (source_url . "https://github.com/LLazarek/ruinit.git"))))))) ("russia-phonologie" . #hasheq((author . "madatao71@gmail.com") (authors . ("madatao71@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/russia-phonologie.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "transform graphie to phonologie") (implies . ()) (modules . ()) (name . "russia-phonologie") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:madatao71@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git") (source_url . "https://github.com/.git"))))))) ("russian" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "russian" "doc/russian@russian/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/russian.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/russian.txt"))) (checksum . "c536993445f3e34ed6baa614bf4f0f8be1d2e3aa") (checksum-error . #f) (collection . "russian") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Russian internationalization bits") (implies . ()) (modules . ((lib "russian/scribblings/russian.scrbl") (lib "russian/plural.rkt") (lib "russian/date.rkt"))) (name . "russian") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (internationalization . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/russian.git") (tags . ("internationalization")) (versions . #hash((default . #hasheq((checksum . "c536993445f3e34ed6baa614bf4f0f8be1d2e3aa") (source . "https://github.com/Kalimehtar/russian.git") (source_url . "https://github.com/Kalimehtar/russian.git"))))))) ("russian-lang" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/russian-lang.txt") (docs . (("main" "russian-lang" "doc/russian-lang@russian-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/russian-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/russian-lang.txt"))) (checksum . "cd2c70716b017015722047c34324994dbab5543e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1593973988) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Programming language based on russian language") (implies . ()) (modules . ((lib "1/language-info.rkt") (lib "1/lang.rkt") (lib "1/reader.rkt") (lib "1/main.rkt") (lib "1/run-fast.rkt") (lib "1/all-base.rkt") (lib "1/syn.rkt") (lib "1/indent.rkt") (lib "1/lexer.rkt") (lib "1/russian-lang.scrbl") (lib "1/runtime-config.rkt"))) (name . "russian-lang") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/russian-lang.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "cd2c70716b017015722047c34324994dbab5543e") (source . "https://github.com/Kalimehtar/russian-lang.git") (source_url . "https://github.com/Kalimehtar/russian-lang.git"))))))) ("rwind" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rwind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rwind.txt"))) (checksum . "5a4f580b0882452f3938aaa1711a6d99570f006f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("x11" "base" "rackunit-lib" "slideshow-lib" "readline-lib" "gui-lib")) (description . "An X11 window manager written in Racket (still in early stage)") (implies . ()) (modules . ((lib "rwind/user.rkt") (lib "rwind/server-sync.rkt") (lib "rwind/client2.rkt") (lib "rwind/private/try-layout.rkt") (lib "rwind/workspace.rkt") (lib "rwind/server.rkt") (lib "rwind/display.rkt") (lib "rwind/keymap.rkt") (lib "rwind/policy/base.rkt") (lib "rwind/configure.rkt") (lib "rwind/base.rkt") (lib "rwind/policy/tiling.rkt") (lib "rwind/util.rkt") (lib "rwind/rwind.rkt") (lib "rwind/color.rkt") (lib "rwind/window.rkt") (lib "rwind/launcher-base.rkt") (lib "rwind/events.rkt") (lib "rwind/client.rkt") (lib "rwind/launcher.rkt") (lib "rwind/user-files/config-simple.rkt") (lib "rwind/policy/simple.rkt") (lib "rwind/doc-string.rkt") (lib "rwind/main.rkt"))) (name . "rwind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "http://github.com/Metaxal/rwind/tree/master") (tags . ("app" "unix")) (versions . #hash((default . #hasheq((checksum . "5a4f580b0882452f3938aaa1711a6d99570f006f") (source . "github://github.com/Metaxal/rwind/master") (source_url . "http://github.com/Metaxal/rwind/tree/master"))))))) ("s-lib" . #hasheq((author . "vlad.piersec@gmail.com") (authors . ("vlad.piersec@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s-lib.txt"))) (checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit")) (description . "A collection of functions for string & word manipulation") (implies . ()) (modules . ((lib "s-lib/main.rkt"))) (name . "s-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vlad.piersec@gmail.com . #t) (ring:1 . #t) (strings . #t) (words . #t))) (source . "http://github.com/caisah/s-lib/tree/master") (tags . ("strings" "words")) (versions . #hash((default . #hasheq((checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (source . "git://github.com/caisah/s-lib") (source_url . "http://github.com/caisah/s-lib/tree/master"))))))) ("s3-sync" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "s3-sync" "doc/s3-sync@s3-sync/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s3-sync.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s3-sync.txt"))) (checksum . "46ce35eae8d99f4a7cee945aa7bd9d7b07f8beab") (checksum-error . #f) (collection . "s3-sync") (conflicts . ()) (dependencies . ("aws" "http" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Sync filesystem with an S3 bucket") (implies . ()) (modules . ((lib "s3-sync/gzip.rkt") (lib "s3-sync/web-config.rkt") (lib "s3-sync/web.rkt") (lib "s3-sync/main.rkt") (lib "s3-sync/s3-sync.scrbl") (lib "s3-sync/routing-rule.rkt") (lib "s3-sync/tests/main.rkt"))) (name . "s3-sync") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/s3-sync/tree/master") (tags . ("AWS")) (versions . #hash((default . #hasheq((checksum . "46ce35eae8d99f4a7cee945aa7bd9d7b07f8beab") (source . "git://github.com/mflatt/s3-sync") (source_url . "http://github.com/mflatt/s3-sync/tree/master"))))))) ("safe-case" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/safe-case.txt") (docs . (("main" "safe-case" "doc/safe-case@safe-case/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/safe-case.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/safe-case.txt"))) (checksum . "77446bcb8b488fa35845c70e56498308b37f4605") (checksum-error . #f) (collection . "safe-case") (conflicts . ()) (date-added . 1658137689) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Like `case` but with stronger checks to avoid uncaught typos") (implies . ()) (modules . ((lib "safe-case/scribblings/safe-case.scrbl") (lib "safe-case/main.rkt"))) (name . "safe-case") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (case . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/safe-case.git") (tags . ("case" "macro")) (versions . #hash((default . #hasheq((checksum . "77446bcb8b488fa35845c70e56498308b37f4605") (source . "https://github.com/Metaxal/safe-case.git") (source_url . "https://github.com/Metaxal/safe-case.git"))))))) ("sagiri-comm" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/sagiri-comm.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/ProjectNiwl/sagiri-comm.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "SAGIRI bindings for Racket") (implies . ()) (modules . ((lib "sagiri-comm/socks5.rkt") (lib "sagiri-comm/hosting.rkt") (lib "sagiri-comm/docs/main.scrbl") (lib "sagiri-comm/main.rkt") (lib "sagiri-comm/get-handle.rkt") (lib "sagiri-comm/docs/spec.scrbl") (lib "sagiri-comm/structs.rkt") (lib "sagiri-comm/connect.rkt"))) (name . "sagiri-comm") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (source_url . "https://github.com/ProjectNiwl/sagiri-comm.git"))))))) ("sameday" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sameday" "doc/sameday@sameday/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sameday.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sameday.txt"))) (checksum . "20cfc789bacc21941317828496cf15a6a89feee6") (checksum-error . #f) (collection . "sameday") (conflicts . ()) (date-added . 1615738217) (dependencies . ("base" "gregor-lib" "http-easy" "gregor-doc" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A Racket client for the Sameday API.") (implies . ()) (modules . ((lib "sameday/main.rkt") (lib "sameday/sameday.scrbl") (lib "sameday/client.rkt") (lib "sameday/view.rkt"))) (name . "sameday") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:bogdan@defn.io . #t) (client . #t) (delivery . #t) (e-commerce . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sameday.git") (tags . ("api" "client" "delivery" "e-commerce" "web")) (versions . #hash((default . #hasheq((checksum . "20cfc789bacc21941317828496cf15a6a89feee6") (source . "https://github.com/Bogdanp/racket-sameday.git") (source_url . "https://github.com/Bogdanp/racket-sameday.git"))))))) ("sasl" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("sasl-lib" "sasl-doc" "base")) (description . "SASL authentication client support") (implies . ("sasl-lib" "sasl-doc")) (modules . ()) (name . "sasl") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (source . "https://github.com/racket/sasl.git?path=sasl") (source_url . "https://github.com/racket/sasl.git?path=sasl"))))))) ("sasl-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sasl" "doc/sasl@sasl-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("base" "scribble-lib" "sasl-lib" "racket-doc")) (description . "SASL authentication client support") (implies . ()) (modules . ((lib "sasl/sasl.scrbl"))) (name . "sasl-doc") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-doc") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (source . "https://github.com/racket/sasl.git?path=sasl-doc") (source_url . "https://github.com/racket/sasl.git?path=sasl-doc"))))))) ("sasl-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("base")) (description . "SASL authentication client support") (implies . ()) (modules . ((lib "sasl/private/stringprep.rkt") (lib "sasl/private/intset.rkt") (lib "sasl/private/saslprep.rkt") (lib "sasl/main.rkt") (lib "sasl/private/base.rkt") (lib "sasl/private/scram.rkt") (lib "sasl/cram-md5.rkt") (lib "sasl/scram.rkt") (lib "sasl/plain.rkt") (lib "sasl/private/crypto.rkt") (lib "sasl/private/cram-md5.rkt") (lib "sasl/saslprep.rkt"))) (name . "sasl-lib") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-lib") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (source . "https://github.com/racket/sasl.git?path=sasl-lib") (source_url . "https://github.com/racket/sasl.git?path=sasl-lib"))))))) ("sasl-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("base" "sasl-lib" "rackunit-lib")) (description . "SASL authentication client support") (implies . ()) (modules . ((lib "sasl/tests/intset.rkt") (lib "sasl/tests/plain.rkt") (lib "sasl/tests/scram.rkt") (lib "sasl/tests/saslprep.rkt") (lib "sasl/tests/gsasl.rkt") (lib "sasl/tests/cram-md5.rkt"))) (name . "sasl-test") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-test") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "3fd78eb8a0ba7ad86d8f78e866d737b177144729") (source . "https://github.com/racket/sasl.git?path=sasl-test") (source_url . "https://github.com/racket/sasl.git?path=sasl-test"))))))) ("satore" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "satore" "doc/satore@satore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/satore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/satore.txt"))) (checksum . "e56983d7a91a031e909d643489334ec394f06e4e") (checksum-error . #f) (collection . "satore") (conflicts . ()) (date-added . 1615306663) (dependencies . ("bazaar" "data-lib" "define2" "global" "math-lib" "text-table" "base" "rackunit-lib" "scribble-lib")) (description . "First order logic theorem prover in CNF without equality but with atom rewrite rules") (implies . ()) (modules . ((lib "satore/log.rkt") (lib "satore/tests/stress-test1.rkt") (lib "satore/scribblings/satore.scrbl") (lib "satore/tests/confluence.rkt") (lib "satore/unification-tree.rkt") (lib "satore/unification.rkt") (lib "satore/tests/saturation.rkt") (lib "satore/tests/clause-struct.rkt") (lib "satore/tests/unification.rkt") (lib "satore/misc.rkt") (lib "satore/rewrite-tree.rkt") (lib "satore/tests/trie.rkt") (lib "satore/tests/unification-tree.rkt") (lib "satore/clause-struct.rkt") (lib "satore/clause-format.rkt") (lib "satore/json-output.rkt") (lib "satore/tests/rewrite-tree.rkt") (lib "satore/saturation.rkt") (lib "satore/clause.rkt") (lib "satore/tptp.rkt") (lib "satore/tests/interact.rkt") (lib "satore/tests/misc.rkt") (lib "satore/trie.rkt") (lib "satore/main.rkt") (lib "satore/tests/clause.rkt") (lib "satore/interact.rkt"))) (name . "satore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/satore.git") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "e56983d7a91a031e909d643489334ec394f06e4e") (source . "https://github.com/Metaxal/satore.git") (source_url . "https://github.com/Metaxal/satore.git"))))))) ("sauron" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sauron" "doc/sauron@sauron/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sauron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sauron.txt"))) (checksum . "237d70028a0bd3b1e71ca5b4bd358f3126b21b9b") (checksum-error . #f) (collection . "sauron") (conflicts . ()) (date-added . 1608231545) (dependencies . ("base" "gui-lib" "net-lib" "data-lib" "drracket-plugin-lib" "drracket-tool-lib" "file-watchers" "raco-invoke" "try-catch-finally-lib" "curly-fn-lib" "from-template" "drcomplete" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "A DrRacket plugin to make it experience like an IDE") (implies . ()) (modules . ((lib "sauron/collect/api.rkt") (lib "sauron/repl/history.rkt") (lib "sauron/tool/repl.rkt") (lib "sauron/path/util.rkt") (lib "sauron/path/renamer.rkt") (lib "sauron/log.rkt") (lib "sauron/shortcut.rkt") (lib "sauron/path/ignore.rkt") (lib "sauron/tool/frame.rkt") (lib "sauron/scribblings/user-guide.scrbl") (lib "sauron/version-control/parse-git.rkt") (lib "sauron/cmd/execute.rkt") (lib "sauron/scribblings/sauron.scrbl") (lib "sauron/version-control/panel.rkt") (lib "sauron/project/panel.rkt") (lib "sauron/collect/collector.rkt") (lib "sauron/scribblings/develop.scrbl") (lib "sauron/main.rkt") (lib "sauron/project/dir-state.rkt") (lib "sauron/collect/binding.rkt") (lib "sauron/meta.rkt") (lib "sauron/version-control/pusher.rkt") (lib "sauron/project/project-templates.rkt") (lib "sauron/collect/record.rkt") (lib "sauron/jump-to-def.rkt") (lib "sauron/tool/editor.rkt") (lib "sauron/project/manager.rkt") (lib "sauron/tool/bind-key.rkt") (lib "sauron/collect/record-maintainer.rkt") (lib "sauron/cmd/raco.rkt"))) (name . "sauron") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (drracket . #t) (ide . #t) (ring:1 . #t) (sauron . #t))) (source . "https://github.com/racket-tw/sauron.git#develop") (tags . ("drracket" "ide" "sauron")) (versions . #hash((default . #hasheq((checksum . "237d70028a0bd3b1e71ca5b4bd358f3126b21b9b") (source . "https://github.com/racket-tw/sauron.git#develop") (source_url . "https://github.com/racket-tw/sauron.git#develop"))))))) ("sawzall" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall.txt"))) (checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1626723548) (dependencies . ("sawzall-lib" "sawzall-doc")) (description . "A grammar for data wrangling") (implies . ("sawzall-lib" "sawzall-doc")) (modules . ()) (name . "sawzall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (source . "https://github.com/ralsei/sawzall.git?path=sawzall#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall#main"))))))) ("sawzall-doc" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sawzall" "doc/sawzall@sawzall-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-doc.txt"))) (checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (checksum-error . #f) (collection . "sawzall-doc") (conflicts . ()) (date-added . 1626723490) (dependencies . ("base" "data-frame" "racket-doc" "sawzall-lib" "scribble-lib" "threading-lib" "threading-doc")) (description . "Documentation for Sawzall") (implies . ()) (modules . ((lib "sawzall-doc/sawzall.scrbl"))) (name . "sawzall-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main"))))))) ("sawzall-lib" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-lib.txt"))) (checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (checksum-error . #f) (collection . "sawzall") (conflicts . ()) (date-added . 1626723453) (dependencies . ("base" "data-frame" "fancy-app" "text-table" "threading-lib")) (description . "A grammar for data wrangling (no documentation)") (implies . ()) (modules . ((lib "sawzall/syntax.rkt") (lib "sawzall/grouped-df.rkt") (lib "sawzall/main.rkt") (lib "sawzall/where.rkt") (lib "sawzall/aggregate.rkt") (lib "sawzall/rectangling.rkt") (lib "sawzall/split.rkt") (lib "sawzall/grouping.rkt") (lib "sawzall/combining-join.rkt") (lib "sawzall/bsearch.rkt") (lib "sawzall/pivot.rkt") (lib "sawzall/rename.rkt") (lib "sawzall/missing-values.rkt") (lib "sawzall/constructors.rkt") (lib "sawzall/display.rkt") (lib "sawzall/slice.rkt") (lib "sawzall/filtering-join.rkt") (lib "sawzall/create.rkt") (lib "sawzall/reorder-df.rkt") (lib "sawzall/slice-spec.rkt") (lib "sawzall/generic-join.rkt") (lib "sawzall/separate.rkt") (lib "sawzall/helpers.rkt") (lib "sawzall/reorder.rkt"))) (name . "sawzall-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main"))))))) ("sawzall-test" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-test.txt"))) (checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (checksum-error . #f) (collection . "sawzall-test") (conflicts . ()) (date-added . 1626723520) (dependencies . ("base" "data-frame" "rackunit-lib" "sawzall-lib" "threading-lib")) (description . "Tests for Sawzall") (implies . ()) (modules . ((lib "sawzall-test/test-data.rkt") (lib "sawzall-test/filtering-test.rkt") (lib "sawzall-test/sorting-test.rkt") (lib "sawzall-test/create-test.rkt") (lib "sawzall-test/pivot-test.rkt") (lib "sawzall-test/slice-test.rkt") (lib "sawzall-test/util.rkt") (lib "sawzall-test/aggregating-test.rkt") (lib "sawzall-test/combining-join-test.rkt") (lib "sawzall-test/rectangling-test.rkt") (lib "sawzall-test/separate-test.rkt"))) (name . "sawzall-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main") (tags . ("data-frame" "tests")) (versions . #hash((default . #hasheq((checksum . "2866f3646aad5d062c559b2c7a6b5c61d10b8481") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main"))))))) ("scapegoat-tree" . #hasheq((author . "shawnw.mobile@gmail.com") (authors . ("shawnw.mobile@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scapegoat-tree" "doc/scapegoat-tree@scapegoat-tree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scapegoat-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scapegoat-tree.txt"))) (checksum . "e82efcc4e77abfba45c37260cf0e54928ee8b690") (checksum-error . #f) (collection . "scapegoat-tree") (conflicts . ()) (date-added . 1659524765) (dependencies . ("data-lib" "base" "data-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Dictionaries and Sets backed by scapegoat trees.") (implies . ()) (modules . ((lib "scapegoat-tree/main.rkt") (lib "scapegoat-tree/scribblings/set.scrbl") (lib "scapegoat-tree/scribblings/dict.scrbl") (lib "scapegoat-tree/scribblings/scapegoat-tree.scrbl") (lib "scapegoat-tree/set.rkt"))) (name . "scapegoat-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:shawnw.mobile@gmail.com . #t) (data-structures . #t) (ring:1 . #t) (tree . #t))) (source . "https://github.com/shawnw/racket-scapegoat-tree.git#master") (tags . ("data-structures" "tree")) (versions . #hash((default . #hasheq((checksum . "e82efcc4e77abfba45c37260cf0e54928ee8b690") (source . "https://github.com/shawnw/racket-scapegoat-tree.git#master") (source_url . "https://github.com/shawnw/racket-scapegoat-tree.git#master"))))))) ("schema" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "schema"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/schema.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/schema.txt"))) (checksum . "bc8608c0a050bec49b3940a4b32457277bf6fbe8") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "db-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A data modeling tool for Typed Racket") (implies . ()) (modules . ((lib "schema/digitama/exchange/csv/reader/progress.rkt") (lib "schema/tamer/csv/reader/csv.rkt") (lib "schema/tamer/csv/reader/row.rkt") (lib "schema/uupk.rkt") (lib "schema/tamer/csv/reader/skip-header.rkt") (lib "schema/digitama/message.rkt") (lib "schema/digitama/exchange/csv/reader/string.rkt") (lib "schema/tamer/csv/reader/escape.rkt") (lib "schema/tamer/schema.scrbl") (lib "schema/digitama/misc.rkt") (lib "schema/tamer/csv/reader/space.rkt") (lib "schema/tamer/csv/reader/performance/progress.rkt") (lib "schema/csv.rkt") (lib "schema/tamer/csv/reader/performance/vector.rkt") (lib "schema/digitama/syntax.rkt") (lib "schema/tamer/normalize.rkt") (lib "schema/digitama/schema.rkt") (lib "schema/tamer/csv/reader/performance/bytes/port.rkt") (lib "schema/digitama/normalize.rkt") (lib "schema/tamer/csv/reader/performance/bytes/string.rkt") (lib "schema/digitama/exchange/csv/reader/line.rkt") (lib "schema/main.rkt") (lib "schema/tamer/csv/reader/performance/port-lines-counting.rkt") (lib "schema/tamer/csv/reader/unix.rkt") (lib "schema/tamer/csv/reader/performance/string.rkt") (lib "schema/digitama/virtual-sql.rkt") (lib "schema/digitama/exchange/csv/reader/port.rkt") (lib "schema/sqlite3.rkt") (lib "schema/digitama/shadow.rkt") (lib "schema/tamer/csv/reader/performance/list.rkt") (lib "schema/digitama/exchange/csv/reader/misc.rkt") (lib "schema/message.rkt") (lib "schema/tamer/csv/reader/fixed-row.rkt") (lib "schema/digitama/exchange/csv/dialect.rkt") (lib "schema/tamer/csv/reader/performance/sequence.rkt") (lib "schema/digitama/unsafe/query.rkt") (lib "schema/tamer/uupk.rkt") (lib "schema/tamer/sqlite3.rkt") (lib "schema/digitama/exchange/sql.rkt") (lib "schema/digitama/exchange/racket.rkt") (lib "schema/digitama/exchange/base.rkt") (lib "schema/tamer/csv/reader/empty.rkt"))) (name . "schema") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (csv . #t) (database . #t) (ring:1 . #t) (schema . #t) (sqlite3 . #t) (typed-racket . #t) (unstable . #t) (xlsx . #t))) (source . "https://github.com/wargrey/schema.git") (tags . ("csv" "database" "schema" "sqlite3" "typed-racket" "unstable" "xlsx")) (versions . #hash((default . #hasheq((checksum . "bc8608c0a050bec49b3940a4b32457277bf6fbe8") (source . "https://github.com/wargrey/schema.git") (source_url . "https://github.com/wargrey/schema.git"))))))) ("scheme2d" . #hasheq((author . "mega9yo@gmail.com") (authors . ("mega9yo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scheme2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scheme2d.txt"))) (checksum . "65b4a3c69d8c13fbcfc542fa366409fecc1089f4") (checksum-error . #f) (collection . "scheme2d") (conflicts . ()) (date-added . 1623005029) (dependencies . ("base")) (description . "The future of programming.") (implies . ()) (modules . ((lib "scheme2d/main.rkt"))) (name . "scheme2d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mega9yo@gmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/eutro/scheme2d.git") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "65b4a3c69d8c13fbcfc542fa366409fecc1089f4") (source . "https://github.com/eutro/scheme2d.git") (source_url . "https://github.com/eutro/scheme2d.git"))))))) ("sci" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "manual-flomat" "doc/manual-flomat@sci/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/sci.txt") (success-log . "server/built/install/sci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sci.txt"))) (checksum . "103b9e0c60a246ec6cb65e990639936df14c6086") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591106174) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scribble-math" "math-doc" "racket-doc" "linux-shared-libraries")) (description . "Floating point matrices using CBLAS and LAPACK.") (implies . ()) (modules . ((lib "flomat/flomat.rkt") (lib "flomat/expm.rkt") (lib "flomat-doc/manual-flomat.scrbl") (lib "flomat/main.rkt"))) (name . "sci") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (blas . #t) (cblas . #t) (lapack . #t) (math . #t) (matrix . #t) (ring:1 . #t) (scientific . #t))) (source . "https://github.com/soegaard/sci.git") (tags . ("blas" "cblas" "lapack" "math" "matrix" "scientific")) (versions . #hash((default . #hasheq((checksum . "103b9e0c60a246ec6cb65e990639936df14c6086") (source . "https://github.com/soegaard/sci.git") (source_url . "https://github.com/soegaard/sci.git"))))))) ("science" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "science"))) (failure-log . "server/built/fail/science.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ccd0b7277de38eb871202d1af09542cfd1f125c8") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1642683561) (dependencies . ()) (description . "A collection of modules that provide functions for numerical computing. \r\nCONTRIBUTIONS WELCOME ; IN PROGRESS PORT OF http://planet.racket-lang.org/display.ss?package=science.plt&owner=williams") (implies . ()) (modules . ((lib "science/ode-initval/evolve.rkt") (lib "science/scribblings/physical-constants.scrbl") (lib "science/constants/cgsm-constants.rkt") (lib "science/examples/poisson-plot-example.rkt") (lib "science/examples/bernoulli-example.rkt") (lib "science/examples/beta-example.rkt") (lib "science/random-distributions/poisson-graphics.rkt") (lib "science/random-distributions/bernoulli-graphics.rkt") (lib "science/random-distributions/exponential-graphics.rkt") (lib "science/examples/discrete-plot-example.rkt") (lib "science/random-distributions/discrete-graphics.rkt") (lib "science/constants/cgs-constants.rkt") (lib "science/scribblings/chebyshev.scrbl") (lib "science/examples/gamma-plot-example.rkt") (lib "science/random-distributions-with-graphics.rkt") (lib "science/random-distributions/t-distribution.rkt") (lib "science/examples/f-distribution-plot-example.rkt") (lib "science/scribblings/using.scrbl") (lib "science/unsafe-ops-utils.rkt") (lib "science/examples/gaussian-histogram-example.rkt") (lib "science/scribblings/random-numbers.scrbl") (lib "science/math.rkt") (lib "science/examples/bivariate-gaussian-histogram-example.rkt") (lib "science/constants/mks-constants.rkt") (lib "science/examples/geometric-histogram-example.rkt") (lib "science/examples/gaussian-plot-example.rkt") (lib "science/examples/unchecked-science-test.rkt") (lib "science/random-distributions/binomial-graphics.rkt") (lib "science/special-functions/exponential-integral.rkt") (lib "science/examples/constants-example.rkt") (lib "science/examples/ode-example-1.rkt") (lib "science/examples/pareto-plot-example.rkt") (lib "science/random-distributions/geometric-graphics.rkt") (lib "science/random-distributions/beta-graphics.rkt") (lib "science/scribblings/fft.scrbl") (lib "science/examples/triangular-plot-example.rkt") (lib "science/random-distributions.rkt") (lib "science/random-distributions/t-distribution-graphics.rkt") (lib "science/examples/gamma-histogram-example.rkt") (lib "science/constants.rkt") (lib "science/histogram-graphics.rkt") (lib "science/fft.rkt") (lib "science/examples/f-distribution-histogram-example.rkt") (lib "science/random-distributions/pareto.rkt") (lib "science/examples/discrete-histogram-example.rkt") (lib "science/scribblings/unsafe-ops-utils.scrbl") (lib "science/examples/t-distribution-histogram-example.rkt") (lib "science/histogram-2d-graphics.rkt") (lib "science/examples/unit-gaussian-histogram-example.rkt") (lib "science/examples/lngamma-plot-example.rkt") (lib "science/random-distributions/binomial.rkt") (lib "science/scribblings/special-functions.scrbl") (lib "science/random-distributions/gaussian-tail-graphics.rkt") (lib "science/ode-initval/standard-control.rkt") (lib "science/examples/exponential-example-scaled.rkt") (lib "science/constants/mksa-constants.rkt") (lib "science/examples/logarithmic-plot-example.rkt") (lib "science/examples/gaussian-tail-histogram-example.rkt") (lib "science/discrete-histogram.rkt") (lib "science/statistics.rkt") (lib "science/machine.rkt") (lib "science/examples/exponential-plot-example.rkt") (lib "science/random-distributions/f-distribution.rkt") (lib "science/examples/uniform-int-histogram-example.rkt") (lib "science/header.rkt") (lib "science/random-distributions/gaussian-tail.rkt") (lib "science/random-distributions/logarithmic-graphics.rkt") (lib "science/scribblings/error-handling.scrbl") (lib "science/random-distributions/flat-graphics.rkt") (lib "science/examples/radix2-fft-example.rkt") (lib "science/random-distribution-graphics.rkt") (lib "science/histogram-2d.rkt") (lib "science/scribblings/histograms.scrbl") (lib "science/random-distributions/cdf-beta-inc.rkt") (lib "science/discrete-histogram-with-graphics.rkt") (lib "science/examples/example.rkt") (lib "science/random-distributions/f-distribution-graphics.rkt") (lib "science/constants/num-constants.rkt") (lib "science/scribblings/science.scrbl") (lib "science/histogram-with-graphics.rkt") (lib "science/examples/statistics-example.rkt") (lib "science/random-distributions/discrete.rkt") (lib "science/special-functions/beta.rkt") (lib "science/random-distributions/poisson.rkt") (lib "science/ode-initval/control.rkt") (lib "science/examples/chi-squared-histogram-example.rkt") (lib "science/examples/lognormal-plot-example.rkt") (lib "science/special-functions/gamma-imp.rkt") (lib "science/examples/uniform-histogram-example.rkt") (lib "science/random-distributions/geometric.rkt") (lib "science/random-distributions/lognormal-graphics.rkt") (lib "science/examples/special-functions.rkt") (lib "science/special-functions/gamma-inc-imp.rkt") (lib "science/random-distributions/logarithmic.rkt") (lib "science/examples/triangular-example.rkt") (lib "science/ode-initval/step.rkt") (lib "science/special-functions/zeta-imp.rkt") (lib "science/histogram-2d-with-graphics.rkt") (lib "science/random-distributions/triangular.rkt") (lib "science/test-constants.rkt") (lib "science/examples/science-test.rkt") (lib "science/examples/exponential-example.rkt") (lib "science/random-distributions/chi-squared-graphics.rkt") (lib "science/histogram.rkt") (lib "science/examples/beta-plot-example.rkt") (lib "science/examples/binomial-plot-example.rkt") (lib "science/ode-initval/rk2.rkt") (lib "science/scribblings/random-distributions.scrbl") (lib "science/science-with-graphics.rkt") (lib "science/special-functions/error.rkt") (lib "science/random-distributions/gaussian-graphics.rkt") (lib "science/examples/bivariate-gaussian-plot-example.rkt") (lib "science/ode-initval/system.rkt") (lib "science/examples/unit-gaussian-plot-example.rkt") (lib "science/random-distributions/gamma-graphics.rkt") (lib "science/examples/geometric-plot-example.rkt") (lib "science/examples/binomial-example.rkt") (lib "science/random-distributions/bivariate-gaussian.rkt") (lib "science/special-functions.rkt") (lib "science/random-distributions/bernoulli.rkt") (lib "science/special-functions/gamma.rkt") (lib "science/scribblings/gfdl.scrbl") (lib "science/examples/gaussian-histogram-scaled-example.rkt") (lib "science/examples/bernoulli-plot-example.rkt") (lib "science/random-distributions/flat.rkt") (lib "science/examples/chebyshev-example.rkt") (lib "science/examples/radix2-dif-fft-example.rkt") (lib "science/examples/ode-example-2.rkt") (lib "science/examples/chi-squared-plot-example.rkt") (lib "science/special-functions/psi-imp.rkt") (lib "science/ode-initval.rkt") (lib "science/examples/multi-radix-fft-example.rkt") (lib "science/ode-initval/rk4.rkt") (lib "science/random-distributions/bivariate-gaussian-graphics.rkt") (lib "science/ode-initval/rkf45.rkt") (lib "science/scribblings/statistics.scrbl") (lib "science/examples/poisson-histogram-example.rkt") (lib "science/random-distributions/pareto-graphics.rkt") (lib "science/random-distributions/triangular-graphics.rkt") (lib "science/random-source.rkt") (lib "science/discrete-histogram-graphics.rkt") (lib "science/chebyshev.rkt") (lib "science/examples/lognormal-histogram-example.rkt") (lib "science/random-distributions/exponential.rkt") (lib "science/examples/ode-example-3.rkt") (lib "science/scribblings/introduction.scrbl") (lib "science/random-distributions/gaussian.rkt") (lib "science/examples/t-distribution-plot-example.rkt") (lib "science/random-distributions/lognormal.rkt") (lib "science/science.rkt") (lib "science/scribblings/mathematical-functions.scrbl") (lib "science/scribblings/ode.scrbl") (lib "science/examples/flat-example.rkt") (lib "science/examples/gaussian-tail-plot-example.rkt") (lib "science/random-distributions/beta.rkt") (lib "science/random-distributions/chi-squared.rkt") (lib "science/examples/logarithmic-histogram-example.rkt") (lib "science/random-distributions/gamma.rkt") (lib "science/examples/flat-plot-example.rkt") (lib "science/examples/pareto-histogram-example.rkt"))) (name . "science") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:spdegabrielle@gmail.com . #t) (numerical . #t) (ring:1 . #t) (science . #t))) (source . "https://github.com/planet-ports/science.git") (tags . ("numerical" "science")) (versions . #hash((default . #hasheq((checksum . "ccd0b7277de38eb871202d1af09542cfd1f125c8") (source . "https://github.com/planet-ports/science.git") (source_url . "https://github.com/planet-ports/science.git"))))))) ("scope-operations" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scope-operations" "doc/scope-operations@scope-operations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scope-operations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scope-operations.txt"))) (checksum . "5ea8f32528bcf1ed4393cf9a054920936c27a556") (checksum-error . #f) (collection . "scope-operations") (conflicts . ()) (date-added . 1614799528) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "High-level operations on scopes and sets of scopes, for use in unhygienic macros.") (implies . ()) (modules . ((lib "scope-operations/short.rkt") (lib "scope-operations/main.rkt") (lib "scope-operations/scribblings/scope-operations.scrbl"))) (name . "scope-operations") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/scope-operations.git#main") (tags . ("scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "5ea8f32528bcf1ed4393cf9a054920936c27a556") (source . "https://github.com/jsmaniac/scope-operations.git#main") (source_url . "https://github.com/jsmaniac/scope-operations.git#main"))))))) ("scramble" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scramble" "doc/scramble@scramble/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scramble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scramble.txt"))) (checksum . "49987d70b62b1a011704adfd978032dc91967e05") (checksum-error . #f) (collection . "scramble") (conflicts . ()) (date-added . 1618108110) (dependencies . ("base" "scramble-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Assorted utility libraries (tests and documentation)") (implies . ("scramble-lib")) (modules . ((lib "scramble/tests/cond.rkt") (lib "scramble/scribblings/struct.scrbl") (lib "scramble/tests/immutable.rkt") (lib "scramble/tests/struct-info.rkt") (lib "scramble/scribblings/immutable.scrbl") (lib "scramble/tests/regexp.rkt") (lib "scramble/scribblings/struct-info.scrbl") (lib "scramble/scribblings/cond.scrbl") (lib "scramble/scribblings/evt.scrbl") (lib "scramble/scribblings/inject-syntax.scrbl") (lib "scramble/scribblings/list.scrbl") (lib "scramble/scribblings/scramble.scrbl") (lib "scramble/scribblings/number.scrbl") (lib "scramble/scribblings/result.scrbl") (lib "scramble/tests/number.rkt") (lib "scramble/scribblings/slice.scrbl") (lib "scramble/scribblings/function.scrbl") (lib "scramble/scribblings/about.scrbl") (lib "scramble/tests/function.rkt") (lib "scramble/scribblings/class.scrbl") (lib "scramble/tests/result.rkt") (lib "scramble/scribblings/regexp.scrbl") (lib "scramble/tests/struct.rkt") (lib "scramble/tests/inject-syntax.rkt"))) (name . "scramble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49987d70b62b1a011704adfd978032dc91967e05") (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble") (source_url . "https://github.com/rmculpepper/racket-scramble.git?path=scramble"))))))) ("scramble-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scramble-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scramble-lib.txt"))) (checksum . "49987d70b62b1a011704adfd978032dc91967e05") (checksum-error . #f) (collection . "scramble") (conflicts . ()) (date-added . 1618108184) (dependencies . ("base")) (description . "Assorted utility libraries") (implies . ()) (modules . ((lib "scramble/list.rkt") (lib "scramble/about.rkt") (lib "scramble/slice.rkt") (lib "scramble/result.rkt") (lib "scramble/evt.rkt") (lib "scramble/regexp.rkt") (lib "scramble/private/error.rkt") (lib "scramble/private/url.rkt") (lib "scramble/struct.rkt") (lib "scramble/inject-syntax.rkt") (lib "scramble/private/regexp.rkt") (lib "scramble/private/setf.rkt") (lib "scramble/class.rkt") (lib "scramble/immutable.rkt") (lib "scramble/number.rkt") (lib "scramble/cond.rkt") (lib "scramble/function.rkt") (lib "scramble/private/tree.rkt") (lib "scramble/struct-info.rkt"))) (name . "scramble-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49987d70b62b1a011704adfd978032dc91967e05") (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib") (source_url . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib"))))))) ("scratch" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratch" "doc/scratch@scratch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scratch.txt"))) (checksum . "92ec687d248f7ce587589305611367512d2a0506") (checksum-error . #f) (collection . "scratch") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "reprovide-lang" "at-exp-lib" "gui-lib" "pict-lib" "plot-gui-lib" "draw-lib" "data-lib" "profile-lib" "wxme-lib" "sandbox-lib" "syntax-color-lib" "zo-lib" "with-cache" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "scratch/scribblings/scratch.scrbl") (lib "scratch/private/reader-submod.rkt") (lib "scratch/full.rkt") (lib "scratch/main.rkt") (lib "scratch/ng.rkt") (lib "scratch/no-gui.rkt"))) (name . "scratch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "http://github.com/LeifAndersen/racket-scratch/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92ec687d248f7ce587589305611367512d2a0506") (source . "git://github.com/LeifAndersen/racket-scratch") (source_url . "http://github.com/LeifAndersen/racket-scratch/tree/master"))))))) ("scratchy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratchy" "doc/scratchy@scratchy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratchy.txt") (test-failure-log . "server/built/test-fail/scratchy.txt") (test-success-log . #f))) (checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("algol60" "base" "draw-lib" "gui-lib" "parser-tools-lib" "slideshow-lib" "racket-doc" "scribble-lib")) (description . "Scratch-like runtime and language") (implies . ()) (modules . ((lib "scratchy/examples/fish-text.rkt") (lib "scratchy/examples/splash.rkt") (lib "scratchy/examples/fish.rkt") (lib "scratchy/main.rkt") (lib "scratchy/examples/just-fish.rkt") (lib "scratchy/runtime.rkt") (lib "scratchy/parser.rkt") (lib "scratchy/scratchy.rkt") (lib "scratchy/examples/other.rkt") (lib "scratchy/examples/costume.rkt") (lib "scratchy/images.rkt") (lib "scratchy/reader.rkt") (lib "scratchy/scratchy.scrbl"))) (name . "scratchy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (games . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/scratchy/tree/master") (tags . ("games" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (source . "github://github.com/mflatt/scratchy/master") (source_url . "http://github.com/mflatt/scratchy/tree/master"))))))) ("scribble-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-abbrevs" "doc/scribble-abbrevs@scribble-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-abbrevs.txt"))) (checksum . "9a52ddc88126f150c12d4b56dee1c0c4727b0e93") (checksum-error . #f) (collection . "scribble-abbrevs") (conflicts . ()) (dependencies . ("base" "scribble-lib" "reprovide-lang-lib" "pict-lib" "draw-lib" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "rackunit-abbrevs" "pict-doc")) (description . "Scribble-to-LaTeX helper functions") (implies . ()) (modules . ((lib "scribble-abbrevs/private/manual.rkt") (lib "scribble-abbrevs/pict.rkt") (lib "scribble-abbrevs/main.rkt") (lib "scribble-abbrevs/scribblings/scribble-abbrevs.scrbl") (lib "scribble-abbrevs/latex.rkt") (lib "scribble-abbrevs/manual.rkt") (lib "scribble-abbrevs/private/latex.rkt") (lib "scribble-abbrevs/private/scribble.rkt") (lib "scribble-abbrevs/private/pict.rkt") (lib "scribble-abbrevs/private/integer-word.rkt") (lib "scribble-abbrevs/scribble.rkt") (lib "scribble-abbrevs/private/roman-numeral.rkt"))) (name . "scribble-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "http://github.com/bennn/scribble-abbrevs/tree/master") (tags . ("scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "9a52ddc88126f150c12d4b56dee1c0c4727b0e93") (source . "git://github.com/bennn/scribble-abbrevs") (source_url . "http://github.com/bennn/scribble-abbrevs/tree/master"))))))) ("scribble-bettergrammar" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar.txt"))) (checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594970271) (dependencies . ("scribble-bettergrammar-lib" "scribble-bettergrammar-doc")) (description . "A Scribble library for typesetting grammars with annotations, in particular, differences between grammars (implementation and documentation).") (implies . ("scribble-bettergrammar-lib" "scribble-bettergrammar-doc")) (modules . ()) (name . "scribble-bettergrammar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main"))))))) ("scribble-bettergrammar-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bettergrammar" "doc/bettergrammar@scribble-bettergrammar-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar-doc.txt"))) (checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1594969277) (dependencies . ("base" "scribble-bettergrammar-lib" "base" "scribble-lib" "racket-doc" "scribble-doc" "sexp-diff-doc")) (description . "Documentation for scribble-bettergrammar-lib, a Scribble library for typesetting grammars with annotations, in particular, differences between grammars.") (implies . ()) (modules . ((lib "scribble-bettergrammar-doc/bettergrammar/scribblings/bettergrammar.scrbl"))) (name . "scribble-bettergrammar-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main"))))))) ("scribble-bettergrammar-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar-lib.txt"))) (checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594969210) (dependencies . ("base" "scribble-lib" "sexp-diff-lib")) (description . "A Scribble library for typesetting grammars with annotations, in particular, differences between grammars (implementation only).") (implies . ()) (modules . ((lib "scribble/bettergrammar.rkt"))) (name . "scribble-bettergrammar-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "4d62bc0e767dc524ff2b8ac42cd0bb22aea3436c") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main"))))))) ("scribble-code-examples" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-code-examples" "doc/scribble-code-examples@scribble-code-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples.txt"))) (checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (checksum-error . #f) (collection . "scribble-code-examples") (conflicts . ()) (date-added . 1548446697) (dependencies . ("base" "scribble-code-examples-lib" "scribble-lib" "sandbox-lib" "racket-doc" "scribble-doc")) (description . "A scribble examples form that works with non-s-exp languages") (implies . ("scribble-code-examples-lib")) (modules . ((lib "scribble-code-examples/tests/test.scrbl") (lib "scribble-code-examples/scribblings/scribble-code-examples.scrbl"))) (name . "scribble-code-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (documentation . #t) (ring:1 . #t) (scribble . #t))) (source . "http://github.com/AlexKnauth/scribble-code-examples/tree/master?path=scribble-code-examples") (tags . ("documentation" "scribble")) (versions . #hash((default . #hasheq((checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (source . "git://github.com/AlexKnauth/scribble-code-examples?path=scribble-code-examples") (source_url . "http://github.com/AlexKnauth/scribble-code-examples/tree/master?path=scribble-code-examples"))))))) ("scribble-code-examples-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples-lib.txt"))) (checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (checksum-error . #f) (collection . "scribble-code-examples") (conflicts . ()) (date-added . 1548446649) (dependencies . ("base" "scribble-lib" "sandbox-lib" "rackunit-lib")) (description . "A scribble examples form that works with non-s-exp languages") (implies . ()) (modules . ((lib "scribble-code-examples/util/srcloc-position-char-index.rkt") (lib "scribble-code-examples/main.rkt"))) (name . "scribble-code-examples-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (documentation . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib") (tags . ("documentation" "scribble")) (versions . #hash((default . #hasheq((checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (source . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib") (source_url . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib"))))))) ("scribble-coq" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/scribble-coq.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "894ec4c1b1e97f3d50608bfba1c1d4361c7d3d5f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1551754229) (dependencies . ("threading-lib" "scribble-lib" "scribble-minted" "base")) (description . "A library for typesetting Coq and coqtop interactions in Scribble.") (implies . ()) (modules . ((lib "scribble/coqtop-interop.rkt") (lib "scribble/string-utils.rkt") (lib "scribble/coq.rkt"))) (name . "scribble-coq") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/scribble-coq.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "894ec4c1b1e97f3d50608bfba1c1d4361c7d3d5f") (source . "https://github.com/wilbowma/scribble-coq.git") (source_url . "https://github.com/wilbowma/scribble-coq.git"))))))) ("scribble-enhanced" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-enhanced-example.lp2" "doc/scribble-enhanced-example.lp2@scribble-enhanced/index.html") ("main" "scribble-enhanced-template.lp2" "doc/scribble-enhanced-template.lp2@scribble-enhanced/index.html") ("main" "scribble-enhanced" "doc/scribble-enhanced@scribble-enhanced/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-enhanced.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-enhanced.txt"))) (checksum . "d4fe76d1899b540e2806520a3acbf4afdf5abb88") (checksum-error . #f) (collection . "scribble-enhanced") (conflicts . ()) (date-added . 1614799533) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scheme-lib" "compatibility-lib" "slideshow-lib" "typed-racket-lib" "reprovide-lang" "mutable-match-lambda" "scribble-lib" "racket-doc" "at-exp-lib" "typed-racket-more" "typed-racket-doc" "scribble-doc")) (description . "Temporary package, will eventually be merged into the scribble-math and hyper-literate packages. Do not use.") (implies . ()) (modules . ((lib "scribble-enhanced/main.rkt") (lib "scribble-enhanced/math.rkt") (lib "scribble-enhanced/manual-scheme.rkt") (lib "scribble-enhanced/doc.rkt") (lib "scribble-enhanced/manual-form.rkt") (lib "scribble-enhanced/with-manual.rkt") (lib "scribble-enhanced/racket.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced-template.lp2.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced.scrbl") (lib "scribble-enhanced/scribblings/scribble-enhanced-example.lp2.rkt") (lib "scribble-enhanced/unicode-chars.sty.rkt") (lib "scribble-enhanced/forkmeongithub.rkt"))) (name . "scribble-enhanced") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (deprecated . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/scribble-enhanced.git#main") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "d4fe76d1899b540e2806520a3acbf4afdf5abb88") (source . "https://github.com/jsmaniac/scribble-enhanced.git#main") (source_url . "https://github.com/jsmaniac/scribble-enhanced.git#main"))))))) ("scribble-frog-helper" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-frog-helper" "doc/scribble-frog-helper@scribble-frog-helper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-frog-helper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-frog-helper.txt"))) (checksum . "bc9f6579c6cdbd02e9bf6561bf7839df8124097b") (checksum-error . #f) (collection . "scribble-frog-helper") (conflicts . ()) (date-added . 1576488283) (dependencies . ("scribble-lib" "base" "gregor" "timable" "frog" "at-exp-lib" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "scribble helper functions especially for writing blogs with frog") (implies . ()) (modules . ((lib "scribble-frog-helper/main.rkt") (lib "scribble-frog-helper/scribblings/scribble-frog-helper.scrbl"))) (name . "scribble-frog-helper") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (blog . #t) (frog . #t) (helper . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/yanyingwang/scribble-frog-helper.git") (tags . ("blog" "frog" "helper" "scribble")) (versions . #hash((default . #hasheq((checksum . "bc9f6579c6cdbd02e9bf6561bf7839df8124097b") (source . "https://github.com/yanyingwang/scribble-frog-helper.git") (source_url . "https://github.com/yanyingwang/scribble-frog-helper.git"))))))) ("scribble-lp2-manual" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-lp2-manual" "doc/scribble-lp2-manual@scribble-lp2-manual/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-lp2-manual.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-lp2-manual.txt"))) (checksum . "97103586af16f3d2ee02d336fa537a4396f25d49") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1635444642) (dependencies . ("base" "at-exp-lib" "scribble-lib" "scribble-lib" "scribble-doc" "racket-doc")) (description . "Literate programming in style") (implies . ()) (modules . ((lib "scribble/lp2/manual/lang/reader.rkt") (lib "scribble/lp2/manual.rkt") (lib "scribble/lp2/manual/scribblings/scribble-lp2-manual.scrbl"))) (name . "scribble-lp2-manual") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/benknoble/scribble-lp2-manual.git#main") (tags . ("literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "97103586af16f3d2ee02d336fa537a4396f25d49") (source . "https://github.com/benknoble/scribble-lp2-manual.git#main") (source_url . "https://github.com/benknoble/scribble-lp2-manual.git#main"))))))) ("scribble-math" . #hasheq((author . "racket@suzanne.soy jensaxel@soegaard.net") (authors . ("racket@suzanne.soy" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-math" "doc/scribble-math@scribble-math/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-math.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-math.txt"))) (checksum . "a69b6fad193757de5a62b6a1cabacb7557d02ff7") (checksum-error . #f) (collection . "scribble-math") (conflicts . ()) (date-added . 1614799538) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scribble-lib" "racket-doc" "at-exp-lib" "scribble-doc")) (description . "Typesetting math in scribble (uses MathJax and/or KaTeX). Also supports figures with Asymptote.") (implies . ()) (modules . ((lib "scribble-math/scribblings/scribble-math.scrbl") (lib "scribble-math/dollar.rkt") (lib "scribble-math/katex-convert-unicode.rkt") (lib "scribble-math/mathjax-convert-unicode.rkt") (lib "scribble-math/asymptote.rkt") (lib "scribble-math/main.rkt"))) (name . "scribble-math") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (Math . #t) (author:jensaxel@soegaard.net . #t) (author:racket@suzanne.soy . #t) (documentation . #t) (math . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/jsmaniac/scribble-math.git#main") (tags . ("documentation" "LaTeX" "math" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "a69b6fad193757de5a62b6a1cabacb7557d02ff7") (source . "https://github.com/jsmaniac/scribble-math.git#main") (source_url . "https://github.com/jsmaniac/scribble-math.git#main"))))))) ("scribble-minted" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/scribble-minted.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550296818) (dependencies . ("scribble-minted-lib" "scribble-minted-doc")) (description . "A scribble library for using pygmentize.") (implies . ("scribble-minted-lib" "scribble-minted-doc")) (modules . ()) (name . "scribble-minted") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main"))))))) ("scribble-minted-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "minted"))) (failure-log . "server/built/fail/scribble-minted-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617441073) (dependencies . ("base" "scribble-lib" "scribble-minted-lib" "racket-doc" "scribble-doc")) (description . "Documentation for scribble-minted.") (implies . ()) (modules . ((lib "scribblings/minted.scrbl"))) (name . "scribble-minted-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main"))))))) ("scribble-minted-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-minted-lib.txt") (test-failure-log . "server/built/test-fail/scribble-minted-lib.txt") (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617441048) (dependencies . ("rackunit-lib" "scribble-lib" "base")) (description . "A scribble library for using pygmentize (library only).") (implies . ()) (modules . ((lib "examples/test.scrbl") (lib "examples/meow.scrbl") (lib "examples/agda-example.scrbl") (lib "scribble/minted.rkt"))) (name . "scribble-minted-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main"))))))) ("scribble-rainbow-delimiters" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/scribble-rainbow-delimiters.txt") (docs . (("main" "scribble-rainbow-delimiters" "doc/scribble-rainbow-delimiters@scribble-rainbow-delimiters/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-rainbow-delimiters.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-rainbow-delimiters.txt"))) (checksum . "4224d9ae0029bd80b60f477199f8fad2427da8f0") (checksum-error . #f) (collection . "scribble-rainbow-delimiters") (conflicts . ()) (date-added . 1621919886) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Colorizing matched brackets of codes on HTML pages generated by Racket Scribble") (implies . ()) (modules . ((lib "scribble-rainbow-delimiters/scribblings/scribble-rainbow-delimiters.scrbl") (lib "scribble-rainbow-delimiters/main.rkt"))) (name . "scribble-rainbow-delimiters") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "4224d9ae0029bd80b60f477199f8fad2427da8f0") (source . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git") (source_url . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git"))))))) ("scribble-slideshow" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-slideshow" "doc/scribble-slideshow@scribble-slideshow/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-slideshow.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-slideshow.txt"))) (checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (checksum-error . #f) (collection . "scribble-slideshow") (conflicts . ()) (date-added . 1594584915) (dependencies . ("base" "pict-lib" "scribble-lib" "slideshow-lib" "scribble-slideshow-lib" "racket-doc" "at-exp-lib" "pict-doc" "slideshow-doc" "scribble-doc")) (description . "Write slideshows using Scribble.") (implies . ()) (modules . ((lib "scribble-slideshow/scribble-slideshow.scrbl") (lib "scribble-slideshow/misc/overlap.rkt") (lib "scribble-slideshow/example/demo.scrbl") (lib "scribble-slideshow/example/demo2.rkt") (lib "scribble-slideshow/example/demo-staging.scrbl"))) (name . "scribble-slideshow") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (pict . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow") (tags . ("pict" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow") (source_url . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow"))))))) ("scribble-slideshow-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-slideshow-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-slideshow-lib.txt"))) (checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (checksum-error . #f) (collection . "scribble-slideshow") (conflicts . ()) (date-added . 1594584853) (dependencies . ("base" "at-exp-lib" "slideshow-lib" "pict-lib" "scribble-lib")) (description . "Write slideshows using Scribble.") (implies . ()) (modules . ((lib "scribble-slideshow/private/slide.rkt") (lib "scribble-slideshow/pict.rkt") (lib "scribble-slideshow/main.rkt") (lib "scribble-slideshow/private/pict.rkt"))) (name . "scribble-slideshow-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (pict . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib") (tags . ("pict" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib") (source_url . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib"))))))) ("scripty" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scripty-doc" "scripty-lib")) (description . "") (implies . ("scripty-doc" "scripty-lib")) (modules . ()) (name . "scripty") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty"))))))) ("scripty-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scripty" "doc/scripty@scripty-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-doc.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "scripty-lib")) (description . "") (implies . ()) (modules . ((lib "scribblings/scripty.scrbl"))) (name . "scripty-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-doc") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-doc") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-doc"))))))) ("scripty-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-lib.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (modules . ((lib "scripty/main.rkt"))) (name . "scripty-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-lib") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-lib") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-lib"))))))) ("scrypt" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/scrypt.txt") (success-log . "server/built/install/scrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scrypt.txt"))) (checksum . "da39d02302cad3e07c12215e42ea63212d209d1b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "rackunit-lib")) (description . "Racket binding to Colin Percival's \"scrypt\" function.") (implies . ()) (modules . ((lib "scrypt/private/install.rkt") (lib "scrypt/wrapper.rkt") (lib "scrypt/main.rkt") (lib "scrypt/test-main.rkt"))) (name . "scrypt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-scrypt/tree/master/") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "da39d02302cad3e07c12215e42ea63212d209d1b") (source . "github://github.com/tonyg/racket-scrypt/master/") (source_url . "http://github.com/tonyg/racket-scrypt/tree/master/"))))))) ("sdl" . #hasheq((author . "cosmez leif@leifandersen.net") (authors . ("cosmez" "leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdl.txt") (test-failure-log . "server/built/test-fail/sdl.txt") (test-success-log . #f))) (checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (checksum-error . #f) (collection . "sdl") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for SDL") (implies . ()) (modules . ((lib "sdl/structs.rkt") (lib "sdl/constants.rkt") (lib "sdl/definitions.rkt") (lib "sdl/main.rkt"))) (name . "sdl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:cosmez . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (source_url . "git://github.com/cosmez/racket-sdl/?path=sdl"))))))) ("sdl2" . #hasheq((author . "awkravchuk@gmail.com") (authors . ("awkravchuk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdl2.txt") (test-failure-log . "server/built/test-fail/sdl2.txt") (test-success-log . #f))) (checksum . "a25bfa28e32c60f8219eb712255fa5b07e3a8ad5") (checksum-error . #f) (collection . "sdl2") (conflicts . ()) (date-added . 1559487243) (dependencies . ("base")) (description . "Racket bindings to the Simple DirectMedia Layer 2 library: the full package.\r\n") (implies . ()) (modules . ((lib "sdl2/ttf.rkt") (lib "sdl2/examples/simple.rkt") (lib "sdl2/image/main.rkt") (lib "sdl2/mixer/pretty.rkt") (lib "sdl2/image/pretty.rkt") (lib "sdl2/mixer.rkt") (lib "sdl2/net/main.rkt") (lib "sdl2/examples/hello-pretty.rkt") (lib "sdl2/examples/hello-sdl2.rkt") (lib "sdl2/ttf/main.rkt") (lib "sdl2/image.rkt") (lib "sdl2/net/pretty.rkt") (lib "sdl2/pretty.rkt") (lib "sdl2/examples/events.rkt") (lib "sdl2/mixer/main.rkt") (lib "sdl2/ttf/pretty.rkt") (lib "sdl2/private/lib-path.rkt") (lib "sdl2/net.rkt") (lib "sdl2/main.rkt"))) (name . "sdl2") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:awkravchuk@gmail.com . #t) (ffi . #t) (fonts . #t) (games . #t) (graphics . #t) (network . #t) (ring:1 . #t) (sound . #t))) (source . "https://github.com/lockie/racket-sdl2.git") (tags . ("2d" "ffi" "fonts" "games" "graphics" "network" "sound")) (versions . #hash((default . #hasheq((checksum . "a25bfa28e32c60f8219eb712255fa5b07e3a8ad5") (source . "https://github.com/lockie/racket-sdl2.git") (source_url . "https://github.com/lockie/racket-sdl2.git"))))))) ("sdraw" . #hasheq((author . "jack@rosenth.al") (authors . ("jack@rosenth.al")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sdraw" "doc/sdraw@sdraw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdraw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sdraw.txt"))) (checksum . "b885937074fa2c8ac0db4df2f84f11ea3e52ddcf") (checksum-error . #f) (collection . "sdraw") (conflicts . ()) (dependencies . ("base" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc")) (description . "Generate cons-cell diagrams using pict. Includes extensive options for customizing the look and feel of the diagrams.") (implies . ()) (modules . ((lib "sdraw/main.rkt") (lib "sdraw/scribblings/sdraw.scrbl") (lib "sdraw/sdraw.rkt"))) (name . "sdraw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jack@rosenth.al . #t) (education . #t) (lisp . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/jackrosenthal/sdraw-racket.git") (tags . ("education" "lisp" "pict")) (versions . #hash((default . #hasheq((checksum . "b885937074fa2c8ac0db4df2f84f11ea3e52ddcf") (source . "https://github.com/jackrosenthal/sdraw-racket.git") (source_url . "https://github.com/jackrosenthal/sdraw-racket.git"))))))) ("search-list-box" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "search-list-box" "doc/search-list-box@search-list-box/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/search-list-box.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/search-list-box.txt"))) (checksum . "725fbb6111677b8b7ca0f79d5b7adeb4ed4a773d") (checksum-error . #f) (collection . "search-list-box") (conflicts . ()) (date-added . 1595694555) (dependencies . ("gui-lib" "base" "gui-doc" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A list-box% with a search field") (implies . ()) (modules . ((lib "search-list-box/examples/minimal.rkt") (lib "search-list-box/main.rkt") (lib "search-list-box/scribblings/search-list-box.scrbl") (lib "search-list-box/examples/capitals.rkt"))) (name . "search-list-box") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (fuzzy-search . #t) (gui . #t) (list-box . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/search-list-box.git") (tags . ("fuzzy-search" "gui" "list-box")) (versions . #hash((default . #hasheq((checksum . "725fbb6111677b8b7ca0f79d5b7adeb4ed4a773d") (source . "https://github.com/Metaxal/search-list-box.git") (source_url . "https://github.com/Metaxal/search-list-box.git"))))))) ("search-upward" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "search-upward" "doc/search-upward@search-upward/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/search-upward.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/search-upward.txt"))) (checksum . "02016d0ca3bdd76d69c9d376ae84936a63c5ca6e") (checksum-error . #f) (collection . "search-upward") (conflicts . ()) (date-added . 1570829462) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Search for files and directories by walking from a path \"upwards\" to the applicable root directory. ") (implies . ()) (modules . ((lib "search-upward/main.rkt") (lib "search-upward/scribblings/search-upward.scrbl"))) (name . "search-upward") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (configuration . #t) (files . #t) (locate . #t) (rcfile . #t) (ring:1 . #t) (runtime-configuration . #t) (search . #t))) (source . "https://github.com/zyrolasting/search-upward.git") (tags . ("configuration" "files" "locate" "rcfile" "runtime-configuration" "search")) (versions . #hash((default . #hasheq((checksum . "02016d0ca3bdd76d69c9d376ae84936a63c5ca6e") (source . "https://github.com/zyrolasting/search-upward.git") (source_url . "https://github.com/zyrolasting/search-upward.git"))))))) ("secd" . #hasheq((author . "gasparricci.p95@gmail.com") (authors . ("gasparricci.p95@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "secd" "doc/secd@secd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/secd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/secd.txt"))) (checksum . "cebf4c32d4c48c6d964449788c0e708524872120") (checksum-error . #f) (collection . "secd") (conflicts . ()) (dependencies . ("base" "beautiful-racket-lib" "brag" "data-lib" "racket-doc" "scribble-lib")) (description . "An SECD to ARM Assembler compiler, supporting a small subset of instructions.") (implies . ()) (modules . ((lib "secd/lexer.rkt") (lib "secd/main.rkt") (lib "secd/test.rkt") (lib "secd/expander.rkt") (lib "secd/tokenizer.rkt") (lib "secd/parser.rkt") (lib "secd/tokenize-only.rkt") (lib "secd/parse-only.rkt") (lib "secd/scribblings/secd.scrbl"))) (name . "secd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gasparricci.p95@gmail.com . #t) (ring:1 . #t) (secd . #t) (secd-abstract-machine . #t) (secd-to-arm . #t))) (source . "https://github.com/GPRicci/secd.git") (tags . ("secd" "secd-abstract-machine" "secd-to-arm")) (versions . #hash((default . #hasheq((checksum . "cebf4c32d4c48c6d964449788c0e708524872120") (source . "https://github.com/GPRicci/secd.git") (source_url . "https://github.com/GPRicci/secd.git"))))))) ("semaphore-utils" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "semaphore-utils" "doc/semaphore-utils@semaphore-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semaphore-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semaphore-utils.txt"))) (checksum . "a0c803cb60c78a45cdd457f2f85301bb86671806") (checksum-error . #f) (collection . "semaphore-utils") (conflicts . ()) (date-added . 1655490576) (dependencies . ("base" "racket-doc" "sandbox-lib" "scribble-lib" "test-more")) (description . "A small library for working with semaphores.") (implies . ()) (modules . ((lib "semaphore-utils/scribblings/semaphore-utils.scrbl") (lib "semaphore-utils/main.rkt"))) (name . "semaphore-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (semaphore . #t))) (source . "https://github.com/dstorrs/semaphore-utils.git") (tags . ("semaphore")) (versions . #hash((default . #hasheq((checksum . "a0c803cb60c78a45cdd457f2f85301bb86671806") (source . "https://github.com/dstorrs/semaphore-utils.git") (source_url . "https://github.com/dstorrs/semaphore-utils.git"))))))) ("semilit" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semilit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semilit.txt"))) (checksum . "54db05b04b17c3b74facea8e8a438c73d238936a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "datalog" "scribble-lib")) (description . "Semi-literate programming for any Racket language") (implies . ()) (modules . ((lib "semilit/main.rkt") (lib "semilit/ancestor.rkt") (lib "semilit/scribble-example.rkt") (lib "semilit/example.rkt"))) (name . "semilit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/samth/semilit/tree/master") (tags . ("dev" "documentation" "language")) (versions . #hash((default . #hasheq((checksum . "54db05b04b17c3b74facea8e8a438c73d238936a") (source . "github://github.com/samth/semilit/master") (source_url . "http://github.com/samth/semilit/tree/master"))))))) ("semver" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "semver" "doc/semver@semver/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semver.txt"))) (checksum . "fee107ee2401b5f7d7d797258eab3062ddb71232") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "alexis-util" "racket-doc" "scribble-lib" "typed-racket-doc" "typed-racket-more")) (description . "An implementation of the semver (semantic versioning) specification") (implies . ()) (modules . ((lib "semver/scribblings/semver.scrbl") (lib "semver/main.rkt"))) (name . "semver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-semver/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fee107ee2401b5f7d7d797258eab3062ddb71232") (source . "git://github.com/lexi-lambda/racket-semver") (source_url . "http://github.com/lexi-lambda/racket-semver/tree/master"))))))) ("send-exp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/send-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/send-exp.txt"))) (checksum . "fcbb060fb9a0d8efc6810f6d77accf11093f6c8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Terse syntax for object-oriented message sending") (implies . ()) (modules . ((lib "send-exp/lang/reader.rkt") (lib "send-exp/lang.rkt"))) (name . "send-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/tonyg/racket-send-exp/tree/master") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "fcbb060fb9a0d8efc6810f6d77accf11093f6c8e") (source . "git://github.com/tonyg/racket-send-exp") (source_url . "http://github.com/tonyg/racket-send-exp/tree/master"))))))) ("sendinblue" . #hasheq((author . "me@sorinmuntean.ro") (authors . ("me@sorinmuntean.ro")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sendinblue" "doc/sendinblue@sendinblue/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sendinblue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sendinblue.txt"))) (checksum . "ac9e2dd37baa3ad802b232305a190e4121ba7101") (checksum-error . #f) (collection . "sendinblue") (conflicts . ()) (date-added . 1605943488) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A client for the Sendinblue transactional email API.") (implies . ()) (modules . ((lib "sendinblue/main.rkt") (lib "sendinblue/private/util.rkt") (lib "sendinblue/private/client.rkt") (lib "sendinblue/sendinblue.scrbl"))) (name . "sendinblue") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@sorinmuntean.ro . #t) (email . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "ac9e2dd37baa3ad802b232305a190e4121ba7101") (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main") (source_url . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main"))))))) ("sendinblue-test" . #hasheq((author . "me@sorinmuntean.ro") (authors . ("me@sorinmuntean.ro")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sendinblue-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sendinblue-test.txt"))) (checksum . "ac9e2dd37baa3ad802b232305a190e4121ba7101") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1606026593) (dependencies . ("base" "sendinblue" "rackunit-lib" "web-server-lib")) (description . "A client for the Sendinblue transactional email API. (tests only)") (implies . ()) (modules . ((lib "tests/sendinblue/send-mail.rkt") (lib "tests/sendinblue/common.rkt"))) (name . "sendinblue-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@sorinmuntean.ro . #t) (email . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "ac9e2dd37baa3ad802b232305a190e4121ba7101") (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main") (source_url . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main"))))))) ("sentry" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry.txt"))) (checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1562014586) (dependencies . ("sentry-doc" "sentry-lib")) (description . "A Sentry SDK for Racket. (docs and implementation)") (implies . ("sentry-doc" "sentry-lib")) (modules . ()) (name . "sentry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry"))))))) ("sentry-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sentry" "doc/sentry@sentry-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry-doc.txt"))) (checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (checksum-error . #f) (collection . "sentry") (conflicts . ()) (date-added . 1562044104) (dependencies . ("base" "gregor-lib" "sentry-lib" "scribble-lib" "web-server-lib" "gregor-doc" "racket-doc" "web-server-doc")) (description . "A Sentry SDK for Racket. (docs only)") (implies . ()) (modules . ((lib "sentry/scribblings/sentry.scrbl"))) (name . "sentry-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc"))))))) ("sentry-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry-lib.txt"))) (checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (checksum-error . #f) (collection . "sentry") (conflicts . ()) (date-added . 1562014555) (dependencies . ("base" "compatibility-lib" "gregor-lib" "http-easy" "web-server-lib")) (description . "A Sentry SDK for Racket. (implementation only)") (implies . ()) (modules . ((lib "sentry/private/user.rkt") (lib "sentry/private/reflect.rkt") (lib "sentry/private/event.rkt") (lib "sentry/sentry.rkt") (lib "sentry/main.rkt"))) (name . "sentry-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib"))))))) ("sentry-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-test.txt") (test-failure-log . "server/built/test-fail/sentry-test.txt") (test-success-log . #f))) (checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1562014520) (dependencies . ("base" "gregor-lib" "rackunit-lib" "sentry-lib" "threading-lib" "web-server-lib")) (description . "A Sentry SDK for Racket. (tests only)") (implies . ()) (modules . ((lib "tests/sentry/main.rkt") (lib "tests/sentry/event.rkt") (lib "tests/sentry/user.rkt") (lib "tests/sentry/common.rkt") (lib "tests/sentry/sentry.rkt"))) (name . "sentry-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "b47a725c6797b9021eff714d4d81d6583600bd6a") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test"))))))) ("seq" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "seq" "doc/seq@seq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/seq.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/seq.txt"))) (checksum . "c5f17742975163b5eeffc18741552b1003098880") (checksum-error . #f) (collection . "seq") (conflicts . ()) (date-added . 1643747015) (dependencies . ("base" "collections-lib" "arguments" "mischief" "version-case" "relation" "social-contract" "scribble-lib" "scribble-abbrevs" "racket-doc" "collections-doc" "functional-doc" "rackunit-lib" "cover" "cover-coveralls" "relation" "sandbox-lib")) (description . "A generic, isomorphic, sequence library.") (implies . ()) (modules . ((lib "seq/tests/base.rkt") (lib "seq/tests/private/util.rkt") (lib "seq/api.rkt") (lib "seq/main.rkt") (lib "seq/scribblings/seq.scrbl") (lib "seq/tests/api.rkt") (lib "seq/tests/iso.rkt") (lib "seq/private/util.rkt") (lib "seq/types.rkt") (lib "seq/base.rkt") (lib "seq/iso.rkt"))) (name . "seq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (functional . #t) (generic . #t) (isomorphic . #t) (lazy . #t) (ring:1 . #t) (sequence . #t))) (source . "https://github.com/countvajhula/seq.git#main") (tags . ("functional" "generic" "isomorphic" "lazy" "sequence")) (versions . #hash((default . #hasheq((checksum . "c5f17742975163b5eeffc18741552b1003098880") (source . "https://github.com/countvajhula/seq.git#main") (source_url . "https://github.com/countvajhula/seq.git#main"))))))) ("seq-no-order" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "seq-no-order" "doc/seq-no-order@seq-no-order/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/seq-no-order.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/seq-no-order.txt"))) (checksum . "5911a6f2d4f92d115f964dbb2e55919e51db4478") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "~seq-no-order and ~no-order as pattern-expanders that work with syntax/parse.") (implies . ()) (modules . ((lib "seq-no-order/docs/seq-no-order.scrbl") (lib "seq-no-order/groups-no-order.rkt") (lib "seq-no-order/main.rkt") (lib "seq-no-order/seq-no-order.rkt"))) (name . "seq-no-order") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "http://github.com/AlexKnauth/seq-no-order/tree/master") (tags . ("syntax-parse")) (versions . #hash((default . #hasheq((checksum . "5911a6f2d4f92d115f964dbb2e55919e51db4478") (source . "git://github.com/AlexKnauth/seq-no-order") (source_url . "http://github.com/AlexKnauth/seq-no-order/tree/master"))))))) ("serial" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/serial.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (checksum-error . #f) (collection . "serial") (conflicts . ()) (dependencies . ("base" "termios")) (description . "Helper FFI bindings for serial port communication based on pyserial") (implies . ()) (modules . ((lib "serial/serial.rkt") (lib "serial/ioctl.rkt") (lib "serial/main.rkt") (lib "serial/private/install.rkt"))) (name . "serial") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:bprzygoda@gmail.com . #t) (communication . #t) (linux . #t) (port . #t) (ring:1 . #t) (serial . #t))) (source . "http://github.com/BartAdv/racket-serial/tree/master") (tags . ("communication" "linux" "port" "serial")) (versions . #hash((default . #hasheq((checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (source . "git://github.com/BartAdv/racket-serial") (source_url . "http://github.com/BartAdv/racket-serial/tree/master"))))))) ("serialize-syntax-introducer" . #hasheq((author . "alexander@knauth.org iitalics@gmail.com") (authors . ("alexander@knauth.org" "iitalics@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "serialize-syntax-introducer" "doc/serialize-syntax-introducer@serialize-syntax-introducer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/serialize-syntax-introducer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/serialize-syntax-introducer.txt"))) (checksum . "5944d9f32df50b608c3493a7fd6a510afabf8fd3") (checksum-error . #f) (collection . "serialize-syntax-introducer") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Serializing syntax introducers into values that can be embedded into syntax objects, compiled, read back as syntax, and restored to functions that introduce the same scopes") (implies . ()) (modules . ((lib "serialize-syntax-introducer/main.rkt") (lib "serialize-syntax-introducer/scribblings/serialize-syntax-introducer.scrbl"))) (name . "serialize-syntax-introducer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "5944d9f32df50b608c3493a7fd6a510afabf8fd3") (source . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git") (source_url . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git"))))))) ("set" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "new-set" "doc/new-set@set/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set.txt"))) (checksum . "655e2567cefe9684b0425a0ec601a97d1faf7d0e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Use `racket/set` instead") (implies . ()) (modules . ((lib "data/new-set.scrbl") (lib "data/main.rkt") (lib "data/private/common.rkt") (lib "data/set.rkt") (lib "data/seteq.rkt"))) (name . "set") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/samth/set.rkt/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "655e2567cefe9684b0425a0ec601a97d1faf7d0e") (source . "github://github.com/samth/set.rkt/master") (source_url . "http://github.com/samth/set.rkt/tree/master"))))))) ("set-exp" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "set-exp" "doc/set-exp@set-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-exp.txt"))) (checksum . "19c898f13278efee5399de7307fc95d0f53ee82d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Literal set syntax") (implies . ()) (modules . ((lib "set-exp/lang/reader.rkt") (lib "set-exp/set-exp.scrbl") (lib "set-exp/lang.rkt") (lib "set-exp/test.rkt"))) (name . "set-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (reader . #t) (ring:1 . #t) (sugar . #t))) (source . "http://github.com/jackfirth/set-exp/tree/master") (tags . ("experimental" "reader" "sugar")) (versions . #hash((default . #hasheq((checksum . "19c898f13278efee5399de7307fc95d0f53ee82d") (source . "git://github.com/jackfirth/set-exp") (source_url . "http://github.com/jackfirth/set-exp/tree/master"))))))) ("set-extras" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-extras.txt"))) (checksum . "37eff681f658ff2e760993ff736f6a4ff9eda93d") (checksum-error . #f) (collection . "set-extras") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Some conveniences for set, including fancy unicode aliases and more comprehension forms") (implies . ()) (modules . ((lib "set-extras/tests.rkt") (lib "set-extras/main.rkt"))) (name . "set-extras") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (set . #t) (typed-racket . #t) (unicode . #t))) (source . "http://github.com/philnguyen/set-extras/tree/master?path=set-extras") (tags . ("set" "typed-racket" "unicode")) (versions . #hash((default . #hasheq((checksum . "37eff681f658ff2e760993ff736f6a4ff9eda93d") (source . "git://github.com/philnguyen/set-extras?path=set-extras") (source_url . "http://github.com/philnguyen/set-extras/tree/master?path=set-extras"))))))) ("sew" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sew.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sew.txt"))) (checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1640074365) (dependencies . ("sew-doc" "sew-lib")) (description . "A meta-language for assembling a file with custom preprocessing logic.") (implies . ("sew-doc" "sew-lib")) (modules . ()) (name . "sew") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/sew-for-racket.git?path=sew#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (source . "https://github.com/lathe/sew-for-racket.git?path=sew#main") (source_url . "https://github.com/lathe/sew-for-racket.git?path=sew#main"))))))) ("sew-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sew" "doc/sew@sew-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sew-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sew-doc.txt"))) (checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (checksum-error . #f) (collection . "sew") (conflicts . ()) (date-added . 1640074253) (dependencies . ("base" "parendown-lib" "racket-doc" "scribble-lib" "sew-lib")) (description . "A meta-language for assembling a file with custom preprocessing logic. (doc)") (implies . ()) (modules . ((lib "sew/scribblings/sew.scrbl"))) (name . "sew-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/sew-for-racket.git?path=sew-doc#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (source . "https://github.com/lathe/sew-for-racket.git?path=sew-doc#main") (source_url . "https://github.com/lathe/sew-for-racket.git?path=sew-doc#main"))))))) ("sew-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sew-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sew-lib.txt"))) (checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (checksum-error . #f) (collection . "sew") (conflicts . ()) (date-added . 1640074153) (dependencies . ("base" "parendown-lib")) (description . "A meta-language for assembling a file with custom preprocessing logic. (lib)") (implies . ()) (modules . ((lib "sew/main.rkt") (lib "sew/lang/reader.rkt") (lib "sew/private.rkt"))) (name . "sew-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/sew-for-racket.git?path=sew-lib#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (source . "https://github.com/lathe/sew-for-racket.git?path=sew-lib#main") (source_url . "https://github.com/lathe/sew-for-racket.git?path=sew-lib#main"))))))) ("sew-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sew-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sew-test.txt"))) (checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (checksum-error . #f) (collection . "sew") (conflicts . ()) (date-added . 1640074304) (dependencies . ("base" "rackunit-lib" "parendown-lib" "sew-lib")) (description . "A meta-language for assembling a file with custom preprocessing logic. (test)") (implies . ()) (modules . ((lib "sew/tests.rkt") (lib "sew/tests/hello-world.rkt"))) (name . "sew-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/sew-for-racket.git?path=sew-test#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "564744f97dd499af2c88ee3edf5763ceda952f73") (source . "https://github.com/lathe/sew-for-racket.git?path=sew-test#main") (source_url . "https://github.com/lathe/sew-for-racket.git?path=sew-test#main"))))))) ("sexp-diff" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1596735462) (dependencies . ("sexp-diff-lib" "sexp-diff-doc" "sexp-diff-test")) (description . "Diffs s-expressions based on Levenshtein-like edit distance.") (implies . ("sexp-diff-lib" "sexp-diff-doc" "sexp-diff-test")) (modules . ()) (name . "sexp-diff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff"))))))) ("sexp-diff-doc" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sexp-diff" "doc/sexp-diff@sexp-diff-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-doc.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1615153610) (dependencies . ("base" "scribble-lib" "rackunit-lib" "racket-doc" "sexp-diff-lib")) (description . "Diffs s-expressions based on Levenshtein-like edit distance, documentation.") (implies . ()) (modules . ((lib "sexp-diff-doc/sexp-diff/sexp-diff.scrbl"))) (name . "sexp-diff-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc"))))))) ("sexp-diff-lib" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-lib.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615153562) (dependencies . ("base")) (description . "Diffs s-expressions based on Levenshtein-like edit distance, library only.") (implies . ()) (modules . ((lib "sexp-diff/stx-diff.rkt") (lib "sexp-diff/utils.rkt") (lib "sexp-diff/sexp-diff.rkt") (lib "sexp-diff/main.rkt"))) (name . "sexp-diff-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib"))))))) ("sexp-diff-test" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-test.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615153654) (dependencies . ("base" "rackunit-lib" "sexp-diff-lib")) (description . "Tests for sexp-diff-lib") (implies . ()) (modules . ((lib "sexp-diff/tests/stx-diff.rkt") (lib "sexp-diff/tests/sexp-diff.rkt"))) (name . "sexp-diff-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test"))))))) ("sfont" . #hasheq((author . "capo.daniele@gmail.com") (authors . ("capo.daniele@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sfont" "doc/sfont@sfont/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sfont.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sfont.txt"))) (checksum . "c854f9734f15f4c7cd4b98e041b8c961faa3eef2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "pict-doc" "racket-doc" "scribble-lib")) (description . "A package for manipulating and creating fonts in Racket.") (implies . ()) (modules . ((lib "sfont/utilities.rkt") (lib "sfont-examples/fontwrite-contours.rkt") (lib "sfont/properties.rkt") (lib "sfont/export/ufopfa.rkt") (lib "sfont/private/geom/bezier.rkt") (lib "sfont-examples/fontwrite-equalizer.rkt") (lib "sfont/math.rkt") (lib "sfont/space.rkt") (lib "sfont/scribblings/sfont.scrbl") (lib "sfont/private/fontmath/info-kern-math.rkt") (lib "sfont/private/fontmath/math.rkt") (lib "sfont/private/geom/geometric-generic.rkt") (lib "sfont/geometry.rkt") (lib "sfont/private/ufo/ufo-read-write.rkt") (lib "sfont/main.rkt") (lib "sfont/private/fontpict.rkt") (lib "sfont-examples/fontwrite-chart.rkt") (lib "sfont/private/gui/simple-frames.rkt") (lib "sfont/private/parametric/path.rkt") (lib "sfont/glyphlist.rkt") (lib "sfont/export/writepfa.rkt") (lib "sfont/private/gui/draw-property.rkt") (lib "sfont-examples/fontwrite-square.rkt") (lib "sfont/private/geom/vec.rkt") (lib "sfont/private/spacing/kern.rkt") (lib "sfont-examples/fontwrite-gradient.rkt") (lib "sfont/navigator.rkt") (lib "sfont/export/type1.rkt") (lib "sfont/private/fontmath/interpolables.rkt") (lib "sfont/private/geom/bounding-box.rkt") (lib "sfont/private/ufo/names.rkt") (lib "sfont/private/spacing/space.rkt") (lib "sfont/private/parametric/fontwriter.rkt") (lib "sfont-examples/fontwrite-random.rkt") (lib "sfont/windows.rkt") (lib "sfont/private/ufo/ufo-def.rkt") (lib "sfont/parametric.rkt") (lib "sfont/private/ufo/plists.rkt"))) (name . "sfont") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:capo.daniele@gmail.com . #t) (fonts . #t) (graphics . #t) (ring:1 . #t))) (source . "http://github.com/danielecapo/sfont/tree/master") (tags . ("fonts" "graphics")) (versions . #hash((default . #hasheq((checksum . "c854f9734f15f4c7cd4b98e041b8c961faa3eef2") (source . "github://github.com/danielecapo/sfont/master") (source_url . "http://github.com/danielecapo/sfont/tree/master"))))))) ("sha" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sha" "doc/sha@sha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sha.txt"))) (checksum . "034302a567381e97b3b3956740f97ed3ae629374") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "SHA-1 and SHA-2, via FFI to OpenSSL.") (implies . ()) (modules . ((lib "sha/bytes.rkt") (lib "sha/main.rkt") (lib "sha/sha.scrbl"))) (name . "sha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (crypto . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/greghendershott/sha/tree/master") (tags . ("crypto" "web")) (versions . #hash((default . #hasheq((checksum . "034302a567381e97b3b3956740f97ed3ae629374") (source . "github://github.com/greghendershott/sha/master") (source_url . "http://github.com/greghendershott/sha/tree/master"))))))) ("shell-pipeline" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shell-pipeline" "doc/shell-pipeline@shell-pipeline/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shell-pipeline.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shell-pipeline.txt"))) (checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (checksum-error . #f) (collection . "shell") (conflicts . ()) (date-added . 1608151864) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Shell pipeline library") (implies . ()) (modules . ((lib "shell/private/test/test-pipeline-macro.rkt") (lib "shell/private/pipeline-macro-parse.rkt") (lib "shell/private/test/test-pipeline.rkt") (lib "shell/private/good-unix-operator.rkt") (lib "shell/private/test/test-mixed-pipeline.rkt") (lib "shell/scribblings/shell-pipeline.scrbl") (lib "shell/scribblings/pipeline-macro.scrbl") (lib "shell/private/pipeline-alias.rkt") (lib "shell/private/define-simple-alias.rkt") (lib "shell/mixed-pipeline.rkt") (lib "shell/private/mixed-pipeline.rkt") (lib "shell/pipeline-macro.rkt") (lib "shell/private/pipeline-operator-transform.rkt") (lib "shell/private/pipeline-operator-detect.rkt") (lib "shell/private/misc-utils.rkt") (lib "shell/private/pipeline-operator-default.rkt") (lib "shell/utils/bourne-expansion-utils.rkt") (lib "shell/private/mostly-structs.rkt") (lib "shell/private/define-pipeline-alias.rkt") (lib "shell/private/filter-keyword-args.rkt") (lib "shell/pipeline.rkt") (lib "shell/scribblings/pipeline.scrbl") (lib "shell/private/subprocess-pipeline.rkt") (lib "shell/scribblings/mixed-pipeline.scrbl") (lib "shell/private/pipeline-operators.rkt") (lib "shell/private/pipeline-macro-logicwrapper.rkt"))) (name . "shell-pipeline") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (shell . #t) (unix . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline") (tags . ("shell" "unix")) (versions . #hash((default . #hasheq((checksum . "116529759e06c850b5078a369637c2fcbda5cd92") (source . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline") (source_url . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline"))))))) ("shlex" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shlex" "doc/shlex@shlex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shlex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shlex.txt"))) (checksum . "5de06500e8c831cfc8dffb99d57a76decc02c569") (checksum-error . #f) (collection . "shlex") (conflicts . ()) (date-added . 1592757406) (dependencies . ("parser-tools-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "shlex for Racket: Simple lexical analysis") (implies . ()) (modules . ((lib "shlex/main.rkt") (lib "shlex/scribblings/shlex.scrbl") (lib "shlex/private/convert.rkt"))) (name . "shlex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (ring:1 . #t) (shell . #t))) (source . "https://github.com/sorawee/shlex.git") (tags . ("shell")) (versions . #hash((default . #hasheq((checksum . "5de06500e8c831cfc8dffb99d57a76decc02c569") (source . "https://github.com/sorawee/shlex.git") (source_url . "https://github.com/sorawee/shlex.git"))))))) ("sicp" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sicp-manual" "doc/sicp-manual@sicp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sicp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sicp.txt"))) (checksum . "f0ff5bf97f1fc098a80b79b3b5d55a6ef344a712") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556729468) (dependencies . ("base" "draw-lib" "r5rs-lib" "rackunit-lib" "snip-lib" "draw-doc" "gui-doc" "r5rs-doc" "racket-doc" "scribble-lib")) (description . "SICP Support for DrRacket") (implies . ()) (modules . ((lib "sicp/lang/reader.rkt") (lib "sicp-doc/sicp.scrbl") (lib "sicp-doc/contributors.scrbl") (lib "sicp/test/amb.rkt") (lib "sicp-doc/installation.scrbl") (lib "sicp-doc/sicp-manual.scrbl") (lib "sicp-doc/sicp-pict.scrbl") (lib "sicp-pict/test/tests.rkt") (lib "sicp-pict/main.rkt") (lib "sicp-doc/external-links.scrbl") (lib "sicp/main.rkt"))) (name . "sicp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (books . #t) (pictures . #t) (ring:1 . #t) (scheme . #t) (sicp . #t) (textbook . #t))) (source . "https://github.com/sicp-lang/sicp.git") (tags . ("books" "pictures" "scheme" "sicp" "textbook")) (versions . #hash((default . #hasheq((checksum . "f0ff5bf97f1fc098a80b79b3b5d55a6ef344a712") (source . "https://github.com/sicp-lang/sicp.git") (source_url . "https://github.com/sicp-lang/sicp.git"))))))) ("signature" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "signature" "doc/signature@signature/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/signature.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/signature.txt"))) (checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (checksum-error . #f) (collection . "signature") (conflicts . ()) (dependencies . ("kw-utils" "racklog" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Syntax and utilities for writing function contracts as signatures") (implies . ()) (modules . ((lib "signature/main.rkt") (lib "signature/utils.rkt") (lib "signature/scribblings/signature.scrbl") (lib "signature/syntax.rkt"))) (name . "signature") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (contracts . #t) (ring:1 . #t))) (source . "http://github.com/thinkmoore/signature/tree/master") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (source . "git://github.com/thinkmoore/signature") (source_url . "http://github.com/thinkmoore/signature/tree/master"))))))) ("simple-barcode" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-barcode" "doc/simple-barcode@simple-barcode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-barcode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-barcode.txt"))) (checksum . "f47a793f5afc7b34ea296352d216fc55646bd9f7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "simple-svg" "racket-doc" "scribble-lib")) (description . "Barcode tool") (implies . ()) (modules . ((lib "simple-barcode/lib/draw/draw.rkt") (lib "simple-barcode/lib/code128-lib.rkt") (lib "simple-barcode/lib/draw/svg.rkt") (lib "simple-barcode/tests/code128/code128-test.rkt") (lib "simple-barcode/tests/ean13/ean13-test.rkt") (lib "simple-barcode/example/svg/svg-example.rkt") (lib "simple-barcode/lib/draw/parameters.rkt") (lib "simple-barcode/lib/share.rkt") (lib "simple-barcode/lib/ean13-lib.rkt") (lib "simple-barcode/tests/share-test.rkt") (lib "simple-barcode/main.rkt") (lib "simple-barcode/example/png/png-example.rkt") (lib "simple-barcode/lib/draw/png.rkt") (lib "simple-barcode/lib/code39-lib.rkt") (lib "simple-barcode/simple-barcode.scrbl") (lib "simple-barcode/tests/main/main-test.rkt") (lib "simple-barcode/tests/code39/code39-test.rkt"))) (name . "simple-barcode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (barcode . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-simple-barcode.git") (tags . ("barcode")) (versions . #hash((default . #hasheq((checksum . "f47a793f5afc7b34ea296352d216fc55646bd9f7") (source . "https://github.com/simmone/racket-simple-barcode.git") (source_url . "https://github.com/simmone/racket-simple-barcode.git"))))))) ("simple-matrix" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-matrix-manual" "doc/simple-matrix-manual@simple-matrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-matrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-matrix.txt"))) (checksum . "ef14b69757573eb646cc4c6ca7fbc7574bd9a027") (checksum-error . #f) (collection . "simple-matrix") (conflicts . ()) (date-added . 1597361283) (dependencies . ("base" "sandbox-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "A very simple library for basic matrix arithmetic.") (implies . ()) (modules . ((lib "simple-matrix/main.rkt") (lib "simple-matrix/simple-matrix-manual.scrbl") (lib "simple-matrix/private/simple-matrix.rkt"))) (name . "simple-matrix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (matrix . #t) (ring:1 . #t))) (source . "https://bitbucket.org/derend/simple-matrix.git") (tags . ("matrix")) (versions . #hash((default . #hasheq((checksum . "ef14b69757573eb646cc4c6ca7fbc7574bd9a027") (source . "https://bitbucket.org/derend/simple-matrix.git") (source_url . "https://bitbucket.org/derend/simple-matrix.git"))))))) ("simple-oauth2" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-oauth2" "doc/simple-oauth2@simple-oauth2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-oauth2.txt") (test-failure-log . "server/built/test-fail/simple-oauth2.txt") (test-success-log . #f))) (checksum . "b8cb40511f64dcb274e17957e6fc9ab4c8a6cbea") (checksum-error . #f) (collection . "oauth2") (conflicts . ()) (date-added . 1549389191) (dependencies . ("base" "crypto-lib" "dali" "net-jwt" "threading" "web-server-lib" "rackunit-lib" "rackunit-spec" "scribble-lib" "racket-doc" "racket-index" "sandbox-lib" "cover-coveralls")) (description . "Simple OAuth 2.0 client implementation") (implies . ()) (modules . ((lib "oauth2/private/external-ip.rkt") (lib "oauth2/scribblings/client.scrbl") (lib "oauth2/scribblings/storage.scrbl") (lib "oauth2/tools/common.rkt") (lib "oauth2/private/logging.rkt") (lib "oauth2/tests/test-doc-complete.rkt") (lib "oauth2/scribblings/tools.scrbl") (lib "oauth2/client.rkt") (lib "oauth2/private/template.rkt") (lib "oauth2/storage/config.rkt") (lib "oauth2/client/flow.rkt") (lib "oauth2/private/privacy.rkt") (lib "oauth2/tools/fitbit.rkt") (lib "oauth2/private/redirect-server.rkt") (lib "oauth2/main.rkt") (lib "oauth2/private/storage.rkt") (lib "oauth2/private/http.rkt") (lib "oauth2/storage/clients.rkt") (lib "oauth2/scribblings/oauth2.scrbl") (lib "oauth2/client/pkce.rkt") (lib "oauth2/scribblings/simple-oauth2.scrbl") (lib "oauth2/storage/tokens.rkt") (lib "oauth2/tools/livongo.rkt"))) (name . "simple-oauth2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (oauth . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/simple-oauth2.git") (tags . ("oauth")) (versions . #hash((default . #hasheq((checksum . "b8cb40511f64dcb274e17957e6fc9ab4c8a6cbea") (source . "https://github.com/johnstonskj/simple-oauth2.git") (source_url . "https://github.com/johnstonskj/simple-oauth2.git"))))))) ("simple-obfuscation" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-obfuscation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-obfuscation.txt"))) (checksum . "f6ff1afe75ae97994b351a9dc189c0e31d06fdf6") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1615569257) (dependencies . ("base")) (description . "") (implies . ()) (modules . ((lib "simple-obfuscation/main.rkt"))) (name . "simple-obfuscation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rfindler/simple-obfuscation.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f6ff1afe75ae97994b351a9dc189c0e31d06fdf6") (source . "https://github.com/rfindler/simple-obfuscation.git") (source_url . "https://github.com/rfindler/simple-obfuscation.git"))))))) ("simple-polynomial" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-poly-manual" "doc/simple-poly-manual@simple-polynomial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-polynomial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-polynomial.txt"))) (checksum . "c8c7e2e4175a27123becd6e78f792738b0bf1188") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597642988) (dependencies . ("base" "parser-tools-lib" "simple-matrix" "math-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib" "plot-doc" "plot-gui-lib" "draw-lib")) (description . "Basic polynomial arithmetic and interpolation.") (implies . ()) (modules . ((lib "simple-polynomial/tools.rkt") (lib "simple-polynomial/private/poly-struct-parse.rkt") (lib "simple-polynomial/private/poly-struct.rkt") (lib "simple-polynomial/private/poly-display.rkt") (lib "simple-polynomial/simple-poly-manual.scrbl") (lib "simple-polynomial/private/term-ops.rkt") (lib "simple-polynomial/base.rkt") (lib "simple-polynomial/private/poly-tools.rkt") (lib "simple-polynomial/fit.rkt") (lib "simple-polynomial/main.rkt") (lib "simple-polynomial/private/poly-fit.rkt") (lib "simple-polynomial/private/poly-smooth.rkt"))) (name . "simple-polynomial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (interpolation . #t) (polynomial . #t) (ring:1 . #t))) (source . "https://bitbucket.org/derend/simple-polynomial.git") (tags . ("interpolation" "polynomial")) (versions . #hash((default . #hasheq((checksum . "c8c7e2e4175a27123becd6e78f792738b0bf1188") (source . "https://bitbucket.org/derend/simple-polynomial.git") (source_url . "https://bitbucket.org/derend/simple-polynomial.git"))))))) ("simple-qr" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-qr" "doc/simple-qr@simple-qr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-qr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-qr.txt"))) (checksum . "904f1491bc521badeafeabd0d7d7e97e3d0ee958") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "draw-doc" "racket-doc" "scribble-lib" "reed-solomon" "simple-svg")) (description . "QR code tool") (implies . ()) (modules . ((lib "simple-qr/read/lib/express/exclude-alignment-pattern/exclude-alignment-pattern.rkt") (lib "simple-qr/write/lib/express/group-decimal-list/group-decimal-list.rkt") (lib "simple-qr/share/dark-module.rkt") (lib "simple-qr/write/lib/express/express.rkt") (lib "simple-qr/write/lib/dark-module/dark-module.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-func.rkt") (lib "simple-qr/write/lib/mask-data/mask-data.rkt") (lib "simple-qr/write/lib/func/poly/poly-dic-func.rkt") (lib "simple-qr/tests/write/func/capacity-dic-test.rkt") (lib "simple-qr/tests/share/data-group-test.rkt") (lib "simple-qr/share/format-information.rkt") (lib "simple-qr/write/lib/format-information/format-information.rkt") (lib "simple-qr/share/data-encoding.rkt") (lib "simple-qr/read/lib/express/origin-bits/origin-bits.rkt") (lib "simple-qr/write/lib/express/add-terminator/add-terminator.rkt") (lib "simple-qr/tests/share/alignment-pattern-test.rkt") (lib "simple-qr/read/lib/express/exclude-dark-module/exclude-dark-module.rkt") (lib "simple-qr/write/lib/express/add-multiple8/add-multiple8.rkt") (lib "simple-qr/write/lib/express/dark-module/dark-module.rkt") (lib "simple-qr/read/lib/express/exclude-separator/exclude-separator.rkt") (lib "simple-qr/write/lib/express/repeat-pad/repeat-pad.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-dic.rkt") (lib "simple-qr/write/lib/func/func.rkt") (lib "simple-qr/write/lib/express/data-bits/data-bits.rkt") (lib "simple-qr/write/lib/express/decimal-list/decimal-list.rkt") (lib "simple-qr/read/lib/express/interleave-data/interleave-data.rkt") (lib "simple-qr/write/lib/express/finder-pattern/finder-pattern.rkt") (lib "simple-qr/tests/write/data-encoding-test.rkt") (lib "simple-qr/write/lib/express/timing-pattern/timing-pattern.rkt") (lib "simple-qr/write/lib/express/version-information/version-information.rkt") (lib "simple-qr/write/lib/express/header.rkt") (lib "simple-qr/tests/read/lib-test.rkt") (lib "simple-qr/example/example.rkt") (lib "simple-qr/tests/share/timing-pattern-test.rkt") (lib "simple-qr/write/lib/data-encoding/data-encoding.rkt") (lib "simple-qr/tests/lab/svg.rkt") (lib "simple-qr/write/lib/express/format-information/format-information.rkt") (lib "simple-qr/read/lib/express/rotated-bits/rotated-bits.rkt") (lib "simple-qr/share/finder-pattern.rkt") (lib "simple-qr/tests/write/func/poly-dic-func-test.rkt") (lib "simple-qr/write/lib/func/capacity/capacity-func.rkt") (lib "simple-qr/write/lib/timing-pattern/timing-pattern.rkt") (lib "simple-qr/share/version-information.rkt") (lib "simple-qr/write/lib/express/masked/masked.rkt") (lib "simple-qr/write/lib/express/interleave-data-group/interleave-data-group.rkt") (lib "simple-qr/write/lib/express/mask-list/mask-list.rkt") (lib "simple-qr/read/lib/express/express.rkt") (lib "simple-qr/write/lib/fill-data/fill-data.rkt") (lib "simple-qr/tests/write/mask-data-test.rkt") (lib "simple-qr/write/lib/alignment-pattern/alignment-pattern.rkt") (lib "simple-qr/share/code-info/code-info-func.rkt") (lib "simple-qr/write/lib/express/append-remainder/append-remainder.rkt") (lib "simple-qr/write/lib/express/add-indicator/add-indicator.rkt") (lib "simple-qr/share/mask-data.rkt") (lib "simple-qr/tests/write/func/func-test.rkt") (lib "simple-qr/read/lib/express/exclude-timing-pattern/exclude-timing-pattern.rkt") (lib "simple-qr/write/lib/express/final/final.rkt") (lib "simple-qr/read/lib/express/final-string/final-string.rkt") (lib "simple-qr/share/separator.rkt") (lib "simple-qr/write/qr-write.rkt") (lib "simple-qr/share/code-info/code-info-dic.rkt") (lib "simple-qr/write/lib/express/overview/overview.rkt") (lib "simple-qr/read/lib/express/bw-bits/bw-bits.rkt") (lib "simple-qr/share/draw/draw.rkt") (lib "simple-qr/tests/read/qr-read-test.rkt") (lib "simple-qr/read/lib/express/exclude-format-information/exclude-format-information.rkt") (lib "simple-qr/read/lib/lib.rkt") (lib "simple-qr/tests/test-cases/cases-test.rkt") (lib "simple-qr/tests/write/func/code-info-func-test.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-dic.rkt") (lib "simple-qr/share/character-bit-width.rkt") (lib "simple-qr/tests/write/func/capacity-func-test.rkt") (lib "simple-qr/write/lib/finder-pattern/finder-pattern.rkt") (lib "simple-qr/write/lib/func/code-log/transform-code-log.rkt") (lib "simple-qr/read/lib/express/final-bits/final-bits.rkt") (lib "simple-qr/write/lib/data-encoding/alphanumeric.rkt") (lib "simple-qr/read/lib/express/header.rkt") (lib "simple-qr/share/draw/lib.rkt") (lib "simple-qr/write/lib/express/start/start.rkt") (lib "simple-qr/write/lib/express/fill-data/fill-data.rkt") (lib "simple-qr/write/lib/func/code-info/code-info-func.rkt") (lib "simple-qr/write/lib/express/alignment-pattern/alignment-pattern.rkt") (lib "simple-qr/share/draw/svg.rkt") (lib "simple-qr/tests/read/matrix-rotate-test.rkt") (lib "simple-qr/tests/share/draw-test.rkt") (lib "simple-qr/read/lib/express/basic-information/basic-information.rkt") (lib "simple-qr/main.rkt") (lib "simple-qr/write/lib/express/input/input.rkt") (lib "simple-qr/share/draw/png.rkt") (lib "simple-qr/scribble/simple-qr.scrbl") (lib "simple-qr/write/lib/func/code-info/code-info-dic.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-func.rkt") (lib "simple-qr/share/data-group.rkt") (lib "simple-qr/tests/share/character-bit-width-test.rkt") (lib "simple-qr/tests/share/fill-data-test.rkt") (lib "simple-qr/write/lib/express/data-trace/data-trace.rkt") (lib "simple-qr/share/fill-data.rkt") (lib "simple-qr/write/lib/express/separator/separator.rkt") (lib "simple-qr/write/lib/func/capacity/transform.rkt") (lib "simple-qr/read/lib/express/unmask-data/unmask-data.rkt") (lib "simple-qr/read/matrix-rotate/lib.rkt") (lib "simple-qr/write/lib/func/capacity/capacity-dic.rkt") (lib "simple-qr/read/lib/express/input/input.rkt") (lib "simple-qr/read/lib/express/rotate-ratio/rotate-ratio.rkt") (lib "simple-qr/share/timing-pattern.rkt") (lib "simple-qr/tests/share/func-test.rkt") (lib "simple-qr/read/lib/express/exclude-version-information/exclude-version-information.rkt") (lib "simple-qr/write/lib/separator/separator.rkt") (lib "simple-qr/tests/write/func/code-log-func-test.rkt") (lib "simple-qr/read/lib/express/decoded-data/decoded-data.rkt") (lib "simple-qr/share/func.rkt") (lib "simple-qr/read/lib/express/data-recovery/data-recovery.rkt") (lib "simple-qr/share/alignment-pattern.rkt") (lib "simple-qr/read/lib/express/finder-pattern-center-points/finder-pattern-center-points.rkt") (lib "simple-qr/tests/write/func/remainder-bits-func-test.rkt") (lib "simple-qr/write/lib/version-information/version-information.rkt") (lib "simple-qr/read/lib/express/exclude-finder-pattern/exclude-finder-pattern.rkt") (lib "simple-qr/write/lib/express/error-code/error-code.rkt") (lib "simple-qr/share/error-level.rkt") (lib "simple-qr/read/qr-read.rkt") (lib "simple-qr/read/lib/express/trimed-bits/trimed-bits.rkt") (lib "simple-qr/write/lib/express/reserved-format-information/reserved-format-information.rkt"))) (name . "simple-qr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (qr . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-simple-qr.git") (tags . ("qr")) (versions . #hash((default . #hasheq((checksum . "904f1491bc521badeafeabd0d7d7e97e3d0ee958") (source . "https://github.com/simmone/racket-simple-qr.git") (source_url . "https://github.com/simmone/racket-simple-qr.git"))))))) ("simple-svg" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-svg" "doc/simple-svg@simple-svg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-svg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-svg.txt"))) (checksum . "d2fa88b5c0b801bbd6169274237a0edb63998c76") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1559659630) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "svg generate tool for racket") (implies . ()) (modules . ((lib "simple-svg/src/lib/sstyle.rkt") (lib "simple-svg/scribble/shapes/circle.scrbl") (lib "simple-svg/tests/gradient/gradient-test.rkt") (lib "simple-svg/src/shapes/line.rkt") (lib "simple-svg/tests/shapes/line/line-test.rkt") (lib "simple-svg/scribble/path/arc.scrbl") (lib "simple-svg/src/path/lineto.rkt") (lib "simple-svg/tests/shapes/polygon/polygon-test.rkt") (lib "simple-svg/scribble/path/path.scrbl") (lib "simple-svg/src/lib/lib.rkt") (lib "simple-svg/src/path/arc.rkt") (lib "simple-svg/src/svg.rkt") (lib "simple-svg/src/shapes/polygon.rkt") (lib "simple-svg/tests/path/raw-path-test.rkt") (lib "simple-svg/tests/shapes/circle/circle-test.rkt") (lib "simple-svg/tests/sstyle/transform-test.rkt") (lib "simple-svg/src/path/close-path.rkt") (lib "simple-svg/scribble/path/moveto.scrbl") (lib "simple-svg/scribble/gradient/gradient.scrbl") (lib "simple-svg/showcase/example/recursive.rkt") (lib "simple-svg/tests/group/group-test.rkt") (lib "simple-svg/scribble/shapes/polyline.scrbl") (lib "simple-svg/src/shapes/rect.rkt") (lib "simple-svg/tests/text/text-test.rkt") (lib "simple-svg/scribble/path/lineto.scrbl") (lib "simple-svg/scribble/text/text.scrbl") (lib "simple-svg/src/path/path.rkt") (lib "simple-svg/src/path/moveto.rkt") (lib "simple-svg/tests/shapes/rect/rect-test.rkt") (lib "simple-svg/src/path/raw-path.rkt") (lib "simple-svg/tests/path/moveto-test.rkt") (lib "simple-svg/scribble/shapes/rect.scrbl") (lib "simple-svg/tests/path/ccurve-test.rkt") (lib "simple-svg/scribble/path/qcurve.scrbl") (lib "simple-svg/scribble/shapes/polygon.scrbl") (lib "simple-svg/tests/shapes/polyline/polyline-test.rkt") (lib "simple-svg/scribble/shapes/ellipse.scrbl") (lib "simple-svg/tests/path/lineto-test.rkt") (lib "simple-svg/scribble/simple-svg.scrbl") (lib "simple-svg/src/text/text.rkt") (lib "simple-svg/src/shapes/polyline.rkt") (lib "simple-svg/src/path/ccurve.rkt") (lib "simple-svg/src/gradient/gradient.rkt") (lib "simple-svg/scribble/path/raw-path.scrbl") (lib "simple-svg/scribble/shapes/line.scrbl") (lib "simple-svg/main.rkt") (lib "simple-svg/tests/svg/svg-test.rkt") (lib "simple-svg/src/shapes/circle.rkt") (lib "simple-svg/tests/path/qcurve-test.rkt") (lib "simple-svg/scribble/path/ccurve.scrbl") (lib "simple-svg/src/shapes/ellipse.rkt") (lib "simple-svg/scribble/path/close.scrbl") (lib "simple-svg/src/path/qcurve.rkt") (lib "simple-svg/tests/path/arc-test.rkt") (lib "simple-svg/scribble/sstyle.scrbl") (lib "simple-svg/scribble/usage.scrbl") (lib "simple-svg/tests/shapes/ellipse/ellipse-test.rkt"))) (name . "simple-svg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (svg . #t))) (source . "https://github.com/simmone/racket-simple-svg.git") (tags . ("svg")) (versions . #hash((default . #hasheq((checksum . "d2fa88b5c0b801bbd6169274237a0edb63998c76") (source . "https://github.com/simmone/racket-simple-svg.git") (source_url . "https://github.com/simmone/racket-simple-svg.git"))))))) ("simple-xlsx" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-xlsx" "doc/simple-xlsx@simple-xlsx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xlsx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xlsx.txt"))) (checksum . "4db2b2eb3e66f1bbc4c8cfff268697085891a9bc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "racket-doc" "scribble-lib" "rackunit-lib" "at-exp-lib")) (description . "Xlsx File tool") (implies . ()) (modules . ((lib "simple-xlsx/tests/xlsx/numFmt-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/styles-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/fonts-test.rkt") (lib "simple-xlsx/writer/_rels/rels.rkt") (lib "simple-xlsx/xlsx/xlsx-lib.rkt") (lib "simple-xlsx/tests/read-test-cases/test5/test5-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test9/test9-test.rkt") (lib "simple-xlsx/tests/writer/_rels/rels-test.rkt") (lib "simple-xlsx/tests/writer/xl/charts/chart-test.rkt") (lib "simple-xlsx/tests/xlsx/range-lib-test.rkt") (lib "simple-xlsx/writer/xl/cal-chain.rkt") (lib "simple-xlsx/writer/xl/chartsheets/chartsheet.rkt") (lib "simple-xlsx/writer/xl/theme/theme.rkt") (lib "simple-xlsx/tests/writer/xl/styles/empty-test.rkt") (lib "simple-xlsx/writer/xl/printerSettings/printerSettings.rkt") (lib "simple-xlsx/xlsx/xlsx.rkt") (lib "simple-xlsx/writer/xl/worksheets/_rels/rels.rkt") (lib "simple-xlsx/tests/writer/xl/charts/line-chart-test.rkt") (lib "simple-xlsx/writer.rkt") (lib "simple-xlsx/writer/xl/styles/styles.rkt") (lib "simple-xlsx/tests/writer/xl/charsheets/chartsheet-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test10/test10-test.rkt") (lib "simple-xlsx/reader.rkt") (lib "simple-xlsx/tests/read-test-cases/test2/test2-test.rkt") (lib "simple-xlsx/tests/writer/xl/sharedStrings-test.rkt") (lib "simple-xlsx/tests/writer/xl/drawings/_rels/drawing-rels-test.rkt") (lib "simple-xlsx/tests/main/line-feed-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test8/test8-test.rkt") (lib "simple-xlsx/writer/xl/_rels/workbook-xml-rels.rkt") (lib "simple-xlsx/tests/writer/xl/styles/cellXfs-test.rkt") (lib "simple-xlsx/main.rkt") (lib "simple-xlsx/writer/xl/charts/line-chart.rkt") (lib "simple-xlsx/tests/writer/xl/charts/pie-chart-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test6/test6-test.rkt") (lib "simple-xlsx/tests/writer/xl/workbook-test.rkt") (lib "simple-xlsx/xlsx/sheet.rkt") (lib "simple-xlsx/tests/writer/xl/styles/numFmt-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test1/test1-test.rkt") (lib "simple-xlsx/tests/lib/lib-test.rkt") (lib "simple-xlsx/xlsx/range-lib.rkt") (lib "simple-xlsx/writer/xl/charts/pie-chart.rkt") (lib "simple-xlsx/tests/read-test-cases/test12/test12-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/borders-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test11/test11-test.rkt") (lib "simple-xlsx/lib/lib.rkt") (lib "simple-xlsx/writer/docProps/docprops-core.rkt") (lib "simple-xlsx/tests/main/from-read-to-write-test.rkt") (lib "simple-xlsx/tests/writer/xl/worksheets/worksheet/worksheet-test.rkt") (lib "simple-xlsx/tests/xlsx/font-style-test.rkt") (lib "simple-xlsx/writer/xl/drawings/_rels/drawing-rels.rkt") (lib "simple-xlsx/simple-xlsx.scrbl") (lib "simple-xlsx/writer/xl/sharedStrings.rkt") (lib "simple-xlsx/tests/writer/content-type/content-type-test.rkt") (lib "simple-xlsx/tests/write-test-cases/multiple-style.rkt") (lib "simple-xlsx/tests/writer/xl/styles/fills-test.rkt") (lib "simple-xlsx/tests/writer/xl/cal-chain-test.rkt") (lib "simple-xlsx/tests/writer/xl/charts/bar-chart-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test3/test3-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test4/test4-test.rkt") (lib "simple-xlsx/tests/writer/docProps/docprops-core-test.rkt") (lib "simple-xlsx/writer/xl/charts/bar-chart.rkt") (lib "simple-xlsx/tests/xlsx/fill-style-test.rkt") (lib "simple-xlsx/tests/xlsx/mix-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/_rels/workbook-xml-rels-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test13/test13-test.rkt") (lib "simple-xlsx/tests/xlsx/xlsx-lib-test.rkt") (lib "simple-xlsx/tests/xlsx/xlsx-test.rkt") (lib "simple-xlsx/writer/xl/chartsheets/_rels/chartsheet-rels.rkt") (lib "simple-xlsx/tests/write-test-cases/number-format-multi-sheet.rkt") (lib "simple-xlsx/writer/content-type/content-type.rkt") (lib "simple-xlsx/writer/xl/worksheets/worksheet/worksheet.rkt") (lib "simple-xlsx/writer/xl/workbook.rkt") (lib "simple-xlsx/writer/xl/drawings/drawing.rkt") (lib "simple-xlsx/writer/xl/charts/chart.rkt") (lib "simple-xlsx/writer/docProps/docprops-app.rkt") (lib "simple-xlsx/example/example.rkt") (lib "simple-xlsx/tests/writer/xl/drawings/drawing-test.rkt") (lib "simple-xlsx/tests/xlsx/border-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/charsheets/_rels/chartsheet-rels-test.rkt") (lib "simple-xlsx/tests/writer/docProps/docprops-app-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test7/test7-test.rkt"))) (name . "simple-xlsx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (xlsx . #t))) (source . "https://github.com/simmone/racket-simple-xlsx.git") (tags . ("xlsx")) (versions . #hash((default . #hasheq((checksum . "4db2b2eb3e66f1bbc4c8cfff268697085891a9bc") (source . "https://github.com/simmone/racket-simple-xlsx.git") (source_url . "https://github.com/simmone/racket-simple-xlsx.git"))))))) ("simple-xml" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-xml" "doc/simple-xml@simple-xml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xml.txt"))) (checksum . "32602ae86feb89338bb29575b6bfee5aa7fc1b50") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1613118216) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "detail")) (description . "Simplify xml's read and write.") (implies . ()) (modules . ((lib "simple-xml/xml.rkt") (lib "simple-xml/tests/read-and-write/list-test.rkt") (lib "simple-xml/tests/read-and-write/sheet-test.rkt") (lib "simple-xml/scribble/simple-xml.scrbl") (lib "simple-xml/tests/xml-to-hash/broken-test.rkt") (lib "simple-xml/tests/read-and-write/empty-test.rkt") (lib "simple-xml/tests/read-and-write/workbook-test.rkt") (lib "simple-xml/tests/read-and-write/shared-strings-test.rkt") (lib "simple-xml/tests/read-and-write/children-test.rkt") (lib "simple-xml/main.rkt") (lib "simple-xml/tests/lists-to-xml/basic-test.rkt"))) (name . "simple-xml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/simmone/racket-simple-xml.git") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "32602ae86feb89338bb29575b6bfee5aa7fc1b50") (source . "https://github.com/simmone/racket-simple-xml.git") (source_url . "https://github.com/simmone/racket-simple-xml.git"))))))) ("simply-scheme" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@simply-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simply-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simply-scheme.txt"))) (checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "string-constants-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Danny Yoo's \"Simply Scheme\" package, allowing the use of Racket for the \"Simply Scheme\" curriculum") (implies . ()) (modules . ((lib "simply-scheme/lang/reader.rkt") (lib "simply-scheme/manual.scrbl") (lib "simply-scheme/private/check-bound.rkt") (lib "simply-scheme/main.rkt") (lib "simply-scheme/simply-scheme.rkt") (lib "simply-scheme/tool.rkt"))) (name . "simply-scheme") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/simply-scheme/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (source . "git://github.com/jbclements/simply-scheme") (source_url . "http://github.com/jbclements/simply-scheme/tree/master"))))))) ("sirmail" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sirmail.txt") (test-failure-log . "server/built/test-fail/sirmail.txt") (test-success-log . #f))) (checksum . "30c9bd6c6993ddd432d50a7ab705afa22ec34891") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621791891) (dependencies . ("base" "compatibility-lib" "drracket" "gui-lib" "net-lib" "parser-tools-lib" "scheme-lib" "syntax-color-lib" "sandbox-lib" "pict-lib" "pict-snip-lib")) (description . "An IMAP mail client") (implies . ()) (modules . ((lib "sirmail/pref.rkt") (lib "sirmail/sirmails.rkt") (lib "sirmail/spell.rkt") (lib "sirmail/badge.rkt") (lib "sirmail/folderr.rkt") (lib "sirmail/readr.rkt") (lib "sirmail/recover.rkt") (lib "sirmail/optionr.rkt") (lib "sirmail/sendr.rkt") (lib "sirmail/repl.rkt") (lib "sirmail/main.rkt") (lib "sirmail/debug.rkt") (lib "sirmail/sirmailr.rkt") (lib "sirmail/utilr.rkt") (lib "sirmail/sirmail.rkt"))) (name . "sirmail") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:mflatt@cs.utah.edu . #t) (mail . #t) (net . #t) (ring:1 . #t))) (source . "git+https://github.com/mflatt/sirmail") (tags . ("app" "mail" "net")) (versions . #hash((default . #hasheq((checksum . "30c9bd6c6993ddd432d50a7ab705afa22ec34891") (source . "git+https://github.com/mflatt/sirmail") (source_url . "git+https://github.com/mflatt/sirmail"))))))) ("sketching" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sketching.txt"))) (checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411542) (dependencies . ("sketching-lib" "sketching-doc")) (description . "Sketching - Language, documentation and examples") (implies . ("sketching-lib" "sketching-doc")) (modules . ()) (name . "sketching") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (source . "https://github.com/soegaard/sketching.git?path=sketching#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching#main"))))))) ("sketching-doc" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "manual-sketching" "doc/manual-sketching@sketching-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching-doc.txt") (test-failure-log . "server/built/test-fail/sketching-doc.txt") (test-success-log . #f))) (checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411418) (dependencies . ("scribble-lib" "sketching-lib" "base" "sandbox-lib" "gui-doc" "pict-doc" "at-exp-lib" "base" "gui-lib" "pict-lib" "scribble-lib" "sketching-lib" "racket-doc" "cairo-lib")) (description . "Documentation for Sketching") (implies . ()) (modules . ((lib "sketching-doc/manual-examples/basics/math/increment-decrement.rkt") (lib "sketching-doc/manual-examples/basics/math/sine-wave.rkt") (lib "sketching-doc/manual-examples/basics/color/relativity.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector-of-objects.rkt") (lib "sketching-doc/manual-examples/basics/color/saturation.rkt") (lib "sketching-doc/manual-examples/basics/objects/multiple-constructors.rkt") (lib "sketching-doc/manual-examples/basics/objects/objects.rkt") (lib "sketching-doc/manual-examples/basics/form/triangle-strip.rkt") (lib "sketching-doc/manual-examples/basics/input/clock.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-2d.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-1d.rkt") (lib "sketching-doc/manual-examples/basics/input/milliseconds.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-signals.rkt") (lib "sketching-doc/manual-examples/basics/color/color-variables.rkt") (lib "sketching-doc/manual-examples/basics/typography/words.rkt") (lib "sketching-doc/manual-examples/basics/input/easing.rkt") (lib "sketching-doc/manual-examples/basics/color/hue.rkt") (lib "sketching-doc/manual-examples/basics/color/radial-gradient.rkt") (lib "sketching-doc/manual-examples/basics/math/graphing-2d-equations.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-functions.rkt") (lib "sketching-doc/manual-examples/basics/color/wave-gradient.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector.rkt") (lib "sketching-doc/manual-examples/basics/image/pointilism.rkt") (lib "sketching-doc/manual-examples/basics/input/storing-input.rkt") (lib "sketching-doc/manual-examples/basics/typography/letters.rkt") (lib "sketching-doc/manual-examples/basics/input/keyboard-functions.rkt") (lib "sketching-doc/manual-examples/basics/math/polar-to-cartesian.rkt") (lib "sketching-doc/manual-examples/basics/transform/translate.rkt") (lib "sketching-doc/manual-examples/basics/transform/scale.rkt") (lib "sketching-doc/manual-examples/basics/math/remap.rkt") (lib "sketching-doc/manual-examples/basics/form/regular-polygons.rkt") (lib "sketching-doc/manual-examples/basics/math/sine.rkt") (lib "sketching-doc/manual-examples/basics/objects/composite-objects.rkt") (lib "sketching-doc/manual-examples/basics/transform/rotate.rkt") (lib "sketching-doc/manual-examples/basics/math/distance2d.rkt") (lib "sketching-doc/manual-examples/basics/input/keyboard.rkt") (lib "sketching-doc/manual-examples/basics/form/bezier.rkt") (lib "sketching-doc/manual-examples/basics/typography/text-rotation.rkt") (lib "sketching-doc/manual-dummy-bindings.rkt") (lib "sketching-doc/manual-examples/basics/form/point-and-lines.rkt") (lib "sketching-doc/manual-examples/basics/form/star.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector-2d.rkt") (lib "sketching-doc/manual-examples/basics/transform/arm.rkt") (lib "sketching-doc/manual-sketching.scrbl") (lib "sketching-doc/manual-examples/basics/form/pie-chart.rkt") (lib "sketching-doc/manual-examples/basics/color/brightness.rkt") (lib "sketching-doc/manual-examples/basics/math/distance1d.rkt") (lib "sketching-doc/manual-examples/basics/math/sine-cosine.rkt") (lib "sketching-doc/manual-examples/basics/math/arctangent.rkt") (lib "sketching-doc/manual-examples/basics/input/constrain.rkt") (lib "sketching-doc/manual-examples/basics/objects/inheritance.rkt") (lib "sketching-doc/racket-cheat.rkt") (lib "sketching-doc/manual-examples/basics/color/linear-gradient.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-press.rkt"))) (name . "sketching-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-doc#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (source . "https://github.com/soegaard/sketching.git?path=sketching-doc#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-doc#main"))))))) ("sketching-examples" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/sketching-examples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (checksum-error . #f) (collection . "sketching-examples") (conflicts . ()) (date-added . 1625411482) (dependencies . ("base" "data-lib" "metapict" "sketching-lib" "sketching-lib")) (description . "Collection of example Sketching programs") (implies . ()) (modules . ((lib "sketching-examples/test/sketch1.rkt") (lib "sketching-examples/examples/sketch-pong.rkt") (lib "sketching-examples/reference-snippets/mouse-pressed.rkt") (lib "sketching-examples/examples/sketch-points-with-targets.rkt") (lib "sketching-examples/examples/sketch-distance-1d.rkt") (lib "sketching-examples/examples/test-draw-point.rkt") (lib "sketching-examples/examples/sketch-load-and-update-pixels.rkt") (lib "sketching-examples/examples/sketch-game-of-life.rkt") (lib "sketching-examples/reference-snippets/fullscreen.rkt") (lib "sketching-examples/reference-snippets/pmouse-x-and-y.rkt") (lib "sketching-examples/examples/sketch-midpoint-displacement-1d.rkt") (lib "sketching-examples/reference-snippets/key.rkt") (lib "sketching-examples/examples/sketch-particle.rkt") (lib "sketching-examples/reference-snippets/mouse-button.rkt") (lib "sketching-examples/examples/sketch-poisson-disc-sampling.rkt") (lib "sketching-examples/examples/sketch-array.rkt") (lib "sketching-examples/examples/sketch-color-mode.rkt") (lib "sketching-examples/examples/sketch-letters.rkt") (lib "sketching-examples/test/sketch4.rkt") (lib "sketching-examples/test/sketch7.rkt") (lib "sketching-examples/examples/sketch-increment-decrement.rkt") (lib "sketching-examples/examples/sketch-background-in-setup.rkt") (lib "sketching-examples/reference-snippets/cursor.rkt") (lib "sketching-examples/test/sketch8.rkt") (lib "sketching-examples/reference-snippets/focused.rkt") (lib "sketching-examples/reference-snippets/text-long.rkt") (lib "sketching-examples/test/sketch2.rkt") (lib "sketching-examples/reference-snippets/frame-count.rkt") (lib "sketching-examples/examples/sketch-bezier.rkt") (lib "sketching-examples/reference-snippets/text.rkt") (lib "sketching-examples/examples/sketch-racket-class.rkt") (lib "sketching-examples/reference-snippets/mouse-dragged.rkt") (lib "sketching-examples/reference-snippets/mouse-clicked.rkt") (lib "sketching-examples/examples/sketch-text.rkt") (lib "sketching-examples/examples/sketch-perlin-noise.rkt") (lib "sketching-examples/test/sketch3.rkt") (lib "sketching-examples/examples/simple-text-clock.rkt") (lib "sketching-examples/examples/sketch-diamond-square.rkt") (lib "sketching-examples/examples/sketch-distance-2d.rkt") (lib "sketching-examples/examples/sketch-wave.rkt") (lib "sketching-examples/test/sketch5.rkt") (lib "sketching-examples/examples/sketch-mandelbrot.rkt") (lib "sketching-examples/examples/sketch-sunflower.rkt") (lib "sketching-examples/examples/sketch-sketching-class.rkt") (lib "sketching-examples/reference-snippets/on-key-pressed.rkt") (lib "sketching-examples/examples/sketch-random-lines.rkt") (lib "sketching-examples/reference-snippets/mouse-x-and-y.rkt") (lib "sketching-examples/reference-snippets/no-cursor.rkt") (lib "sketching-examples/test/sketch9.rkt") (lib "sketching-examples/examples/sketch-jump.rkt") (lib "sketching-examples/test/sketch6.rkt"))) (name . "sketching-examples") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-examples#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (source . "https://github.com/soegaard/sketching.git?path=sketching-examples#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-examples#main"))))))) ("sketching-lib" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sketching-lib.txt"))) (checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411351) (dependencies . ("base" "draw-lib" "pict-lib" "math-lib" "noise" "gui-lib" "cairo-lib")) (description . "") (implies . ()) (modules . ((lib "sketching/class.rkt") (lib "sketching/time-and-date.rkt") (lib "sketching/environment.rkt") (lib "sketching/math-operators.rkt") (lib "sketching/conversion.rkt") (lib "sketching/shape.rkt") (lib "sketching/color.rkt") (lib "sketching/main.rkt") (lib "sketching/exports-all.rkt") (lib "sketching/syntax-utils.rkt") (lib "sketching/parameters.rkt") (lib "sketching/typography.rkt") (lib "sketching/lang/reader.rkt") (lib "sketching/noise.rkt") (lib "sketching/environment-no-gui.rkt") (lib "sketching/gui.rkt") (lib "sketching/exports-no-gui.rkt") (lib "sketching/exports-only-for-docs.rkt") (lib "sketching/dot-method.rkt") (lib "sketching/operators.rkt") (lib "sketching/transform.rkt") (lib "sketching/math.rkt") (lib "sketching/graphics.rkt"))) (name . "sketching-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-lib#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "2d20001ebf540f18b529f2d247234f86db79a356") (source . "https://github.com/soegaard/sketching.git?path=sketching-lib#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-lib#main"))))))) ("sl2014" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sl2014" "doc/sl2014@sl2014/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sl2014.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sl2014.txt"))) (checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (checksum-error . #f) (collection . "sl2014") (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "sl2014/main.rkt") (lib "sl2014/scribblings/sl2014.scrbl"))) (name . "sl2014") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/mfelleisen/sl2014/tree/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (source . "git://github.com/mfelleisen/sl2014") (source_url . "http://github.com/mfelleisen/sl2014/tree/master"))))))) ("slack-api" . #hasheq((author . "octotep@sdf.org") (authors . ("octotep@sdf.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slack-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slack-api.txt"))) (checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rfc6455")) (description . "Racket bindings for the Slack API") (implies . ()) (modules . ((lib "slack-api/rtm.rkt") (lib "slack-api/webapi.rkt") (lib "slack-api/main.rkt"))) (name . "slack-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:octotep@sdf.org . #t) (http . #t) (ring:1 . #t))) (source . "http://github.com/octotep/racket-slack-api.git/tree/master") (tags . ("api" "http")) (versions . #hash((default . #hasheq((checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (source . "git://github.com/octotep/racket-slack-api.git") (source_url . "http://github.com/octotep/racket-slack-api.git/tree/master"))))))) ("slideshow-latex" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-latex" "doc/slideshow-latex@slideshow-latex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-latex.txt") (test-failure-log . "server/built/test-fail/slideshow-latex.txt") (test-success-log . #f))) (checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "racket-doc" "scribble-lib" "slideshow-doc" "planet-doc")) (description . "Slideshow extensions to embed LaTeX and math, as well as other goodies") (implies . ()) (modules . ((lib "slideshow/latex/slideshow-latex.scrbl") (lib "tests/slideshow/latex/example.rkt") (lib "slideshow/extras.rkt") (lib "slideshow/latex/latex2bitmap.rkt") (lib "slideshow/latex.rkt"))) (name . "slideshow-latex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/jeapostrophe/slideshow-latex/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (source . "github://github.com/jeapostrophe/slideshow-latex/master") (source_url . "http://github.com/jeapostrophe/slideshow-latex/tree/master"))))))) ("slideshow-pretty" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-pretty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-pretty.txt"))) (checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "slideshow-latex" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "Slideshow extensions to add pretty transitions between slides.") (implies . ()) (modules . ((lib "slideshow/pretty.rkt"))) (name . "slideshow-pretty") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/LeifAndersen/slideshow-pretty/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (source . "github://github.com/LeifAndersen/slideshow-pretty/master") (source_url . "http://github.com/LeifAndersen/slideshow-pretty/tree/master"))))))) ("slideshow-repl" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-repl" "doc/slideshow-repl@slideshow-repl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-repl.txt"))) (checksum . "e8d3f8fb08322cd1aa9553c1c0079d7bebb3e823") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("errortrace-lib" "gui-lib" "slideshow-lib" "base" "pict-lib" "pict-snip-lib" "draw-doc" "draw-lib" "pict-doc" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "") (implies . ()) (modules . ((lib "slideshow/private/editor.rkt") (lib "slideshow/scribblings/slideshow-repl.scrbl") (lib "slideshow/repl.rkt"))) (name . "slideshow-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/mflatt/slideshow-repl/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "e8d3f8fb08322cd1aa9553c1c0079d7bebb3e823") (source . "github://github.com/mflatt/slideshow-repl/master") (source_url . "http://github.com/mflatt/slideshow-repl/tree/master"))))))) ("slideshow-text-style" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-text-style" "doc/slideshow-text-style@slideshow-text-style/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-text-style.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-text-style.txt"))) (checksum . "a59ce57a693697a79c34344d2feca0cd0ffd2202") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-text-lib" "scribble-lib" "at-exp-lib" "pict-doc" "slideshow-doc" "racket-doc" "scribble-doc")) (description . "Small library that helps with formatting text in a slideshow") (implies . ()) (modules . ((lib "slideshow-text-style/example.rkt") (lib "slideshow-text-style/main.rkt") (lib "slideshow-text-style/slideshow-text-style.scrbl"))) (name . "slideshow-text-style") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/takikawa/slideshow-text-style/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "a59ce57a693697a79c34344d2feca0cd0ffd2202") (source . "git://github.com/takikawa/slideshow-text-style") (source_url . "http://github.com/takikawa/slideshow-text-style/tree/master"))))))) ("smart-completion" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/smart-completion.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smart-completion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smart-completion.txt"))) (checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550970785) (dependencies . ()) (description . "") (implies . ()) (modules . ((lib "smart-completion/tool.rkt"))) (name . "smart-completion") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:1227847322@qq.com . #t) (ring:1 . #t))) (source . "https://github.com/syntacticlosure/smart-completion.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (source . "https://github.com/syntacticlosure/smart-completion.git") (source_url . "https://github.com/syntacticlosure/smart-completion.git"))))))) ("sml" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sml.txt"))) (checksum . "f7a03fdf124dff96a1fe2d7eadfd260a5824b1c5") (checksum-error . #f) (collection . "sml") (conflicts . ()) (dependencies . ("base" "at-exp-lib")) (description . "S-Markup Language") (implies . ()) (modules . ((lib "sml/main.rkt"))) (name . "sml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "https://github.com/LeifAndersen/racket-sml.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f7a03fdf124dff96a1fe2d7eadfd260a5824b1c5") (source . "https://github.com/LeifAndersen/racket-sml.git") (source_url . "https://github.com/LeifAndersen/racket-sml.git"))))))) ("smtp" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "smtp" "doc/smtp@smtp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smtp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smtp.txt"))) (checksum . "475449a4a2d2ea9d019b51e76b738598275e366f") (checksum-error . #f) (collection . "smtp") (conflicts . ()) (date-added . 1612879761) (dependencies . ("base" "gregor-lib" "at-exp-lib" "r6rs-lib" "uuid" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "A practical library to send emails using SMTP protocol") (implies . ()) (modules . ((lib "smtp/main.rkt") (lib "smtp/private/params.rkt") (lib "smtp/private/utils.rkt") (lib "smtp/scribblings/smtp.scrbl") (lib "smtp/private/core.rkt"))) (name . "smtp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (ring:1 . #t) (smtp . #t))) (source . "https://github.com/yanyingwang/smtp.git") (tags . ("smtp")) (versions . #hash((default . #hasheq((checksum . "475449a4a2d2ea9d019b51e76b738598275e366f") (source . "https://github.com/yanyingwang/smtp.git") (source_url . "https://github.com/yanyingwang/smtp.git"))))))) ("smtp-server" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "smtp-server" "doc/smtp-server@smtp-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smtp-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smtp-server.txt"))) (checksum . "133ba7ead4e82e976e04aa9cbeceb8f07ac73657") (checksum-error . #f) (collection . "net") (conflicts . ()) (date-added . 1635760846) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "An implementation of RFC5321 for Racket. (docs & implementation)") (implies . ()) (modules . ((lib "net/scribblings/smtp-server.scrbl") (lib "net/smtp-server.rkt"))) (name . "smtp-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (email . #t) (ring:1 . #t) (server . #t) (smtp . #t))) (source . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server") (tags . ("email" "server" "smtp")) (versions . #hash((default . #hasheq((checksum . "133ba7ead4e82e976e04aa9cbeceb8f07ac73657") (source . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server") (source_url . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server"))))))) ("smtp-server-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smtp-server-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smtp-server-test.txt"))) (checksum . "133ba7ead4e82e976e04aa9cbeceb8f07ac73657") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1635760876) (dependencies . ("base" "net-lib" "rackcheck" "rackunit-lib" "smtp-server")) (description . "An implementation of RFC5321 for Racket. (tests only)") (implies . ()) (modules . ((lib "tests/net/smtp-server.rkt"))) (name . "smtp-server-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (email . #t) (ring:1 . #t) (server . #t) (smtp . #t) (tests . #t))) (source . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server-test") (tags . ("email" "server" "smtp" "tests")) (versions . #hash((default . #hasheq((checksum . "133ba7ead4e82e976e04aa9cbeceb8f07ac73657") (source . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server-test") (source_url . "https://github.com/Bogdanp/racket-smtp-server.git?path=smtp-server-test"))))))) ("snappy" . #hasheq((author . "asumu@ccs.neu.edu stchang@racket-lang.org ") (authors . ("asumu@ccs.neu.edu" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "snappy" "doc/snappy@snappy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/snappy.txt") (test-failure-log . "server/built/test-fail/snappy.txt") (test-success-log . #f))) (checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "FFI bindings to snappy, a fast compression library") (implies . ()) (modules . ((lib "snappy/main.rkt") (lib "snappy/snappy-test.rkt") (lib "snappy/snappy.scrbl") (lib "snappy/snappy.rkt"))) (name . "snappy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stchang@racket-lang.org . #t) (compression . #t) (ring:1 . #t))) (source . "http://github.com/stchang/snappy/tree/master") (tags . ("compression")) (versions . #hash((default . #hasheq((checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (source . "github://github.com/stchang/snappy/master") (source_url . "http://github.com/stchang/snappy/tree/master"))))))) ("social-contract" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "social-contract" "doc/social-contract@social-contract/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/social-contract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/social-contract.txt"))) (checksum . "2e13a5e492b63b569aaed9172a8cb86b9decca87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1599252224) (dependencies . ("base" "collections-lib" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "mischief" "version-case" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "collections-doc" "cover" "cover-coveralls" "sandbox-lib" "adjutor")) (description . "High-level, composable syntax for describing contracts.") (implies . ()) (modules . ((lib "contract/social/c3po/contract-parser.rkt") (lib "contract/social/c3po.rkt") (lib "contract/social/c3po/compiler.rkt") (lib "contract/social/c3po/private/util.rkt") (lib "tests/contract/social/private/util.rkt") (lib "tests/contract/social/social-contract.rkt") (lib "contract/social/scribblings/social-contract.scrbl") (lib "contract/social/c3po/parser.rkt") (lib "contract/social/private/dependencies.rkt") (lib "contract/social/c3po/provide-parser.rkt") (lib "contract/social/c3po/base-parsers.rkt") (lib "contract/social/c3po/lexer.rkt") (lib "contract/social.rkt"))) (name . "social-contract") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (contracts . #t) (dsl . #t) (ring:1 . #t) (standards . #t) (syntax . #t) (types . #t))) (source . "https://github.com/countvajhula/social-contract.git") (tags . ("contracts" "dsl" "standards" "syntax" "types")) (versions . #hash((default . #hasheq((checksum . "2e13a5e492b63b569aaed9172a8cb86b9decca87") (source . "https://github.com/countvajhula/social-contract.git") (source_url . "https://github.com/countvajhula/social-contract.git"))))))) ("socketcan" . #hasheq((author . "abencz@gmail.com") (authors . ("abencz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/socketcan.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e87aa767038b78386d18e3c0af8e9a482ca6e421") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "make" "scribble-lib")) (description . "Linux socketcan bindings for Racket.") (implies . ()) (modules . ((lib "socketcan/private/install.rkt") (lib "scribblings/socketcan.scrbl") (lib "socketcan/main.rkt") (lib "socketcan/tests.rkt"))) (name . "socketcan") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:abencz@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/abencz/racket-socketcan/tree/master#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "744bf37d7a347a55d1ec72885f87d35919f68b7b") (source . "git://github.com/abencz/racket-socketcan#master") (source_url . "http://github.com/abencz/racket-socketcan/tree/master#master"))))))) ("softposit-rkt" . #hasheq((author . "dthien@cs.washington.edu me@pavpanchekha.com") (authors . ("dthien@cs.washington.edu" "me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "softposit-rkt" "doc/softposit-rkt@softposit-rkt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/softposit-rkt.txt") (test-failure-log . "server/built/test-fail/softposit-rkt.txt") (test-success-log . #f))) (checksum . "364469d5a219e61b29ed0d2d5048ed1ba29c66ba") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1548136368) (dependencies . ("math-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket bindings for the C softposit library. More info at posithub.org (currently only works on Linux 64-bit.)") (implies . ()) (modules . ((lib "softposit-rkt/main.rkt") (lib "softposit-rkt/softposit-rkt.scrbl") (lib "softposit-rkt/install.rkt") (lib "softposit-rkt/softposit.rkt"))) (name . "softposit-rkt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dthien@cs.washington.edu . #t) (author:me@pavpanchekha.com . #t) (ffi . #t) (numerical . #t) (posits . #t) (ring:1 . #t) (softposit . #t) (unum . #t))) (source . "https://github.com/DavidThien/softposit-rkt.git") (tags . ("ffi" "numerical" "posits" "softposit" "unum")) (versions . #hash((default . #hasheq((checksum . "364469d5a219e61b29ed0d2d5048ed1ba29c66ba") (source . "https://github.com/DavidThien/softposit-rkt.git") (source_url . "https://github.com/DavidThien/softposit-rkt.git"))))))) ("sonic-pi" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sonic-pi" "doc/sonic-pi@sonic-pi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sonic-pi.txt") (test-failure-log . "server/built/test-fail/sonic-pi.txt") (test-success-log . #f))) (checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "osc" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "htdp-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "For now, this package starts scsynth just like sonic pi does, and can make a few sounds.") (implies . ()) (modules . ((lib "sonic-pi/sonic-pi.scrbl") (lib "sonic-pi/lsonic-example.rkt") (lib "sonic-pi/go.rkt") (lib "sonic-pi/examples/uses-go.rkt") (lib "sonic-pi/scsynth/note.rkt") (lib "sonic-pi/scsynth/start-scsynth.rkt") (lib "sonic-pi/lsonic.rkt") (lib "sonic-pi/scsynth/scsynth-abstraction.rkt") (lib "sonic-pi/examples/chord-notes-fwoosh.rkt") (lib "sonic-pi/note.rkt") (lib "sonic-pi/scsynth/scsynth-communication.rkt") (lib "sonic-pi/scsynth/note-name.rkt"))) (name . "sonic-pi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/sonic-pi.git") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (source . "https://github.com/jbclements/sonic-pi.git") (source_url . "https://github.com/jbclements/sonic-pi.git"))))))) ("spacemacs-theme" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spacemacs-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spacemacs-theme.txt"))) (checksum . "ab3a35a3044cda0e981bdf4c501c87f568bc7b21") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1640735803) (dependencies . ("base")) (description . "Spacemacs lite and dark color themes for DrRacket.") (implies . ()) (modules . ()) (name . "spacemacs-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:massung@gmail.com . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/massung/spacemacs-racket.git#main") (tags . ("drracket-theme")) (versions . #hash((default . #hasheq((checksum . "ab3a35a3044cda0e981bdf4c501c87f568bc7b21") (source . "https://github.com/massung/spacemacs-racket.git#main") (source_url . "https://github.com/massung/spacemacs-racket.git#main"))))))) ("sparse" . #hasheq((author . "esco.ricky@gmail.com") (authors . ("esco.ricky@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sparse" "doc/sparse@sparse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sparse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sparse.txt"))) (checksum . "0d713dd9524c5bbba7fbebe49f44cbe9aab70275") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A tool for generating test cases for parsers for simple S-expression languages. It is intended primarily for use by instructors of Programming Languages classes in which students implement a simple S-expression-based programming language. It takes as input a description of the grammar of the language to be implemented and produces test cases for the students' parsers.") (implies . ()) (modules . ((lib "sparse/main.rkt") (lib "sparse/sparse.scrbl") (lib "sparse/minimization.rkt") (lib "sparse/example-grammars.rkt") (lib "sparse/generator.rkt") (lib "sparse/parse-grammar-spec.rkt"))) (name . "sparse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:esco.ricky@gmail.com . #t) (grammar . #t) (instructors . #t) (parser . #t) (programming-languages . #t) (ring:1 . #t) (testing . #t))) (source . "http://github.com/ricky-escobar/sparse/tree/master") (tags . ("grammar" "instructors" "parser" "programming-languages" "testing")) (versions . #hash((default . #hasheq((checksum . "0d713dd9524c5bbba7fbebe49f44cbe9aab70275") (source . "git://github.com/ricky-escobar/sparse") (source_url . "http://github.com/ricky-escobar/sparse/tree/master"))))))) ("spipe" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spipe" "doc/spipe@spipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spipe.txt"))) (checksum . "d6bc777a8113447fea9a3f10b5a0fbce6269dce4") (checksum-error . #f) (collection . "spipe") (conflicts . ()) (dependencies . ("base" "nested-hash" "threading" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A 'super-pipe' that threads over Racket hash-tables") (implies . ()) (modules . ((lib "spipe/main.rkt") (lib "spipe/scribblings/spipe.scrbl"))) (name . "spipe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (hash . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/BourgondAries/spipe.git") (tags . ("hash" "threading")) (versions . #hash((default . #hasheq((checksum . "d6bc777a8113447fea9a3f10b5a0fbce6269dce4") (source . "https://github.com/BourgondAries/spipe.git") (source_url . "https://github.com/BourgondAries/spipe.git"))))))) ("split-by" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/split-by.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/split-by.txt"))) (checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (checksum-error . #f) (collection . "data") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "The `split-by` function from Mathematica") (implies . ()) (modules . ((lib "data/split-by.rkt"))) (name . "split-by") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (lists . #t) (ring:1 . #t))) (source . "http://github.com/samth/split-by/tree/master") (tags . ("lists")) (versions . #hash((default . #hasheq((checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (source . "git://github.com/samth/split-by") (source_url . "http://github.com/samth/split-by/tree/master"))))))) ("splitflap" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/splitflap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/splitflap.txt"))) (checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1634998502) (dependencies . ("splitflap-doc" "splitflap-lib")) (description . "Atom and RSS feed generation") (implies . ("splitflap-doc" "splitflap-lib")) (modules . ()) (name . "splitflap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (atom . #t) (author:joel@jdueck.net . #t) (feeds . #t) (ring:1 . #t) (rss . #t) (xml . #t))) (source . "https://github.com/otherjoel/splitflap.git?path=splitflap#main") (tags . ("atom" "feeds" "rss" "xml")) (versions . #hash((default . #hasheq((checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (source . "https://github.com/otherjoel/splitflap.git?path=splitflap#main") (source_url . "https://github.com/otherjoel/splitflap.git?path=splitflap#main"))))))) ("splitflap-doc" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "splitflap" "doc/splitflap@splitflap-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/splitflap-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/splitflap-doc.txt"))) (checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (checksum-error . #f) (collection . "splitflap") (conflicts . ()) (date-added . 1634998431) (dependencies . ("scribble-lib" "base" "at-exp-lib" "net-doc" "txexpr" "gregor-doc" "gregor-lib" "racket-doc" "scribble-lib" "splitflap-lib")) (description . "Documentation for splitflap") (implies . ()) (modules . ((lib "splitflap/splitflap.scrbl") (lib "splitflap/notes.scrbl") (lib "splitflap/misc.rkt") (lib "splitflap/constructs.scrbl") (lib "splitflap/tutorial.scrbl") (lib "splitflap/mod-splitflap.scrbl"))) (name . "splitflap-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (atom . #t) (author:joel@jdueck.net . #t) (feeds . #t) (ring:1 . #t) (rss . #t) (xml . #t))) (source . "https://github.com/otherjoel/splitflap.git?path=splitflap-doc#main") (tags . ("atom" "feeds" "rss" "xml")) (versions . #hash((default . #hasheq((checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (source . "https://github.com/otherjoel/splitflap.git?path=splitflap-doc#main") (source_url . "https://github.com/otherjoel/splitflap.git?path=splitflap-doc#main"))))))) ("splitflap-lib" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/splitflap-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/splitflap-lib.txt"))) (checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (checksum-error . #f) (collection . "splitflap") (conflicts . ()) (date-added . 1634998344) (dependencies . ("base" "gregor-lib")) (description . "Implementation of splitflap") (implies . ()) (modules . ((lib "splitflap/private/version.rkt") (lib "splitflap/constructs.rkt") (lib "splitflap/private/xml-generic.rkt") (lib "splitflap/private/validation.rkt") (lib "splitflap/private/build.rkt") (lib "splitflap/private/feed.rkt") (lib "splitflap/private/dust.rkt") (lib "splitflap/main.rkt"))) (name . "splitflap-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (atom . #t) (author:joel@jdueck.net . #t) (feeds . #t) (ring:1 . #t) (rss . #t) (xml . #t))) (source . "https://github.com/otherjoel/splitflap.git?path=splitflap-lib#main") (tags . ("atom" "feeds" "rss" "xml")) (versions . #hash((default . #hasheq((checksum . "b5a57329c9b63d2ad33066414df162060c92c876") (source . "https://github.com/otherjoel/splitflap.git?path=splitflap-lib#main") (source_url . "https://github.com/otherjoel/splitflap.git?path=splitflap-lib#main"))))))) ("spmatrix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spmatrix" "doc/spmatrix@spmatrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spmatrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spmatrix.txt"))) (checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("spvector" "base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent matrices based on spvectors") (implies . ()) (modules . ((lib "data/spmatrix/spmatrix.scrbl") (lib "data/spmatrix.rkt") (lib "tests/data/spmatrix.rkt"))) (name . "spmatrix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/matrix/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (source . "github://github.com/jeapostrophe/matrix/master") (source_url . "http://github.com/jeapostrophe/matrix/tree/master"))))))) ("spreadsheet-editor" . #hasheq((author . "dpavlov@iaaras.ru") (authors . ("dpavlov@iaaras.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spreadsheet-editor.txt") (test-failure-log . "server/built/test-fail/spreadsheet-editor.txt") (test-success-log . #f))) (checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (checksum-error . #f) (collection . "spreadsheet-editor") (conflicts . ()) (dependencies . ("base" "gui" "draw-lib" "data-lib" "table-panel")) (description . "Flexible spreadsheet editor built on top of Racket's GUI controls") (implies . ()) (modules . ((lib "spreadsheet-editor/spreadsheet-editor-demo.rkt") (lib "spreadsheet-editor/main.rkt") (lib "spreadsheet-editor/spreadsheet-editor.rkt"))) (name . "spreadsheet-editor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dpavlov@iaaras.ru . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/kugelblitz/spreadsheet-editor/tree/master") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (source . "git://github.com/kugelblitz/spreadsheet-editor") (source_url . "http://github.com/kugelblitz/spreadsheet-editor/tree/master"))))))) ("spvector" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spvector" "doc/spvector@spvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spvector.txt"))) (checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent vectors that provide O(1) performance for linear use, but O(n) performance for non-linear accesses") (implies . ()) (modules . ((lib "data/spvector/spvector.scrbl") (lib "data/spvector.rkt") (lib "tests/data/spvector.rkt"))) (name . "spvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/spvector/tree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (source . "github://github.com/jeapostrophe/spvector/master") (source_url . "http://github.com/jeapostrophe/spvector/tree/master"))))))) ("sql" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sql" "doc/sql@sql/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sql.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sql.txt"))) (checksum . "f8722d186a5b2ebcbdd58b19a900ebb805bbf33e") (checksum-error . #f) (collection . "sql") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "db-lib" "racket-doc" "scribble-lib" "sandbox-lib" "db-doc")) (description . "an S-expression notation for SQL") (implies . ()) (modules . ((lib "sql/test.rkt") (lib "sql/private/jumble.rkt") (lib "sql/private/syntax.rkt") (lib "sql/private/dialect.rkt") (lib "sql/private/ast.rkt") (lib "sql/main.rkt") (lib "sql/private/parse.rkt") (lib "sql/private/emit.rkt") (lib "sql/private/sql-keywords.rkt") (lib "sql/private/dynamic.rkt") (lib "sql/sql.scrbl"))) (name . "sql") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/sql/tree/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "f8722d186a5b2ebcbdd58b19a900ebb805bbf33e") (source . "git://github.com/rmculpepper/sql") (source_url . "http://github.com/rmculpepper/sql/tree/master"))))))) ("sql-sourcery" . #hasheq((author . "adjkant@gmail.com") (authors . ("adjkant@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sql-sourcery.txt") (docs . (("main" "sql-sourcery" "doc/sql-sourcery@sql-sourcery/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sql-sourcery.txt") (test-failure-log . "server/built/test-fail/sql-sourcery.txt") (test-success-log . #f))) (checksum . "f6c0619ed9febbb66864f36aa41fa495df683f95") (checksum-error . #f) (collection . "sql-sourcery") (conflicts . ()) (date-added . 1549747144) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An ORM for mapping structures in Racket to database entries in a SQL database. All versions 0.1.X are unstable Alpha releases. Current version 0.1.0") (implies . ()) (modules . ((lib "sql-sourcery/types.rkt") (lib "sql-sourcery/utils-phase-1.rkt") (lib "sql-sourcery/scribblings/sql-sourcery.scrbl") (lib "sql-sourcery/sourcery-connection.rkt") (lib "sql-sourcery/user-testing.rkt") (lib "sql-sourcery/main.rkt") (lib "sql-sourcery/sql.rkt") (lib "sql-sourcery/utils.rkt") (lib "sql-sourcery/type-support.rkt") (lib "sql-sourcery/sourcery-refs.rkt"))) (name . "sql-sourcery") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:adjkant@gmail.com . #t) (database . #t) (orm . #t) (racket-sourcery . #t) (ring:1 . #t) (sourcery-struct . #t) (sql . #t) (sqlite3 . #t) (struct . #t))) (source . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95") (tags . ("database" "orm" "racket-sourcery" "sourcery-struct" "sql" "sqlite3" "struct")) (versions . #hash((default . #hasheq((checksum . "f6c0619ed9febbb66864f36aa41fa495df683f95") (source . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95") (source_url . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95"))))))) ("sqlite-table" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sqlite-table" "doc/sqlite-table@sqlite-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sqlite-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sqlite-table.txt"))) (checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "db-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A quick way to create and query sqlite tables. Basically a simplified wrapper for a subset of the db library.") (implies . ()) (modules . ((lib "sqlite-table/sqlite-table.scrbl") (lib "sqlite-table/main.rkt"))) (name . "sqlite-table") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/sqlite-table/tree/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (source . "git://github.com/jbclements/sqlite-table") (source_url . "http://github.com/jbclements/sqlite-table/tree/master"))))))) ("srfi-doc-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "srfi-nf" "doc/srfi-nf@srfi-doc-nonfree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/srfi-doc-nonfree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/srfi-doc-nonfree.txt"))) (checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "scribble-lib" "racket-index" "srfi-lib" "srfi-doc")) (description . "documentation for parts of \"srfi\" implementation that are licensed restrictively") (implies . ()) (modules . ((lib "srfi/scribblings/srfi-nf.scrbl"))) (name . "srfi-doc-nonfree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (source_url . "git://github.com/racket/srfi/?path=srfi-doc-nonfree"))))))) ("srfi-lib-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/srfi-lib-nonfree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/srfi-lib-nonfree.txt"))) (checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ()) (description . "parts of \"srfi\" implementation that are licensed restrictively") (implies . ()) (modules . ()) (name . "srfi-lib-nonfree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (source_url . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree"))))))) ("ss-rpc-server" . #hasheq((author . "sekk1e@yandex.ru") (authors . ("sekk1e@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ss-rpc-server" "doc/ss-rpc-server@ss-rpc-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ss-rpc-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ss-rpc-server.txt"))) (checksum . "50f281f251f06ea0b56955a275750aa170a94254") (checksum-error . #f) (collection . "ss-rpc-server") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "web-server-lib" "scribble-lib" "racket-doc")) (description . "RPC for using Racket as GNU Emacs extension language") (implies . ()) (modules . ((lib "ss-rpc-server/main.rkt") (lib "ss-rpc-server/examples/echo.rkt") (lib "ss-rpc-server/ss-rpc-server.scrbl"))) (name . "ss-rpc-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sekk1e@yandex.ru . #t) (emacs . #t) (ring:1 . #t) (rpc . #t))) (source . "http://github.com/sk1e/ss-rpc-server/tree/master") (tags . ("emacs" "rpc")) (versions . #hash((default . #hasheq((checksum . "50f281f251f06ea0b56955a275750aa170a94254") (source . "git://github.com/sk1e/ss-rpc-server") (source_url . "http://github.com/sk1e/ss-rpc-server/tree/master"))))))) ("ssh-hack" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/ssh-hack.txt") (success-log . "server/built/install/ssh-hack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ssh-hack.txt"))) (checksum . "9e8099a385fed26def70690279ad9d4ff3a097d0") (checksum-error . #f) (collection . "ssh-hack") (conflicts . ()) (date-added . 1657732284) (dependencies . ("base" "ansi")) (description . "A simple Dgamelaunch client") (implies . ()) (modules . ((lib "ssh-hack/ssh-hack.rkt") (lib "ssh-hack/main.rkt"))) (name . "ssh-hack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (nethack . #t) (ring:1 . #t) (ssh . #t) (util . #t) (utilities . #t) (utility . #t))) (source . "https://github.com/winny-/ssh-hack.git") (tags . ("nethack" "ssh" "util" "utilities" "utility")) (versions . #hash((default . #hasheq((checksum . "9e8099a385fed26def70690279ad9d4ff3a097d0") (source . "https://github.com/winny-/ssh-hack.git") (source_url . "https://github.com/winny-/ssh-hack.git"))))))) ("staged-slide" . #hasheq((author . "stamourv@racket-lang.org cce@racket-lang.org") (authors . ("stamourv@racket-lang.org" "cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "staged-slide" "doc/staged-slide@staged-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/staged-slide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/staged-slide.txt"))) (checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (checksum-error . #f) (collection . "slideshow") (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-lib" "pict-doc" "racket-doc" "slideshow-doc")) (description . "Helpers for building staged slides in Slideshow") (implies . ()) (modules . ((lib "slideshow/scribblings/staged-slide.scrbl") (lib "slideshow/staged-slide.rkt"))) (name . "staged-slide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "http://github.com/stamourv/staged-slide/tree/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (source . "git://github.com/stamourv/staged-slide") (source_url . "http://github.com/stamourv/staged-slide/tree/master"))))))) ("stardate" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stardate" "doc/stardate@stardate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stardate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stardate.txt"))) (checksum . "580558886983d73916c355e21400310a59729be5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Compute the current TNG stardate.") (implies . ()) (modules . ((lib "stardate/main.rkt") (lib "stardate/stardate.scrbl"))) (name . "stardate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (date . #t) (ring:1 . #t))) (source . "http://github.com/dyoo/stardate/tree/master") (tags . ("date")) (versions . #hash((default . #hasheq((checksum . "580558886983d73916c355e21400310a59729be5") (source . "github://github.com/dyoo/stardate/master") (source_url . "http://github.com/dyoo/stardate/tree/master"))))))) ("static-rename" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("static-rename-doc" "static-rename-lib")) (description . "") (implies . ("static-rename-doc" "static-rename-lib")) (modules . ()) (name . "static-rename") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename"))))))) ("static-rename-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "static-rename" "doc/static-rename@static-rename-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-doc.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "static-rename-lib")) (description . "documentation (no implementation) for “static-rename”") (implies . ()) (modules . ((lib "scribblings/static-rename/main.scrbl"))) (name . "static-rename-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-doc") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-doc"))))))) ("static-rename-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-lib.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) for “static-rename”") (implies . ()) (modules . ((lib "static-rename/main.rkt"))) (name . "static-rename-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-lib") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-lib"))))))) ("static-rename-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-test.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "static-rename-lib")) (description . "") (implies . ()) (modules . ((lib "tests/static-rename/main.rkt"))) (name . "static-rename-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-test") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-test"))))))) ("statsd" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/statsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/statsd.txt"))) (checksum . "39a640686053be83442bfb129a279b8d00d6a177") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "statsd client for racket") (implies . ()) (modules . ((lib "net/statsd/main.rkt") (lib "scribblings/net/statsd.scrbl") (lib "net/statsd.rkt"))) (name . "statsd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@apgwoz.com . #t) (metrics . #t) (net . #t) (ring:1 . #t) (statsd . #t))) (source . "http://github.com/apg/statsd-rkt/tree/master") (tags . ("metrics" "net" "statsd")) (versions . #hash((default . #hasheq((checksum . "39a640686053be83442bfb129a279b8d00d6a177") (source . "git://github.com/apg/statsd-rkt") (source_url . "http://github.com/apg/statsd-rkt/tree/master"))))))) ("stencil-vector-utils" . #hasheq((author . "shawnw.mobile@gmail.com") (authors . ("shawnw.mobile@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stencil-vector-utils" "doc/stencil-vector-utils@stencil-vector-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stencil-vector-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stencil-vector-utils.txt"))) (checksum . "c06dd00e1aad61f3b7a4b0a5c6693e329f95b8b4") (checksum-error . #f) (collection . "stencil-vector-utils") (conflicts . ()) (date-added . 1660459798) (dependencies . ("base" "racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions for working with stencil vectors") (implies . ()) (modules . ((lib "stencil-vector-utils/main.rkt") (lib "stencil-vector-utils/scribblings/stencil-vector-utils.scrbl"))) (name . "stencil-vector-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:shawnw.mobile@gmail.com . #t) (data-structures . #t) (ring:1 . #t) (stencil-vectors . #t) (vector . #t))) (source . "https://github.com/shawnw/racket-stencil-vector-utils.git#master") (tags . ("data-structures" "stencil-vectors" "vector")) (versions . #hash((default . #hasheq((checksum . "c06dd00e1aad61f3b7a4b0a5c6693e329f95b8b4") (source . "https://github.com/shawnw/racket-stencil-vector-utils.git#master") (source_url . "https://github.com/shawnw/racket-stencil-vector-utils.git#master"))))))) ("stockfighter-racket" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/stockfighter-racket.txt") (docs . (("main" "stockfighter-api" "doc/stockfighter-api@stockfighter-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stockfighter-racket.txt") (test-failure-log . "server/built/test-fail/stockfighter-racket.txt") (test-success-log . #f))) (checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (checksum-error . #f) (collection . "stockfighter-api") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rfc6455" "scribble-lib" "racket-doc")) (description . "Stockfighter API client") (implies . ()) (modules . ((lib "stockfighter-api/stockfighter.rkt") (lib "stockfighter-api/orders.rkt") (lib "stockfighter-api/feed.rkt") (lib "stockfighter-api/scribblings/stockfighter-api.scrbl") (lib "stockfighter-api/time.rkt") (lib "stockfighter-api/main.rkt") (lib "stockfighter-api/fills.rkt") (lib "stockfighter-api/quotes.rkt"))) (name . "stockfighter-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:euler90h@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/eu90h/stockfighter-racket/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (source . "git://github.com/eu90h/stockfighter-racket") (source_url . "http://github.com/eu90h/stockfighter-racket/tree/master"))))))) ("stomp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stomp" "doc/stomp@stomp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stomp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stomp.txt"))) (checksum . "8ec9471362f42253df787c83dc3f241086be6b9f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "STOMP messaging protocol codec and client") (implies . ()) (modules . ((lib "stomp/examples/rpc-client.rkt") (lib "stomp/examples/stomp-tail-activemq.rkt") (lib "stomp/test-functional-queue.rkt") (lib "stomp/examples/rpc-server.rkt") (lib "stomp/main.rkt") (lib "stomp/packet.rkt") (lib "stomp/session.rkt") (lib "stomp/test-packet.rkt") (lib "stomp/functional-queue.rkt") (lib "stomp/examples/stomp-tail.rkt") (lib "stomp/scribblings/stomp.scrbl"))) (name . "stomp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (communication . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-stomp/tree/master") (tags . ("communication" "net")) (versions . #hash((default . #hasheq((checksum . "8ec9471362f42253df787c83dc3f241086be6b9f") (source . "github://github.com/tonyg/racket-stomp/master") (source_url . "http://github.com/tonyg/racket-stomp/tree/master"))))))) ("stream-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stream-etc" "doc/stream-etc@stream-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stream-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stream-etc.txt"))) (checksum . "7f3a39fb4aa356b9efd9925f0afa914238bd87dc") (checksum-error . #f) (collection . "stream-etc") (conflicts . ()) (date-added . 1613458845) (dependencies . ("base" "chk-lib" "sandbox-lib" "threading-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Miscellaneous stream operations.") (implies . ()) (modules . ((lib "stream-etc/scribblings/stream-etc.scrbl") (lib "stream-etc/main.rkt"))) (name . "stream-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (ring:1 . #t) (stream . #t))) (source . "https://github.com/camoy/stream-etc.git#main") (tags . ("stream")) (versions . #hash((default . #hasheq((checksum . "7f3a39fb4aa356b9efd9925f0afa914238bd87dc") (source . "https://github.com/camoy/stream-etc.git#main") (source_url . "https://github.com/camoy/stream-etc.git#main"))))))) ("stream-values" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stream-values" "doc/stream-values@stream-values/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stream-values.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stream-values.txt"))) (checksum . "8ccf703a0b20bdd96dd5db1a404ae771cfc99959") (checksum-error . #f) (collection . "stream-values") (conflicts . ()) (date-added . 1587431027) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library for multiple values manipulation in streams") (implies . ()) (modules . ((lib "stream-values/scribblings/stream-values.scrbl") (lib "stream-values/main.rkt") (lib "stream-values/test-perf.rkt"))) (name . "stream-values") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (ring:1 . #t) (stream . #t))) (source . "https://github.com/sorawee/stream-values.git") (tags . ("stream")) (versions . #hash((default . #hasheq((checksum . "8ccf703a0b20bdd96dd5db1a404ae771cfc99959") (source . "https://github.com/sorawee/stream-values.git") (source_url . "https://github.com/sorawee/stream-values.git"))))))) ("stretchable-snip" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stretchable-snip" "doc/stretchable-snip@stretchable-snip/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stretchable-snip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stretchable-snip.txt"))) (checksum . "5953118ad3b3e9d60b350d57b5b5c9a653ee1a14") (checksum-error . #f) (collection . "stretchable-snip") (conflicts . ()) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "draw-doc" "gui-doc")) (description . "Racket library for stretchable (scalable) editor snips") (implies . ()) (modules . ((lib "stretchable-snip/main.rkt") (lib "stretchable-snip/scribblings/stretchable-snip.scrbl"))) (name . "stretchable-snip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/stretchable-snip.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "5953118ad3b3e9d60b350d57b5b5c9a653ee1a14") (source . "https://github.com/Kalimehtar/stretchable-snip.git") (source_url . "https://github.com/Kalimehtar/stretchable-snip.git"))))))) ("string-constants-lib-lgpl" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-constants-lib-lgpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-constants-lib-lgpl.txt"))) (checksum . "d066ea3aa0f2855b81a0ba4d1b76e6b615915adb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1590265765) (dependencies . ("base" "string-constants-lib")) (description . "") (implies . ()) (modules . ((lib "string-constants/private/dutch-string-constants.rkt") (lib "string-constants/private/korean-string-constants.rkt") (lib "string-constants/private/spanish-string-constants.rkt"))) (name . "string-constants-lib-lgpl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d066ea3aa0f2855b81a0ba4d1b76e6b615915adb") (source . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl") (source_url . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl"))))))) ("string-searchers" . #hasheq((author . "shawnw.mobile@gmail.com") (authors . ("shawnw.mobile@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "string-searchers" "doc/string-searchers@string-searchers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-searchers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-searchers.txt"))) (checksum . "9117994219cb9d192a5db23fe00f0f8b396365af") (checksum-error . #f) (collection . "string-searchers") (conflicts . ()) (date-added . 1659525653) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "rackunit-typed")) (description . "String search algorithms") (implies . ()) (modules . ((lib "string-searchers/ahoc.rkt") (lib "string-searchers/private/strfuncs.rkt") (lib "string-searchers/scribblings/string-searchers.scrbl") (lib "string-searchers/kmp.rkt") (lib "string-searchers/bmh.rkt") (lib "string-searchers/main.rkt"))) (name . "string-searchers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:shawnw.mobile@gmail.com . #t) (ring:1 . #t) (search . #t) (strings . #t))) (source . "https://github.com/shawnw/racket-string-searchers.git#master") (tags . ("search" "strings")) (versions . #hash((default . #hasheq((checksum . "9117994219cb9d192a5db23fe00f0f8b396365af") (source . "https://github.com/shawnw/racket-string-searchers.git#master") (source_url . "https://github.com/shawnw/racket-string-searchers.git#master"))))))) ("string-sexpr" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/string-sexpr.txt") (docs . (("main" "string-sexpr" "doc/string-sexpr@string-sexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-sexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-sexpr.txt"))) (checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (checksum-error . #f) (collection . "string-sexpr") (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc")) (description . "a supplementary package for Fundamentals I") (implies . ()) (modules . ((lib "string-sexpr/scribblings/string-sexpr.scrbl") (lib "string-sexpr/main.rkt"))) (name . "string-sexpr") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "http://github.com/mfelleisen/string-sexpr/tree/master") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (source . "git://github.com/mfelleisen/string-sexpr") (source_url . "http://github.com/mfelleisen/string-sexpr/tree/master"))))))) ("string-util" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "string-util" "doc/string-util@string-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-util.txt"))) (checksum . "4af2c3e5f21accaa4bc8f02db2bfe8f1b9a62223") (checksum-error . #f) (collection . "string-util") (conflicts . ()) (dependencies . ("opt" "list-util" "srfi-lite-lib" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Additional string utilities in Typed Racket.") (implies . ()) (modules . ((lib "string-util/main.rkt") (lib "string-util/scribblings/string-util.scrbl"))) (name . "string-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (string . #t) (strings . #t) (typed . #t) (utils . #t))) (source . "https://gitlab.com/RayRacine/string-util.git") (tags . ("string" "strings" "typed" "utils")) (versions . #hash((default . #hasheq((checksum . "4af2c3e5f21accaa4bc8f02db2bfe8f1b9a62223") (source . "https://gitlab.com/RayRacine/string-util.git") (source_url . "https://gitlab.com/RayRacine/string-util.git"))))))) ("stripe-integration" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stripe-integration" "doc/stripe-integration@stripe-integration/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stripe-integration.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stripe-integration.txt"))) (checksum . "8675b005992576a1df07f6687b271be026049eaa") (checksum-error . #f) (collection . "stripe-integration") (conflicts . ()) (date-added . 1569458593) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Unofficial Stripe API integration with Racket") (implies . ()) (modules . ((lib "stripe-integration/scribblings/stripe-integration.scrbl") (lib "stripe-integration/main.rkt"))) (name . "stripe-integration") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (payment . #t) (ring:1 . #t) (stripe . #t))) (source . "https://github.com/zyrolasting/stripe-integration.git") (tags . ("payment" "stripe")) (versions . #hash((default . #hasheq((checksum . "8675b005992576a1df07f6687b271be026049eaa") (source . "https://github.com/zyrolasting/stripe-integration.git") (source_url . "https://github.com/zyrolasting/stripe-integration.git"))))))) ("struct-defaults" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-defaults.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-defaults.txt"))) (checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . " Default values in struct ctors and patterns.") (implies . ()) (modules . ((lib "struct-defaults/test-computed-defaults.rkt") (lib "struct-defaults/main.rkt") (lib "struct-defaults/test-provide.rkt"))) (name . "struct-defaults") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (structs . #t))) (source . "http://github.com/tonyg/racket-struct-defaults/tree/master") (tags . ("structs")) (versions . #hash((default . #hasheq((checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (source . "git://github.com/tonyg/racket-struct-defaults") (source_url . "http://github.com/tonyg/racket-struct-defaults/tree/master"))))))) ("struct-define" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-define" "doc/struct-define@struct-define/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-define.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-define.txt"))) (checksum . "74c874da5295f0b9bda61e0a4a748d311ff6bced") (checksum-error . #f) (collection . "struct-define") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "quickly pull out struct fields") (implies . ()) (modules . ((lib "struct-define/tests/typed-racket.rkt") (lib "struct-define/main.rkt") (lib "struct-define/struct-define.scrbl") (lib "struct-define/tests/struct-define.rkt") (lib "struct-define/tests/define-struct-define.rkt"))) (name . "struct-define") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/jeapostrophe/struct-define.git") (tags . ("utilities")) (versions . #hash((default . #hasheq((checksum . "74c874da5295f0b9bda61e0a4a748d311ff6bced") (source . "https://github.com/jeapostrophe/struct-define.git") (source_url . "https://github.com/jeapostrophe/struct-define.git"))))))) ("struct-like-struct-type-property" . #hasheq((author . "iitalics@gmail.com alexander@knauth.org") (authors . ("iitalics@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-like-struct-type-property" "doc/struct-like-struct-type-property@struct-like-struct-type-property/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-like-struct-type-property.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-like-struct-type-property.txt"))) (checksum . "2e433691136c881c87dd27b7e2c3266cca74ff24") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594046663) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Creating struct-type properties with a struct-like interface") (implies . ()) (modules . ((lib "struct-like-struct-type-property/scribblings/struct-like-struct-type-property.scrbl") (lib "struct-like-struct-type-property/syntax-class.rkt") (lib "struct-like-struct-type-property/util/fmt-id.rkt") (lib "struct-like-struct-type-property/main.rkt") (lib "struct-like-struct-type-property/test/syntax-class.rkt") (lib "struct-like-struct-type-property/test/test-quadratic.rkt") (lib "struct-like-struct-type-property/util/id-transformer.rkt") (lib "struct-like-struct-type-property/test/test.rkt") (lib "struct-like-struct-type-property/generic-struct-type-property.rkt"))) (name . "struct-like-struct-type-property") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t) (struct-type-property . #t) (structs . #t))) (source . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main") (tags . ("struct-type-property" "structs")) (versions . #hash((default . #hasheq((checksum . "2e433691136c881c87dd27b7e2c3266cca74ff24") (source . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main") (source_url . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main"))))))) ("struct-set" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-set" "doc/struct-set@struct-set/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-set.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-set.txt"))) (checksum . "57a2fb790d15dc254f407dc6f78a40c4f81ed874") (checksum-error . #f) (collection . "struct-set") (conflicts . ()) (date-added . 1629337011) (dependencies . ("syntax-classes-lib" "base" "sandbox-lib" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Helpers for immutably updating structs.") (implies . ()) (modules . ((lib "struct-set/main.rkt") (lib "struct-set/scribblings/struct-set.scrbl"))) (name . "struct-set") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (ring:1 . #t) (struct . #t))) (source . "https://github.com/camoy/struct-set.git") (tags . ("struct")) (versions . #hash((default . #hasheq((checksum . "57a2fb790d15dc254f407dc6f78a40c4f81ed874") (source . "https://github.com/camoy/struct-set.git") (source_url . "https://github.com/camoy/struct-set.git"))))))) ("struct-update" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "struct-update-lib" "struct-update-doc")) (description . "") (implies . ("struct-update-lib" "struct-update-doc")) (modules . ()) (name . "struct-update") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update"))))))) ("struct-update-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-update" "doc/struct-update@struct-update-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-doc.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "struct-update-lib")) (description . "documentation (no implementation) for “struct-update”") (implies . ()) (modules . ((lib "scribblings/struct-update.scrbl"))) (name . "struct-update-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-doc") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-doc"))))))) ("struct-update-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-lib.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib")) (description . "implementation (no documentation) for “struct-update”") (implies . ()) (modules . ((lib "struct-update/main.rkt"))) (name . "struct-update-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-lib") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-lib"))))))) ("struct-update-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-test.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "struct-update-lib")) (description . "") (implies . ()) (modules . ((lib "tests/struct-update.rkt") (lib "tests/struct-update-super.rkt"))) (name . "struct-update-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-test") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-test"))))))) ("stxparse-info" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stxparse-info" "doc/stxparse-info@stxparse-info/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stxparse-info.txt") (test-failure-log . "server/built/test-fail/stxparse-info.txt") (test-success-log . #f))) (checksum . "d35e84905fdbbef4309edca0a138cd77066be185") (checksum-error . #f) (collection . "stxparse-info") (conflicts . ()) (date-added . 1614799177) (dependencies . ("base" "rackunit-lib" "version-case" "subtemplate" "auto-syntax-e" "compatibility-lib" "scribble-lib" "racket-doc" "at-exp-lib")) (description . "Patched version of syntax/parse which tracks which syntax pattern variables are bound. Use (current-pvars) to access that list.") (implies . ()) (modules . ((lib "stxparse-info/parse/experimental/private/substitute.rkt") (lib "stxparse-info/parse/private/residual.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/private/runtime-report.rkt") (lib "stxparse-info/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/my-include.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/test/test-expansion-order.rkt") (lib "stxparse-info/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/case/stxcase.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/main.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/define.rkt") (lib "stxparse-info/scribblings/ovl.rkt") (lib "stxparse-info/7-4/stxparse-info.scrbl") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/template.rkt") (lib "stxparse-info/case/syntax.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/template.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse.rkt") (lib "stxparse-info/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-90-0-29/stxparse-info.scrbl") (lib "stxparse-info/parse/experimental/provide.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/case.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/pre.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/stxparse-info.scrbl") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/parse/experimental/template.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse.rkt") (lib "stxparse-info/scribblings/stxparse-info.scrbl") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/case/with-stx.rkt") (lib "stxparse-info/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/case/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/case/template.rkt") (lib "stxparse-info/current-pvars.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/parse/private/litconv.rkt") (lib "stxparse-info/6-11/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/6-11/stxparse-info.scrbl") (lib "stxparse-info/6-12/stxparse-info.scrbl") (lib "stxparse-info/test/test-check-variable-visible.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/parse/private/sc.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/8-0/stxparse-info.scrbl") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/parse/experimental/dset.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/experimental/splicing.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/test/test-compatibility2.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/parse.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-3-0-1/stxparse-info.scrbl") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/test/test-compatibility1.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/syntax.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/template.rkt") (lib "stxparse-info/parse/private/make.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/test/test-8-0.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/parse/debug.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/template.rkt") (lib "stxparse-info/parse/lib/function-header.rkt") (lib "stxparse-info/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/parse/experimental/eh.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/test/test-current-pvars.rkt") (lib "stxparse-info/parse/private/3d-stx.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/parse/experimental/reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/parse/private/lib.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/case/stxcase-scheme.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/parse/private/opt.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/8-0/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/experimental/contract.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/lib.rkt"))) (name . "stxparse-info") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/stxparse-info.git#main") (tags . ("syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "d35e84905fdbbef4309edca0a138cd77066be185") (source . "https://github.com/jsmaniac/stxparse-info.git#main") (source_url . "https://github.com/jsmaniac/stxparse-info.git#main"))))))) ("subtemplate" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "subtemplate" "doc/subtemplate@subtemplate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/subtemplate.txt") (test-failure-log . "server/built/test-fail/subtemplate.txt") (test-success-log . #f))) (checksum . "a3292113bb0d7dd8dc2114702b90e76f23963496") (checksum-error . #f) (collection . "subtemplate") (conflicts . ()) (date-added . 1614799545) (dependencies . ("base" "rackunit-lib" "backport-template-pr1514" "phc-toolkit" "srfi-lite-lib" "stxparse-info" "alexis-util" "scope-operations" "auto-syntax-e" "version-case" "scribble-lib" "racket-doc" "scribble-math")) (description . "Experimental. In a syntax template, auto-generate yᵢ … from xᵢ … . Also includes several improvements, like ellipses outside of syntax templates, and ellipsis-preserving unsyntax.") (implies . ()) (modules . ((lib "subtemplate/test/test-ddd-forms.rkt") (lib "subtemplate/test/test-ddd-top.rkt") (lib "subtemplate/scribblings/orig.rkt") (lib "subtemplate/private/override.rkt") (lib "subtemplate/private/patch-arrows.rkt") (lib "subtemplate/test/assumption-local-expand-reuse-let-bound-id.rkt") (lib "subtemplate/test/test-ddd.rkt") (lib "subtemplate/scribblings/subtemplate.scrbl") (lib "subtemplate/private/top-subscripts.rkt") (lib "subtemplate/scribblings/examples.scrbl") (lib "subtemplate/test/test-performance.rkt") (lib "subtemplate/test/test-use-before-definition.rkt") (lib "subtemplate/private/cross-phase-splicing-list.rkt") (lib "subtemplate/test/test-optional.rkt") (lib "subtemplate/private/subscripts.rkt") (lib "subtemplate/private/optcontract.rkt") (lib "subtemplate/test/assumption-free-identifier-equal.rkt") (lib "subtemplate/private/copy-attribute.rkt") (lib "subtemplate/test/test-splice.rkt") (lib "subtemplate/test/test-subtemplate.rkt") (lib "subtemplate/test/test-subtemplate-detect-stxinfo.rkt") (lib "subtemplate/test/test-splice-append.rkt") (lib "subtemplate/test/assumption-weak-hash.rkt") (lib "subtemplate/private/template-subscripts.rkt") (lib "subtemplate/test/test-copy-attribute-template-problem.rkt") (lib "subtemplate/test/test-copy-attribute.rkt") (lib "subtemplate/private/fully-expanded-grammar.rkt") (lib "subtemplate/test/test-missing-nested.rkt") (lib "subtemplate/private/unsyntax-preparse.rkt") (lib "subtemplate/override.rkt") (lib "subtemplate/test/test-or-syntax.rkt") (lib "subtemplate/test/bug-5.rkt") (lib "subtemplate/test/test-syntax-case-as-syntax-parse.rkt") (lib "subtemplate/private/ddd.rkt") (lib "subtemplate/private/find-defined-pvars.rkt") (lib "subtemplate/private/lifted-variables-communication.rkt") (lib "subtemplate/light.rkt") (lib "subtemplate/scribblings/light.scrbl") (lib "subtemplate/test/test-or.rkt") (lib "subtemplate/private/ddd-forms.rkt") (lib "subtemplate/test/test-unsyntax2.rkt") (lib "subtemplate/main.rkt") (lib "subtemplate/private/fully-expanded-grammar-extract-bindings.rkt") (lib "subtemplate/test/test-unsyntax.rkt") (lib "subtemplate/private/syntax-case-as-syntax-parse.rkt"))) (name . "subtemplate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t) (template . #t))) (source . "https://github.com/jsmaniac/subtemplate.git#main") (tags . ("experimental" "syntax" "syntax-parse" "template")) (versions . #hash((default . #hasheq((checksum . "a3292113bb0d7dd8dc2114702b90e76f23963496") (source . "https://github.com/jsmaniac/subtemplate.git#main") (source_url . "https://github.com/jsmaniac/subtemplate.git#main"))))))) ("sudoku-solver" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sudoku-solver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sudoku-solver.txt"))) (checksum . "0ecc30b3d5c863bd5776dd8e1e30418a3792cad4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1623144036) (dependencies . ("base" "data-lib" "rackunit-lib" "al2-test-runner" "raco-exe-multitarget")) (description . "Sudoku solver that can also show the solution process as a GraphViz dot file") (implies . ()) (modules . ((lib "games/sudoku-solver/solver.rkt") (lib "games/sudoku-solver/benchmark.rkt") (lib "games/sudoku-solver.rkt") (lib "games/sudoku-solver/progress-data.rkt") (lib "games/sudoku-solver/graph.rkt"))) (name . "sudoku-solver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (GraphViz . #t) (Sudoku . #t) (author:sschwarzer@sschwarzer.net . #t) (games . #t) (ring:1 . #t))) (source . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.15.2") (tags . ("games" "GraphViz" "Sudoku")) (versions . #hash((default . #hasheq((checksum . "0ecc30b3d5c863bd5776dd8e1e30418a3792cad4") (source . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.15.2") (source_url . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.15.2"))))))) ("suffixtree" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "suffixtree" "doc/suffixtree@suffixtree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/suffixtree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/suffixtree.txt"))) (checksum . "b46cb2ecbd0cc33d2c7afc0948b6415f23863c78") (checksum-error . #f) (collection . "suffixtree") (conflicts . ()) (date-added . 1576695130) (dependencies . ("base" "plot-gui-lib" "plot-lib" "profile-lib" "rackunit-lib" "srfi-lite-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "An implementation of Suffix Trees using Ukkonen's algorithm") (implies . ()) (modules . ((lib "suffixtree/private/test-common-definitions.rkt") (lib "suffixtree/private/test-all.rkt") (lib "suffixtree/private/test-label.rkt") (lib "suffixtree/private/ukkonen2.rkt") (lib "suffixtree/test-util.rkt") (lib "suffixtree/private/test-ukkonen2.rkt") (lib "suffixtree/private/time-tree-building.rkt") (lib "suffixtree/main.rkt") (lib "suffixtree/private/debug.rkt") (lib "suffixtree/private/structs.rkt") (lib "suffixtree/test-suffixtree.rkt") (lib "suffixtree/private/test-broken.rkt") (lib "suffixtree/longest-common-substring.rkt") (lib "suffixtree/suffixtree.scrbl") (lib "suffixtree/test-longest-common-substring.rkt") (lib "suffixtree/suffixtree.rkt") (lib "suffixtree/private/plot-data.rkt") (lib "suffixtree/util.rkt") (lib "suffixtree/test-all.rkt") (lib "suffixtree/private/label.rkt"))) (name . "suffixtree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (data . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/suffixtree.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "b46cb2ecbd0cc33d2c7afc0948b6415f23863c78") (source . "https://github.com/jbclements/suffixtree.git") (source_url . "https://github.com/jbclements/suffixtree.git"))))))) ("sugar" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sugar" "doc/sugar@sugar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sugar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sugar.txt"))) (checksum . "c90834b77afad07f9b02986fc8e157ccf30b753c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661471) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "shortcuts for simplicity & readability") (implies . ()) (modules . ((lib "sugar/coerce/contract.rkt") (lib "sugar/scribblings/include.scrbl") (lib "sugar/coerce/base.rkt") (lib "sugar/unstable/string.rkt") (lib "sugar/xml.rkt") (lib "sugar/unstable/dict.rkt") (lib "sugar/define.rkt") (lib "sugar/unstable/contract.rkt") (lib "sugar/debug.rkt") (lib "sugar/scribblings/debug.scrbl") (lib "sugar/scribblings/string.scrbl") (lib "sugar/file.rkt") (lib "sugar/unstable/include.rkt") (lib "sugar/unstable/class.rkt") (lib "sugar/unstable/port.rkt") (lib "sugar/test.rkt") (lib "sugar/coerce.rkt") (lib "sugar/scribblings/xml.scrbl") (lib "sugar/unstable/js.rkt") (lib "sugar/scribblings/installation.scrbl") (lib "sugar/main.rkt") (lib "sugar/unstable/misc.rkt") (lib "sugar/cache.rkt") (lib "sugar/test/debug-meta-lang.rkt") (lib "sugar/scribblings/license.scrbl") (lib "sugar/scribblings/sugar.scrbl") (lib "sugar/scribblings/len.scrbl") (lib "sugar/list.rkt") (lib "sugar/test/test-require-modes.rkt") (lib "sugar/unstable/stub.rkt") (lib "sugar/unstable/source.rkt") (lib "sugar/test/main.rkt") (lib "sugar/unstable/container.rkt") (lib "sugar/private/syntax-utils.rkt") (lib "sugar/scribblings/coerce.scrbl") (lib "sugar/unstable/case.rkt") (lib "sugar/unstable/len.rkt") (lib "sugar/scribblings/list.scrbl") (lib "sugar/scribblings/file-extensions.scrbl") (lib "sugar/scribblings/cache.scrbl") (lib "sugar/scribblings/container.scrbl"))) (name . "sugar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (sweet . #t))) (source . "https://git.matthewbutterick.com/mbutterick/sugar.git") (tags . ("sweet")) (versions . #hash((default . #hasheq((checksum . "c90834b77afad07f9b02986fc8e157ccf30b753c") (source . "https://git.matthewbutterick.com/mbutterick/sugar.git") (source_url . "https://git.matthewbutterick.com/mbutterick/sugar.git"))))))) ("super" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/super.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/super.txt"))) (checksum . "e1b18b30a1fbbb7da619e171bd5e96bd7e8ebd49") (checksum-error . #f) (collection . "super") (conflicts . ()) (date-added . 1660243760) (dependencies . ("base")) (description . "Adds features to your favorite language:\r\n- Conventional notation for object field access and methods calls.\r\n- Index notation with brackets") (implies . ()) (modules . ((lib "super/main.rkt") (lib "super/lang/reader.rkt") (lib "super/test-ref-expressions.rkt") (lib "super/test-object-notation.rkt"))) (name . "super") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (class . #t) (indexing . #t) (notation . #t) (object . #t) (ring:1 . #t) (super . #t))) (source . "https://github.com/soegaard/super.git#main") (tags . ("class" "indexing" "notation" "object" "super")) (versions . #hash((default . #hasheq((checksum . "e1b18b30a1fbbb7da619e171bd5e96bd7e8ebd49") (source . "https://github.com/soegaard/super.git#main") (source_url . "https://github.com/soegaard/super.git#main"))))))) ("superc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superc" "doc/superc@superc/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/superc.txt") (success-log . "server/built/install/superc.txt") (test-failure-log . "server/built/test-fail/superc.txt") (test-success-log . #f))) (checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-text-lib" "scheme-lib" "racket-doc" "scribble-lib")) (description . "A language for writing C with Racket macros and an easy interface to Racket") (implies . ()) (modules . ((lib "tests/superc/hello.rkt") (lib "superc/lang.rkt") (lib "superc/lang-api.rkt") (lib "tests/superc/bdb.rkt") (lib "tests/superc/math.rkt") (lib "superc/scribblings/superc.scrbl") (lib "superc/lang/reader.rkt") (lib "superc/c-loader.rkt"))) (name . "superc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/superc/tree/master") (tags . ("ffi" "language")) (versions . #hash((default . #hasheq((checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (source . "github://github.com/jeapostrophe/superc/master") (source_url . "http://github.com/jeapostrophe/superc/tree/master"))))))) ("superv" . #hasheq((author . "steven.leibrock@gmail.com") (authors . ("steven.leibrock@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superv" "doc/superv@superv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/superv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/superv.txt"))) (checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (checksum-error . #f) (collection . "superv") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Supervise your subprocesses with Racket") (implies . ()) (modules . ((lib "superv/supervisor/program.rkt") (lib "superv/supervisor/superv.rkt") (lib "superv/supervisor/data.rkt") (lib "superv/supervisor/main.rkt") (lib "superv/scribblings/superv.scrbl") (lib "superv/supervisor/config.rkt") (lib "superv/supervisor/subprocess.rkt"))) (name . "superv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:steven.leibrock@gmail.com . #t) (ring:1 . #t) (supervisor . #t))) (source . "http://github.com/sleibrock/superv.git/tree/master") (tags . ("supervisor")) (versions . #hash((default . #hasheq((checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (source . "git://github.com/sleibrock/superv.git") (source_url . "http://github.com/sleibrock/superv.git/tree/master"))))))) ("sweet-exp" . #hasheq((author . "asumu@ccs.neu.edu alexander@knauth.org") (authors . ("asumu@ccs.neu.edu" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sweet" "doc/sweet@sweet-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp.txt"))) (checksum . "ad21511e657445062b553ef3be085fb70b791a36") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "sweet-exp-test" "scribble-lib" "racket-doc" "scribble-doc" "lazy")) (description . "Sweet expressions: an alternative to s-expressions") (implies . ("sweet-exp-lib" "sweet-exp-test")) (modules . ((lib "sweet-exp/sweet.scrbl"))) (name . "sweet-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "ad21511e657445062b553ef3be085fb70b791a36") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp"))))))) ("sweet-exp-lib" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-lib.txt"))) (checksum . "ad21511e657445062b553ef3be085fb70b791a36") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Implementation part of sweet-exp") (implies . ()) (modules . ((lib "sweet-exp/read-sig.rkt") (lib "sweet-exp/modern/process-curly.rkt") (lib "sweet-exp/racket/init.rkt") (lib "sweet-exp/modern.rkt") (lib "sweet-exp/sugar.rkt") (lib "sweet-exp/indent.rkt") (lib "sweet-exp/main.rkt") (lib "sweet-exp/util.rkt") (lib "sweet-exp/sweet.rkt"))) (name . "sweet-exp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-lib") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "ad21511e657445062b553ef3be085fb70b791a36") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-lib") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-lib"))))))) ("sweet-exp-test" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-test.txt"))) (checksum . "ad21511e657445062b553ef3be085fb70b791a36") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "lazy" "typed-racket-lib")) (description . "Tests for sweet-exp") (implies . ()) (modules . ((lib "sweet-exp/run-tests.rkt") (lib "sweet-exp/tests/bad-close-error.rkt") (lib "sweet-exp/tests/whitespace.rkt") (lib "sweet-exp/tests/srcloc.rkt") (lib "sweet-exp/tests/modern.rkt") (lib "sweet-exp/tests/define-syntax-rule.rkt") (lib "sweet-exp/tests/fib.rkt") (lib "sweet-exp/tests/typed2.rkt") (lib "sweet-exp/tests/strip-context/use-m.rkt") (lib "sweet-exp/tests/rest-arg.rkt") (lib "sweet-exp/tests/typed.rkt") (lib "sweet-exp/tests/kw.rkt") (lib "sweet-exp/tests/case-lambda.rkt") (lib "sweet-exp/tests/return.rkt") (lib "sweet-exp/tests/335.rkt") (lib "sweet-exp/tests/paren-shape.rkt") (lib "sweet-exp/tests/sweet.rkt") (lib "sweet-exp/tests/srcloc-helper.rkt") (lib "sweet-exp/tests/strip-context/m.rkt") (lib "sweet-exp/tests/sweet-test-run.rkt") (lib "sweet-exp/tests/2htdp.rkt") (lib "sweet-exp/tests/lazy.rkt") (lib "sweet-exp/tests/hash.rkt"))) (name . "sweet-exp-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-test") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "ad21511e657445062b553ef3be085fb70b791a36") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-test") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-test"))))))) ("sxml" . #hasheq((author . "clements@brinckerhoff.org") (authors . ("clements@brinckerhoff.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml" "doc/sxml@sxml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml.txt"))) (checksum . "d3b8570cf7287c4e06636e17634f0f5c39203d52") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lib" "racket-doc" "scribble-lib")) (description . "SXML family of tools (including SXPath)") (implies . ()) (modules . ((lib "sxml/txpath.rkt") (lib "sxml/ssax/parse-error.rkt") (lib "sxml/ssax/ssax-prim.rkt") (lib "sxml/ssax/ssax.rkt") (lib "sxml/ssax/util.rkt") (lib "sxml/tests/vSXML-tree-trans.rkt") (lib "sxml/sxml-tools.rkt") (lib "sxml/scribblings/serialization.scrbl") (lib "sxml/ssax/sxpathlib.rkt") (lib "sxml/scribblings/sxpath.scrbl") (lib "sxml/xpath-context_xlink.rkt") (lib "sxml/ssax/multi-parser.rkt") (lib "sxml/ssax/xlink-parser.rkt") (lib "sxml/scribblings/sxml.scrbl") (lib "sxml/ssax/myenv.rkt") (lib "sxml/scribblings/sxslt.scrbl") (lib "sxml/serializer.rkt") (lib "sxml/scribblings/extracted-sperber.scrbl") (lib "sxml/lazy-xpath.rkt") (lib "sxml/lazy-ssax.rkt") (lib "sxml/xpath-parser.rkt") (lib "sxml/ssax/SSAX-code.rkt") (lib "sxml/sxpath.rkt") (lib "sxml/xpath-ast.rkt") (lib "sxml/tests/tests.rkt") (lib "sxml/scribblings/extract-provides.rkt") (lib "sxml/ssax/errors-and-warnings.rkt") (lib "sxml/scribblings/sxml-rep.scrbl") (lib "sxml/tests/ssax-tests.rkt") (lib "sxml/ssax/input-parse.rkt") (lib "sxml/tests/vSXML-to-HTML.rkt") (lib "sxml/ssax/SXML-tree-trans.rkt") (lib "sxml/scribblings/util.rkt") (lib "sxml/ssax/access-remote.rkt") (lib "sxml/main.rkt") (lib "sxml/ddo-txpath.rkt") (lib "sxml/scribblings/sax-parsing.scrbl") (lib "sxml/sxpath-ext.rkt") (lib "sxml/ssax/id.rkt") (lib "sxml/scribblings/all-exported.scrbl") (lib "sxml/ddo-axes.rkt") (lib "sxml/modif.rkt"))) (name . "sxml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@brinckerhoff.org . #t) (ring:1 . #t) (sxml . #t) (web . #t) (xml . #t))) (source . "http://github.com/jbclements/sxml/tree/master") (tags . ("sxml" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "d3b8570cf7287c4e06636e17634f0f5c39203d52") (source . "github://github.com/jbclements/sxml/master") (source_url . "http://github.com/jbclements/sxml/tree/master"))))))) ("sxml-extra" . #hasheq((author . "cris2000.espinoza@gmail.com") (authors . ("cris2000.espinoza@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml-extra" "doc/sxml-extra@sxml-extra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml-extra.txt"))) (checksum . "f5a2a688d67d92de7adda295190ffc8e9efcda86") (checksum-error . #f) (collection . "sxml") (conflicts . ()) (date-added . 1638579789) (dependencies . ("sxml" "base" "static-rename" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Utilities to use with sxml") (implies . ()) (modules . ((lib "sxml/scribblings/sxml-extra.scrbl") (lib "sxml/extra-utils.rkt"))) (name . "sxml-extra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cris2000.espinoza@gmail.com . #t) (html . #t) (ring:1 . #t) (sxml . #t))) (source . "https://github.com/kurinoku/sxml-extra-utils.git#main") (tags . ("html" "sxml")) (versions . #hash((default . #hasheq((checksum . "f5a2a688d67d92de7adda295190ffc8e9efcda86") (source . "https://github.com/kurinoku/sxml-extra-utils.git#main") (source_url . "https://github.com/kurinoku/sxml-extra-utils.git#main"))))))) ("symalg" . #hasheq((author . "johannes@johannes.tax") (authors . ("johannes@johannes.tax")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "symalg" "doc/symalg@symalg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/symalg.txt") (test-failure-log . "server/built/test-fail/symalg.txt") (test-success-log . #f))) (checksum . "5c551e9fcead240dcc70261563c5b981428ca67a") (checksum-error . #f) (collection . "symalg") (conflicts . ()) (dependencies . ("base" "multimethod" "parser-tools" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Expressing and manipulating symbolic algebraic expressions in Racket. ") (implies . ()) (modules . ((lib "symalg/scribblings/symalg.scrbl") (lib "symalg/symalg/private/data.rkt") (lib "symalg/symalg/latex.rkt") (lib "symalg/symalg/linear.rkt") (lib "symalg/symalg/simplify.rkt") (lib "symalg/symalg/smaller.rkt") (lib "symalg/symalg/parse.rkt") (lib "symalg/symalg/private/util.rkt") (lib "symalg/symalg/differentiate.rkt") (lib "symalg/symalg/infix.rkt") (lib "symalg/symalg/symalg-expr.rkt") (lib "symalg/symalg/private/zero-expr.rkt") (lib "symalg/symalg/evaluate.rkt") (lib "symalg/main.rkt") (lib "symalg/symalg/sexpr.rkt") (lib "symalg/symalg/private/preorder.rkt"))) (name . "symalg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:johannes@johannes.tax . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/pyohannes/racket-symalg.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "5c551e9fcead240dcc70261563c5b981428ca67a") (source . "https://github.com/pyohannes/racket-symalg.git") (source_url . "https://github.com/pyohannes/racket-symalg.git"))))))) ("syndicate" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syndicate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syndicate.txt"))) (checksum . "b39515c6e53eced0899a019b38f0926cc3f12244") (checksum-error . #f) (collection . "syndicate") (conflicts . ()) (date-added . 1620810385) (dependencies . ("base" "data-lib" "auxiliary-macro-context" "preserves" "sha" "struct-defaults" "rackunit-lib")) (description . "A new, high-performance reimplementation of Syndicate that takes the                                                                                           \r\nlanguage-level constructs of facets, endpoints, and fields to heart,                                                                                           \r\nintegrating knowledge of facets and endpoints into the dataspace                                                                                               \r\nimplementation itself. It also includes a form of object-capabilities                                                                                          \r\nfor securing access to dataspaces and other distributed objects.                                                                                               \r\n") (implies . ()) (modules . ((lib "syndicate/smart-pattern.rkt") (lib "syndicate/main.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/pattern-expander.rkt") (lib "syndicate/bin/syndicate-server.rkt") (lib "syndicate/gensym.rkt") (lib "syndicate/actor.rkt") (lib "syndicate/relay.rkt") (lib "syndicate/drivers/timer.rkt") (lib "syndicate/driver-support.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/drivers/stream.rkt") (lib "syndicate/test/core/during-with-spawn.rkt") (lib "syndicate/distributed/tcp-server.rkt") (lib "syndicate/test/core/republish-wildcard-observe.rkt") (lib "syndicate/syntax.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/query.rkt") (lib "syndicate/dataspace.rkt") (lib "syndicate/test/core/self-loop.rkt") (lib "syndicate/skeleton.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate/schema-compiler.rkt") (lib "syndicate/distributed/ports.rkt") (lib "syndicate/support/hash.rkt") (lib "syndicate/event-expander.rkt") (lib "syndicate/bin/syndicate-server-debug.rkt") (lib "syndicate/entity-ref.rkt") (lib "syndicate/test/core/dataflow.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/dataflow.rkt") (lib "syndicate/bag.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/drivers/racket-event.rkt") (lib "syndicate/rewrite.rkt") (lib "syndicate/field.rkt") (lib "syndicate/engine.rkt") (lib "syndicate/sturdy.rkt") (lib "syndicate/support/counter.rkt") (lib "syndicate/private/install.rkt") (lib "syndicate/service.rkt"))) (name . "syndicate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (actors . #t) (author:tonygarnockjones@gmail.com . #t) (capabilities . #t) (dataspaces . #t) (distributed . #t) (network . #t) (ring:1 . #t) (syndicate . #t))) (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (tags . ("actors" "capabilities" "dataspaces" "distributed" "network" "syndicate")) (versions . #hash((default . #hasheq((checksum . "b39515c6e53eced0899a019b38f0926cc3f12244") (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (source_url . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main"))))))) ("syndicate-classic" . #hasheq((author . "tonygarnockjones@gmail.com samc@ccs.neu.edu") (authors . ("tonygarnockjones@gmail.com" "samc@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "syndicate") ("none" "syndicate-gl"))) (failure-log . "server/built/fail/syndicate-classic.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3d9b1c383c134f98490ea1899e4ecb6d85620477") (checksum-error . #f) (collection . (multi)) (conflicts . ("syndicate")) (date-added . 1620808748) (dependencies . ("base" "data-lib" "htdp-lib" "net-lib" "profile-lib" "rackunit-lib" "sha" "automata" "auxiliary-macro-context" "data-enumerate-lib" "datalog" "db-lib" "draw-lib" "gui-lib" "images-lib" "macrotypes-lib" "pict-lib" "rackunit-macrotypes-lib" "rfc6455" "sandbox-lib" "sgl" "struct-defaults" "turnstile-example" "turnstile-lib" "web-server-lib" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "racket-doc" "scribble-lib" "sha")) (description . "A language for interactive programs. Previous version of #lang syndicate, prior to incorporation of capabilities.") (implies . ()) (modules . ((lib "syndicate-gui-toolbox/examples/7-GUIS/task-6.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic-persist.rkt") (lib "syndicate/tests/facet-creation-during-stop-from-grandchild.rkt") (lib "typed/tests/primitives.rkt") (lib "syndicate/tests/ping-pong.rkt") (lib "typed/syndicate/sequence.rkt") (lib "syndicate/dataflow.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug2.rkt") (lib "syndicate/random-test.rkt") (lib "syndicate/examples/actor/chat-simplified-internals.rkt") (lib "syndicate/examples/actor/example-synthetic-patch.rkt") (lib "typed/examples/struct-out/struct-in.rkt") (lib "typed/examples/file-system.rkt") (lib "syndicate/monolithic/core.rkt") (lib "syndicate/examples/actor/file-system-during2.rkt") (lib "syndicate/drivers/smtp.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/monitor.rkt") (lib "syndicate/examples/udp-hello-plain.rkt") (lib "syndicate/examples/mini-echo.rkt") (lib "syndicate/examples/actor/queue-no-credit2.rkt") (lib "syndicate/reload.rkt") (lib "typed/examples/requires.rkt") (lib "syndicate/examples/actor/big-bang.rkt") (lib "syndicate/tests/maintain-knowledge-across-events.rkt") (lib "typed/examples/struct-out/typed-out.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-4.rkt") (lib "syndicate/canonicalize.rkt") (lib "syndicate/examples/chat-simplified-internals.rkt") (lib "syndicate/examples/example-lang.rkt") (lib "syndicate/examples/actor/web-sanity-check.rkt") (lib "typed/tests/regression-define-with-effects.rkt") (lib "syndicate/monolithic.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/examples/actor/example-memoized.rkt") (lib "syndicate/examples/actor/chat-simplified-internals2.rkt") (lib "syndicate/test-lang.rkt") (lib "syndicate/tests/multi-level-message.rkt") (lib "syndicate/trace.rkt") (lib "syndicate/examples/actor/tcp-relay2.rkt") (lib "typed/syndicate/prim.rkt") (lib "syndicate/examples/two-buyer-protocol-incremental.rkt") (lib "syndicate/examples/example-meta-echo.rkt") (lib "syndicate-ide/main.rkt") (lib "syndicate/supervise.rkt") (lib "syndicate/tests/bank-account.rkt") (lib "syndicate/examples/udp-multicast.rkt") (lib "syndicate/examples/actor/let-event.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-3.rkt") (lib "syndicate/examples/example-quit-world.rkt") (lib "typed/tests/phantom-rho.rkt") (lib "syndicate/examples/actor/example-glitch.rkt") (lib "typed/tests/for-loop-regression.rkt") (lib "syndicate/patch.rkt") (lib "syndicate/support/bytes.rkt") (lib "syndicate/trace/stderr.rkt") (lib "typed/syndicate/for-loops.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/core.rkt") (lib "typed/syndicate/first-facet-lang-attempt.rkt") (lib "typed/examples/book-club.rkt") (lib "syndicate/examples/echo.rkt") (lib "syndicate/examples/actor/example-assertion-spike.rkt") (lib "syndicate/examples/actor/simple-cross-layer.rkt") (lib "syndicate/tests/use-current-knowledge-with-new-facet.rkt") (lib "syndicate/drivers/timestate.rkt") (lib "syndicate/examples/ws-echo-client.rkt") (lib "syndicate/examples/actor/f-to-c4.rkt") (lib "typed/syndicate/ltl.rkt") (lib "typed/syndicate/list.rkt") (lib "syndicate/examples/actor/f-to-c3.rkt") (lib "syndicate/examples/key-value-store.rkt") (lib "syndicate/examples/actor/example-bug-query-scope.rkt") (lib "syndicate/actor-lang.rkt") (lib "syndicate/examples/actor/irc-client.rkt") (lib "syndicate/trie.rkt") (lib "syndicate/main.rkt") (lib "syndicate/examples/actor/example-action-after-suspension.rkt") (lib "typed/examples/provides.rkt") (lib "syndicate/examples/actor/example-filesystem.rkt") (lib "typed/tests/spin/basic-assertion.rkt") (lib "typed/tests/spin/basic-assertion-communication.rkt") (lib "syndicate/examples/actor/forward-chaining-mini.rkt") (lib "typed/examples/simple-query-value.rkt") (lib "typed/tests/overly-broad-interests.rkt") (lib "syndicate/examples/big-bang.rkt") (lib "syndicate/examples/actor/add1-simple.rkt") (lib "syndicate/examples/actor/fs-shell.rkt") (lib "syndicate/examples/actor/f-to-c2.rkt") (lib "syndicate/examples/actor/cleanup.rkt") (lib "typed/examples/chat-tcp2.rkt") (lib "typed/examples/struct-out/struct-out.rkt") (lib "syndicate/examples/actor/ceu-leds.rkt") (lib "syndicate/threaded.rkt") (lib "typed/examples/internal-knowledge.rkt") (lib "syndicate/lang/reader.rkt") (lib "syndicate/big-bang/timestate.rkt") (lib "syndicate/examples/actor/double-click.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-2.rkt") (lib "syndicate/examples/actor/chat.rkt") (lib "typed/core.rkt") (lib "syndicate/examples/actor/example-partial-retraction.rkt") (lib "syndicate/examples/chat-no-quit-world-no-nesting.rkt") (lib "syndicate/tests/simple1.rkt") (lib "typed/examples/core/bank-account.rkt") (lib "syndicate-gl/examples/clock-face.rkt") (lib "syndicate/examples/actor/broadcast-messages.rkt") (lib "typed/syndicate/set.rkt") (lib "typed/syndicate/either.rkt") (lib "syndicate/examples/actor/echo.rkt") (lib "typed/tests/constructor-naming-conventions.rkt") (lib "syndicate/examples/box-and-client.rkt") (lib "syndicate/examples/example-meta-drop.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-1.rkt") (lib "syndicate/examples/actor/sandbox-os.rkt") (lib "syndicate/examples/actor/queue-no-credit.rkt") (lib "syndicate/examples/actor/rpc-with-error.rkt") (lib "syndicate/examples/ws-hello.rkt") (lib "syndicate/examples/actor/tcp-relay.rkt") (lib "typed/syndicate/lang/reader.rkt") (lib "typed/examples/struct-out/client.rkt") (lib "syndicate/examples/actor/irc.rkt") (lib "syndicate/examples/actor/udp-echo.rkt") (lib "typed/tests/comm-ty-composition.rkt") (lib "typed/examples/two-buyer-protocol.rkt") (lib "syndicate/examples/example-wildcard-assertion-1.rkt") (lib "syndicate/drivers/filesystem.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-5.rkt") (lib "syndicate/pretty.rkt") (lib "syndicate/examples/actor/chain.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement1.rkt") (lib "syndicate/examples/actor/web-demo.rkt") (lib "syndicate/examples/actor/make.rkt") (lib "typed/examples/realize.rkt") (lib "syndicate/broker/server.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-1.rkt") (lib "syndicate/comprehensions.rkt") (lib "syndicate/examples/actor/f-to-c5.rkt") (lib "typed/examples/core/book-club.rkt") (lib "typed/examples/struct-out/untyped.rkt") (lib "syndicate/examples/actor/example-during-criterion-snapshotting.rkt") (lib "typed/tests/struct-provider.rkt") (lib "syndicate/examples/actor/chat-client-tcp2.rkt") (lib "syndicate/examples/actor/two-buyer-protocol.rkt") (lib "syndicate/little-actors/core.rkt") (lib "syndicate/protocol/instance.rkt") (lib "syndicate/tests/nested-spawn-exceptions.rkt") (lib "typed/tests/spawn.rkt") (lib "typed/tests/define-dataflow.rkt") (lib "syndicate/tset.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic.rkt") (lib "syndicate/examples/actor/running-total.rkt") (lib "syndicate/drivers/timer.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement4.rkt") (lib "syndicate/drivers/config.rkt") (lib "syndicate/demand-matcher.rkt") (lib "syndicate/drivers/web.rkt") (lib "syndicate/drivers/line-reader.rkt") (lib "syndicate/examples/two-buyer-protocol-monolithic.rkt") (lib "syndicate/drivers/tcp2.rkt") (lib "syndicate-ide/hsv.rkt") (lib "typed/tests/for-loops.rkt") (lib "typed/syndicate/roles.rkt") (lib "typed/examples/require-struct/driver.rkt") (lib "syndicate/trace/util.rkt") (lib "syndicate/examples/actor/internal-knowledge.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/examples/actor/lambda.rkt") (lib "typed/tests/sets.rkt") (lib "syndicate/examples/ws-echo.rkt") (lib "typed/tests/effect-polymorhpism.rkt") (lib "syndicate/examples/example-wildcard-assertion-2.rkt") (lib "syndicate/examples/actor/chat-client.rkt") (lib "syndicate/drivers/udp.rkt") (lib "syndicate/examples/actor/gui.rkt") (lib "typed/examples/bank-account.rkt") (lib "syndicate/examples/actor/chat-no-quit-world-no-nesting.rkt") (lib "syndicate/examples/actor/example-supervise.rkt") (lib "typed/examples/simple-query-set.rkt") (lib "syndicate/examples/actor/mutable-cell.rkt") (lib "syndicate/examples/actor/example-termination-scripts-1.rkt") (lib "typed/examples/simple-stop-facet.rkt") (lib "syndicate/examples/chat-no-quit-world.rkt") (lib "typed/tests/expressions.rkt") (lib "syndicate/examples/forward-chaining.rkt") (lib "typed/syndicate/syntax-serializer.rkt") (lib "syndicate/examples/actor/file-system-lll.rkt") (lib "typed/syndicate/drivers/tcp.rkt") (lib "typed/examples/require-struct/client.rkt") (lib "syndicate/big-bang.rkt") (lib "typed/tests/regression-count-new-words.rkt") (lib "typed/syndicate/test-utils.rkt") (lib "syndicate/firewall.rkt") (lib "syndicate/examples/actor/vacuous-facet.rkt") (lib "typed/tests/pattern-annotations.rkt") (lib "syndicate/actor.rkt") (lib "syndicate/examples/actor/chat-no-quit-world.rkt") (lib "syndicate/examples/actor/flip-flop.rkt") (lib "typed/syndicate/proto.rkt") (lib "syndicate/examples/actor/realize.rkt") (lib "syndicate/examples/tcp-hello.rkt") (lib "syndicate/examples/actor/file-system.rkt") (lib "syndicate-gl/affine.rkt") (lib "typed/tests/floating-define.rkt") (lib "syndicate/examples/actor/simple-dns.rkt") (lib "syndicate-gl/examples/many.rkt") (lib "typed/examples/require-struct/client2.rkt") (lib "syndicate/examples/actor/example-termination-scripts-2.rkt") (lib "syndicate/examples/actor/fib-server.rkt") (lib "syndicate/examples/actor/example-multiple-suspension-resumption.rkt") (lib "typed/syndicate/roles/lang/reader.rkt") (lib "syndicate/examples/actor/parameters.rkt") (lib "typed/tests/removing-annotations.rkt") (lib "syndicate/drivers/gui.rkt") (lib "syndicate/examples/example-layer.rkt") (lib "syndicate/core-lang.rkt") (lib "syndicate/monolithic/scn.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/cells-canvas.rkt") (lib "syndicate/examples/actor/bank-account.rkt") (lib "typed/examples/observe-star.rkt") (lib "syndicate/examples/actor/file-system-during.rkt") (lib "typed/tests/require-struct.rkt") (lib "syndicate-gl/scribblings/syndicate-gl.scrbl") (lib "syndicate-gl/texture.rkt") (lib "syndicate/examples/actor/firewall-demo.rkt") (lib "syndicate/examples/actor/chat-tcp2.rkt") (lib "syndicate/examples/example-plain.rkt") (lib "typed/examples/core/box-and-client.rkt") (lib "syndicate/support/hash.rkt") (lib "syndicate/examples/actor/timestate.rkt") (lib "syndicate/ground.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/drivers/websocket.rkt") (lib "syndicate/examples/actor/example-bug-rising-edge-true.rkt") (lib "syndicate/scribblings/syndicate.scrbl") (lib "typed/examples/simple-query-hash.rkt") (lib "syndicate/hierarchy.rkt") (lib "syndicate/examples/bank-account.rkt") (lib "syndicate/tests/create-new-facet-in-on-stop.rkt") (lib "typed/syndicate/core-types.rkt") (lib "syndicate/examples/actor/flink.rkt") (lib "syndicate/tests/simple-multi-level.rkt") (lib "typed/examples/cell.rkt") (lib "syndicate/examples/chat-client.rkt") (lib "syndicate/examples/actor/chat-multiroom.rkt") (lib "syndicate/examples/actor/fs-protocol.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-2.rkt") (lib "syndicate/examples/actor/file-system-lll2.rkt") (lib "syndicate/examples/actor/chat-bot.rkt") (lib "syndicate-gl/examples/basic.rkt") (lib "typed/examples/simple-during-spawn.rkt") (lib "syndicate/examples/actor/f-to-c.rkt") (lib "syndicate/store.rkt") (lib "syndicate/examples/actor/mutex.rkt") (lib "typed/scribblings/typed-syndicate.scrbl") (lib "syndicate/tests/boop.rkt") (lib "syndicate/tests/stop-when-react.rkt") (lib "typed/tests/hashes.rkt") (lib "typed/syndicate/core-expressions.rkt") (lib "syndicate/examples/actor/mini-echo.rkt") (lib "typed/syndicate/drivers/timestate.rkt") (lib "typed/tests/inference.rkt") (lib "syndicate/broker/protocol.rkt") (lib "syndicate/protocol/standard-relay.rkt") (lib "syndicate-gl/2d.rkt") (lib "typed/examples/simple-dataflow.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths2.rkt") (lib "syndicate/relay.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths3.rkt") (lib "typed/syndicate/hash.rkt") (lib "typed/examples/flink.rkt") (lib "typed/syndicate/sugar.rkt") (lib "typed/tests/sequences.rkt") (lib "typed/examples/require-struct/omit-accs/lib.rkt") (lib "syndicate/examples/actor/queue.rkt") (lib "syndicate/tests/multi-level-other-way.rkt") (lib "syndicate/treap.rkt") (lib "syndicate/examples/actor/file-system2.rkt") (lib "typed/syndicate/maybe.rkt") (lib "syndicate/mux.rkt") (lib "syndicate/trace/msd.rkt") (lib "typed/syndicate/compile-spin.rkt") (lib "syndicate/profile.rkt") (lib "syndicate/examples/example-quit-dataspace-with-assertion.rkt") (lib "syndicate/examples/chat.rkt") (lib "syndicate/test.rkt") (lib "syndicate/examples/actor/box-and-client.rkt") (lib "syndicate/examples/example-meta-echo2.rkt") (lib "syndicate/examples/example-swap-int-and-claim.rkt") (lib "typed/syndicate/core/lang/reader.rkt") (lib "syndicate/drivers/irc.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths.rkt") (lib "typed/examples/flink-support.rkt") (lib "syndicate/examples/durable-key-value-store.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-7.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate-gui-toolbox/widgets.rkt") (lib "syndicate/examples/ws-hello-ssl.rkt") (lib "typed/examples/require-struct/omit-accs/require-omit-accs.rkt") (lib "typed/tests/basic-bad-assertion.rkt") (lib "typed/examples/simple-during.rkt") (lib "syndicate/examples/bank-account-monolithic.rkt") (lib "syndicate/examples/actor/spreadsheet.rkt") (lib "syndicate/hash-order.rkt") (lib "typed/examples/ping-pong.rkt") (lib "syndicate/examples/actor/example-synthetic-patch-2.rkt") (lib "syndicate/protocol/advertise.rkt") (lib "syndicate/upside-down.rkt") (lib "syndicate/examples/actor/query-set.rkt") (lib "syndicate/trace/render-msd.rkt") (lib "syndicate/dataspace.rkt") (lib "typed/examples/simple-dataspace.rkt"))) (name . "syndicate-classic") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (actors . #t) (author:samc@ccs.neu.edu . #t) (author:tonygarnockjones@gmail.com . #t) (dataspaces . #t) (ring:2 . #t) (syndicate . #t) (syndicate-gl . #t) (typed-syndicate . #t))) (source . "https://github.com/tonyg/syndicate.git?path=racket") (tags . ("actors" "dataspaces" "syndicate" "syndicate-gl" "typed-syndicate")) (versions . #hash((default . #hasheq((checksum . "3d9b1c383c134f98490ea1899e4ecb6d85620477") (source . "https://github.com/tonyg/syndicate.git?path=racket") (source_url . "https://github.com/tonyg/syndicate.git?path=racket"))))))) ("syntax-class-or" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-class-or" "doc/syntax-class-or@syntax-class-or/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-class-or.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-class-or.txt"))) (checksum . "948a823026cb462f113400b5deb5276c9bd1846a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594047067) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Combining syntax classes together as multiple variants") (implies . ()) (modules . ((lib "syntax/parse/syntax-class-or/scribblings/syntax-class-or.scrbl") (lib "syntax/parse/syntax-class-or.rkt"))) (name . "syntax-class-or") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/AlexKnauth/syntax-class-or.git#main") (tags . ("syntax-parse")) (versions . #hash((default . #hasheq((checksum . "948a823026cb462f113400b5deb5276c9bd1846a") (source . "https://github.com/AlexKnauth/syntax-class-or.git#main") (source_url . "https://github.com/AlexKnauth/syntax-class-or.git#main"))))))) ("syntax-classes" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes.txt"))) (checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802590) (dependencies . ("base" "syntax-classes-lib" "syntax-classes-doc")) (description . "Additional useful syntax classes for use with syntax/parse") (implies . ("syntax-classes-lib" "syntax-classes-doc")) (modules . ()) (name . "syntax-classes") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes"))))))) ("syntax-classes-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-classes" "doc/syntax-classes@syntax-classes-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-doc.txt"))) (checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802779) (dependencies . ("base" "racket-doc" "scribble-lib" "syntax-classes-lib")) (description . "documentation (no implementation) for “syntax-classes”") (implies . ()) (modules . ((lib "scribblings/syntax-classes.scrbl"))) (name . "syntax-classes-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc"))))))) ("syntax-classes-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-lib.txt"))) (checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802876) (dependencies . ("base")) (description . "implementation (no documentation) for “syntax-classes”") (implies . ()) (modules . ((lib "syntax/parse/class/paren-shape.rkt") (lib "syntax/parse/class/local-value.rkt") (lib "syntax/parse/class/struct-id.rkt"))) (name . "syntax-classes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib"))))))) ("syntax-classes-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-test.txt"))) (checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548803006) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "syntax-classes-lib")) (description . "") (implies . ()) (modules . ((lib "tests/syntax/parse/class/paren-shape.rkt") (lib "tests/syntax/parse/class/struct-id.rkt"))) (name . "syntax-classes-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "4d64d35259d69ee8d5c90f475fe777c66d54c8fd") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test"))))))) ("syntax-extension" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-extension" "doc/syntax-extension@syntax-extension/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-extension.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-extension.txt"))) (checksum . "c88036bd722627ecd471b40f3326542734cf884d") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (date-added . 1656796523) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib")) (description . "A helper collection of syntax") (implies . ()) (modules . ((lib "syntax/scribblings/list.scrbl") (lib "syntax/identifier.rkt") (lib "syntax/scribblings/identifier.scrbl") (lib "syntax/main.rkt") (lib "syntax/scribblings/eval.rkt") (lib "syntax/list.rkt") (lib "syntax/scribblings/syntax-extension.scrbl"))) (name . "syntax-extension") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/racket-tw/syntax-extension.git#develop") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "c88036bd722627ecd471b40f3326542734cf884d") (source . "https://github.com/racket-tw/syntax-extension.git#develop") (source_url . "https://github.com/racket-tw/syntax-extension.git#develop"))))))) ("syntax-highlighting" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-highlighting.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-highlighting.txt"))) (checksum . "44eec676564ee45d631870e494796ed55a55434f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582164286) (dependencies . ("base")) (description . "(INCOMPLETE) A single syntax highlighting collection. Currently only uses http://markup.su/api/highlighter") (implies . ()) (modules . ((lib "syntax-highlighting/highlight-code.rkt"))) (name . "syntax-highlighting") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sage@sagegerard.com . #t) (color . #t) (highlight . #t) (ring:1 . #t) (syntax . #t) (syntax-highlighting . #t))) (source . "https://github.com/zyrolasting/syntax-highlighting.git") (tags . ("color" "highlight" "syntax" "syntax-highlighting")) (versions . #hash((default . #hasheq((checksum . "44eec676564ee45d631870e494796ed55a55434f") (source . "https://github.com/zyrolasting/syntax-highlighting.git") (source_url . "https://github.com/zyrolasting/syntax-highlighting.git"))))))) ("syntax-implicits" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-implicits" "doc/syntax-implicits@syntax-implicits/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-implicits.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-implicits.txt"))) (checksum . "4820beb8aeedaf183520307f976f794e0e9bd055") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608152516) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (modules . ((lib "syntax-implicits/private/repro-test-2.rkt") (lib "syntax-implicits/private/repro-test-1.rkt") (lib "syntax-implicits/private/repro-test-4.rkt") (lib "syntax-implicits/scribblings/syntax-implicits.scrbl") (lib "syntax-implicits/private/repro-test-3.rkt") (lib "syntax-implicits/main.rkt"))) (name . "syntax-implicits") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/willghatch/racket-syntax-implicits.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "4820beb8aeedaf183520307f976f794e0e9bd055") (source . "https://github.com/willghatch/racket-syntax-implicits.git") (source_url . "https://github.com/willghatch/racket-syntax-implicits.git"))))))) ("syntax-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-lang" "doc/syntax-lang@syntax-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-lang.txt"))) (checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Mini-library for creating new #lang languages from simple macros") (implies . ()) (modules . ((lib "syntax/lang/main.scrbl") (lib "syntax/lang/main.rkt") (lib "syntax/lang.rkt"))) (name . "syntax-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (lang . #t) (ring:1 . #t) (sugar . #t) (syntax . #t))) (source . "http://github.com/jackfirth/racket-syntax-lang/tree/master") (tags . ("experimental" "lang" "sugar" "syntax")) (versions . #hash((default . #hasheq((checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (source . "git://github.com/jackfirth/racket-syntax-lang") (source_url . "http://github.com/jackfirth/racket-syntax-lang/tree/master"))))))) ("syntax-macro-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-macro-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-macro-lang.txt"))) (checksum . "d20497348015aecb309bdddd29cebea4a0b35664") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "experimental racket module language for creating languages, inspired by syntax-lang") (implies . ()) (modules . ((lib "syntax/macro-lang.rkt") (lib "tests/syntax/macro-lang/test.rkt") (lib "tests/syntax/macro-lang/the-lang.rkt"))) (name . "syntax-macro-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t) (syntax . #t))) (source . "http://github.com/AlexKnauth/syntax-macro-lang/tree/master") (tags . ("lang" "syntax")) (versions . #hash((default . #hasheq((checksum . "d20497348015aecb309bdddd29cebea4a0b35664") (source . "git://github.com/AlexKnauth/syntax-macro-lang") (source_url . "http://github.com/AlexKnauth/syntax-macro-lang/tree/master"))))))) ("syntax-parse-example" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-parse-example" "doc/syntax-parse-example@syntax-parse-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-parse-example.txt") (test-failure-log . "server/built/test-fail/syntax-parse-example.txt") (test-success-log . #f))) (checksum . "94ebb02d5b243b4e6d0378aa6b3b0ed37a4e16e3") (checksum-error . #f) (collection . "syntax-parse-example") (conflicts . ()) (date-added . 1635728035) (dependencies . ("at-exp-lib" "base" "scribble-lib" "rackunit-lib" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-doc" "rackunit-lib" "scribble-doc" "rackunit-typed" "typed-racket-doc")) (description . "Example macros written using syntax/parse") (implies . ()) (modules . ((lib "syntax-parse-example/define-freevar/define-freevar.scrbl") (lib "syntax-parse-example/define-freevar/define-freevar.rkt") (lib "syntax-parse-example/flaggable-app/flaggable-app.scrbl") (lib "syntax-parse-example/dot-underscore/dot-underscore.scrbl") (lib "syntax-parse-example/make-variable/make-variable.scrbl") (lib "syntax-parse-example/rec-contract/rec-contract.rkt") (lib "syntax-parse-example/log-once/log-once-test.rkt") (lib "syntax-parse-example/fresh-variable/fresh-variable.scrbl") (lib "syntax-parse-example/displaylns/displaylns.rkt") (lib "syntax-parse-example/define-curry/define-curry-test.rkt") (lib "syntax-parse-example/def/def-test.rkt") (lib "syntax-parse-example/dot-underscore/dot-underscore-test.rkt") (lib "syntax-parse-example/displaylns/displaylns.scrbl") (lib "syntax-parse-example/kw-ctc/kw-ctc.scrbl") (lib "syntax-parse-example/optional-assert/optional-assert.scrbl") (lib "syntax-parse-example/try-catch-finally/3.rkt") (lib "syntax-parse-example/while-break/while-break-test.rkt") (lib "syntax-parse-example/marc-matcher/marc-matcher.scrbl") (lib "syntax-parse-example/try-catch-finally/1.scrbl") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication-test.rkt") (lib "syntax-parse-example/def/def.rkt") (lib "syntax-parse-example/try-catch-finally/2.scrbl") (lib "syntax-parse-example/marc-matcher/marc-matcher-helpers.rkt") (lib "syntax-parse-example/pyret-for/pyret-for.rkt") (lib "syntax-parse-example/displaylns/displaylns-test.rkt") (lib "syntax-parse-example/log-once/log-once.scrbl") (lib "syntax-parse-example/define-with-datum+/define-with-datum+.rkt") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract.scrbl") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.scrbl") (lib "syntax-parse-example/marc-matcher/marc-matcher-test.rkt") (lib "syntax-parse-example/make-variable/make-variable.rkt") (lib "syntax-parse-example/hierarchical-cmdline/hierarchical-cmdline.rkt") (lib "syntax-parse-example/pyret-for/pyret-for-test.rkt") (lib "syntax-parse-example/kw-ctc/kw-ctc.rkt") (lib "syntax-parse-example/except-in-quiet/except-in-quiet.scrbl") (lib "syntax-parse-example/try-catch-finally/try-catch-finally.scrbl") (lib "syntax-parse-example/def/def.scrbl") (lib "syntax-parse-example/try-catch-finally/2.rkt") (lib "syntax-parse-example/fresh-variable/fresh-variable.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.scrbl") (lib "syntax-parse-example/multi-check-true/multi-check-true.rkt") (lib "syntax-parse-example/fnarg/fnarg.scrbl") (lib "syntax-parse-example/rec-contract/rec-contract.scrbl") (lib "syntax-parse-example/js-dict/js-dict.scrbl") (lib "syntax-parse-example/define-curry/define-curry.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true-test.rkt") (lib "syntax-parse-example/js-dict/js-dict.rkt") (lib "syntax-parse-example/rec-contract/rec-contract-test.rkt") (lib "syntax-parse-example/flaggable-app/flaggable-app.rkt") (lib "syntax-parse-example/try-catch-finally/1.rkt") (lib "syntax-parse-example/defines/defines-test.rkt") (lib "syntax-parse-example/struct-list/struct-list.scrbl") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.rkt") (lib "syntax-parse-example/fnarg/fnarg-test.rkt") (lib "syntax-parse-example/first-class-or/first-class-or.rkt") (lib "syntax-parse-example/flaggable-app/flaggable-app-test.rkt") (lib "syntax-parse-example/optional-assert/optional-assert.rkt") (lib "syntax-parse-example/try-catch-finally/3-test.rkt") (lib "syntax-parse-example/try-catch-finally/2-test.rkt") (lib "syntax-parse-example/try-catch-finally/1-test.rkt") (lib "syntax-parse-example/make-variable/make-variable-test.rkt") (lib "syntax-parse-example/first-class-or/first-class-or.scrbl") (lib "syntax-parse-example/while-break/while-break.rkt") (lib "syntax-parse-example/pyret-for/pyret-for.scrbl") (lib "syntax-parse-example/conditional-require/conditional-require-test.rkt") (lib "syntax-parse-example/index.scrbl") (lib "syntax-parse-example/define-extend/define-extend.scrbl") (lib "syntax-parse-example/raco.rkt") (lib "syntax-parse-example/define-freevar/define-freevar-test.rkt") (lib "syntax-parse-example/fresh-variable/fresh-variable-test.rkt") (lib "syntax-parse-example/define-extend/define-extend.rkt") (lib "syntax-parse-example/except-in-quiet/except-in-quiet-test.rkt") (lib "syntax-parse-example/define-with-datum+/define-with-datum+-test.rkt") (lib "syntax-parse-example/first-class-or/first-class-or-test.rkt") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract-test.rkt") (lib "syntax-parse-example/struct-list/struct-list-test.rkt") (lib "syntax-parse-example/render.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true.scrbl") (lib "syntax-parse-example/let-star/let-star.scrbl") (lib "syntax-parse-example/fnarg/fnarg.rkt") (lib "syntax-parse-example/defines/defines.scrbl") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.rkt") (lib "syntax-parse-example/define-with-datum+/define-with-datum+.scrbl") (lib "syntax-parse-example/try-catch-finally/3.scrbl") (lib "syntax-parse-example/optional-assert/optional-assert-test.rkt") (lib "syntax-parse-example/let-star/let-star-test.rkt") (lib "syntax-parse-example/kw-ctc/kw-ctc-test.rkt") (lib "syntax-parse-example/except-in-quiet/except-in-quiet.rkt") (lib "syntax-parse-example/marc-matcher/marc-matcher.rkt") (lib "syntax-parse-example/define-extend/define-extend-test.rkt") (lib "syntax-parse-example/while-break/while-break.scrbl") (lib "syntax-parse-example/dot-underscore/dot-underscore.rkt") (lib "syntax-parse-example/test.rkt") (lib "syntax-parse-example/defines/defines.rkt") (lib "syntax-parse-example/define-curry/define-curry.scrbl") (lib "syntax-parse-example/conditional-require/conditional-require.scrbl") (lib "syntax-parse-example/hierarchical-cmdline/hierarchical-cmdline-test.rkt") (lib "syntax-parse-example/conditional-require/conditional-require.rkt") (lib "syntax-parse-example/lang/reader.rkt") (lib "syntax-parse-example/marc-matcher/marc-matcher-syntax-classes.rkt") (lib "syntax-parse-example/struct-list/struct-list.rkt") (lib "syntax-parse-example/let-star/let-star.rkt") (lib "syntax-parse-example/log-once/log-once.rkt") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set-test.rkt") (lib "syntax-parse-example/hierarchical-cmdline/hierarchical-cmdline.scrbl") (lib "syntax-parse-example/syntax-parse-example.scrbl") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract.rkt") (lib "syntax-parse-example/js-dict/js-dict-test.rkt"))) (name . "syntax-parse-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (ring:1 . #t) (tutorial . #t))) (source . "https://github.com/syntax-objects/syntax-parse-example.git#master") (tags . ("macro" "tutorial")) (versions . #hash((default . #hasheq((checksum . "94ebb02d5b243b4e6d0378aa6b3b0ed37a4e16e3") (source . "https://github.com/syntax-objects/syntax-parse-example.git#master") (source_url . "https://github.com/syntax-objects/syntax-parse-example.git#master"))))))) ("syntax-sloc" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-sloc" "doc/syntax-sloc@syntax-sloc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-sloc.txt") (test-failure-log . "server/built/test-fail/syntax-sloc.txt") (test-success-log . #f))) (checksum . "cd75518812385d7075d53a158fa76cc0ffb45803") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "lang-file" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc" "typed-racket-more")) (description . "counts the number of source lines of code in a racket syntax object") (implies . ()) (modules . ((lib "typed/syntax-sloc.rkt") (lib "syntax-sloc/private/accumulate-stx.rkt") (lib "typed/syntax-sloc/directory-sloc.rkt") (lib "typed/syntax-sloc/read-lang-file.rkt") (lib "typed/syntax-sloc/syntax-sloc.rkt") (lib "syntax-sloc/raco-sloc.rkt") (lib "syntax-sloc/scribblings/syntax-sloc.scrbl") (lib "typed/syntax-sloc/main.rkt") (lib "syntax-sloc/private/pkg-module-paths.rkt") (lib "syntax-sloc/read-lang-file.rkt") (lib "syntax-sloc/syntax-sloc.rkt") (lib "syntax-sloc/lang-file-sloc.rkt") (lib "syntax-sloc/directory-sloc.rkt") (lib "syntax-sloc/pkg-sloc.rkt") (lib "typed/syntax-sloc/lang-file-sloc.rkt") (lib "syntax-sloc/main.rkt"))) (name . "syntax-sloc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/syntax-sloc/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd75518812385d7075d53a158fa76cc0ffb45803") (source . "git://github.com/AlexKnauth/syntax-sloc") (source_url . "http://github.com/AlexKnauth/syntax-sloc/tree/master"))))))) ("syntax-warn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (description . "Define and attach syntax warnings to code, with automated fixes and built in warnings. Implies -base, -lang, -cli, and -doc packages.") (implies . ("syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (modules . ()) (name . "syntax-warn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn") (tags . ("lang" "raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn"))))))) ("syntax-warn-base" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-base.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-base.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Base library for defining and attaching syntax warnings") (implies . ()) (modules . ((lib "syntax/warn/private/syntax-srcloc-data.rkt") (lib "syntax/warn/private/warn-config.rkt") (lib "syntax/warn/private/syntax-format.rkt") (lib "syntax/warn/private/filter-index.rkt") (lib "syntax/warn/private/rackunit-syntax.rkt") (lib "syntax/warn/private/warn.rkt") (lib "syntax/warn/private/warn-property.rkt") (lib "syntax/warn/private/string-lines.rkt") (lib "syntax/warn.rkt") (lib "syntax/warn/private/list.rkt") (lib "syntax/warn/private/string-pad.rkt") (lib "syntax/warn/private/syntax-srcloc.rkt") (lib "syntax/warn/private/warn-module.rkt") (lib "syntax/warn/private/rackunit-string.rkt") (lib "syntax/warn/private/syntax-srcloc-test.rkt"))) (name . "syntax-warn-base") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-base") (tags . ("syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-base") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-base"))))))) ("syntax-warn-cli" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-cli.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (dependencies . ("rackunit-lib" "syntax-warn-lang" "base" "compiler-lib" "syntax-warn-base" "rackunit-lib")) (description . "Command line raco tools for checking and fixing syntax warnings") (implies . ()) (modules . ((lib "syntax/warn/private/syntax-string.rkt") (lib "syntax/warn/test-warnings/main.rkt") (lib "syntax/warn/test-warnings-suppressed/main.rkt") (lib "syntax/warn/raco-warn.rkt") (lib "syntax/warn/private/command.rkt") (lib "syntax/warn/private/config.rkt") (lib "syntax/warn/private/read.rkt") (lib "syntax/warn/private/string-delta.rkt") (lib "syntax/warn/test-no-warnings/main.rkt") (lib "syntax/warn/raco-fix.rkt") (lib "syntax/warn/private/module.rkt") (lib "syntax/warn/private/read-test.rkt") (lib "syntax/warn/private/test.rkt"))) (name . "syntax-warn-cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-cli") (tags . ("raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-cli") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-cli"))))))) ("syntax-warn-doc" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-warn" "doc/syntax-warn@syntax-warn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-doc.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("syntax-warn-base" "scribble-lib" "scribble-text-lib" "base" "racket-doc" "scribble-lib" "syntax-warn-base")) (description . "Documentation for the syntax-warn packages") (implies . ()) (modules . ((lib "syntax-warn-doc/base.rkt") (lib "syntax-warn-doc/main.scrbl") (lib "syntax-warn-doc/reference.scrbl") (lib "syntax-warn-doc/lang.scrbl") (lib "syntax-warn-doc/cli.scrbl"))) (name . "syntax-warn-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (docs . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-doc") (tags . ("docs" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-doc") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-doc"))))))) ("syntax-warn-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-lang.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "racket") (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "rackunit-lib")) (description . "#lang racket/base/warn - Racket with syntax warnings") (implies . ()) (modules . ((lib "racket/base/private/require.rkt") (lib "racket/base/warn.rkt"))) (name . "syntax-warn-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-lang") (tags . ("lang" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-lang") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-lang"))))))) ("syrup" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/syrup.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syrup.txt") (test-failure-log . "server/built/test-fail/syrup.txt") (test-success-log . #f))) (checksum . "88eb2691cdd3806290fa42480dfefed09138eb09") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1599411200) (dependencies . ("base")) (description . "Serialization of Preserves (mostly). Easy to write, easy to read, with a few empty calories.") (implies . ()) (modules . ((lib "syrup/bencode.rkt") (lib "syrup/syrup.rkt") (lib "syrup/main.rkt"))) (name . "syrup") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:cwebber@dustycloud.org . #t) (ring:1 . #t) (serialization . #t))) (source . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup") (tags . ("serialization")) (versions . #hash((default . #hasheq((checksum . "88eb2691cdd3806290fa42480dfefed09138eb09") (source . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup") (source_url . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup"))))))) ("sysfs" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sysfs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sysfs.txt"))) (checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Linux /sys utilities.") (implies . ()) (modules . ((lib "sysfs/util.rkt") (lib "sysfs/block.rkt") (lib "sysfs/main.rkt") (lib "sysfs/net.rkt"))) (name . "sysfs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-sysfs/tree/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (source . "github://github.com/mordae/racket-sysfs/master") (source_url . "http://github.com/mordae/racket-sysfs/tree/master"))))))) ("systemd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "systemd" "doc/systemd@systemd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/systemd.txt") (test-failure-log . "server/built/test-fail/systemd.txt") (test-success-log . #f))) (checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "SystemD Support") (implies . ()) (modules . ((lib "systemd/main.rkt") (lib "systemd/daemon.scrbl") (lib "systemd/id.scrbl") (lib "systemd/daemon.rkt") (lib "systemd/systemd.scrbl") (lib "systemd/id.rkt"))) (name . "systemd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-systemd/tree/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (source . "github://github.com/mordae/racket-systemd/master") (source_url . "http://github.com/mordae/racket-systemd/tree/master"))))))) ("t-test" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "t-test" "doc/t-test@t-test/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/t-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/t-test.txt"))) (checksum . "eb5cc28868689324f6c27722d2516715570cab97") (checksum-error . #f) (collection . "t-test") (conflicts . ()) (dependencies . ("base" "math-lib" "typed-racket-lib" "racket-doc" "rackunit-typed" "scribble-lib" "math-doc")) (description . "Simple implementations of Welch's and Student's t-tests") (implies . ()) (modules . ((lib "t-test/t-test.scrbl") (lib "t-test/main.rkt"))) (name . "t-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t) (statistics . #t) (t-test . #t))) (source . "https://github.com/jbclements/t-test.git") (tags . ("statistics" "t-test")) (versions . #hash((default . #hasheq((checksum . "eb5cc28868689324f6c27722d2516715570cab97") (source . "https://github.com/jbclements/t-test.git") (source_url . "https://github.com/jbclements/t-test.git"))))))) ("table-panel" . #hasheq((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (authors . ("spdegabrielle@gmail.com" "m.douglas.williams@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "table-panel" "doc/table-panel@table-panel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/table-panel.txt") (test-failure-log . "server/built/test-fail/table-panel.txt") (test-success-log . #f))) (checksum . "e5994d6b0e11bae486679af2bcfa38442f0e5093") (checksum-error . #f) (collection . "table-panel") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui" "srfi-lib" "scribble-lib" "racket-doc")) (description . "This library provides a table-panel% class that specializes the panel% class to provide a panel that aligns its children to a grid. A simple demonstration program is also provided. Copyright(c) 2008, M. Douglas Williams.") (implies . ()) (modules . ((lib "table-panel/scribblings/table-panel.scrbl") (lib "table-panel/test-table-panel.rkt") (lib "table-panel/main.rkt"))) (name . "table-panel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m.douglas.williams@gmail.com . #t) (author:spdegabrielle@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "http://github.com/spdegabrielle/table-panel/tree/master") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "e5994d6b0e11bae486679af2bcfa38442f0e5093") (source . "git://github.com/spdegabrielle/table-panel") (source_url . "http://github.com/spdegabrielle/table-panel/tree/master"))))))) ("tablesci" . #hasheq((author . "hashim.muqtadir@gmail.com") (authors . ("hashim.muqtadir@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/tablesci.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tablesci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tablesci.txt"))) (checksum . "43c4544d64e9d218acabe167bfa3c894fa6f5f42") (checksum-error . #f) (collection . "tablesci") (conflicts . ()) (date-added . 1586683747) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib")) (description . "A simple, easy to read language for working with (mostly) numbers and (in the near future) tables. ") (implies . ()) (modules . ((lib "tablesci/expander.rkt") (lib "tablesci/tokenizer.rkt") (lib "tablesci/parser.rkt") (lib "tablesci/main.rkt") (lib "tablesci/test-run.rkt") (lib "tablesci/parse-only-test.rkt") (lib "tablesci/lexer.rkt") (lib "tablesci/parse-only.rkt"))) (name . "tablesci") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:hashim.muqtadir@gmail.com . #t) (ring:1 . #t))) (source . "https://gitlab.com/hashimmm/tablesci.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "43c4544d64e9d218acabe167bfa3c894fa6f5f42") (source . "https://gitlab.com/hashimmm/tablesci.git") (source_url . "https://gitlab.com/hashimmm/tablesci.git"))))))) ("tabtree" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabtree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabtree.txt"))) (checksum . "4b53d73ce2c71d6ac5f3ef89c40388f47f3b34ff") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1618757106) (dependencies . ()) (description . "A library to handle files of Tabtree format") (implies . ()) (modules . ()) (name . "tabtree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/tabtree.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4b53d73ce2c71d6ac5f3ef89c40388f47f3b34ff") (source . "https://github.com/prozion/tabtree.git") (source_url . "https://github.com/prozion/tabtree.git"))))))) ("tabular" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabular.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabular.txt"))) (checksum . "b0440d5443f4f0e81dcd7eba4f5709c91b873a3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "htdp-lib")) (description . "Experimental tabular data package") (implies . ()) (modules . ((lib "tabular/main.rkt") (lib "tabular/google.rkt"))) (name . "tabular") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tonyg/racket-tabular/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b0440d5443f4f0e81dcd7eba4f5709c91b873a3b") (source . "git://github.com/tonyg/racket-tabular") (source_url . "http://github.com/tonyg/racket-tabular/tree/master"))))))) ("taglib" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "taglib" "doc/taglib@taglib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taglib.txt") (test-failure-log . "server/built/test-fail/taglib.txt") (test-success-log . #f))) (checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Bindings to the taglib C library, which provides simple access to audio file metadata.") (implies . ()) (modules . ((lib "taglib/main.rkt") (lib "taglib/taglib.rkt") (lib "taglib/scribblings/taglib.scrbl"))) (name . "taglib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "http://github.com/takikawa/taglib-racket/tree/master") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (source . "github://github.com/takikawa/taglib-racket/master") (source_url . "http://github.com/takikawa/taglib-racket/tree/master"))))))) ("talk-typer" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/talk-typer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/talk-typer.txt"))) (checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib")) (description . "A tool to make live coding during talks easier") (implies . ()) (modules . ((lib "talk-typer/private/text.rkt") (lib "talk-typer/tool.rkt"))) (name . "talk-typer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "http://github.com/florence/talk-typer/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (source . "git://github.com/florence/talk-typer") (source_url . "http://github.com/florence/talk-typer/tree/master"))))))) ("tandem" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tandem" "doc/tandem@tandem/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tandem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tandem.txt"))) (checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "racket-doc")) (description . "Cooperative Communication Framework for Racket") (implies . ()) (modules . ((lib "tandem/main.rkt") (lib "tandem/tandem.scrbl"))) (name . "tandem") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-tandem/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (source . "github://github.com/mordae/racket-tandem/master") (source_url . "http://github.com/mordae/racket-tandem/tree/master"))))))) ("taro" . #hasheq((author . "oleks.litus@gmail.com") (authors . ("oleks.litus@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "taro" "doc/taro@taro/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/taro.txt"))) (checksum . "dcc2a251f7e697bf4c8a36347a59c08ed122f5d1") (checksum-error . #f) (collection . "taro") (conflicts . ()) (date-added . 1635222291) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Taro lang") (implies . ()) (modules . ((lib "taro/private/generics.rkt") (lib "taro/main.rkt") (lib "taro/private/define.rkt") (lib "taro/docs/taro.scrbl") (lib "taro/lang/reader.rkt") (lib "taro/private/base.rkt"))) (name . "taro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:oleks.litus@gmail.com . #t) (lang . #t) (ring:1 . #t) (taro . #t))) (source . "https://github.com/orreksu/taro.git#main") (tags . ("lang" "taro")) (versions . #hash((default . #hasheq((checksum . "dcc2a251f7e697bf4c8a36347a59c08ed122f5d1") (source . "https://github.com/orreksu/taro.git#main") (source_url . "https://github.com/orreksu/taro.git#main"))))))) ("taskibble" . #hasheq((author . "hi@that.world") (authors . ("hi@that.world")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taskibble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/taskibble.txt"))) (checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "datalog" "rackunit-lib")) (description . "Fork of Scribble for task management") (implies . ()) (modules . ((lib "taskibble/private/on-demand.rkt") (lib "taskibble/doclang.rkt") (lib "taskibble/pdf-render.rkt") (lib "taskibble/render-struct.rkt") (lib "taskibble/html-properties.rkt") (lib "taskibble/basic.rkt") (lib "taskibble/base.rkt") (lib "taskibble/private/run-pdflatex.rkt") (lib "taskibble/run.rkt") (lib "taskibble/decode.rkt") (lib "taskibble/private/defaults.rkt") (lib "taskibble/private/indirect-renderer.rkt") (lib "taskibble/latex-render.rkt") (lib "taskibble/core.rkt") (lib "taskibble/latex-properties.rkt") (lib "taskibble/doc/lang/reader.rkt") (lib "taskibble/xref.rkt") (lib "taskibble/private/provide-structs.rkt") (lib "taskibble/private/literal-anchor.rkt") (lib "taskibble/struct.rkt") (lib "taskibble/private/qsloc.rkt") (lib "taskibble/decode-struct.rkt") (lib "taskibble/private/render-utils.rkt") (lib "taskibble/latex-prefix.rkt") (lib "taskibble/doc/main.rkt") (lib "taskibble/render.rkt") (lib "taskibble/base-render.rkt") (lib "taskibble/private/serialize.rkt") (lib "taskibble/doclang2.rkt") (lib "taskibble/config.rkt") (lib "taskibble/search.rkt") (lib "taskibble/tag.rkt") (lib "taskibble/extract.rkt"))) (name . "taskibble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:hi@that.world . #t) (ring:1 . #t))) (source . "http://github.com/sorpaas/taskibble/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (source . "git://github.com/sorpaas/taskibble") (source_url . "http://github.com/sorpaas/taskibble/tree/master"))))))) ("tasks" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tasks" "doc/tasks@tasks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tasks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tasks.txt"))) (checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Sugar for sync.") (implies . ()) (modules . ((lib "tasks/tasks.scrbl") (lib "tasks/main.rkt"))) (name . "tasks") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-tasks/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (source . "github://github.com/mordae/racket-tasks/master") (source_url . "http://github.com/mordae/racket-tasks/tree/master"))))))) ("teachpacks" . #hasheq((author . "tyynetyyne@gmail.com") (authors . ("tyynetyyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/teachpacks.txt") (docs . (("main" "racket_turtle" "doc/racket_turtle@teachpacks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/teachpacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/teachpacks.txt"))) (checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (checksum-error . #f) (collection . "teachpacks") (conflicts . ()) (dependencies . ("gui-lib" "base" "htdp-lib" "plot-gui-lib" "plot-lib" "scribble-lib" "scribble-doc" "htdp-doc" "racket-doc")) (description . "Racket Turtle for drawing turtle-graphics.") (implies . ()) (modules . ((lib "teachpacks/plot.rkt") (lib "teachpacks/display-read.rkt") (lib "teachpacks/plot2D.rkt") (lib "teachpacks/display-read-touch.rkt") (lib "teachpacks/doc/racket_turtle_functions.scrbl") (lib "teachpacks/big-crunch.rkt") (lib "teachpacks/doc/racket_turtle_examples.scrbl") (lib "teachpacks/racket-turtle.rkt") (lib "teachpacks/doc/racket_turtle_functionality.scrbl") (lib "teachpacks/doc/racket_turtle.scrbl") (lib "teachpacks/doc/racket_turtle_examples_recursion.scrbl") (lib "teachpacks/plot2.rkt") (lib "teachpacks/game-helper.rkt") (lib "teachpacks/doc/racket_turtle_commands.scrbl") (lib "teachpacks/math-utils.rkt"))) (name . "teachpacks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tyynetyyne@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/tyynetyyne/teachpacks.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (source . "git://github.com/tyynetyyne/teachpacks.git") (source_url . "http://github.com/tyynetyyne/teachpacks.git/tree/master"))))))) ("temp-c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("temp-c-lib" "temp-c-doc")) (description . "temporal contracts") (implies . ("temp-c-lib" "temp-c-doc")) (modules . ()) (name . "temp-c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (source_url . "git://github.com/jeapostrophe/temp-c/?path=temp-c"))))))) ("temp-c-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "temp-c" "doc/temp-c@temp-c-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-doc.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "temp-c") (conflicts . ()) (dependencies . ("base" "temp-c-lib" "scribble-lib" "automata" "racket-doc")) (description . "temporal contracts") (implies . ()) (modules . ((lib "temp-c/scribblings/temp-c.scrbl"))) (name . "temp-c-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-doc") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-doc") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-doc"))))))) ("temp-c-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-lib.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "temp-c") (conflicts . ()) (dependencies . ("base" "automata-lib")) (description . "temporal contracts") (implies . ()) (modules . ((lib "temp-c/dsl.rkt") (lib "temp-c/monitor.rkt"))) (name . "temp-c-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-lib") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-lib") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-lib"))))))) ("temp-c-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-test.txt") (test-failure-log . "server/built/test-fail/temp-c-test.txt") (test-success-log . #f))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . ("base" "temp-c-lib" "eli-tester" "errortrace-lib" "racket-test")) (description . "temporal contracts") (implies . ()) (modules . ((lib "automata/tests/ttt-bench.rkt") (lib "automata/tests/bench-affine.rkt") (lib "automata/tests/ex-mem.rkt") (lib "automata/tests/ex-memclass.rkt") (lib "automata/tests/future-ctc.rkt") (lib "automata/tests/test-temporal-no-call-after-return2.rkt") (lib "automata/tests/ttt-players.rkt") (lib "automata/tests/dr-err.rkt") (lib "automata/tests/ex-matthias-a.rkt") (lib "automata/tests/bench.rkt") (lib "automata/tests/ex-dsl.rkt") (lib "automata/tests/id-bench.rkt") (lib "automata/tests/ex-matthias-ctc.rkt") (lib "automata/tests/ex-matthias.rkt") (lib "automata/tests/ttt-bench-raw.rkt") (lib "automata/tests/ex-con.rkt") (lib "automata/tests/ttt-bench-ctc.rkt") (lib "automata/tests/dr-err-help.rkt") (lib "automata/tests/ex-lock.rkt") (lib "automata/tests/ttt-bench-com.rkt") (lib "automata/tests/ex-matthias-b.rkt") (lib "automata/tests/test-temporal-no-call-after-return.rkt") (lib "automata/tests/ttt.rkt"))) (name . "temp-c-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-test") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-test") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-test"))))))) ("template" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "template" "doc/template@template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/template.txt"))) (checksum . "7e8cd438cdc168b74b1a23721d3410be330de209") (checksum-error . #f) (collection . "template") (conflicts . ()) (date-added . 1575763855) (dependencies . ("base" "debug-scopes" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Template Macros") (implies . ()) (modules . ((lib "template/scribblings/lang-template.rkt") (lib "template/lang.rkt") (lib "template/scribblings/template-includes.rkt") (lib "template/tests/primitives.rkt") (lib "template/tests/module-templates.rkt") (lib "template/main.rkt") (lib "template/tests/scopes.rkt") (lib "template/tests/literals.rkt") (lib "template/tests/combiners.rkt") (lib "template/scribblings/template.scrbl") (lib "template/tests/binding-forms.rkt"))) (name . "template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (macro . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/dedbox/racket-template.git") (tags . ("macro" "template")) (versions . #hash((default . #hasheq((checksum . "7e8cd438cdc168b74b1a23721d3410be330de209") (source . "https://github.com/dedbox/racket-template.git") (source_url . "https://github.com/dedbox/racket-template.git"))))))) ("termconfig" . #hasheq((author . "zacharysdodge@gmail.com") (authors . ("zacharysdodge@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "termconfig" "doc/termconfig@termconfig/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/termconfig.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/termconfig.txt"))) (checksum . "620c2fee9491186fc5faf8a5d2b4c0eb67062657") (checksum-error . #f) (collection . "termconfig") (conflicts . ()) (date-added . 1611358443) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Cross-platform terminal helper library in Racket.") (implies . ()) (modules . ((lib "termconfig/scribblings/termconfig.scrbl") (lib "termconfig/main.rkt") (lib "termconfig/private/unix.rkt") (lib "termconfig/private/windows.rkt") (lib "termconfig/private/common.rkt"))) (name . "termconfig") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zacharysdodge@gmail.com . #t) (helper . #t) (library . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/dodgez/termconfig.git#main") (tags . ("helper" "library" "terminal")) (versions . #hash((default . #hasheq((checksum . "620c2fee9491186fc5faf8a5d2b4c0eb67062657") (source . "https://github.com/dodgez/termconfig.git#main") (source_url . "https://github.com/dodgez/termconfig.git#main"))))))) ("terminal-phase" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/terminal-phase.txt") (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/terminal-phase.txt") (success-log . "server/built/install/terminal-phase.txt") (test-failure-log . "server/built/test-fail/terminal-phase.txt") (test-success-log . #f))) (checksum . "3a67e738793c6db951ee919e15ac6397c63d0791") (checksum-error . #f) (collection . "terminal-phase") (conflicts . ()) (date-added . 1579464975) (dependencies . ("lux" "goblins" "pk" "raart" "ansi")) (description . "Terminal Phase is a space shooter video game that runs in your terminal!") (implies . ()) (modules . ((lib "terminal-phase/sprites.rkt") (lib "terminal-phase/raart-render.rkt") (lib "terminal-phase/pwd.rkt") (lib "terminal-phase/starfield.rkt") (lib "terminal-phase/posinfo.rkt") (lib "terminal-phase/terminal-phase.rkt") (lib "terminal-phase/logo.rkt") (lib "terminal-phase/score.rkt") (lib "terminal-phase/level-tape.rkt") (lib "terminal-phase/main-menu.rkt") (lib "terminal-phase/aim.rkt") (lib "terminal-phase/level.rkt") (lib "terminal-phase/credits.rkt") (lib "terminal-phase/braille-rast.rkt") (lib "terminal-phase/level-const.rkt") (lib "terminal-phase/loopdown.rkt") (lib "terminal-phase/ring-buffer.rkt") (lib "terminal-phase/no-op.rkt"))) (name . "terminal-phase") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:cwebber@dustycloud.org . #t) (game . #t) (games . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/terminal-phase.git") (tags . ("game" "games")) (versions . #hash((default . #hasheq((checksum . "3a67e738793c6db951ee919e15ac6397c63d0791") (source . "https://gitlab.com/dustyweb/terminal-phase.git") (source_url . "https://gitlab.com/dustyweb/terminal-phase.git"))))))) ("termination" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/termination.txt") (test-failure-log . "server/built/test-fail/termination.txt") (test-success-log . #f))) (checksum . "1d05c1bf8e9bd59d2fbaaa213b490fd8e59644bd") (checksum-error . #f) (collection . "termination") (conflicts . ()) (dependencies . ("profile-lib" "r5rs-lib" "rackunit-lib" "base" "typed-racket-lib" "typed-racket-more" "bnf" "set-extras" "unreachable" "traces")) (description . "Dynamic enforcement of size-change termination") (implies . ()) (modules . ((lib "termination/tests/Dyn/acl2-fig-2.rkt") (lib "termination/tests/Dyn/isabelle-foo.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-fact.rkt") (lib "termination/tests/Dyn/isabelle-f.rkt") (lib "termination/tests/Dyn/benchmarks/cm/mergesort.rkt") (lib "termination/tests/Dyn/destruct.rkt") (lib "termination/size-change-graph.rkt") (lib "termination/tests/Dyn/benchmarks/cm/fact.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-5.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-6.rkt") (lib "termination/tests/Dyn/sct-1.rkt") (lib "termination/flow-analysis/analyze.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-gcd.rkt") (lib "termination/tests/Dyn/ho-sct-fg.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/sum.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-1.rkt") (lib "termination/tests/Dyn/dderiv.rkt") (lib "termination/micro-benchmarks.rkt") (lib "termination/unsafe.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-2.rkt") (lib "termination/tests/Dyn/benchmarks/imp/fact.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-sum.rkt") (lib "termination/syntax-utils.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-sum.rkt") (lib "termination/tests/Dyn/nfa.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-4.rkt") (lib "termination/tests/Dyn/ho-sct-fold.rkt") (lib "termination/tests/Dyn/isabelle-perm.rkt") (lib "termination/tests/Dyn/benchmarks/imp/mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-fact.rkt") (lib "termination/tests/Dyn/scheme.rkt") (lib "termination/tests/Dyn/buggy-versions/destruct.rkt") (lib "termination/tests/Dyn/benchmarks/imp/sum.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-fg.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-mergesort.rkt") (lib "termination/tests/Dyn/buggy-versions/div.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-6.rkt") (lib "termination/tests/Dyn/lh-tfact.rkt") (lib "termination/tests/Dyn/lh-range.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-fact.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-range.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-7.rkt") (lib "termination/flow-analysis/lang.rkt") (lib "termination/flow-analysis/main.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-2.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-foo.rkt") (lib "termination/flattened-parameter.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-mergesort.rkt") (lib "termination/tests/Dyn/div.rkt") (lib "termination/apply-with-termination.rkt") (lib "termination/tests/Dyn/sct-5.rkt") (lib "termination/tests/Dyn/buggy-versions/dderiv.rkt") (lib "termination/tests/Dyn/lh-merge.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-fold.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-merge.rkt") (lib "termination/main.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-ack.rkt") (lib "termination/tests/Dyn/deriv.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/fact.rkt") (lib "termination/tests/Dyn/lh-map.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-perm.rkt") (lib "termination/runtime-utils.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-f.rkt") (lib "termination/tests/Dyn/benchmarks/common.rkt") (lib "termination/flow-analysis/utils.rkt") (lib "termination/tests/Dyn/sct-6.rkt") (lib "termination/tests/Dyn/buggy-versions/scheme.rkt") (lib "termination/tests/Dyn/sct-4.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-tfact.rkt") (lib "termination/test.rkt") (lib "termination/tests/Dyn/sct-2.rkt") (lib "termination/tests/Dyn/buggy-versions/deriv.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/cm/sum.rkt") (lib "termination/tests/Dyn/sct-3.rkt") (lib "termination/tests/Dyn/buggy-versions/nfa.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-map.rkt") (lib "termination/flow-analysis/parse.rkt") (lib "termination/tests/Dyn/isabelle-bar.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-sum.rkt") (lib "termination/tests/Dyn/acl2-fig-7.rkt") (lib "termination/tests/Dyn/isabelle-poly.rkt") (lib "termination/tests/Dyn/ho-sct-ack.rkt") (lib "termination/tests/Dyn/lh-gcd.rkt") (lib "termination/tests/Dyn/acl2-fig-6.rkt") (lib "termination/unsafe-apply-with-termination.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-3.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-poly.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-bar.rkt"))) (name . "termination") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (contracts . #t) (ring:1 . #t) (termination . #t))) (source . "https://github.com/philnguyen/termination.git?path=termination") (tags . ("contracts" "termination")) (versions . #hash((default . #hasheq((checksum . "1d05c1bf8e9bd59d2fbaaa213b490fd8e59644bd") (source . "https://github.com/philnguyen/termination.git?path=termination") (source_url . "https://github.com/philnguyen/termination.git?path=termination"))))))) ("termios" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/termios.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to POSIX terminal interface functions") (implies . ()) (modules . ((lib "termios/main.rkt") (lib "termios/defines.rkt") (lib "termios/termios.rkt") (lib "termios/private/install.rkt"))) (name . "termios") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:bprzygoda@gmail.com . #t) (ffi . #t) (linux . #t) (posix . #t) (ring:1 . #t) (termios . #t))) (source . "http://github.com/BartAdv/racket-termios/tree/master") (tags . ("ffi" "linux" "posix" "termios")) (versions . #hash((default . #hasheq((checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (source . "git://github.com/BartAdv/racket-termios") (source_url . "http://github.com/BartAdv/racket-termios/tree/master"))))))) ("tesira" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tesira" "doc/tesira@tesira/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesira.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesira.txt"))) (checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "parser-tools-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Biamp Tesira Client Library") (implies . ()) (modules . ((lib "tesira/util.scrbl") (lib "tesira/tesira.scrbl") (lib "tesira/private/encoding.rkt") (lib "tesira/encoding.rkt") (lib "tesira/telnet.rkt") (lib "tesira/util.rkt") (lib "tesira/mixer.rkt") (lib "tesira/main.rkt"))) (name . "tesira") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-tesira/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (source . "git://github.com/mordae/racket-tesira") (source_url . "http://github.com/mordae/racket-tesira/tree/master"))))))) ("tessellation" . #hasheq((author . "zacromero@posteo.net") (authors . ("zacromero@posteo.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/tessellation.txt") (docs . (("main" "tessellation" "doc/tessellation@tessellation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tessellation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tessellation.txt"))) (checksum . "6f881912eb35592f96539485e7bdd62bdc329528") (checksum-error . #f) (collection . "tessellation") (conflicts . ()) (date-added . 1591432791) (dependencies . ("base" "metapict" "scribble-lib")) (description . "A library to assist in the creation of geometric designs.") (implies . ()) (modules . ((lib "tessellation/example1.rkt") (lib "tessellation/tessellation.rkt") (lib "tessellation/main.rkt") (lib "tessellation/scribblings/tessellation.scrbl"))) (name . "tessellation") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:zacromero@posteo.net . #t) (ring:1 . #t))) (source . "https://github.com/zkry/tessellation.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f881912eb35592f96539485e7bdd62bdc329528") (source . "https://github.com/zkry/tessellation.git") (source_url . "https://github.com/zkry/tessellation.git"))))))) ("tesseract" . #hasheq((author . "lasfter@gmail.com") (authors . ("lasfter@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/tesseract.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/lasfter/tesseracket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Bindings for Google's Tesseract-OCR") (implies . ()) (modules . ((lib "main/tesseracket.rkt"))) (name . "tesseract") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:lasfter@gmail.com . #t) (google . #t) (ocr . #t) (ring:1 . #t) (tesseract . #t))) (source . "http://github.com/lasfter/tesseracket/tree/master") (tags . ("google" "ocr" "tesseract")) (versions . #hash((default . #hasheq((checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (source . "git://github.com/lasfter/tesseracket") (source_url . "http://github.com/lasfter/tesseracket/tree/master"))))))) ("test-more" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/test-more.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/test-more.txt"))) (checksum . "b3df87cf03e8e0216d5453825cc2522c2cb32ea9") (checksum-error . #f) (collection . "test-more") (conflicts . ()) (dependencies . ("base")) (description . "A Racket version of the Perl Test::More module.  As compared to default Racket tests, this:  Shows results for all tests, not just failing ones.  Returns values from tests to simplify conditional tests. Much more flexible approximation testing.  Shorter test names.  Docs are in the README.md") (implies . ()) (modules . ((lib "test-more/tests/test-main.rkt") (lib "test-more/main.rkt"))) (name . "test-more") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (test . #t) (testing . #t))) (source . "https://github.com/dstorrs/racket-test-more.git") (tags . ("test" "testing")) (versions . #hash((default . #hasheq((checksum . "b3df87cf03e8e0216d5453825cc2522c2cb32ea9") (source . "https://github.com/dstorrs/racket-test-more.git") (source_url . "https://github.com/dstorrs/racket-test-more.git"))))))) ("tesurell" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "tesurell"))) (failure-log . "server/built/fail/tesurell.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e4010930062d0741081ddb454d4c749e6754672d") (checksum-error . #f) (collection . "tesurell") (conflicts . ()) (date-added . 1583943202) (dependencies . ("base" "compatibility-lib" "at-exp-lib" "scribble-lib" "racket-doc" "rackunit-lib" "at-exp-lib")) (description . "Tesurell is a Racket-powered markup language that supports inline use of other #langs, including itself. When used as a module, Tesurell acts as sugar for reading and using #langs via input ports.") (implies . ()) (modules . ((lib "tesurell/lib.rkt") (lib "tesurell/scribblings/tesurell.scrbl") (lib "tesurell/main.rkt"))) (name . "tesurell") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:sage@sagegerard.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/tesurell.git") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "e4010930062d0741081ddb454d4c749e6754672d") (source . "https://github.com/zyrolasting/tesurell.git") (source_url . "https://github.com/zyrolasting/tesurell.git"))))))) ("tetris" . #hasheq((author . "mosceo@gmail.com") (authors . ("mosceo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tetris.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tetris.txt"))) (checksum . "bbf9dc58b8b1606f574ebf1a466eeef278689a68") (checksum-error . #f) (collection . "tetris") (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib")) (description . "A colorful version of tetris.") (implies . ()) (modules . ((lib "tetris/main.rkt") (lib "tetris/unittest.rkt") (lib "tetris/tetris.rkt"))) (name . "tetris") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mosceo@gmail.com . #t) (games . #t) (ring:1 . #t) (tetris . #t))) (source . "https://github.com/mosceo/tetris.git") (tags . ("games" "tetris")) (versions . #hash((default . #hasheq((checksum . "bbf9dc58b8b1606f574ebf1a466eeef278689a68") (source . "https://github.com/mosceo/tetris.git") (source_url . "https://github.com/mosceo/tetris.git"))))))) ("texmath" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "texmath" "doc/texmath@texmath/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/texmath.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/texmath.txt"))) (checksum . "9c775542b5473ed6aeedc7c45ecc6726fbd483fc") (checksum-error . #f) (collection . "texmath") (conflicts . ()) (date-added . 1553038358) (dependencies . ("base" "functional-lib" "megaparsack-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "Pseudo-(La)TeX mathematical notation for Scribble") (implies . ()) (modules . ((lib "texmath/scribblings/sample.scrbl") (lib "texmath/scribblings/main.scrbl") (lib "texmath/main.rkt") (lib "texmath/inferrule.rkt"))) (name . "texmath") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (Math . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/dedbox/racket-texmath.git") (tags . ("LaTeX" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "9c775542b5473ed6aeedc7c45ecc6726fbd483fc") (source . "https://github.com/dedbox/racket-texmath.git") (source_url . "https://github.com/dedbox/racket-texmath.git"))))))) ("text-block" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-block" "doc/text-block@text-block/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-block.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-block.txt"))) (checksum . "cdac673c5ce400f7ce7287ff2b5d55fbd709b6e6") (checksum-error . #f) (collection . "text-block") (conflicts . ()) (date-added . 1626249920) (dependencies . ("define2" "base" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib")) (description . "Similar to pict, but for 2d unicode text and math formulas") (implies . ()) (modules . ((lib "text-block/examples/example3.rkt") (lib "text-block/main.rkt") (lib "text-block/scribblings/combiners.scrbl") (lib "text-block/scribblings/main.scrbl") (lib "text-block/scribblings/text.scrbl") (lib "text-block/examples/example2.rkt") (lib "text-block/tests/symbols.rkt") (lib "text-block/scribblings/symbols.scrbl") (lib "text-block/scribblings/datatype.scrbl") (lib "text-block/scribblings/example.rkt") (lib "text-block/scribblings/math.scrbl") (lib "text-block/symbols.rkt") (lib "text-block/text.rkt") (lib "text-block/math.rkt") (lib "text-block/tblock.rkt"))) (name . "text-block") (ring . 1) (search-terms . #hasheq((2D . #t) (:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t) (unicode . #t))) (source . "https://github.com/Metaxal/text-block.git") (tags . ("2D" "math" "unicode")) (versions . #hash((default . #hasheq((checksum . "cdac673c5ce400f7ce7287ff2b5d55fbd709b6e6") (source . "https://github.com/Metaxal/text-block.git") (source_url . "https://github.com/Metaxal/text-block.git"))))))) ("text-date" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-date" "doc/text-date@text-date/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-date.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-date.txt"))) (checksum . "27fcf96cbed87293b7db285f509d3a527855f924") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1633874249) (dependencies . ("base" "scribble-lib" "racket-doc" "gui-lib" "gui-doc")) (description . "Widget for Racket/gui for date enter\r\n\r\n") (implies . ()) (modules . ((lib "text-date/main.rkt") (lib "text-date/text-date.scrbl") (lib "text-date/date.rkt"))) (name . "text-date") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (date . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/text-date.git") (tags . ("date" "gui")) (versions . #hash((default . #hasheq((checksum . "27fcf96cbed87293b7db285f509d3a527855f924") (source . "https://github.com/Kalimehtar/text-date.git") (source_url . "https://github.com/Kalimehtar/text-date.git"))))))) ("text-table" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-table" "doc/text-table@text-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-table.txt"))) (checksum . "35fb68b28a3e3cfd7dc9cc394aa9f96d051b020b") (checksum-error . #f) (collection . "text-table") (conflicts . ()) (date-added . 1638266111) (dependencies . ("base" "rackunit" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple package to display text tables with unicode frames.") (implies . ()) (modules . ((lib "text-table/tests/utils.rkt") (lib "text-table/tests/table.rkt") (lib "text-table/scribblings/text-table.scrbl") (lib "text-table/main.rkt") (lib "text-table/utils.rkt"))) (name . "text-table") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (format . #t) (ring:1 . #t) (tabular . #t) (text . #t) (unicode . #t))) (source . "https://github.com/Metaxal/text-table.git#master") (tags . ("format" "tabular" "text" "unicode")) (versions . #hash((default . #hasheq((checksum . "35fb68b28a3e3cfd7dc9cc394aa9f96d051b020b") (source . "https://github.com/Metaxal/text-table.git#master") (source_url . "https://github.com/Metaxal/text-table.git#master"))))))) ("the-unicoder" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "the-unicoder" "doc/the-unicoder@the-unicoder/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/the-unicoder.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/the-unicoder.txt"))) (checksum . "c95473838a9f0893b1d39742b087203f702a540c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151880) (dependencies . ("base" "gui-lib" "unix-socket-lib" "tex-table" "basedir" "scribble-lib" "racket-doc")) (description . "Universal unicode input system") (implies . ()) (modules . ((lib "the-unicoder/server.rkt") (lib "the-unicoder/the-unicoder.scrbl") (lib "the-unicoder/user-tables.rkt") (lib "the-unicoder/main.rkt") (lib "the-unicoder/parse-unicode-data.rkt") (lib "the-unicoder/config.rkt") (lib "the-unicoder/misc-tables.rkt") (lib "the-unicoder/client.rkt") (lib "the-unicoder/prompter.rkt"))) (name . "the-unicoder") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (unicode . #t))) (source . "https://github.com/willghatch/the-unicoder.git") (tags . ("unicode")) (versions . #hash((default . #hasheq((checksum . "c95473838a9f0893b1d39742b087203f702a540c") (source . "https://github.com/willghatch/the-unicoder.git") (source_url . "https://github.com/willghatch/the-unicoder.git"))))))) ("this-and-that" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "chipmunk"))) (failure-log . "server/built/fail/this-and-that.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Small useful bits and pieces.") (implies . ()) (modules . ((lib "this-and-that/readtable/test2.rkt") (lib "this-and-that/brevity/brevity.rkt") (lib "this-and-that/snoopy/2d-tree.rkt") (lib "this-and-that/readers/read-number.rkt") (lib "this-and-that/tmp/racket-chipmunk/2d-tree.rkt") (lib "this-and-that/tmp/racket-chipmunk/1d-tree.rkt") (lib "this-and-that/readtable/mv-parser.rkt") (lib "this-and-that/readtable/lang/reader.rkt") (lib "this-and-that/tmp/racket-chipmunk/racket-chipmunk.rkt") (lib "this-and-that/readtable/lang/parse-reader-spec.rkt") (lib "this-and-that/brevity/terse-hash.rkt") (lib "this-and-that/heart-beat/in-effect.rkt") (lib "this-and-that/memoize/memo.rkt") (lib "this-and-that/racket-poppler/racket-poppler.rkt") (lib "this-and-that/lexer/lexer.rkt") (lib "this-and-that/snoopy/kd-tree.rkt") (lib "this-and-that/declare/declare.rkt") (lib "this-and-that/heart-beat/in-heart-beat.rkt") (lib "this-and-that/spell-checker/spell-checker.rkt") (lib "this-and-that/snoopy/1d-tree.rkt") (lib "this-and-that/readtable/lang/converter.rkt") (lib "this-and-that/readtable/test.rkt") (lib "this-and-that/split-between.rkt") (lib "this-and-that/snoopy/racket-chipmunk.rkt") (lib "this-and-that/tmp/chipmunk/main.rkt") (lib "this-and-that/snoopy/1d-range-searching.rkt") (lib "this-and-that/readtable/pratt.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.scrbl") (lib "this-and-that/updatable-struct/updatable-struct.rkt") (lib "this-and-that/readtable/test-clojure-maps.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.rkt") (lib "this-and-that/readtable/lang/read-and-read-syntax.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk-ffi.rkt") (lib "this-and-that/readtable/lang/pratt-parser.rkt") (lib "this-and-that/memoize/test-memo.rkt") (lib "this-and-that/readtable/test-parser.rkt"))) (name . "this-and-that") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/this-and-that/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (source . "github://github.com/soegaard/this-and-that/master") (source_url . "http://github.com/soegaard/this-and-that/tree/master"))))))) ("thread-utils" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thread-utils" "doc/thread-utils@thread-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thread-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thread-utils.txt"))) (checksum . "f81ebfaf8453acb3a938917c1a505c94af92ef87") (checksum-error . #f) (collection . "thread-utils") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Error-safe infinite loop and until-timeout") (implies . ()) (modules . ((lib "thread-utils/scribblings/thread-utils.scrbl") (lib "thread-utils/main.rkt"))) (name . "thread-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (concurrency . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/Kalimehtar/thread-utils.git") (tags . ("concurrency" "utilities")) (versions . #hash((default . #hasheq((checksum . "f81ebfaf8453acb3a938917c1a505c94af92ef87") (source . "https://github.com/Kalimehtar/thread-utils.git") (source_url . "https://github.com/Kalimehtar/thread-utils.git"))))))) ("thread-with-id" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thread-with-id" "doc/thread-with-id@thread-with-id/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thread-with-id.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thread-with-id.txt"))) (checksum . "0b5908a810b710bae7a8e0bc89f6468c81d12f92") (checksum-error . #f) (collection . "thread-with-id") (conflicts . ()) (date-added . 1591302129) (dependencies . ("base" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Provides  'thread-id' (parameter containing a randomly-chosen string identifier for the current thread) and 'thread-with-id' (function that takes a thunk and runs it in a new thread with a new randomly-generated ID.  thread IDs are strings of the form \"thread-{random number}\".") (implies . ()) (modules . ((lib "thread-with-id/scribblings/thread-with-id.scrbl") (lib "thread-with-id/main.rkt"))) (name . "thread-with-id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/dstorrs/thread-with-id.git") (tags . ("threading")) (versions . #hash((default . #hasheq((checksum . "0b5908a810b710bae7a8e0bc89f6468c81d12f92") (source . "https://github.com/dstorrs/thread-with-id.git") (source_url . "https://github.com/dstorrs/thread-with-id.git"))))))) ("threading" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading.txt"))) (checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("threading-doc" "threading-lib")) (description . "") (implies . ("threading-doc" "threading-lib")) (modules . ()) (name . "threading") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/threading/tree/master?path=threading") (tags . ()) (versions . #hash((default . #hasheq((checksum . "199c8e240146baf3ef2ef2838d7d9e242b90be4e") (source . "git://github.com/lexi-lambda/threading?path=threading") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading"))))))) ("threading-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "threading" "doc/threading@threading-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-doc.txt"))) (checksum . "199c8e240146baf3ef2ef2838d7d9e242b90be4e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "threading-lib")) (description . "documentation (no implementation) for “threading”") (implies . ()) (modules . ((lib "scribblings/threading.scrbl"))) (name . "threading-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "199c8e240146baf3ef2ef2838d7d9e242b90be4e") (source . "git://github.com/lexi-lambda/threading?path=threading-doc") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc"))))))) ("threading-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-lib.txt"))) (checksum . "199c8e240146baf3ef2ef2838d7d9e242b90be4e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) for “threading”") (implies . ()) (modules . ((lib "threading/main.rkt"))) (name . "threading-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "199c8e240146baf3ef2ef2838d7d9e242b90be4e") (source . "git://github.com/lexi-lambda/threading?path=threading-lib") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib"))))))) ("thrift" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thrift" "doc/thrift@thrift/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thrift.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thrift.txt"))) (checksum . "bbed34e6af97167ec5e9327c7c6ad739e331e793") (checksum-error . #f) (collection . "thrift") (conflicts . ()) (dependencies . ("base" "http" "unix-socket-lib" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Support for the Apache Thrift messaging framework") (implies . ()) (modules . ((lib "thrift/private/literals.rkt") (lib "thrift/scribblings/processor.scrbl") (lib "thrift/exn-common.rkt") (lib "thrift/protocol/sexpression.rkt") (lib "thrift/tests/private.rkt") (lib "thrift/scribblings/idl.scrbl") (lib "thrift/scribblings/transport.scrbl") (lib "thrift/common.rkt") (lib "thrift/private/protocol.rkt") (lib "thrift/transport/file.rkt") (lib "thrift/private/struct-enumeration.rkt") (lib "thrift/idl/language.rkt") (lib "thrift/idl/generator.rkt") (lib "thrift/tests/test-doc-complete.rkt") (lib "thrift/tests/transport.rkt") (lib "thrift/scribblings/thrift.scrbl") (lib "thrift/protocol/json.rkt") (lib "thrift/transport/buffered.rkt") (lib "thrift/tests/idl.rkt") (lib "thrift/private/logging.rkt") (lib "thrift/main.rkt") (lib "thrift/private/enumeration.rkt") (lib "thrift/tests/protocol.rkt") (lib "thrift/private/bytedebug.rkt") (lib "thrift/protocol/decoding.rkt") (lib "thrift/protocol/multiplexed.rkt") (lib "thrift/transport/exn-common.rkt") (lib "thrift/protocol/encoding.rkt") (lib "thrift/scribblings/architecture.scrbl") (lib "thrift/private/transport.rkt") (lib "thrift/protocol/binary.rkt") (lib "thrift/transport/common.rkt") (lib "thrift/transport/console.rkt") (lib "thrift/processor/common.rkt") (lib "thrift/tests/processor.rkt") (lib "thrift/transport/serializer.rkt") (lib "thrift/transport/socket.rkt") (lib "thrift/protocol/exn-common.rkt") (lib "thrift/protocol/common.rkt") (lib "thrift/idl/common.rkt") (lib "thrift/scribblings/protocol.scrbl") (lib "thrift/transport/memory.rkt") (lib "thrift/protocol/compact.rkt"))) (name . "thrift") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (data . #t) (ml . #t) (ring:1 . #t) (rpc . #t))) (source . "https://github.com/johnstonskj/racket-thrift.git") (tags . ("data" "ml" "rpc")) (versions . #hash((default . #hasheq((checksum . "bbed34e6af97167ec5e9327c7c6ad739e331e793") (source . "https://github.com/johnstonskj/racket-thrift.git") (source_url . "https://github.com/johnstonskj/racket-thrift.git"))))))) ("timable" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "timable" "doc/timable@timable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/timable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/timable.txt"))) (checksum . "873950a99dbc5dd036147c55185b8376347bca88") (checksum-error . #f) (collection . "timable") (conflicts . ()) (date-added . 1574155795) (dependencies . ("base" "srfi" "gregor" "db" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "extend racket's various time libs and make them be able to work together more smoothly.") (implies . ()) (modules . ((lib "timable/scribblings/gregor.scrbl") (lib "timable/scribblings/srfi-19.scrbl") (lib "timable/srfi.rkt") (lib "timable/convert.rkt") (lib "timable/main.rkt") (lib "timable/gregor.rkt") (lib "timable/scribblings/timable.scrbl"))) (name . "timable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (date . #t) (datetime . #t) (gregor . #t) (ring:1 . #t) (srfi-19 . #t) (time . #t))) (source . "https://github.com/yanyingwang/timable.git") (tags . ("date" "datetime" "gregor" "srfi-19" "time")) (versions . #hash((default . #hasheq((checksum . "873950a99dbc5dd036147c55185b8376347bca88") (source . "https://github.com/yanyingwang/timable.git") (source_url . "https://github.com/yanyingwang/timable.git"))))))) ("tinybasic" . #hasheq((author . "racket@winny.tech") (authors . ("racket@winny.tech")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/tinybasic.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tinybasic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tinybasic.txt"))) (checksum . "dae05174341f31d514cc822a7ca81c138791656f") (checksum-error . #f) (collection . "tinybasic") (conflicts . ()) (date-added . 1658513955) (dependencies . ("tinybasic-lib" "tinybasic-doc" "tinybasic-examples")) (description . "TinyBASIC (Install this package for all goodies)") (implies . ()) (modules . ()) (name . "tinybasic") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:racket@winny.tech . #t) (basic . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic") (tags . ("basic" "lang" "language")) (versions . #hash((default . #hasheq((checksum . "dae05174341f31d514cc822a7ca81c138791656f") (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic") (source_url . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic"))))))) ("tinybasic-doc" . #hasheq((author . "racket@winny.tech") (authors . ("racket@winny.tech")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tinybasic" "doc/tinybasic@tinybasic-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tinybasic-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tinybasic-doc.txt"))) (checksum . "dae05174341f31d514cc822a7ca81c138791656f") (checksum-error . #f) (collection . "tinybasic") (conflicts . ()) (date-added . 1658823068) (dependencies . ("base" "scribble-lib" "tinybasic-lib" "racket-doc")) (description . "TinyBASIC (Documentation only)") (implies . ()) (modules . ((lib "tinybasic/scribblings/tinybasic.scrbl"))) (name . "tinybasic-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@winny.tech . #t) (basic . #t) (docs . #t) (documentation . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-doc") (tags . ("basic" "docs" "documentation" "lang" "language")) (versions . #hash((default . #hasheq((checksum . "dae05174341f31d514cc822a7ca81c138791656f") (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-doc") (source_url . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-doc"))))))) ("tinybasic-examples" . #hasheq((author . "racket@winny.tech") (authors . ("racket@winny.tech")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/tinybasic-examples.txt") (success-log . "server/built/install/tinybasic-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tinybasic-examples.txt"))) (checksum . "dae05174341f31d514cc822a7ca81c138791656f") (checksum-error . #f) (collection . "tinybasic") (conflicts . ()) (date-added . 1658821438) (dependencies . ("base" "tinybasic-lib")) (description . "TinyBASIC (Examples only)") (implies . ()) (modules . ((lib "tinybasic/examples/hello.rkt") (lib "tinybasic/examples/pascals-triangle.rkt") (lib "tinybasic/examples/guess-number.rkt") (lib "tinybasic/examples/fizzbuzz.rkt") (lib "tinybasic/examples/logo.rkt") (lib "tinybasic/examples/quine.rkt"))) (name . "tinybasic-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (basic . #t) (examples . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-examples") (tags . ("basic" "examples" "lang" "language")) (versions . #hash((default . #hasheq((checksum . "dae05174341f31d514cc822a7ca81c138791656f") (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-examples") (source_url . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-examples"))))))) ("tinybasic-lib" . #hasheq((author . "racket@winny.tech") (authors . ("racket@winny.tech")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tinybasic-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tinybasic-lib.txt"))) (checksum . "dae05174341f31d514cc822a7ca81c138791656f") (checksum-error . #f) (collection . "tinybasic") (conflicts . ()) (date-added . 1658821376) (dependencies . ("base" "parser-tools-lib" "readline-lib")) (description . "TinyBASIC (Implementation)") (implies . ()) (modules . ((lib "tinybasic/lang/reader.rkt") (lib "tinybasic/main.rkt") (lib "tinybasic/private/eval.rkt") (lib "tinybasic/private/types.rkt") (lib "tinybasic/private/parser.rkt"))) (name . "tinybasic-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (basic . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-lib") (tags . ("basic" "lang" "language")) (versions . #hash((default . #hasheq((checksum . "dae05174341f31d514cc822a7ca81c138791656f") (source . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-lib") (source_url . "https://github.com/winny-/tinybasic.rkt.git?path=tinybasic-lib"))))))) ("tjson" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tjson" "doc/tjson@tjson/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tjson.txt") (test-failure-log . "server/built/test-fail/tjson.txt") (test-success-log . #f))) (checksum . "b8471434b51592d3fcab819bb203380c8ede5de3") (checksum-error . #f) (collection . "tjson") (conflicts . ()) (dependencies . ("base" "typed-racket-more" "typed-racket-lib" "scribble-lib" "sandbox-lib" "racket-doc" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc")) (description . "Basic Typed Racket Json Parser and Emitter") (implies . ()) (modules . ((lib "tjson/scribblings/tjson.scrbl") (lib "tjson/main.rkt"))) (name . "tjson") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (emitter . #t) (json . #t) (parser . #t) (ring:1 . #t) (searialization . #t) (typed . #t))) (source . "https://gitlab.com/RayRacine/tjson.git") (tags . ("emitter" "json" "parser" "searialization" "typed")) (versions . #hash((default . #hasheq((checksum . "b8471434b51592d3fcab819bb203380c8ede5de3") (source . "https://gitlab.com/RayRacine/tjson.git") (source_url . "https://gitlab.com/RayRacine/tjson.git"))))))) ("tmux-vim-demo" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tmux-vim-demo" "doc/tmux-vim-demo@tmux-vim-demo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tmux-vim-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tmux-vim-demo.txt"))) (checksum . "47120f96eb31e0466769c64dae04ccae22850286") (checksum-error . #f) (collection . "tmux-vim-demo") (conflicts . ()) (date-added . 1639437868) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A #lang for writing and running scripted demos with tmux and vim") (implies . ()) (modules . ((lib "tmux-vim-demo/main.rkt") (lib "tmux-vim-demo/scribblings/tmux-vim-demo.scrbl"))) (name . "tmux-vim-demo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (demos . #t) (lang . #t) (ring:1 . #t) (tmux . #t) (vim . #t))) (source . "https://github.com/benknoble/tmux-vim-demo.git#main") (tags . ("demos" "lang" "tmux" "vim")) (versions . #hash((default . #hasheq((checksum . "47120f96eb31e0466769c64dae04ccae22850286") (source . "https://github.com/benknoble/tmux-vim-demo.git#main") (source_url . "https://github.com/benknoble/tmux-vim-demo.git#main"))))))) ("todo-list" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "todo-list" "doc/todo-list@todo-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/todo-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/todo-list.txt"))) (checksum . "589e9c8f58f4684eae64d3254bdbad0b1bcaae39") (checksum-error . #f) (collection . "todo-list") (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "A list of goals + interactive commands for solving them in DrRacket") (implies . ()) (modules . ((lib "todo-list/test-command.rkt") (lib "todo-list/private/expansion-handler.rkt") (lib "todo-list/tool.rkt") (lib "todo-list/main.rkt") (lib "todo-list/private/syntax-info.rkt") (lib "todo-list/scribblings/todo-list.scrbl") (lib "todo-list/demo.rkt") (lib "todo-list/private/goal-info.rkt"))) (name . "todo-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (drracket . #t) (editing . #t) (ring:1 . #t))) (source . "https://github.com/david-christiansen/todo-list.git") (tags . ("drracket" "editing")) (versions . #hash((default . #hasheq((checksum . "589e9c8f58f4684eae64d3254bdbad0b1bcaae39") (source . "https://github.com/david-christiansen/todo-list.git") (source_url . "https://github.com/david-christiansen/todo-list.git"))))))) ("todo-txt" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "todo-txt" "doc/todo-txt@todo-txt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/todo-txt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/todo-txt.txt"))) (checksum . "cab12c9d480d16fdc1447caa55b50fff4a59bcdc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621978320) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "al2-test-runner" "raco-exe-multitarget")) (description . "Parser and report generator for the todo.txt format ( https://github.com/todotxt/todo.txt )") (implies . ()) (modules . ((lib "file/todo-txt/private/task-group.rkt") (lib "file/todo-txt.rkt") (lib "file/todoreport.rkt") (lib "file/todo-txt/scribblings/todo-txt.scrbl") (lib "file/todoreport/private/cli.rkt") (lib "file/todo-txt/private/task.rkt"))) (name . "todo-txt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sschwarzer@sschwarzer.net . #t) (file . #t) (format . #t) (ring:1 . #t) (todotxt . #t))) (source . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.5.0") (tags . ("file" "format" "todotxt")) (versions . #hash((default . #hasheq((checksum . "cab12c9d480d16fdc1447caa55b50fff4a59bcdc") (source . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.5.0") (source_url . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.5.0"))))))) ("tomato-timer" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tomato-timer" "doc/tomato-timer@tomato-timer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tomato-timer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tomato-timer.txt"))) (checksum . "9767fc30bd449c6020f8bda8c69a4e9c788a4344") (checksum-error . #f) (collection . "tomato-timer") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Command-line timer") (implies . ()) (modules . ((lib "tomato-timer/docs/tomato-timer.scrbl") (lib "tomato-timer/main.rkt"))) (name . "tomato-timer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/bennn/tomato-timer/tree/master") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "9767fc30bd449c6020f8bda8c69a4e9c788a4344") (source . "git://github.com/bennn/tomato-timer") (source_url . "http://github.com/bennn/tomato-timer/tree/master"))))))) ("toml" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/toml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/toml.txt"))) (checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1657125981) (dependencies . ("toml-lib" "toml-compliance" "base")) (description . "TOML Library (Install this for all TOML goodies)") (implies . ()) (modules . ()) (name . "toml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (parser . #t) (ring:1 . #t) (toml . #t))) (source . "https://github.com/winny-/toml-racket.git?path=toml") (tags . ("parser" "toml")) (versions . #hash((default . #hasheq((checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (source . "https://github.com/winny-/toml-racket.git?path=toml") (source_url . "https://github.com/winny-/toml-racket.git?path=toml"))))))) ("toml-compliance" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/toml-compliance.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/toml-compliance.txt"))) (checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (checksum-error . #f) (collection . "toml") (conflicts . ()) (date-added . 1657245961) (dependencies . ("toml-lib" "base")) (description . "Toml Library (scripts to drive toml-test compliance suite)") (implies . ()) (modules . ((lib "toml/compliance/decoder.rkt"))) (name . "toml-compliance") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (parser . #t) (ring:1 . #t) (testing . #t) (toml . #t))) (source . "https://github.com/winny-/toml-racket.git?path=toml-compliance") (tags . ("parser" "testing" "toml")) (versions . #hash((default . #hasheq((checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (source . "https://github.com/winny-/toml-racket.git?path=toml-compliance") (source_url . "https://github.com/winny-/toml-racket.git?path=toml-compliance"))))))) ("toml-lib" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/toml-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/toml-lib.txt"))) (checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (checksum-error . #f) (collection . "toml") (conflicts . ()) (date-added . 1657245681) (dependencies . ("base" "parsack-lib" "at-exp-lib" "rackunit-lib")) (description . "TOML Library (library component)") (implies . ()) (modules . ((lib "toml/private/stx.rkt") (lib "toml/private/tests/test-ws-comments.rkt") (lib "toml/private/tests/test-parse-toml.rkt") (lib "toml/private/misc.rkt") (lib "toml/private/parsack.rkt") (lib "toml/private/parsers/main.rkt") (lib "toml/private/parsers/literals.rkt") (lib "toml/private/tests/test-literals.rkt") (lib "toml/private/tests/test-table.rkt") (lib "toml/main.rkt") (lib "toml/private/parsers/shared.rkt") (lib "toml/private/parsers/ws-comments.rkt") (lib "toml/private/tests/test-shared.rkt"))) (name . "toml-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (lib . #t) (parser . #t) (ring:1 . #t) (toml . #t))) (source . "https://github.com/winny-/toml-racket.git?path=toml-lib") (tags . ("lib" "parser" "toml")) (versions . #hash((default . #hasheq((checksum . "6faefadfd8d873c53adb12b1f955dc8f75c79fe4") (source . "https://github.com/winny-/toml-racket.git?path=toml-lib") (source_url . "https://github.com/winny-/toml-racket.git?path=toml-lib"))))))) ("tool-lib" . #hasheq((author . "racket@winny.tech") (authors . ("racket@winny.tech")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/tool-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d7bdc187ab5edb6bf2176930d5ab0758c9bf9c7d") (checksum-error . #f) (collection . "tool") (conflicts . ()) (date-added . 1661650953) (dependencies . ("base" "dirname" "ansi-color" "threading-lib")) (description . "Opinionated framework for writing tools in Racket") (implies . ()) (modules . ((lib "tool/syslog.rkt") (lib "tool/logging.rkt") (lib "tool/shell.rkt") (lib "tool/values.rkt") (lib "tool/main.rkt"))) (name . "tool-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@winny.tech . #t) (command-line . #t) (commandline . #t) (framework . #t) (library . #t) (ring:1 . #t))) (source . "https://github.com/winny-/tool.git?path=src%2Ftool-lib") (tags . ("command-line" "commandline" "framework" "library")) (versions . #hash((default . #hasheq((checksum . "d7bdc187ab5edb6bf2176930d5ab0758c9bf9c7d") (source . "https://github.com/winny-/tool.git?path=src%2Ftool-lib") (source_url . "https://github.com/winny-/tool.git?path=src%2Ftool-lib"))))))) ("towers" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers.txt"))) (checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1645288138) (dependencies . ("base" "gui-lib" "net-lib" "bazaar" "towers-lib")) (description . "The GUI client interface for the Towers game.") (implies . ()) (modules . ((lib "towers/main.rkt") (lib "towers/gui.rkt") (lib "towers/replay.rkt") (lib "towers/controller.rkt") (lib "towers/player-alpha-beta-gui.rkt") (lib "towers/graphics.rkt") (lib "towers/frame.rkt") (lib "towers/base.rkt"))) (name . "towers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (game . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers") (tags . ("app" "game" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (source . "https://github.com/Metaxal/towers.git?path=towers") (source_url . "https://github.com/Metaxal/towers.git?path=towers"))))))) ("towers-lib" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-lib.txt"))) (checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "bazaar" "text-table")) (description . "Library for the Towers game.") (implies . ()) (modules . ((lib "towers-lib/player.rkt") (lib "towers-lib/player-ai-base.rkt") (lib "towers-lib/player-alpha-beta.rkt") (lib "towers-lib/game.rkt") (lib "towers-lib/player-base.rkt") (lib "towers-lib/file.rkt") (lib "towers-lib/rules.rkt") (lib "towers-lib/base.rkt") (lib "towers-lib/player-ai1.rkt") (lib "towers-lib/connection.rkt"))) (name . "towers-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (source_url . "https://github.com/Metaxal/towers.git?path=towers-lib"))))))) ("towers-server" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-server.txt"))) (checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "web-server-lib" "bazaar" "towers-lib")) (description . "The server for the Towers game. Not required to play.") (implies . ()) (modules . ((lib "towers-server/server.rkt") (lib "towers-server/db.rkt") (lib "towers-server/main.rkt"))) (name . "towers-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t) (server . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-server") (tags . ("games" "server")) (versions . #hash((default . #hasheq((checksum . "e6777c9259ab3dc687d3614d783316a2490438f2") (source . "https://github.com/Metaxal/towers.git?path=towers-server") (source_url . "https://github.com/Metaxal/towers.git?path=towers-server"))))))) ("tr-immutable" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tr-immutable" "doc/tr-immutable@tr-immutable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tr-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tr-immutable.txt"))) (checksum . "218e8862718327696b2a7cd2e1ae82800a653306") (checksum-error . #f) (collection . "tr-immutable") (conflicts . ()) (date-added . 1614799548) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Helpers to write macros using typed/racket at phase 1. Heavily unstable, WIP, experimental, not documented yet. I'm currently dogfooding this to work out the best strategy.") (implies . ()) (modules . ((lib "tr-immutable/typed-syntax/typed-prefab-declarations.rkt") (lib "tr-immutable/private/unsafe.rkt") (lib "tr-immutable/test/test-vector.rkt") (lib "tr-immutable/scribblings/tr-immutable.scrbl") (lib "tr-immutable/typed-syntax/typed-syntax-convert2.rkt") (lib "tr-immutable/main.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-predicate.rkt") (lib "tr-immutable/typed-syntax/typed-pairof-predicate.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-convert.rkt") (lib "tr-immutable/typed-syntax.rkt"))) (name . "tr-immutable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (typed-racket . #t) (unstable . #t))) (source . "https://github.com/jsmaniac/tr-immutable.git#main") (tags . ("experimental" "syntax" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "218e8862718327696b2a7cd2e1ae82800a653306") (source . "https://github.com/jsmaniac/tr-immutable.git#main") (source_url . "https://github.com/jsmaniac/tr-immutable.git#main"))))))) ("traces" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/traces.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/traces.txt") (test-failure-log . "server/built/test-fail/traces.txt") (test-success-log . #f))) (checksum . "de08fadc1b1d73362c7b6d83f0dd9a4c9dc36743") (checksum-error . #f) (collection . "traces") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "redex-gui-lib")) (description . "Tracing utilities for functions and hash-tables, similar to `traces` from `redex`") (implies . ()) (modules . ((lib "traces/main.rkt") (lib "traces/typed.rkt") (lib "traces/test.rkt"))) (name . "traces") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (debugging . #t) (graph . #t) (ring:1 . #t) (traces . #t))) (source . "https://github.com/philnguyen/traces.git?path=traces") (tags . ("debugging" "graph" "traces")) (versions . #hash((default . #hasheq((checksum . "de08fadc1b1d73362c7b6d83f0dd9a4c9dc36743") (source . "https://github.com/philnguyen/traces.git?path=traces") (source_url . "https://github.com/philnguyen/traces.git?path=traces"))))))) ("treap" . #hasheq((author . "snwhiteh@uwaterloo.ca") (authors . ("snwhiteh@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/treap.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/treap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/treap.txt"))) (checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Balanced binary search trees implemented through treaps") (implies . ()) (modules . ((lib "treap/treap.rkt"))) (name . "treap") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:snwhiteh@uwaterloo.ca . #t) (ring:1 . #t))) (source . "http://github.com/spencereir/treap/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (source . "git://github.com/spencereir/treap") (source_url . "http://github.com/spencereir/treap/tree/master"))))))) ("trivial" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "trivial" "doc/trivial@trivial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/trivial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/trivial.txt"))) (checksum . "c8fb9dcc377d1bf40ca167e34072bec90d2651e1") (checksum-error . #f) (collection . "trivial") (conflicts . ()) (dependencies . ("base" "db-lib" "plot-lib" "rackunit-lib" "reprovide-lang" "scribble-lib" "typed-racket-lib" "typed-racket-more" "at-exp-lib" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc" "typed-racket-doc" "scribble-lib")) (description . "type-tailored standard library functions") (implies . ()) (modules . ((lib "trivial/no-colon.rkt") (lib "trivial/private/tailoring.rkt") (lib "trivial/regexp.rkt") (lib "trivial/private/db/schema.rkt") (lib "trivial/define.rkt") (lib "trivial/vector.rkt") (lib "trivial/scribblings/using-tailorings.scrbl") (lib "trivial/list.rkt") (lib "trivial/private/db/postgres.rkt") (lib "trivial/private/list.rkt") (lib "trivial/tailoring.rkt") (lib "trivial/private/string.rkt") (lib "trivial/private/sequence-domain.rkt") (lib "trivial/private/common.rkt") (lib "trivial/private/integer.rkt") (lib "trivial/private/raco-command.rkt") (lib "trivial/private/vector.rkt") (lib "trivial/private/db.rkt") (lib "trivial/string.rkt") (lib "trivial/format.rkt") (lib "trivial/scribblings/defining-tailorings.scrbl") (lib "trivial/private/db/query.rkt") (lib "trivial/integer.rkt") (lib "trivial/private/format.rkt") (lib "trivial/function.rkt") (lib "trivial/private/regexp.rkt") (lib "trivial/scribblings/trivial.scrbl") (lib "trivial/private/function.rkt") (lib "trivial/main.rkt") (lib "trivial/private/define.rkt") (lib "trivial/private/test-common.rkt"))) (name . "trivial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/bennn/trivial.git?path=trivial") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "c8fb9dcc377d1bf40ca167e34072bec90d2651e1") (source . "https://github.com/bennn/trivial.git?path=trivial") (source_url . "https://github.com/bennn/trivial.git?path=trivial"))))))) ("try" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try" "doc/try@try/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try.txt"))) (checksum . "b73f3053ac6930443bbbc6a12cfd947e1b4d9413") (checksum-error . #f) (collection . "try") (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A Typed Racket Try datatype and routines for computations that throw exceptions.") (implies . ()) (modules . ((lib "try/main.rkt") (lib "try/scribblings/try.scrbl"))) (name . "try") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (datatype . #t) (exceptions . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/try.git") (tags . ("datatype" "exceptions")) (versions . #hash((default . #hasheq((checksum . "b73f3053ac6930443bbbc6a12cfd947e1b4d9413") (source . "https://gitlab.com/RayRacine/try.git") (source_url . "https://gitlab.com/RayRacine/try.git"))))))) ("try-catch" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-catch" "doc/try-catch@try-catch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch.txt"))) (checksum . "878adb4d3e7ae9af320f0331a67ddedea9b4746e") (checksum-error . #f) (collection . "try-catch") (conflicts . ()) (date-added . 1632501327) (dependencies . ("base" "syntax-classes-lib" "racket-doc" "scribble-lib" "rackunit-lib" "sandbox-lib")) (description . "Exception handling (with-handlers) and flow control guarantees  (dynamic-wind) with code shared between the dynamic-wind clauses and a final cleanup phase.") (implies . ()) (modules . ((lib "try-catch/scribblings/try-catch.scrbl") (lib "try-catch/main.rkt"))) (name . "try-catch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (exceptions . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/try-catch.git") (tags . ("exceptions")) (versions . #hash((default . #hasheq((checksum . "878adb4d3e7ae9af320f0331a67ddedea9b4746e") (source . "https://github.com/dstorrs/try-catch.git") (source_url . "https://github.com/dstorrs/try-catch.git"))))))) ("try-catch-finally" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-catch-finally" "doc/try-catch-finally@try-catch-finally/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-finally.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-finally.txt"))) (checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (checksum-error . #f) (collection . "try-catch-finally") (conflicts . ()) (date-added . 1627413398) (dependencies . ("base" "try-catch-finally-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Tests and Docs for try-catch-finally-lib") (implies . ("try-catch-finally-lib")) (modules . ((lib "try-catch-finally/scribblings/try-catch-finally.scrbl") (lib "try-catch-finally/try-catch-finally-test.rkt"))) (name . "try-catch-finally") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (exceptions . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally") (tags . ("exceptions" "sugar")) (versions . #hash((default . #hasheq((checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally") (source_url . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally"))))))) ("try-catch-finally-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-finally-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-finally-lib.txt"))) (checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (checksum-error . #f) (collection . "try-catch-finally") (conflicts . ()) (date-added . 1627413157) (dependencies . ("base")) (description . "A macro for catching exceptions and running teardown operations.") (implies . ()) (modules . ((lib "try-catch-finally/main.rkt"))) (name . "try-catch-finally-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (exceptions . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib") (tags . ("exceptions" "sugar")) (versions . #hash((default . #hasheq((checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib") (source_url . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib"))))))) ("try-catch-match" . #hasheq((author . "benedek.szilvasy@gmail.com") (authors . ("benedek.szilvasy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-catch-match" "doc/try-catch-match@try-catch-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-match.txt"))) (checksum . "6cd64b9b0d3fc3828318da9f8d26cc5d9271c1f4") (checksum-error . #f) (collection . "try-catch-match") (conflicts . ()) (date-added . 1627426752) (dependencies . ("base" "base" "scribble-lib" "racket-doc")) (description . "A try-catch-finally macro that binds with match.") (implies . ()) (modules . ((lib "try-catch-match/main.rkt") (lib "try-catch-match/scribblings/try-catch-match.scrbl"))) (name . "try-catch-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:benedek.szilvasy@gmail.com . #t) (macro . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/eutro/try-catch-match.git#master") (tags . ("macro" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "6cd64b9b0d3fc3828318da9f8d26cc5d9271c1f4") (source . "https://github.com/eutro/try-catch-match.git#master") (source_url . "https://github.com/eutro/try-catch-match.git#master"))))))) ("try-make-sarna-happy" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-make-sarna-happy" "doc/try-make-sarna-happy@try-make-sarna-happy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-make-sarna-happy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-make-sarna-happy.txt"))) (checksum . "c538408866d6b7922fe8ae4da211a233bd7a305d") (checksum-error . #f) (collection . "try-make-sarna-happy") (conflicts . ()) (date-added . 1627418695) (dependencies . ("base" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A try macro for sarna") (implies . ()) (modules . ((lib "try-make-sarna-happy/scribblings/shared.rkt") (lib "try-make-sarna-happy/main.rkt") (lib "try-make-sarna-happy/scribblings/try-make-sarna-happy.scrbl"))) (name . "try-make-sarna-happy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (exceptions . #t) (macro . #t) (ring:1 . #t) (sugar . #t) (syntax-parse . #t))) (source . "https://github.com/benknoble/try-make-sarna-happy.git#main") (tags . ("exceptions" "macro" "sugar" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "c538408866d6b7922fe8ae4da211a233bd7a305d") (source . "https://github.com/benknoble/try-make-sarna-happy.git#main") (source_url . "https://github.com/benknoble/try-make-sarna-happy.git#main"))))))) ("try-racket-client" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-racket-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-racket-client.txt"))) (checksum . "2ddd062b62284a7549f63bbedd8f6c4aa5c613b5") (checksum-error . #f) (collection . "try-racket-client") (conflicts . ()) (date-added . 1580555730) (dependencies . ("base")) (description . "An API client for try-racket.defn.io.") (implies . ()) (modules . ((lib "try-racket-client/main.rkt"))) (name . "try-racket-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (ring:1 . #t) (sandbox . #t))) (source . "https://github.com/Bogdanp/try-racket-client.git") (tags . ("client" "http" "sandbox")) (versions . #hash((default . #hasheq((checksum . "2ddd062b62284a7549f63bbedd8f6c4aa5c613b5") (source . "https://github.com/Bogdanp/try-racket-client.git") (source_url . "https://github.com/Bogdanp/try-racket-client.git"))))))) ("ts-files" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-files.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3252c883500641609200b698b73a09f0c96a6042") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Demo files for ThoughtSTEM.  Probably not useful to anyone outside of ThoughtSTEM.   ") (implies . ()) (modules . ((lib "ts-files/tscc/tscc_module10.rkt") (lib "ts-files/cpx/tscpx_riff_surprise_1.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot.rkt") (lib "ts-files/tsgd/tsgd_adventure_game_demo.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot2.rkt") (lib "ts-files/cpx/tscpx_saber_c.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot3.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow3.rkt") (lib "ts-files/app/tsapp_asl_app.rkt") (lib "ts-files/mt/tsmt_schematic.rkt") (lib "ts-files/cpx/tscpx_target_a.rkt") (lib "ts-files/cpx/tscpx_blaster_b.rkt") (lib "ts-files/cpx/tscpx_night_light.rkt") (lib "ts-files/cpx/tscpx_sound_meter.rkt") (lib "ts-files/mt/tsmt_multi_face.rkt") (lib "ts-files/mt/tsmt_multi_drop.rkt") (lib "ts-files/tsweb/tsweb_blog_template.rkt") (lib "ts-files/cpx/tscpx_saber_e.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot2.rkt") (lib "ts-files/cpx/tscpx_saber_b.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot4.rkt") (lib "ts-files/cpx/tscpx_set_light.rkt") (lib "ts-files/cpx/tscpx_cool_riff.rkt") (lib "ts-files/tsgd/tsgd_enemy.rkt") (lib "ts-files/cpx/tscpx_blaster_d.rkt") (lib "ts-files/tsgd/tsgd_quest_item.rkt") (lib "ts-files/tsgd/tsgd_wall_and_lava.rkt") (lib "ts-files/cpx/tscpx_led.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot3.rkt") (lib "ts-files/cpx/tscpx_set_light_wait.rkt") (lib "ts-files/tsgd/tsgd_quest10_complete.rkt") (lib "ts-files/tsgd/tsgd_fireball.rkt") (lib "ts-files/cpx/tscpx_saber_d.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot3.rkt") (lib "ts-files/cpx/tscpx_blaster_e.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_3.rkt") (lib "ts-files/tsweb/tsweb_module1_complete.rkt") (lib "ts-files/tsgd/tsgd_race_game_5p.rkt") (lib "ts-files/tsgd/tsgd_quest11_complete.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot3.rkt") (lib "ts-files/tsgd/tsgd_boss_health.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot.rkt") (lib "ts-files/app/tsapp_cookie_clicker.rkt") (lib "ts-files/tsweb/tsweb_module3_complete.rkt") (lib "ts-files/cpx/tscpx_blaster_f.rkt") (lib "ts-files/tsgd/tsgd_quest9_complete.rkt") (lib "ts-files/tsgd/tsgd_quest8_complete.rkt") (lib "ts-files/tsgd/tsgd_quest7_complete.rkt") (lib "ts-files/tsgd/tsgd_quest6_complete.rkt") (lib "ts-files/tsgd/tsgd_quest5_complete.rkt") (lib "ts-files/cpx/tscpx_set_light_function.rkt") (lib "ts-files/cpx/tscpx_notes.rkt") (lib "ts-files/vr/tsvr_components.rkt") (lib "ts-files/cpx/tscpx_colors.rkt") (lib "ts-files/tsgd/tsgd_race_game_starter.rkt") (lib "ts-files/vr/tsvr_streetlamp.rkt") (lib "ts-files/vr/tsvr_start_a.rkt") (lib "ts-files/cpx/tscpx_target_b.rkt") (lib "ts-files/mt/tsmt_custom_drop.rkt") (lib "ts-files/cpx/tscpx_laser_tag_teams.rkt") (lib "ts-files/app/tsapp_flashcards.rkt") (lib "ts-files/mt/tsmt_custom_item.rkt") (lib "ts-files/tsweb/tsweb_module7_complete.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot2.rkt") (lib "ts-files/tsweb/tsweb_text_adventure.rkt") (lib "ts-files/cpx/tscpx_hot_potato.rkt") (lib "ts-files/mt/tsmt_entity.rkt") (lib "ts-files/cpx/tscpx_riff_2.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest5_complete.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest4_complete.rkt") (lib "ts-files/cpx/tscpx_rainbow_sparkle.rkt") (lib "ts-files/cpx/tscpx_saber_a.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_4.rkt") (lib "ts-files/cpx/tscpx_forever_siren.rkt") (lib "ts-files/mt/tsmt_custom_block.rkt") (lib "ts-files/cpx/tscpx_clap_light.rkt") (lib "ts-files/cpx/tscpx_laser_tag.rkt") (lib "ts-files/cpx/tscpx_test.rkt") (lib "ts-files/tsweb/tsweb_module5_complete.rkt") (lib "ts-files/cpx/tscpx_blaster_a.rkt") (lib "ts-files/cpx/tscpx_blaster_c.rkt") (lib "ts-files/mt/tsmt_particle.rkt") (lib "ts-files/cpx/tscpx_set_function_10.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot4.rkt") (lib "ts-files/cpx/tscpx_set_function.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot2.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow2.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_1.rkt") (lib "ts-files/cpx/tscpx_riff_1.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_2.rkt") (lib "ts-files/cpx/tscpx_servo.rkt") (lib "ts-files/vr/tsvr_start_b.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow.rkt") (lib "ts-files/tsgd/tsgd_laser.rkt") (lib "ts-files/vr/tsvr_lighttime.rkt"))) (name . "ts-files") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-files.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3252c883500641609200b698b73a09f0c96a6042") (source . "https://github.com/thoughtstem/ts-files.git") (source_url . "https://github.com/thoughtstem/ts-files.git"))))))) ("ts-tactics" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "manual" "doc/manual@ts-tactics/index.html"))) (failure-log . "server/built/fail/ts-tactics.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fe8d4623b359cce2669b2bf9fb7a04d48942ef5b") (checksum-error . "pkg: specified directory is not in Git respository\n  path: ts-tactics\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:914:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1560437472) (dependencies . ("base" "pprint" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "ThoughtSTEM instructional meta-material") (implies . ()) (modules . ((lib "ts-tactics/classroom-simulation/simulate-room.rkt") (lib "ts-tactics/classroom-simulation/base.rkt") (lib "ts-tactics/classroom-simulation/rendering.rkt") (lib "ts-tactics/tactics/mechanics/points.rkt") (lib "ts-tactics/classroom-simulation/util.rkt") (lib "ts-tactics/main.rkt") (lib "ts-tactics/tactics/tactic-library/translation-challenge.rkt") (lib "ts-tactics/tactics/mechanics/basic-body-actions.rkt") (lib "ts-tactics/tactics/base/printing.rkt") (lib "ts-tactics/tactics/mechanics/timer.rkt") (lib "ts-tactics/assessments/plots/benchmarks.rkt") (lib "ts-tactics/tactics/tactic-library/code-carousel.rkt") (lib "ts-tactics/tactics/base/base.rkt") (lib "ts-tactics/tactics/mechanics/circle-play.rkt") (lib "ts-tactics/tactics/tactic-library/reverse-engineer.rkt") (lib "ts-tactics/scribblings/sub-routines.scrbl") (lib "ts-tactics/classroom-simulation/material.rkt") (lib "ts-tactics/scribblings/assessments-handbook-util.rkt") (lib "ts-tactics/scribblings/assessments-handbook.scrbl") (lib "ts-tactics/tactics/mechanics/basic-cognitive-actions.rkt") (lib "ts-tactics/tactics/tactic-library/mafia.rkt") (lib "ts-tactics/scribblings/manual.scrbl") (lib "ts-tactics/tactics/tactic-library/example-tactic.rkt") (lib "ts-tactics/tactics/tactic-library/translation-steps.rkt") (lib "ts-tactics/tactics/mechanics/basic-things.rkt") (lib "ts-tactics/scribblings/manual-extended.scrbl") (lib "ts-tactics/tactics/base/base-base.rkt") (lib "ts-tactics/classroom-simulation/main.rkt") (lib "ts-tactics/classroom-simulation/old-main.rkt") (lib "ts-tactics/assessments/plots/lang.rkt") (lib "ts-tactics/tactics/lang.rkt") (lib "ts-tactics/tactics/mechanics/basic-actions.rkt") (lib "ts-tactics/tactics/mechanics/voting.rkt") (lib "ts-tactics/tactics/mechanics/groups.rkt") (lib "ts-tactics/tactics/tactic-library/code-anatomy.rkt") (lib "ts-tactics/tactics/base/scribble.rkt") (lib "ts-tactics/classroom-simulation/activity.rkt") (lib "ts-tactics/tactics/tactic-library/disintegrating-code.rkt") (lib "ts-tactics/classroom-simulation/test.rkt") (lib "ts-tactics/tactics/mechanics/basic-verbal-actions.rkt") (lib "ts-tactics/tactics/tactic-library/team-memorize.rkt") (lib "ts-tactics/tactics/mechanics/basic-adverbs.rkt") (lib "ts-tactics/scribblings/example-tactic.scrbl") (lib "ts-tactics/tactics/tactic-library/building-up.rkt") (lib "ts-tactics/scribblings/manual-old.scrbl") (lib "ts-tactics/assessments/main.rkt") (lib "ts-tactics/tactics/mechanics/coding.rkt"))) (name . "ts-tactics") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (:error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fe8d4623b359cce2669b2bf9fb7a04d48942ef5b") (source . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics") (source_url . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics"))))))) ("tulip" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "tulip-lib")) (description . "") (implies . ("tulip-lib")) (modules . ()) (name . "tulip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip"))))))) ("tulip-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-lib.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . "tulip") (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "curly-fn")) (description . "") (implies . ()) (modules . ((lib "tulip/lang/parser.rkt") (lib "tulip/lang/lexer.rkt") (lib "tulip/private/util/curry.rkt") (lib "tulip/lang/configure-runtime.rkt") (lib "tulip/racket/ffi.rkt") (lib "tulip/lang/emitter.rkt") (lib "tulip/list.rkt") (lib "tulip/private/util/srcloc.rkt") (lib "tulip/private/util/syntax-loc-props.rkt") (lib "tulip/private/configured-runtime-lang.rkt") (lib "tulip/base.rkt") (lib "tulip/lang/reader.rkt") (lib "tulip/main.rkt") (lib "tulip/math.rkt"))) (name . "tulip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib"))))))) ("tulip-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-test.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "tulip-lib")) (description . "") (implies . ()) (modules . ((lib "tests/tulip/id-namespace.rkt") (lib "tests/tulip/corecur.rkt") (lib "tests/tulip/assert.rkt") (lib "tests/tulip/list.rkt") (lib "tests/tulip/chain.rkt") (lib "tests/tulip/import.rkt"))) (name . "tulip-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-test") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-test"))))))) ("turing" . #hasheq((author . "darcyotto@gmail.com") (authors . ("darcyotto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turing" "doc/turing@turing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turing.txt"))) (checksum . "a5ecb87a22eccb6cdcf271eb408c3efffe4635c7") (checksum-error . #f) (collection . "turing") (conflicts . ()) (date-added . 1633571261) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Turing language for Racket, modelled on Alan Turing's 1936 paper in which he introduces Turing Machines") (implies . ()) (modules . ((lib "turing/scribblings/turing.scrbl") (lib "turing/show.rkt") (lib "turing/execute.rkt") (lib "turing/main.rkt"))) (name . "turing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:darcyotto@gmail.com . #t) (programming-languages . #t) (ring:1 . #t) (turing-machine . #t))) (source . "git+https://github.com/curiousyogurt/turing#master") (tags . ("programming-languages" "turing-machine")) (versions . #hash((default . #hasheq((checksum . "a5ecb87a22eccb6cdcf271eb408c3efffe4635c7") (source . "git+https://github.com/curiousyogurt/turing#master") (source_url . "git+https://github.com/curiousyogurt/turing#master"))))))) ("turn-based-game" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turn-based-game" "doc/turn-based-game@turn-based-game/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turn-based-game.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turn-based-game.txt"))) (checksum . "eb290ed914fb91fc2db8e135570453608bc51f39") (checksum-error . #f) (collection . "turn-based-game") (conflicts . ()) (dependencies . ("base" "agile" "collections-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "htdp-doc" "collections-doc")) (description . "interfaces and tools for defining and playing turn-based games") (implies . ()) (modules . ((lib "turn-based-game/demo/connect-four.rkt") (lib "turn-based-game/turn-based-game.rkt") (lib "turn-based-game/turn-based-game-gui.rkt") (lib "turn-based-game/examples/connect-four.rkt") (lib "turn-based-game/controller/computer-player-gui-controller.rkt") (lib "turn-based-game/examples/checkers-gui.rkt") (lib "turn-based-game/scribblings/turn-based-game.scrbl") (lib "turn-based-game/examples/checkers.rkt") (lib "turn-based-game/computer-player/score-explore-random.rkt") (lib "turn-based-game/demo/checkers.rkt") (lib "turn-based-game/examples/connect-four-gui.rkt") (lib "turn-based-game/controller/human-player-gui-controller.rkt") (lib "turn-based-game/examples/tic-tac-toe-gui.rkt") (lib "turn-based-game/computer-player.rkt") (lib "turn-based-game/computer-player/n-ahead.rkt") (lib "turn-based-game/demo/tic-tac-toe.rkt") (lib "turn-based-game/examples/tic-tac-toe.rkt"))) (name . "turn-based-game") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (games . #t) (ring:1 . #t))) (source . "http://github.com/AlexKnauth/turn-based-game/tree/master") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "eb290ed914fb91fc2db8e135570453608bc51f39") (source . "git://github.com/AlexKnauth/turn-based-game") (source_url . "http://github.com/AlexKnauth/turn-based-game/tree/master"))))))) ("turnstile" . #hasheq((author . "alexander@knauth.org stchang@racket-lang.org") (authors . ("alexander@knauth.org" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("turnstile-lib" "turnstile-example" "turnstile-doc" "turnstile-test")) (description . "#lang for implementing typed languages with Racket") (implies . ()) (modules . ()) (name . "turnstile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:stchang@racket-lang.org . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile"))))))) ("turnstile-doc" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turnstile" "doc/turnstile@turnstile-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-doc.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "sandbox-lib" "scribble-lib" "rackunit-lib" "rackunit-doc" "rackunit-macrotypes-lib" "turnstile-lib" "turnstile-example")) (description . "") (implies . ()) (modules . ((lib "turnstile/scribblings/common.rkt") (lib "turnstile/scribblings/doc-utils.rkt") (lib "turnstile/scribblings/guide.scrbl") (lib "turnstile/scribblings/turnstile.scrbl") (lib "turnstile/scribblings/rackunit-turnstile.scrbl") (lib "turnstile/scribblings/reference.scrbl"))) (name . "turnstile-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-doc") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-doc"))))))) ("turnstile-example" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-example.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "turnstile-lib" "macrotypes-lib")) (description . "") (implies . ()) (modules . ((lib "turnstile/examples/linear/lin+tup.rkt") (lib "turnstile/examples/simple/stlc+lit.rkt") (lib "turnstile/examples/optimize/sysf.rkt") (lib "turnstile/examples/stlc+reco+var.rkt") (lib "turnstile/examples/trivial.rkt") (lib "turnstile/examples/optimize/stlc.rkt") (lib "turnstile/examples/stlc+tup.rkt") (lib "turnstile/examples/optimize/stlc+cons.rkt") (lib "turnstile/examples/optimize/stlc+rec-iso.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+eq.rkt") (lib "turnstile/examples/stlc+rec-iso.rkt") (lib "turnstile/examples/stlc-jesse.rkt") (lib "turnstile/examples/linear/lin3.rkt") (lib "turnstile/examples/optimize/stlc+box.rkt") (lib "turnstile/examples/optimize/stlc+reco+sub.rkt") (lib "turnstile/examples/dep.rkt") (lib "turnstile/examples/simple/ext-stlc.rkt") (lib "turnstile/examples/optimize/stlc+reco+var.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+eq2.rkt") (lib "turnstile/examples/stlc+union+case.rkt") (lib "turnstile/examples/optimize/stlc+sub.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+rec.rkt") (lib "turnstile/examples/fomega2.rkt") (lib "turnstile/examples/optimize/fomega2.rkt") (lib "turnstile/examples/stlc.rkt") (lib "turnstile/examples/stlc+lit.rkt") (lib "turnstile/examples/fomega-no-reuse-old.rkt") (lib "turnstile/examples/samc-define-lang.rkt") (lib "turnstile/examples/dep/dep-ind-cur2.rkt") (lib "turnstile/examples/linear/lin4.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+fix.rkt") (lib "turnstile/examples/samc-define-lang2.rkt") (lib "turnstile/examples/stlc+cons.rkt") (lib "turnstile/examples/stlc+reco+sub.rkt") (lib "turnstile/examples/cmu15-814/stlc.rkt") (lib "turnstile/examples/linear/lin5.rkt") (lib "turnstile/examples/linear/lin+cons.rkt") (lib "turnstile/examples/simple/stlc.rkt") (lib "turnstile/examples/stlc+effect.rkt") (lib "turnstile/examples/fomega.rkt") (lib "turnstile/examples/ext-stlc-no-unicode.rkt") (lib "turnstile/examples/linear/id-set-utils.rkt") (lib "turnstile/examples/util/filter-maximal.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+forall.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+nat+datum.rkt") (lib "turnstile/examples/optimize/ext-stlc.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+bool.rkt") (lib "turnstile/examples/stlc+union.rkt") (lib "turnstile/examples/linear/lin+chan.rkt") (lib "turnstile/examples/stlc+box.rkt") (lib "turnstile/examples/optimize/fsub.rkt") (lib "turnstile/examples/linear/fabul-utils.rkt") (lib "turnstile/examples/fomega-no-reuse.rkt") (lib "turnstile/examples/stlc+sub.rkt") (lib "turnstile/examples/linear/lin.rkt") (lib "turnstile/examples/infer.rkt") (lib "turnstile/examples/ext-stlc.rkt") (lib "turnstile/examples/optimize/fomega.rkt") (lib "turnstile/examples/stlc+reco2.rkt") (lib "turnstile/examples/sysf.rkt") (lib "turnstile/examples/optimize/stlc+tup.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+exist.rkt") (lib "turnstile/examples/linear/lin2.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+data.rkt") (lib "turnstile/examples/optimize/stlc+lit.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+nat.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+sugar.rkt") (lib "turnstile/examples/exist.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+data2.rkt") (lib "turnstile/examples/linear/fabul.rkt") (lib "turnstile/examples/fsub.rkt") (lib "turnstile/examples/linear/lin+var.rkt") (lib "turnstile/examples/optimize/exist.rkt"))) (name . "turnstile-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-example") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-example") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-example"))))))) ("turnstile-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "macrotypes-lib" "lens-lib")) (description . "") (implies . ()) (modules . ((lib "turnstile/more-utils.rkt") (lib "turnstile+/quicklang/lang/reader.rkt") (lib "turnstile+/eval.rkt") (lib "turnstile+/typedefs.rkt") (lib "turnstile/base/lang/reader.rkt") (lib "turnstile/mode.rkt") (lib "turnstile+/type-constraints.rkt") (lib "turnstile/base.rkt") (lib "turnstile/turnstile.rkt") (lib "turnstile+/base.rkt") (lib "turnstile/main.rkt") (lib "turnstile+/lang/reader.rkt") (lib "turnstile/type-constraints.rkt") (lib "turnstile/no-unicode.rkt") (lib "turnstile+/main.rkt") (lib "turnstile/quicklang/lang/reader.rkt") (lib "turnstile/typedefs.rkt") (lib "turnstile/lang/lang/reader.rkt") (lib "turnstile/lang/reader.rkt") (lib "turnstile/eval.rkt") (lib "turnstile+/base/lang/reader.rkt") (lib "turnstile/lang.rkt") (lib "turnstile+/more-utils.rkt"))) (name . "turnstile-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-lib"))))))) ("turnstile-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-test.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "turnstile-lib" "turnstile-example" "rackunit-macrotypes-lib")) (description . "") (implies . ()) (modules . ((lib "tests/turnstile/stlc+cons-tests.rkt") (lib "tests/turnstile/rackunit-typechecking.rkt") (lib "tests/turnstile/generic.rkt") (lib "tests/turnstile/typed-rackunit-typechecking.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-list-tests2.rkt") (lib "tests/turnstile/optimize/rackunit-kindchecking.rkt") (lib "tests/turnstile/simple/ext-stlc-tests.rkt") (lib "tests/turnstile/fomega-tests.rkt") (lib "tests/turnstile/stlc+reco+sub-tests.rkt") (lib "tests/turnstile/issues/issue072.rkt") (lib "tests/turnstile/linear/lin4-tests.rkt") (lib "tests/turnstile/linear/lin-tests.rkt") (lib "tests/turnstile/filter-maximal.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-nat-tests.rkt") (lib "tests/turnstile/simple/stlc+lit-tests.rkt") (lib "tests/turnstile/linear/lin2-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+forall-tests.rkt") (lib "tests/turnstile/stlc+union.rkt") (lib "tests/turnstile/optimize/fsub-tests.rkt") (lib "tests/turnstile/pat-expander-tests.rkt") (lib "tests/turnstile/optimize/exist-tests.rkt") (lib "tests/turnstile/load-time-tests/turnstile-base-lang.rkt") (lib "tests/turnstile/turnstile-tests.rkt") (lib "tests/turnstile/stlc-tests.rkt") (lib "tests/turnstile/samc-define-lang-tests.rkt") (lib "tests/turnstile/optimize/stlc+tup-tests.rkt") (lib "tests/turnstile/stlc+reco+var-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-list-tests.rkt") (lib "tests/turnstile/optimize/fomega2-tests.rkt") (lib "tests/turnstile/optimize/stlc+reco+sub-tests.rkt") (lib "tests/turnstile/optimize/stlc+lit-tests.rkt") (lib "tests/turnstile/optimize/ext-stlc-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+fix-tests.rkt") (lib "tests/turnstile/linear/lin+tup-tests.rkt") (lib "tests/turnstile/fomega-no-reuse-tests.rkt") (lib "tests/turnstile/linear/fabul-tests.rkt") (lib "tests/turnstile/stlc+effect-tests.rkt") (lib "tests/turnstile/tlb-infer-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-data2-tests.rkt") (lib "tests/turnstile/stlc-jesse-tests.rkt") (lib "tests/turnstile/linear/lin+var-tests.rkt") (lib "tests/turnstile/telescopes.rkt") (lib "tests/turnstile/exist-tests.rkt") (lib "tests/turnstile/trivial-test.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-eq-tests.rkt") (lib "tests/turnstile/linear/lin3-tests.rkt") (lib "tests/turnstile/fomega-no-reuse-tests-old.rkt") (lib "tests/turnstile/stlc+box-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-subtype-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+exist-tests.rkt") (lib "tests/turnstile/dep-tests.rkt") (lib "tests/turnstile/ext-stlc-tests.rkt") (lib "tests/turnstile/optimize/stlc+sub-tests.rkt") (lib "tests/turnstile/rackunit-kindchecking.rkt") (lib "tests/turnstile/load-time-tests/turnstile-base-lang-prog.rkt") (lib "tests/turnstile/fsub-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+rec-tests.rkt") (lib "tests/turnstile/optimize/stlc+rec-iso-tests.rkt") (lib "tests/turnstile/stlc+reco2-tests.rkt") (lib "tests/turnstile/optimize/fomega-tests.rkt") (lib "tests/turnstile/optimize/stlc+reco+var-tests.rkt") (lib "tests/turnstile/linear/lin+chan-tests.rkt") (lib "tests/turnstile/simple/stlc-tests.rkt") (lib "tests/turnstile/stlc+sub-tests.rkt") (lib "tests/turnstile/typed-var-stx/typed-var-test.rkt") (lib "tests/turnstile/typed-var-stx/typed-var-example.rkt") (lib "tests/turnstile/linear/lin5-tests.rkt") (lib "tests/turnstile/samc-define-lang-tests2.rkt") (lib "tests/turnstile/load-time-tests/turnstile-lang.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-eq-tests2.rkt") (lib "tests/turnstile/cmu15-814/stlc-tests.rkt") (lib "tests/turnstile/mode.rkt") (lib "tests/turnstile/stlc+union+case.rkt") (lib "tests/turnstile/load-time-tests/racket-prog.rkt") (lib "tests/turnstile/optimize/stlc+cons-tests.rkt") (lib "tests/turnstile/optimize/stlc+box-tests.rkt") (lib "tests/turnstile/stlc+rec-iso-tests.rkt") (lib "tests/turnstile/linear/rackunit-lin.rkt") (lib "tests/turnstile/load-time-tests/turnstile-lang-prog.rkt") (lib "tests/turnstile/pat-expander-tests-def.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-nat+datum-tests.rkt") (lib "tests/turnstile/stlc+tup-tests.rkt") (lib "tests/turnstile/issues/issue035.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-bool-tests.rkt") (lib "tests/turnstile/fomega2-tests.rkt") (lib "tests/turnstile/load-time-tests/racket-base-prog.rkt") (lib "tests/turnstile/ext-stlc-no-unicode-tests.rkt") (lib "tests/turnstile/stlc+lit-tests.rkt") (lib "tests/turnstile/linear/lin+cons-tests.rkt") (lib "tests/turnstile/optimize/sysf-tests.rkt") (lib "tests/turnstile/issues/issue084-deftypedvariable.rkt") (lib "tests/turnstile/sysf-tests.rkt"))) (name . "turnstile-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-test") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-test"))))))) ("tweedledee" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tweedledee.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tweedledee.txt"))) (checksum . "f0919e3816b448cea75db7d9121f355a9fe4edec") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588723766) (dependencies . ("base")) (description . "Conflicts with tweedledum, or any other package with a `hill/king` module.") (implies . ()) (modules . ((lib "hill/king.rkt"))) (name . "tweedledee") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/tweedledee.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f0919e3816b448cea75db7d9121f355a9fe4edec") (source . "https://github.com/zyrolasting/tweedledee.git") (source_url . "https://github.com/zyrolasting/tweedledee.git"))))))) ("tweedledum" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tweedledum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tweedledum.txt"))) (checksum . "64417ba609ea7a5db1ca7c25baa63dfb59a3955e") (checksum-error . #f) (collection . (multi)) (conflicts . ("tweedledee")) (date-added . 1588723805) (dependencies . ("base")) (description . "Conflicts with tweedledee, or any other package with a `hill/king` module.") (implies . ()) (modules . ((lib "hill/king.rkt"))) (name . "tweedledum") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:2 . #t))) (source . "https://github.com/zyrolasting/tweedledum.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "64417ba609ea7a5db1ca7c25baa63dfb59a3955e") (source . "https://github.com/zyrolasting/tweedledum.git") (source_url . "https://github.com/zyrolasting/tweedledum.git"))))))) ("twilio" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/twilio.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/twilio.txt"))) (checksum . "2c4cb087cd4d6b9eb6bc6a57035169e32848629e") (checksum-error . #f) (collection . "twilio") (conflicts . ()) (date-added . 1554730962) (dependencies . ("base")) (description . "A Twilio client for Racket.") (implies . ()) (modules . ((lib "twilio/main.rkt"))) (name . "twilio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (sms . #t) (twilio . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-twilio.git?path=twilio") (tags . ("sms" "twilio" "web")) (versions . #hash((default . #hasheq((checksum . "2c4cb087cd4d6b9eb6bc6a57035169e32848629e") (source . "https://github.com/Bogdanp/racket-twilio.git?path=twilio") (source_url . "https://github.com/Bogdanp/racket-twilio.git?path=twilio"))))))) ("twixt" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "twixt" "doc/twixt@twixt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/twixt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/twixt.txt"))) (checksum . "41aca88a7a7e5a993460df011da67b4fa31daadc") (checksum-error . #f) (collection . "twixt") (conflicts . ()) (date-added . 1582096611) (dependencies . ("pict-lib" "rebellion" "base" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for modeling the board game TwixT") (implies . ()) (modules . ((lib "twixt/main.rkt") (lib "twixt/main.scrbl") (lib "twixt/base.rkt"))) (name . "twixt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/twixt.git") (tags . ("data-structures" "games")) (versions . #hash((default . #hasheq((checksum . "41aca88a7a7e5a993460df011da67b4fa31daadc") (source . "https://github.com/jackfirth/twixt.git") (source_url . "https://github.com/jackfirth/twixt.git"))))))) ("txexpr" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "txexpr" "doc/txexpr@txexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr.txt"))) (checksum . "4ed851459e97be03418b1e92a5c07174e99bf28f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1658531490) (dependencies . ("base" "sugar" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Handy tools for working with HTML-style tagged X-expressions") (implies . ()) (modules . ((lib "txexpr/check.rkt") (lib "txexpr/private/define-provide-safe-match.rkt") (lib "txexpr/test/tests.rkt") (lib "txexpr/test/check-values.rkt") (lib "txexpr/scribblings/txexpr.scrbl") (lib "txexpr/base.rkt") (lib "txexpr/private/container.rkt") (lib "txexpr/main.rkt") (lib "txexpr/unstable/main.rkt") (lib "txexpr/test/test-txexpr-stx.rkt") (lib "txexpr/test/contract-tests.rkt") (lib "txexpr/stx.rkt"))) (name . "txexpr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (web . #t))) (source . "https://git.matthewbutterick.com/mbutterick/txexpr.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "4ed851459e97be03418b1e92a5c07174e99bf28f") (source . "https://git.matthewbutterick.com/mbutterick/txexpr.git") (source_url . "https://git.matthewbutterick.com/mbutterick/txexpr.git"))))))) ("txexpr-stxparse" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr-stxparse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr-stxparse.txt"))) (checksum . "d570bca4a1156497a20189a682fa555bf0bbcfd6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "txexpr" "rackunit-lib")) (description . "syntax-parse patterns for parsing Tagged X-expressions") (implies . ()) (modules . ((lib "txexpr/stx/parse.rkt") (lib "txexpr/stx/test/test-txexpr-stxparse.rkt"))) (name . "txexpr-stxparse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (xexpr . #t))) (source . "https://github.com/AlexKnauth/txexpr-stxparse.git") (tags . ("xexpr")) (versions . #hash((default . #hasheq((checksum . "d570bca4a1156497a20189a682fa555bf0bbcfd6") (source . "https://github.com/AlexKnauth/txexpr-stxparse.git") (source_url . "https://github.com/AlexKnauth/txexpr-stxparse.git"))))))) ("type-conventions" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-conventions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-conventions.txt"))) (checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (checksum-error . #f) (collection . "type-conventions") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "Forms for giving specific argument names implicit types") (implies . ()) (modules . ((lib "type-conventions/conventions-data.rkt") (lib "type-conventions/main.rkt") (lib "type-conventions/formals-class.rkt") (lib "type-conventions/type-args.rkt") (lib "type-conventions/stx-helpers.rkt") (lib "type-conventions/default-conventions.rkt") (lib "type-conventions/example.rkt") (lib "type-conventions/stx-test-helpers.rkt"))) (name . "type-conventions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (shorthand . #t) (syntax . #t) (typed-racket . #t))) (source . "http://github.com/jackfirth/type-conventions/tree/master") (tags . ("shorthand" "syntax" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (source . "git://github.com/jackfirth/type-conventions") (source_url . "http://github.com/jackfirth/type-conventions/tree/master"))))))) ("type-expander" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "type-expander" "doc/type-expander@type-expander/index.html") ("main" "type-expander-implementation" "doc/type-expander-implementation@type-expander/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-expander.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-expander.txt"))) (checksum . "9fbbe96f970562c613101e4c91c54873fed399bc") (checksum-error . #f) (collection . "type-expander") (conflicts . ()) (date-added . 1614799552) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "hyper-literate" "auto-syntax-e" "debug-scopes" "version-case" "scribble-lib" "racket-doc" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "mutable-match-lambda")) (description . "Type expanders for typed/racket, which work like match expanders for match") (implies . ()) (modules . ((lib "type-expander/identifiers.rkt") (lib "type-expander/test/type-expander-test.rkt") (lib "type-expander/test/lang-test-1.rkt") (lib "type-expander/test/base-lang-test-3.rkt") (lib "type-expander/more-expanders.hl.rkt") (lib "type-expander/test/lang-test-2.rkt") (lib "type-expander/utils.rkt") (lib "type-expander/test/test-contracts-to-types.rkt") (lib "type-expander/scribblings/type-expander.scrbl") (lib "type-expander/dbg.rkt") (lib "type-expander/parameterize-lexical-context.rkt") (lib "type-expander/test/base-lang-test-2.rkt") (lib "type-expander/lang/reader.rkt") (lib "type-expander/scribblings/deprecated-colon.scrbl") (lib "type-expander/main.rkt") (lib "type-expander/contracts-to-types.rkt") (lib "type-expander/test/lang-test-3.rkt") (lib "type-expander/expander.rkt") (lib "type-expander/base.rkt") (lib "type-expander/scribblings/type-expander-implementation.scrbl") (lib "type-expander/test/base-lang-test-1.rkt") (lib "type-expander/lang/lang/reader.rkt") (lib "type-expander/test/readme.rkt") (lib "type-expander/lang.rkt") (lib "type-expander/lang/main.rkt") (lib "type-expander/scribblings/contracts-to-types.scrbl") (lib "type-expander/type-expander.hl.rkt") (lib "type-expander/base/lang/reader.rkt"))) (name . "type-expander") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/type-expander.git#main") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "9fbbe96f970562c613101e4c91c54873fed399bc") (source . "https://github.com/jsmaniac/type-expander.git#main") (source_url . "https://github.com/jsmaniac/type-expander.git#main"))))))) ("typed-compose" . #hasheq((author . "sivanov-racket-pkgs@colimite.fr") (authors . ("sivanov-racket-pkgs@colimite.fr")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-compose" "doc/typed-compose@typed-compose/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/typed-compose.txt") (success-log . "server/built/install/typed-compose.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-compose.txt"))) (checksum . "b8363160a23ad7f9684c69ee9bc1cf659b7971db") (checksum-error . #f) (collection . "typed-compose") (conflicts . ()) (date-added . 1609788691) (dependencies . ("typed-racket-lib" "base" "typed-racket-doc" "racket-doc" "rackunit-typed" "sandbox-lib" "scribble-lib")) (description . "Utilities for composing functions in Typed Racket.") (implies . ()) (modules . ((lib "typed-compose/typed-compose.scrbl") (lib "typed-compose/main.rkt"))) (name . "typed-compose") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sivanov-racket-pkgs@colimite.fr . #t) (compose . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://git.marvid.fr/scolobb/typed-compose.git") (tags . ("compose" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8363160a23ad7f9684c69ee9bc1cf659b7971db") (source . "https://git.marvid.fr/scolobb/typed-compose.git") (source_url . "https://git.marvid.fr/scolobb/typed-compose.git"))))))) ("typed-graph" . #hasheq((author . "sivanov-racket-pkgs@colimite.fr") (authors . ("sivanov-racket-pkgs@colimite.fr")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@typed-graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-graph.txt") (test-failure-log . "server/built/test-fail/typed-graph.txt") (test-success-log . #f))) (checksum . "330a3ae753f4e9722bc9e994ea4b9b1820660307") (checksum-error . #f) (collection . "typed") (conflicts . ()) (date-added . 1641380053) (dependencies . ("base" "graph-lib" "typed-racket-lib" "gen-queue-lib" "math-lib" "typed-racket-doc" "racket-doc" "scribble-lib" "graph-doc" "gen-queue-lib" "math-doc" "rackunit-typed")) (description . "Typed interface for the generic graph library.") (implies . ()) (modules . ((lib "typed/manual.scrbl") (lib "typed/graph.rkt"))) (name . "typed-graph") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:sivanov-racket-pkgs@colimite.fr . #t) (graph . #t) (ring:2 . #t) (typed-racket . #t))) (source . "https://git.marvid.fr/scolobb/typed-graph.git#master") (tags . ("graph" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "330a3ae753f4e9722bc9e994ea4b9b1820660307") (source . "https://git.marvid.fr/scolobb/typed-graph.git#master") (source_url . "https://git.marvid.fr/scolobb/typed-graph.git#master"))))))) ("typed-ini-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-ini-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-ini-lib.txt"))) (checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1661385672) (dependencies . ("base" "typed-racket-lib" "ini-lib")) (description . "Racket parser for Ini and UNIX Conf files. Typed interface.") (implies . ()) (modules . ((lib "typed/ini.rkt"))) (name . "typed-ini-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (conf . #t) (ini . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Ftyped-ini-lib") (tags . ("conf" "ini")) (versions . #hash((default . #hasheq((checksum . "4d0c55e6496695bd4eb50ab794b329e7f1c3478e") (source . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Ftyped-ini-lib") (source_url . "https://gitlab.com/xgqt/racket-ini.git?path=src%2Ftyped-ini-lib"))))))) ("typed-map" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799556) (dependencies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (description . "Type inference helper for map with Typed/Racket. Supports afl (rather the unhygienic variant, aful/unhygienic), un-annotated lambdas and polymorphic functions.") (implies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (modules . ()) (name . "typed-map") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (functional . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main") (tags . ("functional" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main"))))))) ("typed-map-doc" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-map" "doc/typed-map@typed-map-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-doc.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799560) (dependencies . ("base" "scribble-lib" "racket-doc" "typed-racket-doc" "aful" "typed-map-lib")) (description . "Documentation for typed-map") (implies . ()) (modules . ((lib "typed-map/scribblings/typed-map.scrbl"))) (name . "typed-map-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (docs . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main") (tags . ("docs" "typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main"))))))) ("typed-map-lib" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-lib.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799563) (dependencies . ("base" "typed-racket-lib")) (description . "Implementation of typed-map") (implies . ()) (modules . ((lib "typed-map/main.rkt"))) (name . "typed-map-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main") (tags . ("typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main"))))))) ("typed-map-test" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-test.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799567) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "aful")) (description . "Tests for typed-map") (implies . ()) (modules . ((lib "typed-map/test/gh-bug-2.rkt") (lib "typed-map/test/test-map.rkt"))) (name . "typed-map-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (tests . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main") (tags . ("tests" "typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main"))))))) ("typed-minikanren" . #hasheq((author . "dalev@alum.wpi.edu") (authors . ("dalev@alum.wpi.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-minikanren.txt"))) (checksum . "83262e26f03581c99a072db03dfbafb1ab9401f2") (checksum-error . #f) (collection . "typed-minikanren") (conflicts . ()) (date-added . 1607116675) (dependencies . ("typed-racket-lib" "base" "rackunit-typed")) (description . "An implementation of miniKanren in typed racket.") (implies . ()) (modules . ((lib "typed-minikanren/main.rkt") (lib "typed-minikanren/src/term.rkt") (lib "typed-minikanren/test/zebra.rkt") (lib "typed-minikanren/src/dual-continuation.rkt") (lib "typed-minikanren/src/skew-bral.rkt"))) (name . "typed-minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dalev@alum.wpi.edu . #t) (miniKanren . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/dalev/minikanren-typed-racket.git#release") (tags . ("miniKanren" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "83262e26f03581c99a072db03dfbafb1ab9401f2") (source . "https://github.com/dalev/minikanren-typed-racket.git#release") (source_url . "https://github.com/dalev/minikanren-typed-racket.git#release"))))))) ("typed-otp-lib" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-otp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-otp-lib.txt"))) (checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1613070856) (dependencies . ("base" "crypto-lib" "otp-lib" "typed-racket-lib" "rackunit-typed")) (description . "") (implies . ()) (modules . ((lib "otp/typed.rkt"))) (name . "typed-otp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:yilin@kebab-ca.se . #t) (crypto . #t) (otp . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=typed-otp-lib") (tags . ("crypto" "otp")) (versions . #hash((default . #hasheq((checksum . "406f569bbf24f608082ae24b888719d12ebd7a9c") (source . "https://github.com/yilinwei/otp.git?path=typed-otp-lib") (source_url . "https://github.com/yilinwei/otp.git?path=typed-otp-lib"))))))) ("typed-peg" . #hasheq((author . "rodrigogribeiro@gmail.com") (authors . ("rodrigogribeiro@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-peg" "doc/typed-peg@typed-peg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-peg.txt") (test-failure-log . "server/built/test-fail/typed-peg.txt") (test-success-log . #f))) (checksum . "2a1002fa94cefb4416f9a3c29f5af1f2fd239d36") (checksum-error . #f) (collection . "typed-peg") (conflicts . ()) (date-added . 1644347858) (dependencies . ("base" "pprint" "peg-gen" "rackcheck" "parser-tools-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A parsing expression grammar library that uses a type inference algorithm to ensure termination of the parsing process.") (implies . ()) (modules . ((lib "typed-peg/core.rkt") (lib "typed-peg/grammar.rkt") (lib "typed-peg/typing/constraint-solver.rkt") (lib "typed-peg/examples/test5.rkt") (lib "typed-peg/typing/solver/script-gen.rkt") (lib "typed-peg/tests/testgen.rkt") (lib "typed-peg/debug/infer-only.rkt") (lib "typed-peg/reader.rkt") (lib "typed-peg/typing/constraint-pretty.rkt") (lib "typed-peg/tree.rkt") (lib "typed-peg/examples/test4.rkt") (lib "typed-peg/examples/test7.rkt") (lib "typed-peg/pretty.rkt") (lib "typed-peg/untyped.rkt") (lib "typed-peg/parser.rkt") (lib "typed-peg/examples/test10.rkt") (lib "typed-peg/typing/constraint.rkt") (lib "typed-peg/examples/test12.rkt") (lib "typed-peg/debug/tokenize-only.rkt") (lib "typed-peg/examples/test1.rkt") (lib "typed-peg/debug/parse-only.rkt") (lib "typed-peg/typing/solver/model-parser.rkt") (lib "typed-peg/typing/constraint-gen.rkt") (lib "typed-peg/examples/test11.rkt") (lib "typed-peg/examples/test13.rkt") (lib "typed-peg/typing/type.rkt") (lib "typed-peg/examples/test2.rkt") (lib "typed-peg/debug/z3-script-only.rkt") (lib "typed-peg/examples/test9.rkt") (lib "typed-peg/lexer.rkt") (lib "typed-peg/typing/infer.rkt") (lib "typed-peg/examples/test6.rkt") (lib "typed-peg/main.rkt") (lib "typed-peg/examples/test3.rkt") (lib "typed-peg/scribblings/typed-peg.scrbl") (lib "typed-peg/debug/constraints-only.rkt") (lib "typed-peg/examples/test8.rkt") (lib "typed-peg/typing/solver/model-lexer.rkt"))) (name . "typed-peg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (PEG . #t) (author:rodrigogribeiro@gmail.com . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/lives-group/typed-peg.git#master") (tags . ("parsing" "PEG")) (versions . #hash((default . #hasheq((checksum . "2a1002fa94cefb4416f9a3c29f5af1f2fd239d36") (source . "https://github.com/lives-group/typed-peg.git#master") (source_url . "https://github.com/lives-group/typed-peg.git#master"))))))) ("typed-racket-datatype" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-racket-datatype" "doc/typed-racket-datatype@typed-racket-datatype/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-datatype.txt"))) (checksum . "70af100b2035ee9383c63c0d969194659af233f2") (checksum-error . #f) (collection . "typed-racket-datatype") (conflicts . ()) (date-added . 1588292200) (dependencies . ("base" "typed-racket-lib" "typed-racket-datatype-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "rackunit-lib" "rackunit-typed")) (description . "Algebraic Datatypes for Typed Racket (tests and docs)") (implies . ("typed-racket-datatype-lib")) (modules . ((lib "typed-racket-datatype/test/occurrence-typing-test.rkt") (lib "typed-racket-datatype/test/datatype-test.rkt") (lib "typed-racket-datatype/scribblings/typed-racket-datatype.scrbl") (lib "typed-racket-datatype/test/match-test.rkt"))) (name . "typed-racket-datatype") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (struct . #t) (typed-racket . #t))) (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main") (tags . ("struct" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "70af100b2035ee9383c63c0d969194659af233f2") (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main") (source_url . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main"))))))) ("typed-racket-datatype-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-datatype-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-datatype-lib.txt"))) (checksum . "70af100b2035ee9383c63c0d969194659af233f2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588292063) (dependencies . ("base" "typed-racket-lib" "syntax-classes-lib")) (description . "Algebraic Datatypes for Typed Racket (implementation)") (implies . ()) (modules . ((lib "typed-racket-datatype/main.rkt") (lib "typed-racket-datatype/match.rkt"))) (name . "typed-racket-datatype-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (struct . #t) (typed-racket . #t))) (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main") (tags . ("struct" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "70af100b2035ee9383c63c0d969194659af233f2") (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main") (source_url . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main"))))))) ("typed-racket-hacks" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/typed-racket-hacks.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-hacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-hacks.txt"))) (checksum . "6d462852a29abb4406d53db2587e9d463b90b2ae") (checksum-error . #f) (collection . "typed-racket-hacks") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "set-extras")) (description . "Various workarounds for Typed Racket, most of which are expected to be eventually obsolete") (implies . ()) (modules . ((lib "typed-racket-hacks/unsafe.rkt") (lib "typed-racket-hacks/tests.rkt") (lib "typed-racket-hacks/main.rkt"))) (name . "typed-racket-hacks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (hacks . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (tags . ("hacks" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "6d462852a29abb4406d53db2587e9d463b90b2ae") (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (source_url . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks"))))))) ("typed-racket-stream" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-stream.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-stream.txt"))) (checksum . "ab5481df26289a47545101aeb1b74a0e7f02887f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Streams for typed racket") (implies . ()) (modules . ((lib "typed/racket/stream/tests/test-stream.rkt") (lib "typed/racket/stream/stream-pred.rkt") (lib "typed/racket/stream/stream-cons-thunk.rkt") (lib "typed/racket/stream/stream-cons.rkt") (lib "typed/racket/stream/stream-cons-thunk-untyped.rkt") (lib "typed/racket/stream.rkt"))) (name . "typed-racket-stream") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (typed-racket . #t))) (source . "http://github.com/AlexKnauth/typed-racket-stream/tree/master") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "ab5481df26289a47545101aeb1b74a0e7f02887f") (source . "git://github.com/AlexKnauth/typed-racket-stream") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master"))))))) ("typed-rosette" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/typed-rosette.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d72d4e7aad2c339fdd49c70682d56f83ab3eae3d") (checksum-error . #f) (collection . (multi)) (conflicts . ("syndicate")) (dependencies . ("racket" "base" "rosette" "turnstile" "rackunit-lib" "lens-common" "lens-unstable" "syntax-classes-lib" "rackunit-lib")) (description . "A typed variant of the Rosette language.") (implies . ()) (modules . ((lib "typed/rosette/set.rkt") (lib "test/synthcl-matrix-synth-tests.rkt") (lib "test/rosette-tests.rkt") (lib "typed/rosette/unsafe.rkt") (lib "test/rosette-guide-sec5-tests.rkt") (lib "test/typed-rosette/case-arrow.rkt") (lib "typed/rosette/list.rkt") (lib "test/rosette-guide-sec8-tests.rkt") (lib "typed/rosette/match-core.rkt") (lib "typed/bv/lang/reader.rkt") (lib "typed/rosette/struct-type-properties.rkt") (lib "test/matrix-verify-kernel.rkt") (lib "sdsl/typed-fsm/fsm.rkt") (lib "typed/rosette/base-forms.rkt") (lib "sdsl/typed-ifc/ifc.rkt") (lib "typed/query/debug.rkt") (lib "test/rosette-guide-sec43-tests.rkt") (lib "test/synthcl-matrix-verify-tests.rkt") (lib "test/typed-rosette/occurrence.rkt") (lib "typed/lib/angelic.rkt") (lib "sdsl/typed-synthcl/synthcl-model.rkt") (lib "test/walsh-synth-kernel.rkt") (lib "test/synthcl-walsh-verify-tests.rkt") (lib "test/synthcl-walsh-synth-tests.rkt") (lib "test/rosette-guide-sec45-tests.rkt") (lib "test/sobel-kernel.rkt") (lib "typed/lib/synthax.rkt") (lib "test/rosette-guide-sec4-tests.rkt") (lib "test/synthcl-tests.rkt") (lib "typed/lib/roseunit.rkt") (lib "sdsl/typed-bv/bv.rkt") (lib "typed/rosette/bool.rkt") (lib "test/rosette-guide-sec49-tests.rkt") (lib "typed/rosette/types.rkt") (lib "test/rosette-guide-sec46-tests.rkt") (lib "typed/rosette/vector.rkt") (lib "typed/ifc/lang/reader.rkt") (lib "test/rosette-guide-sec7-tests.rkt") (lib "test/synthcl-matrix-verify-buggy-tests.rkt") (lib "typed/rosette-util.rkt") (lib "typed/lib/check-asserts.rkt") (lib "test/bv-ref-tests.rkt") (lib "test/synthcl-sobel-tests.rkt") (lib "typed/rosette/lang/reader.rkt") (lib "sdsl/typed-synthcl/synthcl.rkt") (lib "typed/fsm/lang/reader.rkt") (lib "test/walsh-verify-kernel.rkt") (lib "typed/rosette/format.rkt") (lib "typed/rosette/hash.rkt") (lib "test/typed-rosette/occurrence2.rkt") (lib "test/typed-rosette/for-all-union.rkt") (lib "test/rosette-guide-sec3-tests.rkt") (lib "typed/rosette/function.rkt") (lib "typed/lib/render.rkt") (lib "test/rosette-guide-sec2-tests.rkt") (lib "typed/lib/lift.rkt") (lib "test/quote-tests.rkt") (lib "typed/main.rkt") (lib "typed/rosette/generic-interfaces.rkt") (lib "test/fsm-tests.rkt") (lib "test/matrix-synth-kernel.rkt") (lib "typed/rosette.rkt") (lib "typed/rosette/concrete-predicate.rkt") (lib "typed/rosette/for-forms.rkt") (lib "test/typed-rosette/rest-arg.rkt") (lib "test/rosette-guide-sec6-tests.rkt") (lib "test/rosette-guide-sec44-tests.rkt") (lib "test/typed-rosette/for-tests.rkt") (lib "typed/synthcl/lang/reader.rkt") (lib "typed/rosette/struct.rkt") (lib "typed/rosette/match-pat-forms.rkt") (lib "test/ifc-tests.rkt") (lib "test/typed-rosette/test-type-decl.rkt") (lib "typed/rosette/forms-pre-match.rkt") (lib "test/bv-test-utils.rkt") (lib "test/bv-tests.rkt"))) (name . "typed-rosette") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:stchang@racket-lang.org . #t) (ring:2 . #t) (rosette . #t) (symbolic-execution . #t) (typed . #t))) (source . "https://github.com/stchang/typed-rosette.git") (tags . ("rosette" "symbolic-execution" "typed")) (versions . #hash((default . #hasheq((checksum . "d72d4e7aad2c339fdd49c70682d56f83ab3eae3d") (source . "https://github.com/stchang/typed-rosette.git") (source_url . "https://github.com/stchang/typed-rosette.git"))))))) ("typed-stack" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-stack" "doc/typed-stack@typed-stack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-stack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-stack.txt"))) (checksum . "5bcf55322b3a97ecfb0233ed77f282507eb2f6ad") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-more" "typed-racket-lib" "scribble-lib" "typed-racket-doc" "racket-doc")) (description . "A simple stack library written in TR.") (implies . ()) (modules . ((lib "typed-stack/doc/typed-stack.scrbl") (lib "typed-stack/typed-stack.rkt") (lib "typed-stack/test/stack-test.rkt") (lib "typed-stack/main.rkt"))) (name . "typed-stack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (ring:1 . #t) (stack . #t) (typed-racket . #t))) (source . "http://github.com/lehitoskin/typed-stack/tree/master") (tags . ("stack" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "5bcf55322b3a97ecfb0233ed77f282507eb2f6ad") (source . "git://github.com/lehitoskin/typed-stack") (source_url . "http://github.com/lehitoskin/typed-stack/tree/master"))))))) ("typed-struct-props" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-struct-props" "doc/typed-struct-props@typed-struct-props/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-struct-props.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-struct-props.txt"))) (checksum . "5512b7f4c9dff6b2be445435b86babfc9b189fc8") (checksum-error . #f) (collection . "typed-struct-props") (conflicts . ()) (date-added . 1614799572) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Some struct type properties in Typed/Racket, in a more type-safe way.\r\n\r\nThe API should hopefully stay backward-compatible when Typed/Racket officially supports (or rejects) structure type properties.") (implies . ()) (modules . ((lib "typed-struct-props/test/test-equal+hash.rkt") (lib "typed-struct-props/test/test-write.rkt") (lib "typed-struct-props/scribblings/typed-struct-props.scrbl") (lib "typed-struct-props/test/test-write+equal+hash-poly.rkt") (lib "typed-struct-props/test/test-write-poly.rkt") (lib "typed-struct-props/test/test-poly.rkt") (lib "typed-struct-props/test/test-none.rkt") (lib "typed-struct-props/test/test-child.rkt") (lib "typed-struct-props/test/test-write+equal+hash.rkt") (lib "typed-struct-props/test/test-after.rkt") (lib "typed-struct-props/main.rkt") (lib "typed-struct-props/test/test-none-poly.rkt") (lib "typed-struct-props/test/test-parent.rkt") (lib "typed-struct-props/test/test-equal+hash-poly.rkt"))) (name . "typed-struct-props") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (structs . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-struct-props.git#main") (tags . ("structs" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "5512b7f4c9dff6b2be445435b86babfc9b189fc8") (source . "https://github.com/jsmaniac/typed-struct-props.git#main") (source_url . "https://github.com/jsmaniac/typed-struct-props.git#main"))))))) ("typed-worklist" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-worklist" "doc/typed-worklist@typed-worklist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-worklist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-worklist.txt"))) (checksum . "31fb17fb7c8aaa96c49dcd1ca9094d0dffa775c8") (checksum-error . #f) (collection . "typed-worklist") (conflicts . ()) (date-added . 1614799576) (dependencies . ("base" "rackunit-lib" "type-expander" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A Typed Racket implementation of a general-purpose worklist, with multiple worklists of different types.") (implies . ()) (modules . ((lib "typed-worklist/main.rkt") (lib "typed-worklist/scribblings/typed-worklist.scrbl") (lib "typed-worklist/test/test-experiment.rkt"))) (name . "typed-worklist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t) (utility . #t))) (source . "https://github.com/jsmaniac/typed-worklist.git#main") (tags . ("typed-racket" "utility")) (versions . #hash((default . #hasheq((checksum . "31fb17fb7c8aaa96c49dcd1ca9094d0dffa775c8") (source . "https://github.com/jsmaniac/typed-worklist.git#main") (source_url . "https://github.com/jsmaniac/typed-worklist.git#main"))))))) ("typeset-rewriter" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typeset-rewriter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typeset-rewriter.txt"))) (checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "redex-pict-lib")) (description . "Simple, low-level rewriter tools for typesetting PLT Redex models") (implies . ()) (modules . ((lib "typeset-rewriter/main.rkt"))) (name . "typeset-rewriter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t))) (source . "http://github.com/pnwamk/typeset-rewriter/tree/master#master") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (source . "git://github.com/pnwamk/typeset-rewriter#master") (source_url . "http://github.com/pnwamk/typeset-rewriter/tree/master#master"))))))) ("tzdata" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzdata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzdata.txt"))) (checksum . "ced0e5604836f5cb68a81baa6f2fee4ff2fe7a26") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573413250) (dependencies . ("base")) (description . "zoneinfo data mainly for Windows systems using tzinfo") (implies . ()) (modules . ()) (name . "tzdata") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/97jaz/tzdata.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "ced0e5604836f5cb68a81baa6f2fee4ff2fe7a26") (source . "https://github.com/97jaz/tzdata.git") (source_url . "https://github.com/97jaz/tzdata.git"))))))) ("tzgeolookup" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tzgeolookup" "doc/tzgeolookup@tzgeolookup/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzgeolookup.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzgeolookup.txt"))) (checksum . "add21f8d3446fec46d1355edb13c00458891f2c3") (checksum-error . #f) (collection . "tzgeolookup") (conflicts . ()) (date-added . 1565997219) (dependencies . ("base" "math-lib" "db-lib" "geoid" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Find the time zone name for any geographic coordinate on earth.  This package works entirely off-line, without having to contact any web service for this information.\r\n") (implies . ()) (modules . ((lib "tzgeolookup/private/tzgeolookup.rkt") (lib "tzgeolookup/tools/tzt-pack.rkt") (lib "tzgeolookup/tools/snippets.rkt") (lib "tzgeolookup/scribblings/tzgeolookup.scrbl") (lib "tzgeolookup/tools/tzt-worker.rkt") (lib "tzgeolookup/main.rkt"))) (name . "tzgeolookup") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/alex-hhh/tzgeolookup.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "add21f8d3446fec46d1355edb13c00458891f2c3") (source . "https://github.com/alex-hhh/tzgeolookup.git") (source_url . "https://github.com/alex-hhh/tzgeolookup.git"))))))) ("tzinfo" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tzinfo" "doc/tzinfo@tzinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzinfo.txt"))) (checksum . "2f812283d9c90040aecb3c7e2ed2edf93a3720de") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573413479) (dependencies . ("base" "cldr-core" "rackunit-lib" "tzdata" "racket-doc" "scribble-lib")) (description . "API for querying the IANA tz database") (implies . ()) (modules . ((lib "tzinfo/private/tabfile-parser.rkt") (lib "tzinfo/private/structs.rkt") (lib "tzinfo/private/os/unix.rkt") (lib "tzinfo/private/tzfile-parser.rkt") (lib "tzinfo/private/os/windows-registry.rkt") (lib "tzinfo/private/os/windows.rkt") (lib "tzinfo/zoneinfo.rkt") (lib "tzinfo/source.rkt") (lib "tzinfo/main.rkt") (lib "tzinfo/scribblings/tzinfo.scrbl") (lib "tzinfo/private/zoneinfo.rkt") (lib "tzinfo/private/generics.rkt") (lib "tzinfo/test/zoneinfo.rkt") (lib "tzinfo/private/zoneinfo-search.rkt") (lib "tzinfo/private/os/env.rkt"))) (name . "tzinfo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/97jaz/tzinfo.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "2f812283d9c90040aecb3c7e2ed2edf93a3720de") (source . "https://github.com/97jaz/tzinfo.git") (source_url . "https://github.com/97jaz/tzinfo.git"))))))) ("udelim" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "udelim" "doc/udelim@udelim/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udelim.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udelim.txt"))) (checksum . "58420f53c37e0bee451daa3dc5e2d72f7fc4d967") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1608151895) (dependencies . ("base" "racket-doc" "scribble-lib" "sandbox-lib" "rackunit-lib")) (description . "Add more parens and string delimiters.") (implies . ()) (modules . ((lib "udelim/udelim.scrbl") (lib "udelim/main.rkt") (lib "udelim/lang/reader.rkt") (lib "udelim/defaults.rkt"))) (name . "udelim") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (reader . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-udelim.git") (tags . ("reader")) (versions . #hash((default . #hasheq((checksum . "58420f53c37e0bee451daa3dc5e2d72f7fc4d967") (source . "https://github.com/willghatch/racket-udelim.git") (source_url . "https://github.com/willghatch/racket-udelim.git"))))))) ("udev" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udev.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udev.txt"))) (checksum . "9ceb721d4d2af78a5ff99c0977e7970c46e79055") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "udev bindings for Racket") (implies . ()) (modules . ((lib "udev/private/ffi.rkt") (lib "udev/main.rkt"))) (name . "udev") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-udev/tree/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "9ceb721d4d2af78a5ff99c0977e7970c46e79055") (source . "github://github.com/mordae/racket-udev/master") (source_url . "http://github.com/mordae/racket-udev/tree/master"))))))) ("ugly-app-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ugly-app-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ugly-app-lib.txt"))) (checksum . "86f2670f27cb7e09eb80e4494f80b54528701c7a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622059934) (dependencies . ("base" "fancy-app")) (description . "A Racket library that allows prefix, infix, postfix, and partially applied functions. Note: ugly in some ways so I'd recommend the simpler `fancy-app` instead") (implies . ()) (modules . ((lib "ugly-app/ugly-name.rkt") (lib "ugly-app/placeholder.rkt") (lib "ugly-app/ugly-app.rkt") (lib "ugly-app/main.rkt") (lib "ugly-app/ugly-function.rkt"))) (name . "ugly-app-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app-syntax . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib") (tags . ("app-syntax" "sugar")) (versions . #hash((default . #hasheq((checksum . "86f2670f27cb7e09eb80e4494f80b54528701c7a") (source . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib") (source_url . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib"))))))) ("ulid" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ulid" "doc/ulid@ulid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ulid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ulid.txt"))) (checksum . "2fb3dbaca00f276ac78bf93f1892140fdc60ee9a") (checksum-error . #f) (collection . "ulid") (conflicts . ()) (date-added . 1585903876) (dependencies . ("base" "racket-doc" "rackcheck" "rackunit-lib" "scribble-lib")) (description . "Universally unique lexicographically sortable identifiers.") (implies . ()) (modules . ((lib "ulid/private/base32.rkt") (lib "ulid/ulid.scrbl") (lib "ulid/private/random.rkt") (lib "ulid/main.rkt"))) (name . "ulid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (ulid . #t) (uuid . #t))) (source . "https://github.com/Bogdanp/racket-ulid.git") (tags . ("ulid" "uuid")) (versions . #hash((default . #hasheq((checksum . "2fb3dbaca00f276ac78bf93f1892140fdc60ee9a") (source . "https://github.com/Bogdanp/racket-ulid.git") (source_url . "https://github.com/Bogdanp/racket-ulid.git"))))))) ("umask" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/umask.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/umask.txt"))) (checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1641266528) (dependencies . ("umask-doc" "umask-lib")) (description . "umask - set default permissions on unix-like systems") (implies . ("umask-doc" "umask-lib")) (modules . ()) (name . "umask") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (filesystem . #t) (library . #t) (linux . #t) (ring:1 . #t) (unix . #t))) (source . "https://github.com/winny-/umask.git?path=umask#master") (tags . ("filesystem" "library" "linux" "unix")) (versions . #hash((default . #hasheq((checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (source . "https://github.com/winny-/umask.git?path=umask#master") (source_url . "https://github.com/winny-/umask.git?path=umask#master"))))))) ("umask-doc" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "umask" "doc/umask@umask-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/umask-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/umask-doc.txt"))) (checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642222433) (dependencies . ("base" "scribble-lib" "racket-doc" "umask-lib")) (description . "Documentation for umask") (implies . ()) (modules . ((lib "scribblings/umask.scrbl"))) (name . "umask-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (ring:1 . #t))) (source . "https://github.com/winny-/umask.git?path=umask-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (source . "https://github.com/winny-/umask.git?path=umask-doc") (source_url . "https://github.com/winny-/umask.git?path=umask-doc"))))))) ("umask-lib" . #hasheq((author . "racket@winny.tech winston@ml1.net") (authors . ("racket@winny.tech" "winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/umask-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/umask-lib.txt"))) (checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1642222496) (dependencies . ("base")) (description . "Library code portion of the umask collection") (implies . ()) (modules . ((lib "umask/private/libc-umask.rkt") (lib "umask/main.rkt"))) (name . "umask-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:racket@winny.tech . #t) (author:winston@ml1.net . #t) (ring:1 . #t))) (source . "https://github.com/winny-/umask.git?path=umask-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6ccdac1839b2dd592527520c4b6ae319c7b7c961") (source . "https://github.com/winny-/umask.git?path=umask-lib") (source_url . "https://github.com/winny-/umask.git?path=umask-lib"))))))) ("unb-cs2613" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unb-cs2613.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unb-cs2613.txt"))) (checksum . "67576e2029d4865143c458b26fbc9da78c066a66") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1595446837) (dependencies . ("base" "drracket" "drracket-plugin-lib" "frog" "explorer" "date")) (description . "Racket packages for UNB CS2613 ") (implies . ()) (modules . ()) (name . "unb-cs2613") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:david@tethera.net . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/unb-cs2613.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "67576e2029d4865143c458b26fbc9da78c066a66") (source . "https://pivot.cs.unb.ca/git/unb-cs2613.git") (source_url . "https://pivot.cs.unb.ca/git/unb-cs2613.git"))))))) ("unb-cs4613" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unb-cs4613.txt") (test-failure-log . "server/built/test-fail/unb-cs4613.txt") (test-success-log . #f))) (checksum . "2822b8c4d4864c79181608ae0e73d9f04c24f43c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1609779553) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" "plait" "brag" "plai-dynamic")) (description . "Handin client + metapackage for UNB Fredericton CS4613") (implies . ()) (modules . ((lib "unb-cs4613/this-collection.rkt") (lib "unb-cs4613/client.rkt") (lib "unb-cs4613/handin-multi.rkt") (lib "unb-cs4613/client-gui.rkt") (lib "unb-cs4613/updater.rkt"))) (name . "unb-cs4613") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:david@tethera.net . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/unb-cs4613.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2822b8c4d4864c79181608ae0e73d9f04c24f43c") (source . "https://pivot.cs.unb.ca/git/unb-cs4613.git") (source_url . "https://pivot.cs.unb.ca/git/unb-cs4613.git"))))))) ("uni-table" . #hasheq((author . "dominik.pantucek@trustica.cz") (authors . ("dominik.pantucek@trustica.cz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uni-table" "doc/uni-table@uni-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uni-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uni-table.txt"))) (checksum . "301feeda30ef2f42eb91328bbbb884c2759dba88") (checksum-error . #f) (collection . "uni-table") (conflicts . ()) (date-added . 1637871082) (dependencies . ("base" "scribble-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc" "rackunit-lib" "at-exp-lib" "sandbox-lib" "scribble-doc" "pict-doc")) (description . "Unicode tables rendering with ECMA-48 Select Graphic Rendition codes support") (implies . ()) (modules . ((lib "uni-table/private/table-transform.rkt") (lib "uni-table/private/table-cell.rkt") (lib "uni-table/private/table-render.rkt") (lib "uni-table/scribblings/styles.scrbl") (lib "uni-table/private/wrappers.rkt") (lib "uni-table/scribblings/uni-table.scrbl") (lib "uni-table/scribblings/rendering.scrbl") (lib "uni-table/private/sgr-style.rkt") (lib "uni-table/private/ecma-sgr.rkt") (lib "uni-table/main.rkt") (lib "uni-table/private/ecma-csi.rkt") (lib "uni-table/scribblings/pict.scrbl") (lib "uni-table/private/cell-align.rkt") (lib "uni-table/private/spec-syntax.rkt") (lib "uni-table/private/table-structs.rkt") (lib "uni-table/private/sgr-pict.rkt") (lib "uni-table/private/sgr-format.rkt") (lib "uni-table/private/table-borders.rkt") (lib "uni-table/scribblings/text-output.scrbl") (lib "uni-table/pict.rkt") (lib "uni-table/scribblings/tables.scrbl") (lib "uni-table/private/box-drawing.rkt") (lib "uni-table/private/cell-border.rkt") (lib "uni-table/private/table-query.rkt") (lib "uni-table/private/table-pict.rkt"))) (name . "uni-table") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dominik.pantucek@trustica.cz . #t) (format . #t) (ring:1 . #t) (tabular . #t) (text . #t))) (source . "https://gitlab.com/racketeer/uni-table.git") (tags . ("format" "tabular" "text")) (versions . #hash((default . #hasheq((checksum . "301feeda30ef2f42eb91328bbbb884c2759dba88") (source . "https://gitlab.com/racketeer/uni-table.git") (source_url . "https://gitlab.com/racketeer/uni-table.git"))))))) ("unicode-properties" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unicode" "doc/unicode@unicode-properties/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unicode-properties.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unicode-properties.txt"))) (checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "This package provides definitions for several unicode properties, and also an auto-update mechanism that can extract additional ones.") (implies . ()) (modules . ((lib "unicode-props/derived-binary-properties.rkt") (lib "unicode-props/fn-and-ranges.rkt") (lib "unicode-props/unicode.scrbl") (lib "unicode-props/main.rkt") (lib "unicode-props/test.rkt") (lib "unicode-props/derived-core-properties.rkt") (lib "unicode-props/compute-prop.rkt"))) (name . "unicode-properties") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t) (unicode . #t))) (source . "http://github.com/jbclements/unicode-props/tree/master") (tags . ("io" "unicode")) (versions . #hash((default . #hasheq((checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (source . "github://github.com/jbclements/unicode-props/master") (source_url . "http://github.com/jbclements/unicode-props/tree/master"))))))) ("unix-signals" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unix-signals" "doc/unix-signals@unix-signals/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/unix-signals.txt") (success-log . "server/built/install/unix-signals.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unix-signals.txt"))) (checksum . "a0c50918dac6cf5df7d0789d13dac9759eab5606") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib" "racket-doc" "scribble-lib")) (description . "Sending and handling Unix signals from Racket") (implies . ()) (modules . ((lib "unix-signals/main.rkt") (lib "unix-signals/test.rkt") (lib "unix-signals/unix-signals.scrbl") (lib "unix-signals/private/install.rkt"))) (name . "unix-signals") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "http://github.com/tonyg/racket-unix-signals/tree/master") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "a0c50918dac6cf5df7d0789d13dac9759eab5606") (source . "git://github.com/tonyg/racket-unix-signals") (source_url . "http://github.com/tonyg/racket-unix-signals/tree/master"))))))) ("unlike-assets-doc" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unlike-assets" "doc/unlike-assets@unlike-assets-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-doc.txt") (test-failure-log . "server/built/test-fail/unlike-assets-doc.txt") (test-success-log . #f))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:690:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:167:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695246) (dependencies . ("base" "unlike-assets-lib" "kinda-ferpy" "graph-lib" "unlike-assets-lib" "scribble-lib" "racket-doc")) (description . "(OLD EDITION) Documentation for unlike-assets") (implies . ()) (modules . ((lib "unlike-assets/scribblings/unlike-assets-doc.scrbl") (lib "unlike-assets/scribblings/examples.scrbl") (lib "unlike-assets/scribblings/logging.scrbl") (lib "unlike-assets/scribblings/reactive.scrbl") (lib "unlike-assets/scribblings/cli.scrbl") (lib "unlike-assets/scribblings/policy.scrbl") (lib "unlike-assets/scribblings/imperative.scrbl") (lib "unlike-assets/scribblings/unlike-assets.scrbl") (lib "unlike-assets/scribblings/rebuilds.scrbl"))) (name . "unlike-assets-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unlike-assets-lib" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unlike-assets-lib.txt"))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:690:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:167:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695006) (dependencies . ("base" "file-watchers" "ansi-color" "graph-lib" "kinda-ferpy")) (description . "(OLD EDITION) Implementation of unlike-assets") (implies . ()) (modules . ((lib "unlike-assets/cli.rkt") (lib "unlike-assets/private/reactive/assets.rkt") (lib "unlike-assets/private/unlike-compiler.rkt") (lib "unlike-assets/reactive.rkt") (lib "unlike-assets/logging.rkt") (lib "unlike-assets/main.rkt") (lib "unlike-assets/private/assets.rkt") (lib "unlike-assets/private/reactive/system.rkt") (lib "unlike-assets/policy.rkt"))) (name . "unlike-assets-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unlike-assets-test" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-test.txt") (test-failure-log . "server/built/test-fail/unlike-assets-test.txt") (test-success-log . #f))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:690:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:167:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695314) (dependencies . ("base" "unlike-assets-lib" "rackunit-lib")) (description . "(OLD EDITION) Tests for unlike-assets") (implies . ()) (modules . ((lib "tests/unlike-assets/assets.rkt") (lib "tests/unlike-assets/policy.rkt") (lib "tests/unlike-assets/unlike-compiler.rkt") (lib "tests/unlike-assets/reactive.rkt"))) (name . "unlike-assets-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unreachable" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/unreachable.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unreachable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unreachable.txt"))) (checksum . "a7d303d673ebb887ed49550ee27da307948cda37") (checksum-error . #f) (collection . "unreachable") (conflicts . ()) (dependencies . ("base")) (description . "Utilities for expressing supposedly unreachable code") (implies . ()) (modules . ((lib "unreachable/test.rkt") (lib "unreachable/main.rkt"))) (name . "unreachable") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (absurd . #t) (author:pcn@cs.umd.edu . #t) (case . #t) (cond . #t) (dead-code . #t) (ring:1 . #t) (unreachable . #t))) (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (tags . ("absurd" "case" "cond" "dead-code" "unreachable")) (versions . #hash((default . #hasheq((checksum . "a7d303d673ebb887ed49550ee27da307948cda37") (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (source_url . "https://github.com/philnguyen/unreachable.git?path=unreachable"))))))) ("unstable" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("unstable-lib" "unstable-doc")) (description . "Experimental libraries") (implies . ("unstable-lib" "unstable-doc")) (modules . ()) (name . "unstable") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable/?path=unstable") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable") (source_url . "git://github.com/racket/unstable/?path=unstable"))))))) ("unstable-2d" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-2d.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "2d-lib")) (description . "Experimental 2d syntax") (implies . ()) (modules . ((lib "unstable/2d/dir-chars.rkt") (lib "unstable/2d/cond.rkt") (lib "unstable/2d/tabular.rkt") (lib "unstable/2d/match.rkt") (lib "unstable/2d/lang/reader.rkt"))) (name . "unstable-2d") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-2d/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "b623df87d732171833103e05b3e76d3ce79f1047") (source . "git://github.com/racket/unstable-2d") (source_url . "http://github.com/racket/unstable-2d/tree/master"))))))) ("unstable-contract-lib" . #hash((author . "robby@racket-lang.org ryanc@racket-lang.org") (authors . ("robby@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for working with contracts") (implies . ()) (modules . ((lib "unstable/contract.rkt"))) (name . "unstable-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-contract-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "198b743c39450f0340dc03a792c29794652d6e08") (source . "git://github.com/racket/unstable-contract-lib") (source_url . "http://github.com/racket/unstable-contract-lib/tree/master"))))))) ("unstable-debug-lib" . #hash((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-debug-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-debug-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for debugging") (implies . ()) (modules . ((lib "unstable/debug.rkt"))) (name . "unstable-debug-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-debug-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "1511a2410d11a69b9116c5d6668869765ef58f56") (source . "git://github.com/racket/unstable-debug-lib") (source_url . "http://github.com/racket/unstable-debug-lib/tree/master"))))))) ("unstable-doc" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable" "doc/unstable@unstable-doc/index.html") ("main" "unstable-gui" "doc/unstable-gui@unstable-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "rackunit-doc" "scheme-lib" "at-exp-lib" "compatibility-lib" "draw-lib" "gui-lib" "pict-lib" "racket-doc" "rackunit-lib" "scribble-lib" "slideshow-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-macro-testing-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-pretty-lib" "unstable-2d" "draw-doc" "gui-doc" "pict-doc" "scribble-doc" "slideshow-doc" "class-iop-doc" "automata-doc" "markparam-doc" "temp-c-doc" "unix-socket-doc" "2d-doc" "option-contract-doc")) (description . "documentation part of \"unstable\"") (implies . ()) (modules . ((lib "unstable/scribblings/find.scrbl") (lib "unstable/scribblings/class-iop.scrbl") (lib "unstable/scribblings/match.scrbl") (lib "unstable/scribblings/logging.scrbl") (lib "unstable/scribblings/gui/pict.scrbl") (lib "unstable/scribblings/sandbox.scrbl") (lib "unstable/scribblings/automata.scrbl") (lib "unstable/scribblings/contract.scrbl") (lib "unstable/scribblings/options.scrbl") (lib "unstable/scribblings/struct.scrbl") (lib "unstable/scribblings/custom-write.scrbl") (lib "unstable/scribblings/wrapc.scrbl") (lib "unstable/scribblings/macro-testing.scrbl") (lib "unstable/scribblings/unstable.scrbl") (lib "unstable/scribblings/string.scrbl") (lib "unstable/scribblings/gui/unstable-gui.scrbl") (lib "unstable/scribblings/gui/prefs.scrbl") (lib "unstable/scribblings/socket.scrbl") (lib "unstable/scribblings/syntax.scrbl") (lib "unstable/scribblings/pretty.scrbl") (lib "unstable/scribblings/temp-c.scrbl") (lib "unstable/scribblings/utils.rkt") (lib "unstable/scribblings/function.scrbl") (lib "unstable/scribblings/open-place.scrbl") (lib "unstable/scribblings/markparam.scrbl") (lib "unstable/scribblings/error.scrbl") (lib "unstable/scribblings/recontract.scrbl") (lib "unstable/scribblings/lazy-require.scrbl") (lib "unstable/scribblings/hash.scrbl") (lib "unstable/scribblings/parameter-group.scrbl") (lib "unstable/scribblings/debug.scrbl") (lib "unstable/scribblings/sequence.scrbl") (lib "unstable/scribblings/future.scrbl") (lib "unstable/scribblings/gui/scribble.scrbl") (lib "unstable/scribblings/2d.scrbl") (lib "unstable/scribblings/gui/notify.scrbl") (lib "unstable/scribblings/gui/snip.scrbl") (lib "unstable/scribblings/define.scrbl") (lib "unstable/scribblings/gui/slideshow.scrbl") (lib "unstable/scribblings/list.scrbl") (lib "unstable/scribblings/bytes.scrbl"))) (name . "unstable-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable/?path=unstable-doc") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-doc") (source_url . "git://github.com/racket/unstable/?path=unstable-doc"))))))) ("unstable-flonum-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-flonum" "doc/unstable-flonum@unstable-flonum-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable" "unstable-flonum-lib" "plot" "math-doc" "racket-doc")) (description . "Experimental libraries for flonum computations (documentation)") (implies . ()) (modules . ((lib "unstable/unstable-flonum.scrbl"))) (name . "unstable-flonum-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "e7e1ed3e9c2f3448e1eac2084e2f2f6c4d126000") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc"))))))) ("unstable-flonum-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for flonum computations") (implies . ()) (modules . ((lib "unstable/flonum.rkt"))) (name . "unstable-flonum-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "e7e1ed3e9c2f3448e1eac2084e2f2f6c4d126000") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib"))))))) ("unstable-latent-contract-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-latent-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-latent-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "images-lib")) (description . "Experimental libraries for contracts at definitions") (implies . ()) (modules . ((lib "unstable/latent-contract/defthing.rkt") (lib "unstable/latent-contract/serialize-syntax.rkt") (lib "unstable/latent-contract.rkt"))) (name . "unstable-latent-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-latent-contract-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "9df3d23294e7ae9ac06fe613c383e1f04e56f3ae") (source . "git://github.com/racket/unstable-latent-contract-lib") (source_url . "http://github.com/racket/unstable-latent-contract-lib/tree/master"))))))) ("unstable-lib" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("automata-lib" "base" "draw-lib" "gui-lib" "markparam-lib" "pict-lib" "ppict" "scribble-lib" "slideshow-lib" "temp-c-lib" "unstable-macro-testing-lib" "unix-socket-lib" "staged-slide" "rackunit-lib")) (description . "implementation (no documentation) part of \"unstable\"") (implies . ("unstable-macro-testing-lib")) (modules . ((lib "unstable/gui/notify.rkt") (lib "unstable/automata/re-ext.rkt") (lib "unstable/gui/slideshow.rkt") (lib "unstable/wrapc.rkt") (lib "unstable/gui/scribble.rkt") (lib "unstable/gui/snip.rkt") (lib "unstable/logging.rkt") (lib "unstable/find.rkt") (lib "unstable/string.rkt") (lib "unstable/gui/ppict.rkt") (lib "unstable/syntax.rkt") (lib "unstable/match.rkt") (lib "unstable/automata/nfa.rkt") (lib "unstable/lazy-require.rkt") (lib "unstable/gui/pslide.rkt") (lib "unstable/future.rkt") (lib "unstable/define.rkt") (lib "unstable/automata/re.rkt") (lib "unstable/temp-c/dsl.rkt") (lib "unstable/arrow.rkt") (lib "unstable/automata/machine.rkt") (lib "unstable/socket.rkt") (lib "unstable/automata/nfa-ep.rkt") (lib "unstable/gui/pict/plt-logo.rkt") (lib "unstable/gui/prefs.rkt") (lib "unstable/custom-write.rkt") (lib "unstable/sequence.rkt") (lib "unstable/time.rkt") (lib "unstable/gui/pict/align.rkt") (lib "unstable/error.rkt") (lib "unstable/struct.rkt") (lib "unstable/markparam.rkt") (lib "unstable/recontract.rkt") (lib "unstable/gui/pict.rkt") (lib "unstable/open-place.rkt") (lib "unstable/sandbox.rkt") (lib "unstable/automata/dfa.rkt") (lib "unstable/temp-c/monitor.rkt"))) (name . "unstable-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable/?path=unstable-lib") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-lib") (source_url . "git://github.com/racket/unstable/?path=unstable-lib"))))))) ("unstable-list-lib" . #hash((author . "ryanc@racket-lang.org samth@racket-lang.org") (authors . ("ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-list-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-list-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "class-iop-lib")) (description . "Experimental libraries for list operations") (implies . ()) (modules . ((lib "unstable/class-iop.rkt") (lib "unstable/function.rkt") (lib "unstable/bytes.rkt") (lib "unstable/hash.rkt") (lib "unstable/list.rkt"))) (name . "unstable-list-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-list-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "0b3e390a25d5347c3e3b6e08b605b2865f0fae10") (source . "git://github.com/racket/unstable-list-lib") (source_url . "http://github.com/racket/unstable-list-lib/tree/master"))))))) ("unstable-macro-testing-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-macro-testing-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-macro-testing-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for testing macros") (implies . ()) (modules . ((lib "unstable/macro-testing.rkt"))) (name . "unstable-macro-testing-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-macro-testing-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "65b4dcc6d6d4aa6a1a29cb3fc039fb4a06968a45") (source . "git://github.com/racket/unstable-macro-testing-lib") (source_url . "http://github.com/racket/unstable-macro-testing-lib/tree/master"))))))) ("unstable-options-lib" . #hash((author . "chrdimo@racket-lang.org robby@racket-lang.org") (authors . ("chrdimo@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-options-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-options-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "option-contract-lib")) (description . "Experimental libraries for option contracts") (implies . ()) (modules . ((lib "unstable/options.rkt"))) (name . "unstable-options-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:chrdimo@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-options-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "5b9ff5e62319ddb929235c5ddcd4cee350ee9a9b") (source . "git://github.com/racket/unstable-options-lib") (source_url . "http://github.com/racket/unstable-options-lib/tree/master"))))))) ("unstable-parameter-group-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-parameter-group-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-parameter-group-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "images-lib")) (description . "Experimental libraries for parameter groups") (implies . ()) (modules . ((lib "unstable/parameter-group.rkt"))) (name . "unstable-parameter-group-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-parameter-group-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "1906272f807c12a3d7e2a1c430c5b5745c2de6a4") (source . "git://github.com/racket/unstable-parameter-group-lib") (source_url . "http://github.com/racket/unstable-parameter-group-lib/tree/master"))))))) ("unstable-pretty-lib" . #hash((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-pretty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-pretty-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for pretty printing") (implies . ()) (modules . ((lib "unstable/pretty.rkt"))) (name . "unstable-pretty-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-pretty-lib/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "d420f822301174b1931c8b43d2131924fc75565f") (source . "git://github.com/racket/unstable-pretty-lib") (source_url . "http://github.com/racket/unstable-pretty-lib/tree/master"))))))) ("unstable-redex" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-redex" "doc/unstable-redex@unstable-redex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-redex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-redex.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "pict-lib" "redex-lib" "redex-pict-lib" "scribble-lib" "pict-doc" "redex-doc" "racket-doc")) (description . "Experimental libraries for typesetting PLT Redex models") (implies . ()) (modules . ((lib "unstable/gui/redex.rkt") (lib "unstable/gui/unstable-redex.scrbl"))) (name . "unstable-redex") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://github.com/racket/unstable-redex/tree/master") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "c8fd60d300039f1d1a5de82683746223945d651c") (source . "git://github.com/racket/unstable-redex") (source_url . "http://github.com/racket/unstable-redex/tree/master"))))))) ("unstable-test" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org robby@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-test.txt") (test-failure-log . "server/built/test-fail/unstable-test.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "scheme-lib" "at-exp-lib" "compatibility-lib" "eli-tester" "gui-lib" "planet-lib" "racket-test" "rackunit-lib" "srfi-lib" "syntax-color-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-2d")) (description . "tests for \"unstable\"") (implies . ()) (modules . ((lib "tests/test-docs-complete.rkt") (lib "tests/unstable/sequence.rkt") (lib "tests/unstable/debug.rkt") (lib "tests/unstable/planet-syntax.rkt") (lib "tests/unstable/logging.rkt") (lib "tests/unstable/match.rkt") (lib "tests/unstable/set.rkt") (lib "tests/unstable/helpers.rkt") (lib "tests/unstable/parameter-group.rkt") (lib "tests/unstable/syntax.rkt") (lib "tests/unstable/list.rkt") (lib "tests/unstable/contract.rkt"))) (name . "unstable-test") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "git://github.com/racket/unstable/?path=unstable-test") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-test") (source_url . "git://github.com/racket/unstable/?path=unstable-test"))))))) ("upi" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/upi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/upi.txt"))) (checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570048) (dependencies . ("base" "upi-doc" "upi-lib" "upi-test")) (description . "Racket library inspired by UNIX tools. Metapackage.") (implies . ()) (modules . ()) (name . "upi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi") (tags . ("library")) (versions . #hash((default . #hasheq((checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi") (source_url . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi"))))))) ("upi-doc" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "upi" "doc/upi@upi-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/upi-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/upi-doc.txt"))) (checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659570019) (dependencies . ("base" "racket-doc" "scribble-lib" "upi-lib")) (description . "Racket library inspired by UNIX tools. Documentation.") (implies . ()) (modules . ((lib "upi/scribblings/main.scrbl"))) (name . "upi-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-doc") (tags . ("library")) (versions . #hash((default . #hasheq((checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-doc") (source_url . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-doc"))))))) ("upi-lib" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/upi-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/upi-lib.txt"))) (checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1634242305) (dependencies . ("base" "typed-racket-lib" "threading-lib")) (description . "Racket library inspired by UNIX tools. Core.\r\n") (implies . ()) (modules . ((lib "upi/basename.rkt") (lib "upi/find.rkt") (lib "upi/which.rkt") (lib "upi/cd.rkt") (lib "upi/pwd.rkt") (lib "upi/ls/permissions.rkt") (lib "upi/wc.rkt") (lib "upi/watch.rkt") (lib "upi/ls.rkt") (lib "upi/id/private/str-num.rkt") (lib "upi/yes.rkt") (lib "upi/dirnames.rkt") (lib "upi/dirname.rkt") (lib "upi/id.rkt") (lib "upi/daemon.rkt") (lib "upi/false.rkt") (lib "upi/realpath.rkt") (lib "upi/true.rkt") (lib "upi/whoami.rkt") (lib "upi/ln.rkt") (lib "upi/chmod.rkt") (lib "upi/arch.rkt") (lib "upi/id/users.rkt") (lib "upi/id/groups.rkt"))) (name . "upi-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-lib") (tags . ("library")) (versions . #hash((default . #hasheq((checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-lib") (source_url . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-lib"))))))) ("upi-test" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/upi-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/upi-test.txt"))) (checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659569970) (dependencies . ("base" "rackunit-lib" "upi-lib")) (description . "Racket library inspired by UNIX tools. Tests.") (implies . ()) (modules . ()) (name . "upi-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-test") (tags . ("library")) (versions . #hash((default . #hasheq((checksum . "d22ba2a8118b5a3f9a7c588b186692b725663088") (source . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-test") (source_url . "https://gitlab.com/xgqt/racket-upi.git?path=src%2Fupi-test"))))))) ("uri" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri" "doc/uri@uri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri.txt"))) (checksum . "79934c1432baad34a3272c0429caa4b695c4b996") (checksum-error . #f) (collection . "uri") (conflicts . ()) (dependencies . ("string-util" "opt" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "URI and URL api in Typed Racket.") (implies . ()) (modules . ((lib "uri/url/urlchar.rkt") (lib "uri/url/types.rkt") (lib "uri/url/qparams.rkt") (lib "uri/scribblings/uri.scrbl") (lib "uri/uri/parse-util.rkt") (lib "uri/uri/parse.rkt") (lib "uri/uri/types.rkt") (lib "uri/uri/urichar.rkt") (lib "uri/url.rkt") (lib "uri/uri/show.rkt") (lib "uri/url/util.rkt") (lib "uri/url/parse.rkt") (lib "uri/url/show.rkt") (lib "uri/uri.rkt"))) (name . "uri") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (uri . #t) (url . #t))) (source . "https://gitlab.com/RayRacine/uri.git") (tags . ("uri" "url")) (versions . #hash((default . #hasheq((checksum . "79934c1432baad34a3272c0429caa4b695c4b996") (source . "https://gitlab.com/RayRacine/uri.git") (source_url . "https://gitlab.com/RayRacine/uri.git"))))))) ("uri-template" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri-template" "doc/uri-template@uri-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-template.txt"))) (checksum . "6fe4420e3a55da6ae02df453a142b96ef3b3b4ea") (checksum-error . #f) (collection . "uri-template") (conflicts . ()) (date-added . 1607664731) (dependencies . ("base" "brag" "beautiful-racket-lib" "br-parser-tools-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Implementation of RFC 6570 (URI Template).") (implies . ()) (modules . ((lib "uri-template/main.rkt") (lib "uri-template/scribblings/library.scrbl") (lib "uri-template/assignment.rkt") (lib "uri-template/match.rkt") (lib "uri-template/value.rkt") (lib "uri-template/template.rkt") (lib "uri-template/variable.rkt") (lib "uri-template/parse.rkt") (lib "uri-template/util.rkt") (lib "uri-template/template-lexer.rkt") (lib "uri-template/scribblings/uri-template.scrbl") (lib "uri-template/expand.rkt"))) (name . "uri-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/jessealama/uri-template.git") (tags . ("template")) (versions . #hash((default . #hasheq((checksum . "6fe4420e3a55da6ae02df453a142b96ef3b3b4ea") (source . "https://github.com/jessealama/uri-template.git") (source_url . "https://github.com/jessealama/uri-template.git"))))))) ("uu-cs3520" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs3520.txt") (test-failure-log . "server/built/test-fail/uu-cs3520.txt") (test-success-log . #f))) (checksum . "b0dfad48eab5d41706b6016bdfc6b9acafe46093") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" "plait")) (description . "Utah CS 3520 homework submission plugin for DrRacket") (implies . ()) (modules . ((lib "uu-cs3520/updater.rkt") (lib "uu-cs3520/client-gui.rkt") (lib "uu-cs3520/this-collection.rkt") (lib "uu-cs3520/client.rkt") (lib "uu-cs3520/handin-multi.rkt"))) (name . "uu-cs3520") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (course . #t) (ring:1 . #t))) (source . "https://github.com/mflatt/uu-cs3520.git") (tags . ("course")) (versions . #hash((default . #hasheq((checksum . "b0dfad48eab5d41706b6016bdfc6b9acafe46093") (source . "https://github.com/mflatt/uu-cs3520.git") (source_url . "https://github.com/mflatt/uu-cs3520.git"))))))) ("uu-cs5510" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs5510.txt") (test-failure-log . "server/built/test-fail/uu-cs5510.txt") (test-success-log . #f))) (checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" "plai-typed" "plai-typed-s-exp-match" "plai-lazy")) (description . "Utah CS 5510 homework submission plugin for DrRacket") (implies . ()) (modules . ((lib "uu-cs5510/client.rkt") (lib "uu-cs5510/this-collection.rkt") (lib "uu-cs5510/handin-multi.rkt") (lib "uu-cs5510/updater.rkt") (lib "uu-cs5510/client-gui.rkt"))) (name . "uu-cs5510") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/uu-cs5510/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (source . "git://github.com/mflatt/uu-cs5510") (source_url . "http://github.com/mflatt/uu-cs5510/tree/master"))))))) ("uuid" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uuid" "doc/uuid@uuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uuid.txt"))) (checksum . "0636572f74128c5819dd3e6a1dcccfdf20a1e471") (checksum-error . #f) (collection . "uuid") (conflicts . ()) (date-added . 1582083018) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Generate cryptographically-random UUIDs in pure Racket") (implies . ()) (modules . ((lib "uuid/main.rkt") (lib "uuid/scribblings/uuid.scrbl"))) (name . "uuid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (util . #t) (utility . #t))) (source . "https://github.com/LiberalArtist/uuid.git") (tags . ("util" "utility")) (versions . #hash((default . #hasheq((checksum . "0636572f74128c5819dd3e6a1dcccfdf20a1e471") (source . "https://github.com/LiberalArtist/uuid.git") (source_url . "https://github.com/LiberalArtist/uuid.git"))))))) ("uwaterloo-racket-tools" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uwaterloo-racket-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uwaterloo-racket-tools.txt"))) (checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (checksum-error . #f) (collection . "uwaterloo-racket-tools") (conflicts . ()) (date-added . 1605545635) (dependencies . ("base" "htdp-trace" "graphic-block")) (description . "Metapackage to install libraries and plugins used for University of Waterloo first year CS courses") (implies . ()) (modules . ()) (name . "uwaterloo-racket-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:djholtby@uwaterloo.ca . #t) (ring:1 . #t) (uwaterloo . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools") (tags . ("uwaterloo")) (versions . #hash((default . #hasheq((checksum . "c4848f9d32d83c385e7ae0a7efc8bc11ccb808a8") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools"))))))) ("value-evt" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "value-evt" "doc/value-evt@value-evt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/value-evt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/value-evt.txt"))) (checksum . "10c3b0cc46f7fface88d2609c6de29ed5cea5767") (checksum-error . #f) (collection . "value-evt") (conflicts . ()) (date-added . 1617292862) (dependencies . ("base" "scribble-lib" "sandbox-lib" "racket-doc" "rackunit-lib")) (description . "Allows syncing on arbitrary values.  Events are unchanged, procedures sync to their return value unless told not to, lists sync recursively unless told not to, all other values sync to themselves.\r\n") (implies . ()) (modules . ((lib "value-evt/main.rkt") (lib "value-evt/scribblings/value-evt.scrbl"))) (name . "value-evt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (sync . #t))) (source . "https://github.com/dstorrs/value-evt.git") (tags . ("sync")) (versions . #hash((default . #hasheq((checksum . "10c3b0cc46f7fface88d2609c6de29ed5cea5767") (source . "https://github.com/dstorrs/value-evt.git") (source_url . "https://github.com/dstorrs/value-evt.git"))))))) ("values" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "values" "doc/values@values/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/values.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/values.txt"))) (checksum . "beec5757368e9bf64a42c7b0f5e5a0fa49f622c5") (checksum-error . #f) (collection . "values") (conflicts . ()) (date-added . 1599239917) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "functional multi-valued computation") (implies . ()) (modules . ((lib "values/scribblings/values-includes.rkt") (lib "values/scribblings/values.scrbl") (lib "values/main.rkt"))) (name . "values") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-values.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "beec5757368e9bf64a42c7b0f5e5a0fa49f622c5") (source . "https://github.com/dedbox/racket-values.git#main") (source_url . "https://github.com/dedbox/racket-values.git#main"))))))) ("values-plus" . #hasheq((author . "mflatt@cs.utah.edu jay@racket-lang.org") (authors . ("mflatt@cs.utah.edu" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "values+" "doc/values+@values-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/values-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/values-plus.txt"))) (checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (checksum-error . #f) (collection . "values+") (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (modules . ((lib "values+/main.rkt") (lib "values+/values+.scrbl"))) (name . "values-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "http://github.com/mflatt/values-plus/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (source . "git://github.com/mflatt/values-plus") (source_url . "http://github.com/mflatt/values-plus/tree/master"))))))) ("vector-struct" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vector-struct" "doc/vector-struct@vector-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vector-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vector-struct.txt"))) (checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "A simple abstraction to use vectors like structs for performance") (implies . ()) (modules . ((lib "typed/vector-struct.rkt") (lib "vector-struct/main.rkt") (lib "vector-struct/scribblings/vector-struct.scrbl") (lib "typed/scribblings/vector-struct.scrbl"))) (name . "vector-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (performance . #t) (ring:1 . #t))) (source . "http://github.com/lexi-lambda/racket-vector-struct/tree/master") (tags . ("deprecated" "performance")) (versions . #hash((default . #hasheq((checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (source . "git://github.com/lexi-lambda/racket-vector-struct") (source_url . "http://github.com/lexi-lambda/racket-vector-struct/tree/master"))))))) ("vela" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556548516) (dependencies . ("base" "vela-lib" "vela-docs")) (description . "Simple web framework to build RESTful app in Racket. ") (implies . ("vela-lib" "vela-docs")) (modules . ()) (name . "vela") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (framework . #t) (restful . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/nuty/vela.git?path=vela") (tags . ("framework" "restful" "web")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela") (source_url . "https://github.com/nuty/vela.git?path=vela"))))))) ("vela-docs" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela-docs.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela-docs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela-docs.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586590017) (dependencies . ("base" "base" "racket-doc" "data-doc" "data-lib" "vela-lib" "scribble-lib" "sandbox-lib")) (description . "vela docs") (implies . ()) (modules . ((lib "vela/handler.scrbl") (lib "vela/app.scrbl") (lib "vela/vela.scrbl") (lib "vela/response.scrbl") (lib "vela/url.scrbl") (lib "vela/middleware.scrbl"))) (name . "vela-docs") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (ring:1 . #t) (vela . #t))) (source . "https://github.com/nuty/vela.git?path=vela-doc") (tags . ("vela")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela-doc") (source_url . "https://github.com/nuty/vela.git?path=vela-doc"))))))) ("vela-lib" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela-lib.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela-lib.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582389644) (dependencies . ("web-server")) (description . "vela-lib") (implies . ()) (modules . ((lib "vela/routes.rkt") (lib "vela/meta.rkt") (lib "vela/params.rkt") (lib "vela/context.rkt") (lib "vela/main.rkt") (lib "vela/dispatcher.rkt") (lib "vela/app.rkt"))) (name . "vela-lib") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (lib . #t) (ring:1 . #t))) (source . "https://github.com/nuty/vela.git?path=vela-lib") (tags . ("lib")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela-lib") (source_url . "https://github.com/nuty/vela.git?path=vela-lib"))))))) ("version-case" . #hasheq((author . "samth@racket-lang.org dyoo@hashcollision.org") (authors . ("samth@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "version-case" "doc/version-case@version-case/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-case.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-case.txt"))) (checksum . "7614b4a255de110632c12e9c1f3e4976d7e78d22") (checksum-error . #f) (collection . "version-case") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "scheme-lib" "srfi-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "Conditional behavior based on the version of Racket") (implies . ()) (modules . ((lib "version-case/private/new-version-case.rkt") (lib "version-case/version-case.scrbl") (lib "version-case/test-version-case.rkt") (lib "version-case/version-misc.rkt") (lib "version-case/version-case.rkt") (lib "version-case/main.rkt") (lib "version-case/private/old-version-case.rkt"))) (name . "version-case") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dyoo@hashcollision.org . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "http://github.com/samth/version-case/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7614b4a255de110632c12e9c1f3e4976d7e78d22") (source . "git://github.com/samth/version-case") (source_url . "http://github.com/samth/version-case/tree/master"))))))) ("version-string-with-git-hash" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "version-string-with-git-hash" "doc/version-string-with-git-hash@version-string-with-git-hash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-string-with-git-hash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-string-with-git-hash.txt"))) (checksum . "64bc518ac25e5810fa155a8d8ebbfaa4d008e8bc") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1605842357) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Do you want your package version string to contain a git commit hash?") (implies . ()) (modules . ((lib "version-string-with-git-hash/scribblings/version-string-with-git-hash.scrbl") (lib "version-string-with-git-hash/main.rkt"))) (name . "version-string-with-git-hash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (git . #t) (ring:1 . #t) (versioning . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git") (tags . ("git" "versioning")) (versions . #hash((default . #hasheq((checksum . "64bc518ac25e5810fa155a8d8ebbfaa4d008e8bc") (source . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git") (source_url . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git"))))))) ("video" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "video" "doc/video@video/index.html"))) (failure-log . "server/built/fail/video.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" "graph" "libvid-x86_64-macosx" "libvid-x86_64-win32" "libvid-i386-win32" "libvid-x86_64-linux" "libvid-i386-linux" "ffmpeg-x86_64-macosx-3-4" "ffmpeg-x86_64-win32-3-4" "ffmpeg-i386-win32-3-4" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "The latest version of #lang video") (implies . ()) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t) (vidlang . #t))) (source . "http://github.com/videolang/video/tree/master#stable") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (source . "git://github.com/videolang/video#stable") (source_url . "http://github.com/videolang/video/tree/master#stable"))))))) ("video-samples" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/video-samples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6ac1cfc77152350d1ce55738447350ae0d43cf5d") (checksum-error . #f) (collection . "video-samples") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "gui-lib" "pict-lib" "video")) (description . "A package containing sample videos (with a license to use and redistribute), as well as video scripts to use them.") (implies . ()) (modules . ((lib "video-samples/bbb/mosaic.rkt") (lib "video-samples/bbb/chirping.rkt") (lib "video-samples/bbb/running.rkt") (lib "video-samples/bbb/jumpflytrans.rkt") (lib "video-samples/bbb/jumping.rkt") (lib "video-samples/bbb/mos2.rkt") (lib "video-samples/bbb/flying.rkt"))) (name . "video-samples") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (samples . #t) (video . #t))) (source . "http://github.com/videolang/test-samples/tree/master") (tags . ("samples" "video")) (versions . #hash((default . #hasheq((checksum . "6ac1cfc77152350d1ce55738447350ae0d43cf5d") (source . "git://github.com/videolang/test-samples") (source_url . "http://github.com/videolang/test-samples/tree/master"))))))) ("video-testing" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "video" "doc/video@video-testing/index.html"))) (failure-log . "server/built/fail/video-testing.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" "graph" "libvid-x86_64-macosx" "libvid-x86_64-win32" "libvid-i386-win32" "libvid-x86_64-linux" "libvid-i386-linux" "ffmpeg-x86_64-macosx-3-4" "ffmpeg-x86_64-win32-3-4" "ffmpeg-i386-win32-3-4" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "More stable than video-unstable, but updated less frequently.\r\nLess stable than video(-stable), but updated more frequently") (implies . ()) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-testing") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (testing . #t) (video . #t) (vidlang . #t))) (source . "http://github.com/videolang/video/tree/master#testing") (tags . ("testing" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (source . "git://github.com/videolang/video#testing") (source_url . "http://github.com/videolang/video/tree/master#testing"))))))) ("video-unstable" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "video" "doc/video@video-unstable/index.html"))) (failure-log . "server/built/fail/video-unstable.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3c69669063c56ff8d269768589cb9506a33315e5") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" "graph" "libvid-x86_64-macosx" "libvid-x86_64-win32" "libvid-i386-win32" "libvid-x86_64-linux" "libvid-i386-linux" "ffmpeg-x86_64-macosx-3-4" "ffmpeg-x86_64-win32-3-4" "ffmpeg-i386-win32-3-4" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "The latest and greatest build of Video. This build will occasionally fail.") (implies . ()) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-unstable") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (unstable . #t) (video . #t) (vidlang . #t))) (source . "http://github.com/videolang/video/tree/master") (tags . ("unstable" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "3c69669063c56ff8d269768589cb9506a33315e5") (source . "git://github.com/videolang/video") (source_url . "http://github.com/videolang/video/tree/master"))))))) ("video-v0-0" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "video" "doc/video@video-v0-0/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-v0-0.txt") (test-failure-log . "server/built/test-fail/video-v0-0.txt") (test-success-log . #f))) (checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (checksum-error . #f) (collection . "video") (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "images-lib" "scribble-lib" "racket-doc")) (description . "v0.0 of #lang video") (implies . ()) (modules . ((lib "video/render.rkt") (lib "video/player.rkt") (lib "video/scribblings/video.scrbl") (lib "video/private/video.rkt") (lib "video/core.rkt") (lib "video/private/examples.rkt") (lib "video/private/mlt.rkt") (lib "video/private/once.rkt") (lib "video/private/init-mlt.rkt") (lib "video/tag.rkt") (lib "video/init.rkt") (lib "video/lib.rkt"))) (name . "video-v0-0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "http://github.com/videolang/video/tree/master#v0.0") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (source . "git://github.com/videolang/video#v0.0") (source_url . "http://github.com/videolang/video/tree/master#v0.0"))))))) ("video-v0-1" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "video"))) (failure-log . "server/built/fail/video-v0-1.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "ffi-definer-convention" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict")) (description . "v0.1 of #lang video") (implies . ()) (modules . ((lib "video/private/utils.rkt") (lib "video/render.rkt") (lib "video/private/threading.rkt") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/video.scrbl") (lib "video/private/ffmpeg.rkt") (lib "video/examples/3-clips.rkt") (lib "video/units.rkt") (lib "video/render/xml.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/private/packetqueue.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/private/ffmpeg-stream.rkt") (lib "video/examples/8-image.rkt") (lib "video/examples/5-project.rkt") (lib "video/render/mp4.rkt") (lib "video/tests/test-utils.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/render/list.rkt") (lib "video/private/mlt.rkt") (lib "video/render/jpg.rkt") (lib "video/tests/mlt.rkt") (lib "video/private/video-canvas.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/private/tool.rkt") (lib "video/private/init-mlt.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/base.rkt") (lib "video/lang/reader.rkt") (lib "video/render/png.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-v0-1") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "http://github.com/videolang/video/tree/master#v0.1.1") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (source . "git://github.com/videolang/video#v0.1.1") (source_url . "http://github.com/videolang/video/tree/master#v0.1.1"))))))) ("video-v0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "video" "doc/video@video-v0-2/index.html"))) (failure-log . "server/built/fail/video-v0-2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8828d1c287030691cbc12f75fb803265fc3d97bb") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" "graph" "libvid-x86_64-macosx-0-2" "libvid-x86_64-win32-0-2" "libvid-i386-win32-0-2" "libvid-x86_64-linux-0-2" "libvid-i386-linux-0-2" "ffmpeg-x86_64-macosx-3-4" "ffmpeg-x86_64-win32-3-4" "ffmpeg-i386-win32-3-4" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "v0.2 of #lang video") (implies . ()) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-v0-2") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:2 . #t) (video . #t))) (source . "https://github.com/videolang/video.git#v0.2") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "8828d1c287030691cbc12f75fb803265fc3d97bb") (source . "https://github.com/videolang/video.git#v0.2") (source_url . "https://github.com/videolang/video.git#v0.2"))))))) ("viz" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/viz.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "git-checkout: no initial pkts from the server\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1561670559) (dependencies . ()) (description . "A real-time data visualization surface") (implies . ()) (modules . ()) (name . "viz") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-viz.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/dedbox/racket-viz.git") (source_url . "https://github.com/dedbox/racket-viz.git"))))))) ("voxel" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "voxel-engine" "doc/voxel-engine@voxel/index.html"))) (failure-log . "server/built/fail/voxel.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9c23d1e8e71a80bac6e4251a517f70aef002ab9f") (checksum-error . #f) (collection . "voxel-engine") (conflicts . ()) (date-added . 1568848296) (dependencies . ("base" "opengl" "glm" "gui-lib" "at-exp-lib" "racket-doc" "scribble-lib")) (description . "voxel space programming") (implies . ()) (modules . ((lib "voxel-engine/scribblings/voxel-engine.scrbl") (lib "voxel-engine/gl-drawable.rkt") (lib "voxel-engine/camera.rkt") (lib "voxel-engine/gl-shader.rkt") (lib "voxel-engine/main.rkt") (lib "voxel-engine/gl-cube.rkt") (lib "voxel-engine/block.rkt") (lib "voxel-engine/gl-canvas.rkt") (lib "voxel-engine/chunk.rkt"))) (name . "voxel") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (graphics . #t) (ring:1 . #t) (voxel . #t))) (source . "https://github.com/dedbox/racket-voxel.git") (tags . ("3D" "graphics" "voxel")) (versions . #hash((default . #hasheq((checksum . "9c23d1e8e71a80bac6e4251a517f70aef002ab9f") (source . "https://github.com/dedbox/racket-voxel.git") (source_url . "https://github.com/dedbox/racket-voxel.git"))))))) ("vscode-dark-theme" . #hasheq((author . "kurtisvetter@protonmail.com") (authors . ("kurtisvetter@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vscode-dark-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vscode-dark-theme.txt"))) (checksum . "aabfab324bdfed2d11506be4f0c2e8e6f0837f63") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1640857671) (dependencies . ("base")) (description . "VSCode default dark theme for DrRacket") (implies . ()) (modules . ()) (name . "vscode-dark-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kurtisvetter@protonmail.com . #t) (colorscheme . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/kurtisvetter/drracket-vscode-dark.git") (tags . ("colorscheme" "drracket-theme")) (versions . #hash((default . #hasheq((checksum . "aabfab324bdfed2d11506be4f0c2e8e6f0837f63") (source . "https://github.com/kurtisvetter/drracket-vscode-dark.git") (source_url . "https://github.com/kurtisvetter/drracket-vscode-dark.git"))))))) ("vulkan" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vulkan" "doc/vulkan@vulkan/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vulkan.txt") (test-failure-log . "server/built/test-fail/vulkan.txt") (test-success-log . #f))) (checksum . "1e983e921fb41b59994cea0fc0ebd859ec847186") (checksum-error . #f) (collection . "vulkan") (conflicts . ()) (date-added . 1570829713) (dependencies . ("base" "compatibility-lib" "txexpr" "graph-lib" "draw-lib" "natural-cli" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Vulkan API integration.") (implies . ()) (modules . ((lib "vulkan/examples/mandelbrot/mandelbrot.rkt") (lib "vulkan/private/txexpr.rkt") (lib "vulkan/scribblings/maintainers.scrbl") (lib "vulkan/private/generate/handles.test.rkt") (lib "vulkan/examples/minimal.rkt") (lib "vulkan/private/generate/api-constants.test.rkt") (lib "vulkan/cli/shared.rkt") (lib "vulkan/private/generate/handles.rkt") (lib "vulkan/private/generate/interdependent.test.rkt") (lib "vulkan/cli/ravk_show.rkt") (lib "vulkan/spec.rkt") (lib "vulkan/unsafe.rkt") (lib "vulkan/scribblings/vulkan.scrbl") (lib "vulkan/private/generate/shared.rkt") (lib "vulkan/private/generate/make-unsafe.rkt") (lib "vulkan/examples/mandelbrot/mandelbrot-raw.rkt") (lib "vulkan/private/memos.rkt") (lib "vulkan/private/paths.rkt") (lib "vulkan/private/writer.rkt") (lib "vulkan/cli/ravk_show_spec.rkt") (lib "vulkan/private/c.rkt") (lib "vulkan/private/generate/defines.rkt") (lib "vulkan/private/generate/api-constants.rkt") (lib "vulkan/private/unsafe-preamble.rkt") (lib "vulkan/scribblings/unsafe.scrbl") (lib "vulkan/scribblings/ravk.scrbl") (lib "vulkan/examples/mandelbrot/bindings.rkt") (lib "vulkan/main.rkt") (lib "vulkan/private/generate/preamble.rkt") (lib "vulkan/private/generate/typedefs.test.rkt") (lib "vulkan/private/generate/vkresult-checker.rkt") (lib "vulkan/private/generate/ctypes.rkt") (lib "vulkan/cli/ravk.rkt") (lib "vulkan/private/generate/interdependent.rkt") (lib "vulkan/cli/ravk_generate.rkt") (lib "vulkan/private/generate/typedefs.rkt") (lib "vulkan/scribblings/spec.scrbl") (lib "vulkan/examples/mandelbrot/bindings-raw.rkt") (lib "vulkan/private/generate/defines.test.rkt") (lib "vulkan/scribblings/setup.scrbl") (lib "vulkan/examples/physical-device-report.rkt") (lib "vulkan/private/generate/ctypes.test.rkt"))) (name . "vulkan") (ring . 1) (search-terms . #hasheq((2D . #t) (2d . #t) (3D . #t) (3d . #t) (:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (graphics . #t) (images . #t) (khronos . #t) (opengl . #t) (ring:1 . #t) (vulkan . #t))) (source . "https://github.com/zyrolasting/racket-vulkan.git") (tags . ("2d" "2D" "3d" "3D" "graphics" "images" "khronos" "opengl" "vulkan")) (versions . #hash((default . #hasheq((checksum . "1e983e921fb41b59994cea0fc0ebd859ec847186") (source . "https://github.com/zyrolasting/racket-vulkan.git") (source_url . "https://github.com/zyrolasting/racket-vulkan.git"))))))) ("w3s" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "css") ("none" "sgml") ("none" "svg"))) (failure-log . "server/built/fail/w3s.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "206f5ed5dda890fc5a560e0e69b5fc792d1486ec") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "digimon" "graphics" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "graphics")) (description . "W3 Standards Implemented in Typed Racket") (implies . ()) (modules . ((lib "sgml/tamer/sax.rkt") (lib "css/digitama/syntax/selector.rkt") (lib "css/digitama/color.rkt") (lib "sgml/digitama/relaxng/simplification.rkt") (lib "sgml/digitama/grammar.rkt") (lib "sgml/tamer/rnc/rnc.rkt") (lib "sgml/tamer/xml.rkt") (lib "sgml/digitama/schema.rkt") (lib "css/tamer/specificity.rkt") (lib "css/digitama/syntax/condition.rkt") (lib "sgml/tamer/validity.rkt") (lib "sgml/dtd.rkt") (lib "sgml/digitama/validity.rkt") (lib "sgml/digitama/dialect.rkt") (lib "css/digitama/syntax/variables.rkt") (lib "sgml/tamer/sgml.scrbl") (lib "sgml/tamer/document.scrbl") (lib "css/digitama/background.rkt") (lib "svg/tamer/spec/datatype.rkt") (lib "css/digitama/syntax/digicore.rkt") (lib "sgml/digitama/plain/grammar.rkt") (lib "sgml/digitama/prentity.rkt") (lib "css/values.rkt") (lib "sgml/digitama/document.rkt") (lib "sgml/digitama/plain/prompt.rkt") (lib "css/digitama/syntax/tokenizer.rkt") (lib "css/base.rkt") (lib "sgml/digitama/tokenizer/delimiter.rkt") (lib "css/digitama/device-adapt.rkt") (lib "css/digitama/text-decor.rkt") (lib "sgml/village/sgmlang/reader.rkt") (lib "sgml/tamer/namespace.rkt") (lib "css/font.rkt") (lib "css/village/hashlang/indentation.rkt") (lib "svg/tamer/svgdoc/attgroup.rkt") (lib "svg/digitama/grammar/attribute.rkt") (lib "sgml/digitama/normalize.rkt") (lib "sgml/digitama/tokenizer/port.rkt") (lib "css/bonus.rkt") (lib "sgml/digitama/space.rkt") (lib "sgml/digitama/dtd.rkt") (lib "css/digitama/syntax/misc.rkt") (lib "sgml/digitama/whitespace.rkt") (lib "sgml/village/sgmlang/indentation.rkt") (lib "css/background.rkt") (lib "sgml/digitama/convert.rkt") (lib "css/tamer/css.scrbl") (lib "sgml/digitama/tokenizer.rkt") (lib "sgml/digitama/plain/whitespace.rkt") (lib "css/tamer/bitmap.rkt") (lib "css/racket.rkt") (lib "sgml/digitama/relaxng.rkt") (lib "sgml/digitama/plain/sax.rkt") (lib "css/digitama/syntax/stdin.rkt") (lib "sgml/digitama/doctype.rkt") (lib "css/digitama/syntax/cascade.rkt") (lib "sgml/digitama/plain/xexpr.rkt") (lib "css/color.rkt") (lib "css/tamer/configure.rkt") (lib "sgml/sax.rkt") (lib "svg/tamer/svg.scrbl") (lib "css/digitama/image.rkt") (lib "svg/village/svglang/reader.rkt") (lib "svg/main.rkt") (lib "sgml/village/sgmlang/lexer.rkt") (lib "css/syntax.rkt") (lib "svg/tamer/svgdoc/attlist.rkt") (lib "css/village/cascade.rkt") (lib "sgml/digitama/misc.rkt") (lib "css/main.rkt") (lib "sgml/tamer/performace/normalize.rkt") (lib "sgml/digitama/relaxng/compact.rkt") (lib "svg/digitama/document.rkt") (lib "sgml/digitama/datatype.rkt") (lib "svg/tamer/svgdoc/svg.rkt") (lib "css/text-decor.rkt") (lib "css/digitama/syntax/parser.rkt") (lib "css/sugar.rkt") (lib "sgml/digitama/tokenizer/errno.rkt") (lib "sgml/digitama/tokenizer/characters.rkt") (lib "css/village/hashlang/lexer.rkt") (lib "sgml/digitama/plain/sax/handler/writer.rkt") (lib "sgml/digitama/digicore.rkt") (lib "sgml/xml.rkt") (lib "css/recognizer.rkt") (lib "css/village/hashlang/w3s.rkt") (lib "css/digitama/font.rkt") (lib "sgml/digitama/stdin.rkt") (lib "sgml/rnc.rkt") (lib "css/tamer/recognizer.rkt") (lib "css/digitama/syntax/unsafe/cascade.rkt") (lib "sgml/digitama/relaxng/schema.rkt") (lib "css/tamer/syntax.rkt") (lib "svg/tamer/svgdoc/category.rkt") (lib "css/tamer/media.rkt") (lib "svg/digitama/grammar.rkt") (lib "sgml/digitama/plain/normalize.rkt") (lib "css/image.rkt") (lib "sgml/tamer/whitespace.rkt") (lib "sgml/digitama/relaxng/rnc.rkt") (lib "sgml/digitama/namespace.rkt") (lib "svg/tamer/svgdoc/element.rkt") (lib "css/digitama/syntax/grammar.rkt") (lib "css/village/hashlang/reader.rkt") (lib "svg/digitama/grammar/datatype.rkt") (lib "sgml/digitama/relaxng/recognizer.rkt") (lib "css/digitama/syntax/dimension.rkt") (lib "sgml/xexpr.rkt"))) (name . "w3s") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (css . #t) (parser . #t) (ring:1 . #t) (svg . #t) (typed-racket . #t) (unstable . #t) (w3 . #t) (xml . #t))) (source . "https://github.com/wargrey/w3s.git") (tags . ("css" "parser" "svg" "typed-racket" "unstable" "w3" "xml")) (versions . #hash((default . #hasheq((checksum . "206f5ed5dda890fc5a560e0e69b5fc792d1486ec") (source . "https://github.com/wargrey/w3s.git") (source_url . "https://github.com/wargrey/w3s.git"))))))) ("warp" . #hasheq((author . "david.vanderson@gmail.com") (authors . ("david.vanderson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/warp.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cdc1d0bd942780fb5360dc6a34a2a06cf9518408") (checksum-error . #f) (collection . "warp") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "mode-lambda")) (description . "Light multiplayer space themed game for LAN parties.") (implies . ()) (modules . ((lib "warp/utils.rkt") (lib "warp/dmg.rkt") (lib "warp/explosion.rkt") (lib "warp/effect.rkt") (lib "warp/draw-utils.rkt") (lib "warp/warp.rkt") (lib "warp/change.rkt") (lib "warp/ml.rkt") (lib "warp/ships.rkt") (lib "warp/probe.rkt") (lib "warp/scenarios/base-defense.rkt") (lib "warp/main.rkt") (lib "warp/scenarios/pilot-training.rkt") (lib "warp/draw.rkt") (lib "warp/scenarios/all-ships.rkt") (lib "warp/shield.rkt") (lib "warp/scenario.rkt") (lib "warp/plasma.rkt") (lib "warp/timing-test.rkt") (lib "warp/sandbox.rkt") (lib "warp/server.rkt") (lib "warp/cannon.rkt") (lib "warp/scenarios/asteroid-search.rkt") (lib "warp/defs.rkt") (lib "warp/scenarios/racketcon2018.rkt") (lib "warp/missile.rkt") (lib "warp/mine.rkt") (lib "warp/quadtree.rkt") (lib "warp/scenarios/testing.rkt") (lib "warp/client.rkt") (lib "warp/order.rkt") (lib "warp/physics.rkt") (lib "warp/upgrade.rkt") (lib "warp/pilot.rkt") (lib "warp/pbolt.rkt") (lib "warp/combined.rkt"))) (name . "warp") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:david.vanderson@gmail.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/david-vanderson/warp.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "cdc1d0bd942780fb5360dc6a34a2a06cf9518408") (source . "https://github.com/david-vanderson/warp.git") (source_url . "https://github.com/david-vanderson/warp.git"))))))) ("wasm-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/wasm-lib.txt") (success-log . "server/built/install/wasm-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wasm-lib.txt"))) (checksum . "c284f350a8618156c143342b2c9f5769f7349a8b") (checksum-error . #f) (collection . "wasm") (conflicts . ()) (date-added . 1604835921) (dependencies . ("base" "data-lib" "threading-lib")) (description . "WIP Wasm tooling for Racket.") (implies . ()) (modules . ((lib "wasm/private/binary-read.rkt") (lib "wasm/private/switch.rkt") (lib "wasm/private/validation.rkt") (lib "wasm/private/memory.rkt") (lib "wasm/private/binary.rkt") (lib "wasm/private/opcase.rkt") (lib "wasm/private/location.rkt") (lib "wasm/private/error.rkt") (lib "wasm/private/custom-name-section.rkt") (lib "wasm/private/runtime.rkt") (lib "wasm/private/core.rkt") (lib "wasm/private/vm.rkt") (lib "wasm/private/lib/install.rkt") (lib "wasm/private/compiler.rkt") (lib "wasm/private/store.rkt"))) (name . "wasm-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (wasm . #t) (web-assembly . #t))) (source . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib") (tags . ("wasm" "web-assembly")) (versions . #hash((default . #hasheq((checksum . "c284f350a8618156c143342b2c9f5769f7349a8b") (source . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib") (source_url . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib"))))))) ("wavelet-transform-haar-1d" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wavelet" "doc/wavelet@wavelet-transform-haar-1d/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavelet-transform-haar-1d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavelet-transform-haar-1d.txt"))) (checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A library to perform forward and reverse 1-d Haar Wavelet transforms") (implies . ()) (modules . ((lib "wavelet/tests.rkt") (lib "wavelet/main.rkt") (lib "wavelet/wavelet.scrbl") (lib "wavelet/haar-1d.rkt"))) (name . "wavelet-transform-haar-1d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/wavelet-transform-haar-1d/tree/master") (tags . ("audio" "math")) (versions . #hash((default . #hasheq((checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (source . "git://github.com/jbclements/wavelet-transform-haar-1d") (source_url . "http://github.com/jbclements/wavelet-transform-haar-1d/tree/master"))))))) ("wavenet" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wavenet" "doc/wavenet@wavenet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavenet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavenet.txt"))) (checksum . "71c9fd2f66078a808f1dc837146a34ee4a2dfd6c") (checksum-error . #f) (collection . "wavenet") (conflicts . ()) (date-added . 1614539877) (dependencies . ("base" "hash-view-lib" "http-easy" "gui-doc" "gui-lib" "hash-view" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An interface for the Google Cloud text-to-speech API") (implies . ()) (modules . ((lib "wavenet/scribblings/wavenet.scrbl") (lib "wavenet/main.rkt"))) (name . "wavenet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:joel@jdueck.net . #t) (ring:1 . #t))) (source . "https://github.com/otherjoel/wavenet-api.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "71c9fd2f66078a808f1dc837146a34ee4a2dfd6c") (source . "https://github.com/otherjoel/wavenet-api.git#main") (source_url . "https://github.com/otherjoel/wavenet-api.git#main"))))))) ("web-galaxy" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-galaxy.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy.txt"))) (checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("web-galaxy-lib" "web-galaxy-doc")) (description . "A minimalist web framework for the Racket web-server") (implies . ("web-galaxy-lib" "web-galaxy-doc")) (modules . ()) (name . "web-galaxy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy") (tags . ("framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy"))))))) ("web-galaxy-doc" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy-doc.txt"))) (checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Documentation for web-galaxy.") (implies . ()) (modules . ()) (name . "web-galaxy-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (documentation . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (tags . ("documentation" "framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc"))))))) ("web-galaxy-lib" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-galaxy-lib.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-lib.txt") (test-failure-log . "server/built/test-fail/web-galaxy-lib.txt") (test-success-log . #f))) (checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "anaphoric" "web-server-lib")) (description . "Implementation of web-galaxy.") (implies . ()) (modules . ((lib "web-galaxy/serve.rkt") (lib "web-galaxy/entities.rkt") (lib "web-galaxy/db.rkt") (lib "web-galaxy/translate.rkt") (lib "web-galaxy/renderer.rkt") (lib "web-galaxy/site-mode.rkt") (lib "web-galaxy/utils.rkt") (lib "web-galaxy/response.rkt"))) (name . "web-galaxy-lib") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib") (tags . ("framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib"))))))) ("web-galaxy-test" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy-test.txt"))) (checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "web-galaxy-lib")) (description . "Tests for web-galaxy.") (implies . ()) (modules . ((lib "tests/web-galaxy/pony-blog/models/article.rkt") (lib "tests/web-galaxy/pony-blog/pages/article.rkt") (lib "tests/web-galaxy/pony-blog/pages/_base.rkt") (lib "tests/web-galaxy/pony-blog/pages/index.rkt") (lib "tests/web-galaxy/test-db.rkt") (lib "tests/web-galaxy/pony-blog/run.rkt"))) (name . "web-galaxy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (tests . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test") (tags . ("framework" "html" "minimalist" "server" "tests" "web")) (versions . #hash((default . #hasheq((checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test"))))))) ("web-io" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-io.txt") (docs . (("main" "web-io" "doc/web-io@web-io/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-io.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-io.txt"))) (checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (checksum-error . #f) (collection . "web-io") (conflicts . ()) (dependencies . ("racket" "net-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a replacement teach pack for F I at NEU (2016)") (implies . ()) (modules . ((lib "web-io/main.rkt") (lib "web-io/scribblings/web-io.scrbl"))) (name . "web-io") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t))) (source . "http://github.com/mfelleisen/web-io.git/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (source . "git://github.com/mfelleisen/web-io.git") (source_url . "http://github.com/mfelleisen/web-io.git/tree/master"))))))) ("web-sessions" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-sessions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-sessions.txt") (test-failure-log . "server/built/test-fail/web-sessions.txt") (test-success-log . #f))) (checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Simple web sessions") (implies . ()) (modules . ((lib "web-sessions/example.rkt") (lib "web-sessions/main.rkt"))) (name . "web-sessions") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (source_url . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git"))))))) ("wffi" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wffi.txt") (test-failure-log . "server/built/test-fail/wffi.txt") (test-success-log . #f))) (checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "http" "parser-tools-lib" "rackunit-lib")) (description . "Wrap web APIs using a \"literate programming\" style where documentation-is-specification.") (implies . ()) (modules . ((lib "wffi/api.rkt") (lib "wffi/server.rkt") (lib "wffi/parse-request.rkt") (lib "wffi/markdown.rkt") (lib "wffi/key-value.rkt") (lib "wffi/examples/server-example.rkt") (lib "wffi/parse-markdown.rkt") (lib "wffi/examples/google-plus.rkt") (lib "wffi/parse-response.rkt") (lib "wffi/json.rkt") (lib "wffi/main.rkt") (lib "wffi/examples/app.net.rkt") (lib "wffi/examples/horseebooks.rkt") (lib "wffi/examples/last.fm.rkt") (lib "wffi/examples/imgur.rkt") (lib "wffi/split.rkt") (lib "wffi/client.rkt") (lib "wffi/dict-merge.rkt"))) (name . "wffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@greghendershott.com . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/greghendershott/wffi/tree/master") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (source . "github://github.com/greghendershott/wffi/master") (source_url . "http://github.com/greghendershott/wffi/tree/master"))))))) ("whereis" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "whereis" "doc/whereis@whereis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/whereis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/whereis.txt"))) (checksum . "f57546369bcd26fd3549261b1128bb6607bd51ff") (checksum-error . #f) (collection . "whereis") (conflicts . ()) (date-added . 1582327538) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Finds local filesystem paths corresponding to Racket modules, collections, packages, etc.") (implies . ()) (modules . ((lib "whereis/main.rkt") (lib "whereis/private/collection-paths.rkt") (lib "whereis/private/raco.rkt") (lib "whereis/whereis.scrbl") (lib "whereis/private/whereis.rkt"))) (name . "whereis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (filesystem . #t) (path . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-whereis.git") (tags . ("filesystem" "path")) (versions . #hash((default . #hasheq((checksum . "f57546369bcd26fd3549261b1128bb6607bd51ff") (source . "https://github.com/rmculpepper/racket-whereis.git") (source_url . "https://github.com/rmculpepper/racket-whereis.git"))))))) ("while-loop" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dyoo-while-loop" "doc/dyoo-while-loop@while-loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/while-loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/while-loop.txt"))) (checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Danny Yoo's while-loop package") (implies . ()) (modules . ((lib "dyoo-while-loop/dyoo-while-loop.scrbl") (lib "dyoo-while-loop/main.rkt"))) (name . "while-loop") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:1 . #t))) (source . "http://github.com/jbclements/while-loop/tree/master/") (tags . ()) (versions . #hash((default . #hasheq((checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (source . "github://github.com/jbclements/while-loop/master/") (source_url . "http://github.com/jbclements/while-loop/tree/master/"))))))) ("with-cache" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "with-cache" "doc/with-cache@with-cache/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/with-cache.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/with-cache.txt"))) (checksum . "ab37d6fceaf665de0881ca5d2b5d64de2018489d") (checksum-error . #f) (collection . "with-cache") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "basedir" "scribble-lib" "racket-doc" "rackunit-lib" "pict-lib")) (description . "Filesystem-based caching") (implies . ()) (modules . ((lib "with-cache/private/with-cache.rkt") (lib "with-cache/test/main.rkt") (lib "with-cache/main.rkt") (lib "with-cache/scribblings/with-cache.scrbl"))) (name . "with-cache") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (cache . #t) (ring:1 . #t))) (source . "http://github.com/bennn/with-cache/tree/master") (tags . ("cache")) (versions . #hash((default . #hasheq((checksum . "ab37d6fceaf665de0881ca5d2b5d64de2018489d") (source . "git://github.com/bennn/with-cache") (source_url . "http://github.com/bennn/with-cache/tree/master"))))))) ("wn" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/wn.txt") (docs . (("main" "wn" "doc/wn@wn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wn.txt") (test-failure-log . "server/built/test-fail/wn.txt") (test-success-log . #f))) (checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (checksum-error . #f) (collection . "wn") (conflicts . ()) (dependencies . ()) (description . "An FFI interface to WordNet 3.0 -- A Lexical Database for English") (implies . ()) (modules . ((lib "wn/wn.scrbl") (lib "wn/wn.rkt"))) (name . "wn") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:anurag@mendhekar.com . #t) (ffi . #t) (nlp . #t) (ring:1 . #t))) (source . "http://github.com/themetaschemer/wn/tree/master") (tags . ("ffi" "nlp")) (versions . #hash((default . #hasheq((checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (source . "git://github.com/themetaschemer/wn") (source_url . "http://github.com/themetaschemer/wn/tree/master"))))))) ("word" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "word" "doc/word@word/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/word.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/word.txt"))) (checksum . "280659a27d2e3581fe64e8d406435cbcbadf3182") (checksum-error . #f) (collection . "word") (conflicts . ()) (dependencies . ("typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc")) (description . "Signed and Unsigned Word datatype for Racket using refinement types.\r\n") (implies . ()) (modules . ((lib "word/main.rkt") (lib "word/scribblings/word.scrbl"))) (name . "word") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (binary . #t) (refinement . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/word.git") (tags . ("binary" "refinement")) (versions . #hash((default . #hasheq((checksum . "280659a27d2e3581fe64e8d406435cbcbadf3182") (source . "https://gitlab.com/RayRacine/word.git") (source_url . "https://gitlab.com/RayRacine/word.git"))))))) ("wordle-solver" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wordle-solver" "doc/wordle-solver@wordle-solver/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wordle-solver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wordle-solver.txt"))) (checksum . "3bcfaf3a1a360076bd75d324fb5c0b165f48c9ac") (checksum-error . #f) (collection . "wordle-solver") (conflicts . ()) (date-added . 1644136466) (dependencies . ("base" "define2" "global" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A simple solver for Wordle") (implies . ()) (modules . ((lib "wordle-solver/main.rkt") (lib "wordle-solver/scribblings/wordle-solver.scrbl"))) (name . "wordle-solver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (cli . #t) (game . #t) (games . #t) (ring:1 . #t) (solver . #t))) (source . "https://github.com/Metaxal/wordle-solver.git") (tags . ("cli" "game" "games" "solver")) (versions . #hash((default . #hasheq((checksum . "3bcfaf3a1a360076bd75d324fb5c0b165f48c9ac") (source . "https://github.com/Metaxal/wordle-solver.git") (source_url . "https://github.com/Metaxal/wordle-solver.git"))))))) ("words" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/words.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/words.txt"))) (checksum . "ae0030aefa03d3cde4f6549a9b77561742d88e34") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586117956) (dependencies . ("gui-lib" "icns" "beautiful-racket-lib" "base" "debug" "rackunit-lib")) (description . "generate lists of words") (implies . ()) (modules . ((lib "words/kernscore.rkt") (lib "words/app.rkt") (lib "words/index.rkt") (lib "words/main.rkt") (lib "words/make-icons.rkt") (lib "words/command.rkt"))) (name . "words") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/words.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ae0030aefa03d3cde4f6549a9b77561742d88e34") (source . "https://git.matthewbutterick.com/mbutterick/words.git") (source_url . "https://git.matthewbutterick.com/mbutterick/words.git"))))))) ("wort" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wort" "doc/wort@wort/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wort.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wort.txt"))) (checksum . "433130f0f6f1fa90d7ed21b857d03bce856656b0") (checksum-error . #f) (collection . "wort") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A tiny concatenative language with polymorphic type inference") (implies . ()) (modules . ((lib "wort/eval.rkt") (lib "wort/infer.rkt") (lib "wort/parser.rkt") (lib "wort/main.rkt") (lib "wort/ast.rkt") (lib "wort/tokenizer.rkt") (lib "wort/examples/sum.rkt") (lib "wort/lexer.rkt") (lib "wort/scribblings/wort.scrbl") (lib "wort/examples/higher-order.rkt") (lib "wort/examples/simple.rkt") (lib "wort/examples/scope.rkt") (lib "wort/examples/shuffles.rkt") (lib "wort/expander.rkt"))) (name . "wort") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (inference . #t) (lang . #t) (ring:1 . #t) (types . #t) (unification . #t))) (source . "http://github.com/robertkleffner/wort/tree/master") (tags . ("inference" "lang" "types" "unification")) (versions . #hash((default . #hasheq((checksum . "433130f0f6f1fa90d7ed21b857d03bce856656b0") (source . "git://github.com/robertkleffner/wort") (source_url . "http://github.com/robertkleffner/wort/tree/master"))))))) ("wy-posn-util" . #hasheq((author . "maueroats@gmail.com racket@maueroats.fastmail.fm") (authors . ("maueroats@gmail.com" "racket@maueroats.fastmail.fm")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wy-posn-util" "doc/wy-posn-util@wy-posn-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wy-posn-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wy-posn-util.txt"))) (checksum . "9e14307dff6e27903e49c58a964d42cd8a25a14c") (checksum-error . #f) (collection . "wy-posn-util") (conflicts . ()) (date-added . 1613085110) (dependencies . ("htdp-lib" "rackunit-lib" "base" "htdp-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions to work with 2d vectors (posn) in 2htdp.") (implies . ()) (modules . ((lib "wy-posn-util/main.rkt") (lib "wy-posn-util/scribblings/wy-posn-util.scrbl"))) (name . "wy-posn-util") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:maueroats@gmail.com . #t) (author:racket@maueroats.fastmail.fm . #t) (ring:1 . #t))) (source . "https://github.com/maueroats/wy-posn-util.git") (tags . ("2htdp")) (versions . #hash((default . #hasheq((checksum . "9e14307dff6e27903e49c58a964d42cd8a25a14c") (source . "https://github.com/maueroats/wy-posn-util.git") (source_url . "https://github.com/maueroats/wy-posn-util.git"))))))) ("x11" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x11.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x11.txt"))) (checksum . "97c4a75872cfd2882c8895bba88b87a4ad12be0e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scheme-lib")) (description . "X11 bindings for Racket. Initially Jon Rafkind's work.") (implies . ()) (modules . ((lib "x11/keysym-util.rkt") (lib "x11/keysymdef.rkt") (lib "x11/x11.rkt") (lib "x11/test/test-x11.rkt") (lib "xlambda/rect.rkt") (lib "xlambda/xlambda.rkt") (lib "x11/xinerama.rkt") (lib "xlambda/screenstack.rkt") (lib "x11/fd.rkt") (lib "x11/x11-xpm.rkt") (lib "x11/utils.rkt") (lib "x11/xinput.rkt") (lib "x11/test/wormhole.rkt") (lib "x11/test/device.rkt") (lib "x11/test/xsnow.rkt"))) (name . "x11") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/kazzmir/x11-racket/tree/master/") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "97c4a75872cfd2882c8895bba88b87a4ad12be0e") (source . "github://github.com/kazzmir/x11-racket/master/") (source_url . "http://github.com/kazzmir/x11-racket/tree/master/"))))))) ("x509" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "x509" "doc/x509@x509/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x509.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x509.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "x509") (conflicts . ()) (date-added . 1650375258) (dependencies . ("base" "x509-lib" "rackunit-lib" "scribble-lib" "racket-doc" "scramble" "asn1-lib" "asn1-doc" "crypto-lib" "crypto-doc")) (description . "Support for X.509 certificates.") (implies . ("x509-lib")) (modules . ((lib "x509/tests/test.rkt") (lib "x509/tests/test-ossl.rkt") (lib "x509/tests/test-web.rkt") (lib "x509/scribblings/x509.scrbl"))) (name . "x509") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (certificate . #t) (crypto . #t) (ring:1 . #t) (x509 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=x509") (tags . ("certificate" "crypto" "x509")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=x509") (source_url . "https://github.com/rmculpepper/crypto.git?path=x509"))))))) ("x509-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x509-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x509-lib.txt"))) (checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (checksum-error . #f) (collection . "x509") (conflicts . ()) (date-added . 1650375205) (dependencies . ("base" "asn1-lib" "base64-lib" "crypto-lib" "db-lib" "scramble-lib")) (description . "Support for X.509 certificates.") (implies . ()) (modules . ((lib "x509/private/stringprep.rkt") (lib "x509/private/asn1.rkt") (lib "x509/private/interfaces.rkt") (lib "x509/main.rkt") (lib "x509/private/cert.rkt") (lib "x509/private/util.rkt") (lib "x509/private/revocation.rkt") (lib "x509/private/ocsp-asn1.rkt") (lib "x509/private/chain.rkt") (lib "x509/private/store.rkt") (lib "x509/private/store-os.rkt"))) (name . "x509-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (certificate . #t) (crypto . #t) (ring:1 . #t) (x509 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=x509-lib") (tags . ("certificate" "crypto" "x509")) (versions . #hash((default . #hasheq((checksum . "129997ab537db2eea142b5eb25cf2fc74a19d4ec") (source . "https://github.com/rmculpepper/crypto.git?path=x509-lib") (source_url . "https://github.com/rmculpepper/crypto.git?path=x509-lib"))))))) ("x64asm" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204771) (dependencies . ("x64asm-lib" "x64asm-doc")) (description . "a simple x64 assembler written in Typed Racket ") (implies . ("x64asm-lib" "x64asm-doc")) (modules . ()) (name . "x64asm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (assembler . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm") (tags . ("assembler" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm"))))))) ("x64asm-doc" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "x64asm" "doc/x64asm@x64asm-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm-doc.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204715) (dependencies . ("base" "x64asm-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "") (implies . ()) (modules . ((lib "x64asm/scribblings/advanced.scrbl") (lib "x64asm/scribblings/registers.scrbl") (lib "x64asm/scribblings/sample.rkt") (lib "x64asm/scribblings/x64asm.scrbl") (lib "x64asm/scribblings/expe.scrbl") (lib "x64asm/scribblings/inst.scrbl"))) (name . "x64asm-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:yj_qww6@126.com . #t) (docs . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc") (tags . ("docs")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc"))))))) ("x64asm-lib" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm-lib.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204667) (dependencies . ("base" "typed-racket-lib")) (description . "a simple x64 assembler written in Typed Racket") (implies . ()) (modules . ((lib "x64asm/base.rkt") (lib "x64asm/private/encode-common.rkt") (lib "x64asm/unsafe.rkt") (lib "x64asm/private/trace.rkt") (lib "x64asm/main.rkt") (lib "x64asm/private/operand.rkt") (lib "x64asm/private/instruction.rkt") (lib "x64asm/private/macros.rkt") (lib "x64asm/untyped.rkt") (lib "x64asm/private/unsafe.rkt") (lib "x64asm/private/cases3.rkt") (lib "x64asm/private/lift.rkt") (lib "x64asm/private/prefix.rkt") (lib "x64asm/private/sizes.rkt") (lib "x64asm/private/operand-helper.rkt") (lib "x64asm/private/encode.rkt") (lib "x64asm/private/registers.rkt") (lib "x64asm/private/dispatch2.rkt") (lib "x64asm/private/inst.rkt") (lib "x64asm/private/assembler.rkt") (lib "x64asm/private/sse.rkt") (lib "x64asm/private/helper.rkt") (lib "x64asm/well-typed.rkt") (lib "x64asm/private/patterns.rkt") (lib "x64asm/private/emit.rkt") (lib "x64asm/plain.rkt"))) (name . "x64asm-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (assembler . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib") (tags . ("assembler" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib"))))))) ("xdgbasedir0" . #hasheq((author . "lwoodman@vlifesystems.com") (authors . ("lwoodman@vlifesystems.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xdgbasedir"))) (failure-log . "server/built/fail/xdgbasedir0.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Functions to simplify access to the XDG Base Directory Specification.") (implies . ()) (modules . ((lib "xdgbasedir0/xdgbasedir/scribblings/xdgbasedir.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/licence.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/changelog.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/development.scrbl") (lib "xdgbasedir0/xdgbasedir/tests/test-helpers.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/exported-functions.scrbl") (lib "xdgbasedir0/xdgbasedir/xdgbasedir.rkt") (lib "xdgbasedir0/xdgbasedir/tests/xdgbasedir-test.rkt") (lib "xdgbasedir0/xdgbasedir/main.rkt"))) (name . "xdgbasedir0") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:lwoodman@vlifesystems.com . #t) (ring:1 . #t) (unix . #t))) (source . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (source_url . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3"))))))) ("xe" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xe.txt"))) (checksum . "84e5cf72c34e6b3778c9353c22a3ebb0bb943d20") (checksum-error . #f) (collection . "xe") (conflicts . ()) (date-added . 1591344082) (dependencies . ("base" "base" "rackunit-lib")) (description . "xexpr XML utilities, plus traversal and filtering") (implies . ()) (modules . ((lib "xe/main.rkt"))) (name . "xe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (xexpr . #t) (xml . #t))) (source . "https://github.com/tonyg/racket-xe.git") (tags . ("xexpr" "xml")) (versions . #hash((default . #hasheq((checksum . "84e5cf72c34e6b3778c9353c22a3ebb0bb943d20") (source . "https://github.com/tonyg/racket-xe.git") (source_url . "https://github.com/tonyg/racket-xe.git"))))))) ("xenomorph" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xenomorph" "doc/xenomorph@xenomorph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xenomorph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xenomorph.txt"))) (checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661158) (dependencies . ("base" "beautiful-racket-lib" "rackunit-lib" "sugar" "debug" "racket-doc" "scribble-lib")) (description . "binary encoder [in development]") (implies . ()) (modules . ((lib "xenomorph/test/number-test.rkt") (lib "xenomorph/versioned-dict.rkt") (lib "xenomorph/test/vector-test.rkt") (lib "xenomorph/pointer.rkt") (lib "xenomorph/test/reserved-test.rkt") (lib "xenomorph/util.rkt") (lib "xenomorph/test/stream-test.rkt") (lib "xenomorph/test/string-test.rkt") (lib "xenomorph/test/main.rkt") (lib "xenomorph/symbol.rkt") (lib "xenomorph/optional.rkt") (lib "xenomorph/stream.rkt") (lib "xenomorph/test/bitfield-test.rkt") (lib "xenomorph/dict.rkt") (lib "xenomorph/bytes.rkt") (lib "xenomorph/base.rkt") (lib "xenomorph/test/list-test.rkt") (lib "xenomorph/scribblings/xenomorph.scrbl") (lib "xenomorph/string.rkt") (lib "xenomorph/test/optional-test.rkt") (lib "xenomorph/test/bytes-test.rkt") (lib "xenomorph/number.rkt") (lib "xenomorph/test/dict-test.rkt") (lib "xenomorph/test/versioned-dict-test.rkt") (lib "xenomorph/reserved.rkt") (lib "xenomorph/test/pointer-test.rkt") (lib "xenomorph/vector.rkt") (lib "xenomorph/test/enum-test.rkt") (lib "xenomorph/test/symbol-test.rkt") (lib "xenomorph/test/api-test.rkt") (lib "xenomorph/bitfield.rkt") (lib "xenomorph/list.rkt") (lib "xenomorph/int.rkt") (lib "xenomorph/main.rkt") (lib "xenomorph/enum.rkt"))) (name . "xenomorph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (binary . #t) (ring:1 . #t))) (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=xenomorph#main") (tags . ("binary")) (versions . #hash((default . #hasheq((checksum . "680422ea57fce4bc4280edb7412c161561d1641c") (source . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=xenomorph#main") (source_url . "https://git.matthewbutterick.com/mbutterick/typesetting.git?path=xenomorph#main"))))))) ("xexpr-path" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xexpr-path" "doc/xexpr-path@xexpr-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xexpr-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xexpr-path.txt"))) (checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XML Expression Path Lookup") (implies . ()) (modules . ((lib "xexpr-path/main.rkt") (lib "xexpr-path/xexpr-path.scrbl"))) (name . "xexpr-path") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (xml . #t))) (source . "http://github.com/mordae/racket-xexpr-path/tree/master") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (source . "github://github.com/mordae/racket-xexpr-path/master") (source_url . "http://github.com/mordae/racket-xexpr-path/tree/master"))))))) ("xfunctions" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/xfunctions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions.txt") (test-failure-log . "server/built/test-fail/xfunctions.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "racket" "xfunctions-lib" "xfunctions-doc")) (description . "Extended Functional Combinators") (implies . ()) (modules . ((lib "xfunctions/xfunctions-lib/xfunctions.rkt") (lib "xfunctions/main.rkt") (lib "xfunctions/xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:wesley.bitomski@gmail.com . #t) (other . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git") (tags . ("other")) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git") (source_url . "https://github.com/wesleybits/xfunctions.git"))))))) ("xfunctions-doc" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-doc.txt") (test-failure-log . "server/built/test-fail/xfunctions-doc.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket" "sandbox-lib" "scribble-lib" "racket-doc" "xfunctions-lib")) (description . "Documentation for xfunctions") (implies . ()) (modules . ((lib "xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc"))))))) ("xfunctions-lib" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xfunctions-lib.txt"))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket" "rackunit-lib")) (description . "Functional bits of XFunctions") (implies . ()) (modules . ((lib "xfunctions-lib/xfunctions.rkt"))) (name . "xfunctions-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib"))))))) ("xlang" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlang.txt"))) (checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A minimal combinator language, created for PLT Game #1") (implies . ()) (modules . ((lib "xlang/example.rkt") (lib "xlang/main.rkt"))) (name . "xlang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "http://github.com/samth/xlang/tree/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (source . "github://github.com/samth/xlang/master") (source_url . "http://github.com/samth/xlang/tree/master"))))))) ("xlist" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xlist" "doc/xlist@xlist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlist.txt"))) (checksum . "e82c02f99186b062df86a92dc63a954861e36064") (checksum-error . #f) (collection . "xlist") (conflicts . ()) (date-added . 1614799579) (dependencies . ("base" "rackunit-lib" "mutable-match-lambda" "scribble-enhanced" "multi-id" "type-expander" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "reprovide-lang" "match-string" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-math")) (description . "Fancy lists, with bounded or unbounded repetition of elements. Can be used as a type or match pattern.") (implies . ()) (modules . ((lib "xlist/split-xlist.rkt") (lib "xlist/scribblings/xlist-untyped.scrbl") (lib "xlist/test/test-match-typed.rkt") (lib "xlist/once-identifier.rkt") (lib "xlist/test/test-type-superscripts.rkt") (lib "xlist/between.rkt") (lib "xlist/test/test-match.rkt") (lib "xlist/test/test-split-xlist.rkt") (lib "xlist/implementation.rkt") (lib "xlist/test/test-split-xlist-ann.rkt") (lib "xlist/scribblings/xlist.scrbl") (lib "xlist/scribblings/identifiers.scrbl") (lib "xlist/test/test-type.rkt") (lib "xlist/scribblings/split-xlist.scrbl") (lib "xlist/scribble-enhanced.rkt") (lib "xlist/caret-identifier.rkt") (lib "xlist/untyped.rkt") (lib "xlist/infinity-identifier.rkt") (lib "xlist/main.rkt"))) (name . "xlist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (match . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/xlist.git#main") (tags . ("match" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "e82c02f99186b062df86a92dc63a954861e36064") (source . "https://github.com/jsmaniac/xlist.git#main") (source_url . "https://github.com/jsmaniac/xlist.git#main"))))))) ("xml-html" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-html.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xml-html.txt"))) (checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "none") (implies . ()) (modules . ()) (name . "xml-html") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zaomir@outlook.com . #t) (ring:1 . #t))) (source . "https://github.com/zaoqi/xml-html.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (source . "https://github.com/zaoqi/xml-html.git") (source_url . "https://github.com/zaoqi/xml-html.git"))))))) ("xml-rpc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-rpc" "doc/xml-rpc@xml-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-rpc.txt") (test-failure-log . "server/built/test-fail/xml-rpc.txt") (test-success-log . #f))) (checksum . "de6fa6c434da508d13c6a246de1ae80a3a1cd919") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "web-server-lib" "racket-doc" "rackunit-lib" "scribble-lib" "web-server-doc" "net-doc")) (description . "A native Racket XML-RPC client and server library") (implies . ()) (modules . ((lib "tests/net/xml-rpc/serialise-test.rkt") (lib "tests/net/xml-rpc/all-xml-rpc-tests.rkt") (lib "tests/net/xml-rpc/core-test.rkt") (lib "net/xml-rpc/server.rkt") (lib "net/xml-rpc/base.rkt") (lib "tests/net/xml-rpc/run-tests.rkt") (lib "tests/net/xml-rpc/protocol-test.rkt") (lib "net/xml-rpc/xml-rpc.rkt") (lib "tests/net/xml-rpc/server-test.rkt") (lib "net/xml-rpc/serialise.rkt") (lib "net/xml-rpc/protocol.rkt") (lib "tests/net/xml-rpc/util.rkt") (lib "net/xml-rpc/server-core.rkt") (lib "net/xml-rpc.rkt") (lib "net/xml-rpc/xml-rpc.scrbl") (lib "net/xml-rpc/core.rkt") (lib "net/xml-rpc/client.rkt"))) (name . "xml-rpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/xml-rpc/tree/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "de6fa6c434da508d13c6a246de1ae80a3a1cd919") (source . "github://github.com/jeapostrophe/xml-rpc/master") (source_url . "http://github.com/jeapostrophe/xml-rpc/tree/master"))))))) ("xmllint-win32-x86_64" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmllint-win32-x86_64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmllint-win32-x86_64.txt"))) (checksum . "8b3ff2681a47bf0fb0036c8b900526e7a7a63086") (checksum-error . #f) (collection . "xmllint-win32-x86_64") (conflicts . ()) (dependencies . ("base")) (description . "A platform-specific Racket package providing xmllint.exe for Windows") (implies . ()) (modules . ((lib "xmllint-win32-x86_64/main.rkt"))) (name . "xmllint-win32-x86_64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "8b3ff2681a47bf0fb0036c8b900526e7a7a63086") (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (source_url . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git"))))))) ("xmlns" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-ns" "doc/xml-ns@xmlns/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmlns.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmlns.txt"))) (checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "XML namespace support") (implies . ()) (modules . ((lib "xml/xml-ns.scrbl") (lib "xml/ns.rkt"))) (name . "xmlns") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (ring:1 . #t) (xml . #t))) (source . "http://github.com/lwhjp/racket-xmlns/tree/master") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (source . "git://github.com/lwhjp/racket-xmlns") (source_url . "http://github.com/lwhjp/racket-xmlns/tree/master"))))))) ("xsmith" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xsmith" "doc/xsmith@xsmith/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xsmith.txt") (test-failure-log . "server/built/test-fail/xsmith.txt") (test-success-log . #f))) (checksum . "505bd6af3c3b7b5bc0a1790b8bbc88331ff7c77f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1559665478) (dependencies . ("base" "version-string-with-git-hash" "quickcheck" "rackunit-lib" "at-exp-lib" "pprint" "racr" "clotho" "math-lib" "unix-socket-lib" "memoize" "scribble-lib" "racket-doc")) (description . "Generator of highly effective fuzz testers.") (implies . ()) (modules . ((lib "xsmith/private/types.rkt") (lib "xsmith/private/test-fuzzers/function-type.rkt") (lib "xsmith/private/test-fuzzers/multiple-base-types.rkt") (lib "xsmith/private/type-unifying-accessors.rkt") (lib "xsmith/private/xsmith-command-line.rkt") (lib "xsmith/private/scope-graph.rkt") (lib "xsmith/app.rkt") (lib "xsmith/scribblings/acknowledgments.scrbl") (lib "xsmith/scribblings/minimal-example-with-canned-components.rkt") (lib "xsmith/private/core-properties.rkt") (lib "xsmith/private/test-fuzzers/subtyping-base-types.rkt") (lib "xsmith/scribblings/minimal-example-with-variables.rkt") (lib "xsmith/private/xsmith-parameters.rkt") (lib "xsmith/private/test-fuzzers/memory-access.rkt") (lib "xsmith/racr-convenience.rkt") (lib "xsmith/private/choice.rkt") (lib "xsmith/private/test-fuzzers/no-types.rkt") (lib "xsmith/scribblings/code-and-license.scrbl") (lib "xsmith/scribblings/xsmith.scrbl") (lib "xsmith/scribblings/guide.scrbl") (lib "xsmith/private/xsmith-reduce.rkt") (lib "xsmith/private/grammar-refiner.rkt") (lib "xsmith/private/xsmith-utils.rkt") (lib "xsmith/scribblings/minimal-example.rkt") (lib "xsmith/canned-components.rkt") (lib "xsmith/private/test-fuzzers/structural-records.rkt") (lib "xsmith/private/spec-component-struct.rkt") (lib "xsmith/private/grammar-macros.rkt") (lib "xsmith/private/define-grammar-property.rkt") (lib "xsmith/main.rkt") (lib "xsmith/private/xsmith-version.rkt") (lib "xsmith/private/debug-util.rkt") (lib "xsmith/private/grammar-properties.rkt") (lib "xsmith/scribblings/reference.scrbl") (lib "xsmith/private/test-fuzzers/product-type.rkt") (lib "xsmith/scribblings/install.scrbl") (lib "xsmith/private/effects.rkt") (lib "xsmith/scribblings/util.rkt") (lib "xsmith/private/core-macros-and-properties.rkt"))) (name . "xsmith") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release") (tags . ("fuzzing")) (versions . #hash((default . #hasheq((checksum . "505bd6af3c3b7b5bc0a1790b8bbc88331ff7c77f") (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release"))))))) ("xsmith-examples" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xsmith-examples"))) (failure-log . "server/built/fail/xsmith-examples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "505bd6af3c3b7b5bc0a1790b8bbc88331ff7c77f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1598980419) (dependencies . ("base" "version-string-with-git-hash" "rackunit-lib" "at-exp-lib" "pprint" "racr" "xsmith" "clotho" "math-lib" "scribble-lib")) (description . "Example fuzzers built with xsmith.") (implies . ()) (modules . ((lib "xsmith-examples/future/pythonesque/pythonesque.rkt") (lib "xsmith-examples/future/simplesafemath.rkt") (lib "xsmith-examples/verilog/verilog.rkt") (lib "xsmith-examples/future/fastmath.rkt") (lib "xsmith-examples/future/pretty-printing.rkt") (lib "xsmith-examples/simple/javascript.rkt") (lib "xsmith-examples/cish/cish-main.rkt") (lib "xsmith-examples/scribblings/xsmith-examples.scrbl") (lib "xsmith-examples/cish/cish-utils.rkt") (lib "xsmith-examples/simple/lua.rkt") (lib "xsmith-examples/cish/cish.rkt") (lib "xsmith-examples/standard-ml/standard-ml.rkt") (lib "xsmith-examples/private/xsmith-examples-version.rkt") (lib "xsmith-examples/future/refiners-test.rkt") (lib "xsmith-examples/python/python.rkt") (lib "xsmith-examples/future/btree.rkt") (lib "xsmith-examples/future/polyphasic.rkt") (lib "xsmith-examples/racket-kernel-fuzzer/racket-kernel-fuzzer.rkt") (lib "xsmith-examples/private/util.rkt") (lib "xsmith-examples/simple/racket.rkt") (lib "xsmith-examples/schemely/schemely.rkt") (lib "xsmith-examples/cish/cish-rules.rkt") (lib "xsmith-examples/cish/cish-grammar.rkt"))) (name . "xsmith-examples") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release") (tags . ("fuzzing")) (versions . #hash((default . #hasheq((checksum . "505bd6af3c3b7b5bc0a1790b8bbc88331ff7c77f") (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release"))))))) ("yaml" . #hasheq((author . "ejs@ccs.neu.edu") (authors . ("ejs@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yaml" "doc/yaml@yaml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yaml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yaml.txt"))) (checksum . "b60a1e4a01979ed447799b07e7f8dd5ff17019f0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A library for parsing and emitting YAML.") (implies . ()) (modules . ((lib "yaml/tokens.rkt") (lib "yaml/resolver.rkt") (lib "yaml/struct.rkt") (lib "yaml/nodes.rkt") (lib "yaml/scribblings/yaml.scrbl") (lib "yaml/tests/utils.rkt") (lib "yaml/emitter.rkt") (lib "yaml/yaml-expr.rkt") (lib "yaml/constructor.rkt") (lib "yaml/serializer.rkt") (lib "yaml/composer.rkt") (lib "yaml/errors.rkt") (lib "yaml/scanner.rkt") (lib "yaml/utils.rkt") (lib "yaml/parser.rkt") (lib "yaml/tests/test-nodes.rkt") (lib "yaml/main.rkt") (lib "yaml/events.rkt") (lib "yaml/representer.rkt"))) (name . "yaml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ejs@ccs.neu.edu . #t) (parsing . #t) (ring:1 . #t) (yaml . #t))) (source . "http://github.com/esilkensen/yaml/tree/master") (tags . ("parsing" "yaml")) (versions . #hash((default . #hasheq((checksum . "b60a1e4a01979ed447799b07e7f8dd5ff17019f0") (source . "github://github.com/esilkensen/yaml/master") (source_url . "http://github.com/esilkensen/yaml/tree/master"))))))) ("yijing" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yijing" "doc/yijing@yijing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yijing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yijing.txt"))) (checksum . "d2bf8b67abc89e87cf1ccf1f9cf197709374bd16") (checksum-error . #f) (collection . "yijing") (conflicts . ()) (date-added . 1638212412) (dependencies . ("base" "htdp-lib" "htdp-doc" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "Chinese Yijing Icons.") (implies . ()) (modules . ((lib "yijing/scribblings/yijing.scrbl") (lib "yijing/main.rkt") (lib "yijing/private/dictionary.rkt"))) (name . "yijing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (ring:1 . #t) (yijing . #t))) (source . "https://github.com/yanyingwang/yijing.git#master") (tags . ("yijing")) (versions . #hash((default . #hasheq((checksum . "d2bf8b67abc89e87cf1ccf1f9cf197709374bd16") (source . "https://github.com/yanyingwang/yijing.git#master") (source_url . "https://github.com/yanyingwang/yijing.git#master"))))))) ("yotsubAPI" . #hasheq((author . "gg@tfwno.gf") (authors . ("gg@tfwno.gf")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yotsubAPI" "doc/yotsubAPI@yotsubAPI/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yotsubAPI.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yotsubAPI.txt"))) (checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (checksum-error . #f) (collection . "yotsubAPI") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket Client for the 4chan API") (implies . ()) (modules . ((lib "yotsubAPI/main.rkt") (lib "yotsubAPI/yotsubAPI.scrbl"))) (name . "yotsubAPI") (ring . 1) (search-terms . #hasheq((4chan . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:gg@tfwno.gf . #t) (client . #t) (http . #t) (ring:1 . #t))) (source . "http://github.com/g-gundam/yotsubAPI/tree/master") (tags . ("4chan" "api" "client" "http")) (versions . #hash((default . #hasheq((checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (source . "git://github.com/g-gundam/yotsubAPI") (source_url . "http://github.com/g-gundam/yotsubAPI/tree/master"))))))) ("z3" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/z3.txt") (test-failure-log . "server/built/test-fail/z3.txt") (test-success-log . #f))) (checksum . "78deda2c7a377b93caefd40fd16e5df9c6d53c40") (checksum-error . #f) (collection . "z3") (conflicts . ()) (dependencies . ("base" "html-lib" "typed-racket-lib" "typed-racket-more")) (description . "Z3 bindings for Racket") (implies . ()) (modules . ((lib "z3/ffi/main.rkt") (lib "z3/ffi/ffi.rkt") (lib "z3/smt.rkt") (lib "z3/smt/commands.rkt") (lib "z3/ffi/define-ffi.rkt") (lib "z3/smt/main.rkt") (lib "z3/ffi.rkt") (lib "z3/ffi/ffi-typed.rkt") (lib "z3/smt/primitives.rkt") (lib "z3/smt/private.rkt") (lib "z3/main.rkt") (lib "z3/tests/guide.rkt"))) (name . "z3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (smt . #t) (solver . #t) (z3 . #t))) (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (tags . ("smt" "solver" "z3")) (versions . #hash((default . #hasheq((checksum . "78deda2c7a377b93caefd40fd16e5df9c6d53c40") (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (source_url . "https://github.com/philnguyen/z3-rkt.git?path=z3/"))))))) ("zKanren" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/zKanren.txt") (docs . (("main" "zKanren" "doc/zKanren@zKanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zKanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zKanren.txt"))) (checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (checksum-error . #f) (collection . "zKanren") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket")) (description . "-") (implies . ()) (modules . ((lib "zKanren/scribblings/zKanren.scrbl") (lib "zKanren/main.rkt") (lib "zKanren/zk.rkt"))) (name . "zKanren") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:zaomir@outlook.com . #t) (logic . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/the-language/zKanren2.git") (tags . ("logic" "miniKanren")) (versions . #hash((default . #hasheq((checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (source . "https://github.com/the-language/zKanren2.git") (source_url . "https://github.com/the-language/zKanren2.git"))))))) ("zaoqil" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/zaoqil.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "zaoqil") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:1 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("zeromq" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zeromq" "doc/zeromq@zeromq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq.txt") (test-failure-log . "server/built/test-fail/zeromq.txt") (test-success-log . #f))) (checksum . "9743809a4415f342da111aaf876c1b9c8dfa8bf1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "math-lib" "rackunit-lib")) (description . "A Racket interface to zeromq based on an FFI") (implies . ()) (modules . ((lib "net/zmq.rkt") (lib "net/zmq/zeromq.scrbl"))) (name . "zeromq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ffi . #t) (net . #t) (parallel . #t) (ring:1 . #t))) (source . "http://github.com/jeapostrophe/zeromq/tree/master") (tags . ("concurrency" "ffi" "net" "parallel")) (versions . #hash((default . #hasheq((checksum . "9743809a4415f342da111aaf876c1b9c8dfa8bf1") (source . "github://github.com/jeapostrophe/zeromq/master") (source_url . "http://github.com/jeapostrophe/zeromq/tree/master"))))))) ("zeromq-guide-examples" . #hasheq((author . "aymano.osman@gmail.com") (authors . ("aymano.osman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-guide-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-guide-examples.txt"))) (checksum . "b938f6e33d04cfd62f9a328543d3943a0f3f53a0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601516680) (dependencies . ("base" "zeromq-r-lib")) (description . "See https://zguide.zeromq.org/") (implies . ()) (modules . ((lib "zeromq-guide-examples/rrworker.rkt") (lib "zeromq-guide-examples/msgqueue.rkt") (lib "zeromq-guide-examples/wuclient.rkt") (lib "zeromq-guide-examples/wuserver.rkt") (lib "zeromq-guide-examples/hwclient.rkt") (lib "zeromq-guide-examples/taskwork.rkt") (lib "zeromq-guide-examples/taskwork2.rkt") (lib "zeromq-guide-examples/syncpub.rkt") (lib "zeromq-guide-examples/rrclient.rkt") (lib "zeromq-guide-examples/syncsub.rkt") (lib "zeromq-guide-examples/tasksink.rkt") (lib "zeromq-guide-examples/mtserver.rkt") (lib "zeromq-guide-examples/tasksink2.rkt") (lib "zeromq-guide-examples/hwserver.rkt") (lib "zeromq-guide-examples/rrbroker.rkt") (lib "zeromq-guide-examples/mtrelay.rkt") (lib "zeromq-guide-examples/taskvent.rkt"))) (name . "zeromq-guide-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:aymano.osman@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b938f6e33d04cfd62f9a328543d3943a0f3f53a0") (source . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples") (source_url . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples"))))))) ("zeromq-r" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zeromq-r" "doc/zeromq-r@zeromq-r/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-r.txt"))) (checksum . "5917ef00278433cf4d953632a13744b6d826cae9") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (dependencies . ("base" "zeromq-r-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Bindings for ZeroMQ") (implies . ("zeromq-r-lib")) (modules . ((lib "zeromq/tests/sync-interleave.rkt") (lib "zeromq/tests/poller.rkt") (lib "zeromq/tests/client-server.rkt") (lib "zeromq/tests/two-threads.rkt") (lib "zeromq/tests/rep-req.rkt") (lib "zeromq/tests/proxy.rkt") (lib "zeromq/tests/radio-dish.rkt") (lib "zeromq/tests/errors.rkt") (lib "zeromq/tests/scatter-gather.rkt") (lib "zeromq/tests/mutex.rkt") (lib "zeromq/tests/sync-wakeup.rkt") (lib "zeromq/zeromq-r.scrbl") (lib "zeromq/tests/hello.rkt") (lib "zeromq/tests/pub-sub.rkt"))) (name . "zeromq-r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "http://github.com/rmculpepper/racket-zeromq/tree/master?path=zeromq-r") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "5917ef00278433cf4d953632a13744b6d826cae9") (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r") (source_url . "http://github.com/rmculpepper/racket-zeromq/tree/master?path=zeromq-r"))))))) ("zeromq-r-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-r-lib.txt"))) (checksum . "5917ef00278433cf4d953632a13744b6d826cae9") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1553104502) (dependencies . ("base" "zeromq-win32-i386" "zeromq-win32-x86_64" "zeromq-x86_64-linux-natipkg")) (description . "Bindings for ZeroMQ") (implies . ()) (modules . ((lib "zeromq/private/ffi.rkt") (lib "zeromq/private/mutex.rkt") (lib "zeromq/main.rkt") (lib "zeromq/private/addr.rkt") (lib "zeromq/unsafe.rkt") (lib "zeromq/private/install.rkt"))) (name . "zeromq-r-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "5917ef00278433cf4d953632a13744b6d826cae9") (source . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib") (source_url . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib"))))))) ("zeromq-win32-i386" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-win32-i386.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1565378190) (dependencies . ("base")) (description . "native library for zeromq") (implies . ()) (modules . ()) (name . "zeromq-win32-i386") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386"))))))) ("zeromq-win32-x86_64" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-win32-x86_64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-win32-x86_64.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1565378295) (dependencies . ("base")) (description . "native library for zeromq") (implies . ()) (modules . ()) (name . "zeromq-win32-x86_64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64"))))))) ("zeromq-x86_64-linux-natipkg" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-x86_64-linux-natipkg.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (dependencies . ("base")) (description . "native libraries for zeromq-r-lib package") (implies . ()) (modules . ()) (name . "zeromq-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (ffi . #t) (natipkg . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg") (tags . ("ffi" "natipkg")) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg"))))))) ("zippers" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zippers" "doc/zippers@zippers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zippers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zippers.txt"))) (checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (checksum-error . #f) (collection . "zippers") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for working with and deriving Huet-style zippers") (implies . ()) (modules . ((lib "zippers/main.rkt") (lib "zippers/scribblings/zippers.scrbl"))) (name . "zippers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t) (utility . #t))) (source . "http://github.com/david-christiansen/racket-zippers/tree/master") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (source . "git://github.com/david-christiansen/racket-zippers") (source_url . "http://github.com/david-christiansen/racket-zippers/tree/master"))))))) ("ziptie-completion" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ziptie-completion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ziptie-completion.txt"))) (checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659610679) (dependencies . ("base" "threading-lib")) (description . "ZipTie, completion component.") (implies . ()) (modules . ((lib "ziptie/completion/make-completion-exe.rkt") (lib "ziptie/completion/make-completion.rkt"))) (name . "ziptie-completion") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (completion . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-completion") (tags . ("completion" "system")) (versions . #hash((default . #hasheq((checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-completion") (source_url . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-completion"))))))) ("ziptie-distro" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ziptie-distro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ziptie-distro.txt"))) (checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659610602) (dependencies . ("base" "threading-lib")) (description . "ZipTie, distro component.") (implies . ()) (modules . ((lib "ziptie/distro/os-release.rkt") (lib "ziptie/distro/kernel-info.rkt") (lib "ziptie/distro.rkt") (lib "ziptie/distro/private/uname.rkt") (lib "ziptie/distro/lsb-release.rkt") (lib "ziptie/distro/private/lsb_release.rkt"))) (name . "ziptie-distro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-distro") (tags . ("system")) (versions . #hash((default . #hasheq((checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-distro") (source_url . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-distro"))))))) ("ziptie-git" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ziptie-git.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ziptie-git.txt"))) (checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1647073366) (dependencies . ("base" "threading-lib")) (description . "ZipTie, git component.") (implies . ()) (modules . ((lib "ziptie/git/git.rkt") (lib "ziptie/git/staged.rkt") (lib "ziptie/git/changelog.rkt") (lib "ziptie/git/hash.rkt"))) (name . "ziptie-git") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (git . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-git") (tags . ("git" "system")) (versions . #hash((default . #hasheq((checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-git") (source_url . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-git"))))))) ("ziptie-make" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ziptie-make.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ziptie-make.txt"))) (checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1659610520) (dependencies . ("base" "threading-lib" "uuid")) (description . "ZipTie, make component.") (implies . ()) (modules . ((lib "ziptie/make/ninja.rkt") (lib "ziptie/make/cmake.rkt") (lib "ziptie/make/nproc.rkt"))) (name . "ziptie-make") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (make . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-make") (tags . ("make" "system")) (versions . #hash((default . #hasheq((checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-make") (source_url . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-make"))))))) ("ziptie-monorepo" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ziptie-monorepo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ziptie-monorepo.txt"))) (checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1656546288) (dependencies . ("base" "upi-lib" "threading-lib")) (description . "ZipTie, monorepo component.") (implies . ()) (modules . ((lib "ziptie/monorepo/get-info.rkt") (lib "ziptie/monorepo/make-makefile-exe.rkt") (lib "ziptie/monorepo/make-makefile.rkt") (lib "ziptie/monorepo/dependencies.rkt"))) (name . "ziptie-monorepo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:xgqt@riseup.net . #t) (development . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-monorepo") (tags . ("development")) (versions . #hash((default . #hasheq((checksum . "662d6281e8edb6b543242128fd50296ad05c00be") (source . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-monorepo") (source_url . "https://gitlab.com/xgqt/racket-ziptie.git?path=src%2Fziptie-monorepo"))))))) ("zmq" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zmq" "doc/zmq@zmq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zmq.txt") (test-failure-log . "server/built/test-fail/zmq.txt") (test-success-log . #f))) (checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Minimal Racket ZeroMQ Bindings") (implies . ()) (modules . ((lib "zmq/private/ffi.rkt") (lib "zmq/main.rkt") (lib "zmq/zmq.scrbl"))) (name . "zmq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ipc . #t) (linux . #t) (ring:1 . #t))) (source . "http://github.com/mordae/racket-zmq/tree/master") (tags . ("ffi" "ipc" "linux")) (versions . #hash((default . #hasheq((checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (source . "github://github.com/mordae/racket-zmq/master") (source_url . "http://github.com/mordae/racket-zmq/tree/master"))))))) ("zordoz" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zordoz" "doc/zordoz@zordoz/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/zordoz.txt") (success-log . "server/built/install/zordoz.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zordoz.txt"))) (checksum . "c65eccf469725b36dc27e5e153354e7e71766b9c") (checksum-error . #f) (collection . "zordoz") (conflicts . ()) (dependencies . ("base" "compiler-lib" "zo-lib" "typed-racket-lib" "typed-racket-more" "readline-lib" "dynext-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Explorer for .zo bytecode files") (implies . ()) (modules . ((lib "zordoz/scribblings/zordoz.scrbl") (lib "zordoz/typed/zo-structs.rkt") (lib "zordoz/zordoz.rkt") (lib "zordoz/private/zo-shell.rkt") (lib "zordoz/scribblings/typed-api.scrbl") (lib "zordoz/private/windows-readline.rkt") (lib "zordoz/private/zo-syntax.rkt") (lib "zordoz/private/if-windows.rkt") (lib "zordoz/scribblings/repl.scrbl") (lib "zordoz/test.rkt") (lib "zordoz/private/zo-find.rkt") (lib "zordoz/private/zo-compile.rkt") (lib "zordoz/scribblings/overview.scrbl") (lib "zordoz/typed.rkt") (lib "zordoz/scribblings/api.scrbl") (lib "zordoz/main.rkt") (lib "zordoz/private/zo-transition.rkt") (lib "zordoz/private/dispatch-table.rkt") (lib "zordoz/private/zo-string.rkt"))) (name . "zordoz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (compiler . #t) (repl . #t) (ring:1 . #t) (zo . #t))) (source . "https://github.com/bennn/zordoz.git") (tags . ("compiler" "repl" "zo")) (versions . #hash((default . #hasheq((checksum . "c65eccf469725b36dc27e5e153354e7e71766b9c") (source . "https://github.com/bennn/zordoz.git") (source_url . "https://github.com/bennn/zordoz.git"))))))) ("zstd" . #hasheq((author . "williewillus@vincent-lee.net") (authors . ("williewillus@vincent-lee.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zstd" "doc/zstd@zstd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zstd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zstd.txt"))) (checksum . "39ebaddcbfbfda1b5d9f076323094e55ad4e003b") (checksum-error . #f) (collection . "zstd") (conflicts . ()) (date-added . 1652241612) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings to the reference Zstandard compression/decompression library. libzstd must be installed for this package to work.") (implies . ()) (modules . ((lib "zstd/main.rkt") (lib "zstd/scribblings/zstd.scrbl") (lib "zstd/private/raw.rkt"))) (name . "zstd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:williewillus@vincent-lee.net . #t) (ring:1 . #t) (zstd . #t))) (source . "git+https://git.sr.ht/~williewillus/racket-zstd") (tags . ("zstd")) (versions . #hash((default . #hasheq((checksum . "39ebaddcbfbfda1b5d9f076323094e55ad4e003b") (source . "git+https://git.sr.ht/~williewillus/racket-zstd") (source_url . "git+https://git.sr.ht/~williewillus/racket-zstd"))))))) ("zuo-doc" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zuo" "doc/zuo@zuo-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zuo-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zuo-doc.txt"))) (checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1650023923) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc")) (description . "Documentation for the Zuo language") (implies . ()) (modules . ((lib "zuo-doc/lang-zuo.scrbl") (lib "zuo-doc/fake-kernel.rkt") (lib "zuo-doc/overview.scrbl") (lib "zuo-doc/defzuomodule.rkt") (lib "zuo-doc/lang-zuo-datum.scrbl") (lib "zuo-doc/fake-zuo-hygienic.rkt") (lib "zuo-doc/zuo-lib.scrbl") (lib "zuo-doc/lang-zuo-hygienic.scrbl") (lib "zuo-doc/zuo.scrbl") (lib "zuo-doc/zuo-build.scrbl") (lib "zuo-doc/fake-zuo.rkt") (lib "zuo-doc/real-racket.rkt") (lib "zuo-doc/lang-zuo-kernel.scrbl"))) (name . "zuo-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t) (scripting . #t))) (source . "https://github.com/racket/racket.git?path=racket%2Fsrc%2Fzuo%2Fzuo-doc") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (source . "https://github.com/racket/racket.git?path=racket%2Fsrc%2Fzuo%2Fzuo-doc") (source_url . "https://github.com/racket/racket.git?path=racket%2Fsrc%2Fzuo%2Fzuo-doc"))))))))