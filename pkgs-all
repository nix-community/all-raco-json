#hash(("BSA-drracket-teachpacks" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/BSA-drracket-teachpacks.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1609093465) (dependencies . ()) (description . "The DrRacket teach packs for the Bootstrap plus the files used for Fall 2020. ") (implies . ()) (modules . ()) (name . "BSA-drracket-teachpacks") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:matthias@ccs.neu.edu . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (source_url . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git"))))))) ("alpaca" . #hasheq((author . "oleks.litus@gmail.com") (authors . ("oleks.litus@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/alpaca.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "24e0cebc55d5d82262902a47d2f323f6ea4045d4") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/traido/alpaca-api-rkt.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1652059286) (dependencies . ()) (description . "Racket client for Alpaca API") (implies . ()) (modules . ()) (name . "alpaca") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:oleks.litus@gmail.com . #t) (client-api . #t) (ring:1 . #t) (stocks . #t) (trading . #t))) (source . "https://github.com/traido/alpaca-api-rkt.git") (tags . ("client-api" "stocks" "trading")) (versions . #hash((default . #hasheq((checksum . "24e0cebc55d5d82262902a47d2f323f6ea4045d4") (source . "https://github.com/traido/alpaca-api-rkt.git") (source_url . "https://github.com/traido/alpaca-api-rkt.git"))))))) ("apply" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/apply.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apply.txt"))) (checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (checksum-error . #f) (collection . "apply") (conflicts . ()) (dependencies . ("racket")) (description . "應用序語言") (implies . ()) (modules . ((lib "apply/lang/reader.rkt") (lib "apply/main.rkt"))) (name . "apply") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zaomir@outlook.com . #t) (chinese . #t) (compiler . #t) (lang . #t) (language . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/zaoqil/apply.git?path=apply") (tags . ("chinese" "compiler" "lang" "language" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (source . "https://github.com/zaoqil/apply.git?path=apply") (source_url . "https://github.com/zaoqil/apply.git?path=apply"))))))) ("aws-cloudformation-deploy" . #hasheq((author . "michaelaarnold@gmail.com") (authors . ("michaelaarnold@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-deploy.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "core AWS Cloudformation deployment scripting library") (implies . ()) (modules . ((lib "aws-cloudformation-deploy/test/test-core.rkt") (lib "aws-cloudformation-deploy/src/core.rkt") (lib "aws-cloudformation-deploy/main.rkt"))) (name . "aws-cloudformation-deploy") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:michaelaarnold@gmail.com . #t) (aws . #t) (cloudformation . #t) (deploy . #t) (ring:1 . #t) (script . #t))) (source . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master") (tags . ("aws" "cloudformation" "deploy" "script")) (versions . #hash((default . #hasheq((checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (source . "git://github.com/cjdev/aws-cloudformation-deploy") (source_url . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master"))))))) ("circuit-playground" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "circuit-playground" "doc/circuit-playground@circuit-playground/index.html"))) (failure-log . "server/built/fail/circuit-playground.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Language for coding the Circuit Playground Express in Racket.  Compiles Racket code to Python, which runs on a custom version of the Circuit Python firmware.  We use this for educational purposes at ThoughtSTEM.  It may or may not work on your operating system.  I've tested it only on Mac and Linux.   ") (implies . ()) (modules . ((lib "circuit-playground/api/circuit-python-base.rkt") (lib "circuit-playground/api/ir.rkt") (lib "circuit-playground/racket-demos/blaster.rkt") (lib "circuit-playground/racket-demos/loudness-necklace.rkt") (lib "circuit-playground/installer.rkt") (lib "circuit-playground/api/sound.rkt") (lib "circuit-playground/racket-demos/droids.rkt") (lib "circuit-playground/api/input.rkt") (lib "circuit-playground/racket-demos/clap-light.rkt") (lib "circuit-playground/api/lights.rkt") (lib "circuit-playground/api/rgb_helper.rkt") (lib "circuit-playground/racket-demos/lightsaber.rkt") (lib "circuit-playground/main.rkt") (lib "circuit-playground/api/servo.rkt") (lib "circuit-playground/circuit-playground.scrbl") (lib "circuit-playground/racket-demos/magic-wand.rkt") (lib "circuit-playground/api/accel.rkt") (lib "circuit-playground/racket-demos/night-light.rkt") (lib "circuit-playground/api/circuit-python.rkt") (lib "circuit-playground/racket-demos/hot-potato.rkt") (lib "circuit-playground/racket-demos/hello-led.rkt") (lib "circuit-playground/api/python.rkt") (lib "circuit-playground/racket-demos/servo-hello.rkt") (lib "circuit-playground/racket-demos/hello-world.rkt") (lib "circuit-playground/racket-demos/hello-button-down.rkt") (lib "circuit-playground/racket-demos/hello-touch-pad.rkt") (lib "circuit-playground/racket-demos/siren-demo.rkt") (lib "circuit-playground/api/output.rkt") (lib "circuit-playground/racket-demos/hello-ir.rkt") (lib "circuit-playground/circuit-playground-module.rkt") (lib "circuit-playground/racket-demos/death-star.rkt") (lib "circuit-playground/racket-demos/jingles.rkt"))) (name . "circuit-playground") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/circuit-playground.git") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (source . "https://github.com/thoughtstem/circuit-playground.git") (source_url . "https://github.com/thoughtstem/circuit-playground.git"))))))) ("diagrams" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrams.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrams.txt"))) (checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Draw technical diagrams") (implies . ()) (modules . ()) (name . "diagrams") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dedbox@gmail.com . #t) (drawing . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-diagrams.git") (tags . ("drawing" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (source . "https://github.com/dedbox/racket-diagrams.git") (source_url . "https://github.com/dedbox/racket-diagrams.git"))))))) ("emo" . #hasheq((author . "setthemfree@privacyrequired.com") (authors . ("setthemfree@privacyrequired.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/emo.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/emo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/emo.txt"))) (checksum . "550c38950a76d2775dac2b889c31ef3227ef572f") (checksum-error . #f) (collection . "emo") (conflicts . ()) (date-added . 1654403079) (dependencies . ()) (description . "A very simple command line emoji finder") (implies . ()) (modules . ((lib "emo/emo.rkt"))) (name . "emo") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:setthemfree@privacyrequired.com . #t) (emoji . #t) (ring:1 . #t))) (source . "https://gitlab.com/yurb/emo.git#main") (tags . ("emoji")) (versions . #hash((default . #hasheq((checksum . "550c38950a76d2775dac2b889c31ef3227ef572f") (source . "https://gitlab.com/yurb/emo.git#main") (source_url . "https://gitlab.com/yurb/emo.git#main"))))))) ("expr-in-racket" . #hasheq((author . "kevin2059@163.com") (authors . ("kevin2059@163.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/expr-in-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "embed expr like \"x+1\" in racket.") (implies . ()) (modules . ((lib "expr-in-racket/main.rkt") (lib "expr-in-racket/srcloc.rkt") (lib "expr-in-racket/compiler.rkt") (lib "expr-in-racket/grammar/ast.rkt") (lib "expr-in-racket/lang/reader.rkt") (lib "expr-in-racket/lang/lang-info.rkt") (lib "expr-in-racket/grammar/yacc.rkt") (lib "expr-in-racket/syntax.rkt") (lib "expr-in-racket/grammar/lex.rkt") (lib "expr-in-racket/lib.rkt") (lib "expr-in-racket/lang/configure-runtime.rkt"))) (name . "expr-in-racket") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:kevin2059@163.com . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/connor2059/expr-in-racket.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (source . "https://github.com/connor2059/expr-in-racket.git") (source_url . "https://github.com/connor2059/expr-in-racket.git"))))))) ("ffmpeg-i386-macosx-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/ffmpeg-i386-macosx-3-4.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: ffmpeg-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:914:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "ffmpeg-i386-macosx-3-4") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4"))))))) ("file-metadata" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/file-metadata.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/file-metadata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/file-metadata.txt"))) (checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (checksum-error . #f) (collection . "file-metadata") (conflicts . ()) (dependencies . ()) (description . "Answer various questions about a file, e.g. \"Is this a gzip file?\"  \r\n\r\nTHIS IS VERY ALPHA.  Currently only supports the 'is it a gzip' question, code is ugly, etc.") (implies . ()) (modules . ((lib "file-metadata/tests/test_main.rkt") (lib "file-metadata/main.rkt") (lib "file-metadata/definitions/gzip.rkt"))) (name . "file-metadata") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:david.storrs@gmail.com . #t) (file . #t) (metadata . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/file-metadata.git") (tags . ("file" "metadata")) (versions . #hash((default . #hasheq((checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (source . "https://github.com/dstorrs/file-metadata.git") (source_url . "https://github.com/dstorrs/file-metadata.git"))))))) ("formica" . #hasheq((author . "samsergey@yandex.ru") (authors . ("samsergey@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/formica.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "/var/tmp/16628721721662872172603-samsergey_formica_head/info.rkt:5:0: require: bad syntax\n  in: (require string-constants)\n  location...:\n   /var/tmp/16628721721662872172603-samsergey_formica_head/info.rkt:5:0\n  context...:\n   /home/pkgserver/racket/collects/setup/getinfo.rkt:33:0: get-info/full\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "\"Functionally oriented\" educational language") (implies . ()) (modules . ()) (name . "formica") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:samsergey@yandex.ru . #t) (ring:1 . #t))) (source . "http://github.com/samsergey/formica/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "git://github.com/samsergey/formica") (source_url . "http://github.com/samsergey/formica/tree/master"))))))) ("iloveck101" . #hasheq((author . "Dendoh@gmail.com") (authors . ("Dendoh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/iloveck101.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A command-line tool to download images from ck101 threads.") (implies . ()) (modules . ((lib "iloveck101/iloveck101.rkt"))) (name . "iloveck101") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:Dendoh@gmail.com . #t) (ck101 . #t) (ring:1 . #t) (web . #t))) (source . "http://github.com/Domon/iloveck101/tree/master") (tags . ("ck101" "web")) (versions . #hash((default . #hasheq((checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (source . "github://github.com/Domon/iloveck101/master") (source_url . "http://github.com/Domon/iloveck101/tree/master"))))))) ("java-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/java-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-processing.txt"))) (checksum . "8a232dac0405edf13067397364c9dbd702addca6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "The minimal amount of code necessary to write processing code in DrRacket (so I don't have to switch students to a different IDE in my classes).") (implies . ()) (modules . ((lib "java-processing/main.rkt") (lib "java-processing/processing-module.rkt"))) (name . "java-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/java-processing.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a232dac0405edf13067397364c9dbd702addca6") (source . "https://github.com/thoughtstem/java-processing.git") (source_url . "https://github.com/thoughtstem/java-processing.git"))))))) ("khoury-gradescope" . #hasheq((author . "t.sachleben@northeastern.edu") (authors . ("t.sachleben@northeastern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/khoury-gradescope.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bf69e9dd5c0e98a41b4a4119b79fe88258419509") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1648224151) (dependencies . ()) (description . "") (implies . ()) (modules . ((lib "khoury-gradescope/grade-two-funs.rkt") (lib "khoury-gradescope/grade-macros.rkt") (lib "khoury-gradescope/tests/two-funs/s3/code.rkt") (lib "khoury-gradescope/tests/two-funs/s1/code.rkt") (lib "khoury-gradescope/tests/sq/s9/defs.rkt") (lib "khoury-gradescope/tests/sq/s8/defs.rkt") (lib "khoury-gradescope/tests/sq/s6/defs.rkt") (lib "khoury-gradescope/tests/sq/s5/defs.rkt") (lib "khoury-gradescope/tests/sq/s4/defs.rkt") (lib "khoury-gradescope/tests/sq/s3/defs.rkt") (lib "khoury-gradescope/tests/sq/s2/defs.rkt") (lib "khoury-gradescope/tests/sq/s1/defs.rkt") (lib "khoury-gradescope/tests/sq/s7/definitions.rkt") (lib "khoury-gradescope/lib-grade.rkt") (lib "khoury-gradescope/tests/macros/s1/student-code.rkt") (lib "khoury-gradescope/grade-sq.rkt") (lib "khoury-gradescope/grade-template.rkt"))) (name . "khoury-gradescope") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:t.sachleben@northeastern.edu . #t) (autograding . #t) (gradescope . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/northeastern-khoury/gradescope-racket.git") (tags . ("autograding" "gradescope" "testing")) (versions . #hash((default . #hasheq((checksum . "bf69e9dd5c0e98a41b4a4119b79fe88258419509") (source . "https://github.com/northeastern-khoury/gradescope-racket.git") (source_url . "https://github.com/northeastern-khoury/gradescope-racket.git"))))))) ("libopenal-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/libopenal-racket.txt") (docs . (("main" "libopenal-racket" "doc/libopenal-racket@libopenal-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libopenal-racket.txt") (test-failure-log . "server/built/test-fail/libopenal-racket.txt") (test-success-log . #f))) (checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Racket wrapper for the OpenAL library") (implies . ()) (modules . ((lib "libopenal-racket/main.rkt") (lib "libopenal-racket/test/openal-test.rkt") (lib "libopenal-racket/test/test.rkt") (lib "libopenal-racket/doc/libopenal-racket.scrbl") (lib "libopenal-racket/libopenal-racket.rkt"))) (name . "libopenal-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (audio . #t) (author:lehi@tosk.in . #t) (openal . #t) (ring:1 . #t) (wrapper . #t))) (source . "http://github.com/lehitoskin/libopenal-racket/tree/master") (tags . ("audio" "openal" "wrapper")) (versions . #hash((default . #hasheq((checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (source . "git://github.com/lehitoskin/libopenal-racket") (source_url . "http://github.com/lehitoskin/libopenal-racket/tree/master"))))))) ("libvid-i386-macosx-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/libvid-i386-macosx-0-2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: libvid-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:914:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:319:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:115:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:721:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "libvid-i386-macosx-0-2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx"))))))) ("mario" . #hasheq((author . "mlang@blind.guru") (authors . ("mlang@blind.guru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mario.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mario.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mario.txt"))) (checksum . "4604f58610230176abdde0ffca38c9df77810a49") (checksum-error . #f) (collection . "mario") (conflicts . ()) (dependencies . ()) (description . "An interpreter for the 2d programming language MarioLANG") (implies . ()) (modules . ((lib "mario/semantics.rkt") (lib "mario/99bottles.rkt") (lib "mario/main.rkt"))) (name . "mario") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (MarioLANG . #t) (author:mlang@blind.guru . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/mlang/mario.git") (tags . ("language" "MarioLANG")) (versions . #hash((default . #hasheq((checksum . "4604f58610230176abdde0ffca38c9df77810a49") (source . "https://github.com/mlang/mario.git") (source_url . "https://github.com/mlang/mario.git"))))))) ("minetest" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "minetest" "doc/minetest@minetest/index.html"))) (failure-log . "server/built/fail/minetest.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Compile-time framework for getting 2htdp/image objects into Minetest (as blocks, items, recipes, and/or schematics).  Only works on Linux.") (implies . ()) (modules . ((lib "minetest/examples/example2.rkt") (lib "minetest/schematics-writer-raw.rkt") (lib "minetest/examples/quick-demo.rkt") (lib "minetest/examples/hello-world.rkt") (lib "minetest/entities.rkt") (lib "minetest/compiler.rkt") (lib "minetest/rules.rkt") (lib "minetest/rocket-module.rkt") (lib "minetest/schematics.rkt") (lib "minetest/lua.rkt") (lib "minetest/minetest.scrbl") (lib "minetest/core.rkt") (lib "minetest/items.rkt") (lib "minetest/examples/example-mod.rkt") (lib "minetest/textures.rkt") (lib "minetest/recipes.rkt") (lib "minetest/main.rkt") (lib "minetest/mob-api-raw.rkt") (lib "minetest/blocks.rkt"))) (name . "minetest") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (minetest . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/minetest.git") (tags . ("2htdp" "education" "games" "minetest")) (versions . #hash((default . #hasheq((checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (source . "https://github.com/thoughtstem/minetest.git") (source_url . "https://github.com/thoughtstem/minetest.git"))))))) ("mk" . #hasheq((author . "mvc@iu.edu") (authors . ("mvc@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mk.txt"))) (checksum . "a01b4ee787e7889b9f226d954d932f9770c0ba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1575410721) (dependencies . ()) (description . "") (implies . ()) (modules . ()) (name . "mk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:mvc@iu.edu . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/WeixiMa/mk.git") (tags . ("miniKanren")) (versions . #hash((default . #hasheq((checksum . "a01b4ee787e7889b9f226d954d932f9770c0ba1d") (source . "https://github.com/WeixiMa/mk.git") (source_url . "https://github.com/WeixiMa/mk.git"))))))) ("odysseus" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/odysseus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/odysseus.txt"))) (checksum . "fc27120e833742fb7d79b10ac07efa00d10e2418") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1618756902) (dependencies . ()) (description . "Library with handy general-purpose functions and macro as well as specific ones") (implies . ()) (modules . ()) (name . "odysseus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/odysseus.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fc27120e833742fb7d79b10ac07efa00d10e2418") (source . "https://github.com/prozion/odysseus.git") (source_url . "https://github.com/prozion/odysseus.git"))))))) ("onlog" . #hasheq((author . "med.hur@gmail.com") (authors . ("med.hur@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "onlog"))) (failure-log . "server/built/fail/onlog.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555013294) (dependencies . ()) (description . "Perform operations on log files") (implies . ()) (modules . ((lib "onlog/main.rkt") (lib "onlog/onlog.scrbl"))) (name . "onlog") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:med.hur@gmail.com . #t) (commandline . #t) (logging . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/fmind/onlog.git") (tags . ("commandline" "logging" "tools")) (versions . #hash((default . #hasheq((checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (source . "https://github.com/fmind/onlog.git") (source_url . "https://github.com/fmind/onlog.git"))))))) ("parse-qif" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parse-qif.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parse-qif.txt") (test-failure-log . "server/built/test-fail/parse-qif.txt") (test-success-log . #f))) (checksum . "0e7e061ecc1709d5ebe0cd4fcbd56597e1e5575f") (checksum-error . #f) (collection . "parse-qif") (conflicts . ()) (dependencies . ()) (description . "Basic QIF-parsing code, used to apply categories to downloaded transactions") (implies . ()) (modules . ((lib "parse-qif/parse-qif.rkt") (lib "parse-qif/main.rkt"))) (name . "parse-qif") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (qif . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/parse-qif.git") (tags . ("parser" "parsing" "qif")) (versions . #hash((default . #hasheq((checksum . "0e7e061ecc1709d5ebe0cd4fcbd56597e1e5575f") (source . "https://github.com/jbclements/parse-qif.git") (source_url . "https://github.com/jbclements/parse-qif.git"))))))) ("plai-math" . #hasheq((author . "jsolum@westmont.edu") (authors . ("jsolum@westmont.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/plai-math.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Provides helpful math functions to plai-typed") (implies . ()) (modules . ((lib "plai-math/math.rkt"))) (name . "plai-math") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (Math . #t) (author:jsolum@westmont.edu . #t) (plai-typed . #t) (ring:1 . #t))) (source . "http://github.com/JamesSolum/racket_packages/tree/master?path=math") (tags . ("Math" "plai-typed")) (versions . #hash((default . #hasheq((checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (source . "git://github.com/JamesSolum/racket_packages?path=math") (source_url . "http://github.com/JamesSolum/racket_packages/tree/master?path=math"))))))) ("plt-services" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-services.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-services.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Miscellaneous management and maintenance tools used by the Racket development team") (implies . ()) (modules . ()) (name . "plt-services") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (deprecated . #t) (ring:0 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "532a22af0bfcd4cd6f59f4e3986f330b3c401874") (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (source_url . "git://github.com/racket/racket/?path=pkgs/plt-services"))))))) ("print-debug" . #hasheq((author . "aldis.sarja@gmail.com") (authors . ("aldis.sarja@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/print-debug.txt") (docs . (("extract" "manual" "doc/manual@print-debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/print-debug.txt") (test-failure-log . "server/built/test-fail/print-debug.txt") (test-success-log . #f))) (checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1552409005) (dependencies . ()) (description . "Debugging tool. Use for debug printing variables and expresions.") (implies . ()) (modules . ((lib "print-debug/manual.scrbl") (lib "print-debug/print-dbg.rkt"))) (name . "print-debug") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:aldis.sarja@gmail.com . #t) (debug . #t) (debugging . #t) (ring:1 . #t))) (source . "https://github.com/aldis-sarja/print-debug.git") (tags . ("debug" "debugging")) (versions . #hash((default . #hasheq((checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (source . "https://github.com/aldis-sarja/print-debug.git") (source_url . "https://github.com/aldis-sarja/print-debug.git"))))))) ("py-fizz" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/py-fizz.txt") (docs . (("main" "py-fizz" "doc/py-fizz@py-fizz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/py-fizz.txt") (test-failure-log . "server/built/test-fail/py-fizz.txt") (test-success-log . #f))) (checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to-python")) (description . "Physics sandbox for racket.  Compiles to Python and uses the Pymunk physics engine.  High level tool for creating physics simulations and digital toys.   \r\n\r\nPygame and pymunk are dependencies.  (Python too, obviously)") (implies . ()) (modules . ((lib "py-fizz/demos/builder-test.rkt") (lib "py-fizz/toys/toys.rkt") (lib "py-fizz/demos/on-click.rkt") (lib "py-fizz/compiler.rkt") (lib "py-fizz/py-fizz.scrbl") (lib "py-fizz/main.rkt") (lib "py-fizz/demos/catapult.rkt") (lib "py-fizz/demos/cannon-shooter.rkt") (lib "py-fizz/demos/hello-world.rkt") (lib "py-fizz/demos/car-swap.rkt") (lib "py-fizz/demos/builder-test2.rkt") (lib "py-fizz/toys/lose-screen-generator.rkt") (lib "py-fizz/demos/balloons-hit-fan.rkt") (lib "py-fizz/toys/Untitled.rkt"))) (name . "py-fizz") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (physics . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/py-fizz.git") (tags . ("physics")) (versions . #hash((default . #hasheq((checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (source . "https://github.com/thoughtstem/py-fizz.git") (source_url . "https://github.com/thoughtstem/py-fizz.git"))))))) ("racket-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-processing.txt"))) (checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Allows processing to be written with Lispy syntax in DrRacket.  Depends on the racket-to package, which transpiles to processing.") (implies . ()) (modules . ((lib "racket-processing/main.rkt") (lib "racket-processing/processing-module.rkt"))) (name . "racket-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-processing.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (source . "https://github.com/thoughtstem/racket-processing.git") (source_url . "https://github.com/thoughtstem/racket-processing.git"))))))) ("racket-school-mystery-languages" . #hasheq((author . "justinpombrio@cs.brown.edu") (authors . ("justinpombrio@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-school-mystery-languages.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-school-mystery-languages.txt") (test-failure-log . "server/built/test-fail/racket-school-mystery-languages.txt") (test-success-log . #f))) (checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (checksum-error . #f) (collection . "RacketSchool") (conflicts . ()) (dependencies . ()) (description . "Some labs will have you explore these languages. One syntax, many semantics. (2017)") (implies . ()) (modules . ((lib "RacketSchool/Variables3.rkt") (lib "RacketSchool/Functions1.rkt") (lib "RacketSchool/Functions3.rkt") (lib "RacketSchool/Variables1.rkt") (lib "RacketSchool/private/tests.rkt") (lib "RacketSchool/VariablesAll.rkt") (lib "RacketSchool/private/basic.rkt") (lib "RacketSchool/FunctionsAll.rkt") (lib "RacketSchool/private/mystery.rkt") (lib "RacketSchool/private/mystery-lang.rkt") (lib "RacketSchool/Records3.rkt") (lib "RacketSchool/public/basic.rkt") (lib "RacketSchool/private/event-loop.rkt") (lib "RacketSchool/Variables2.rkt") (lib "RacketSchool/private/mystery-functions.rkt") (lib "RacketSchool/private/mystery-records.rkt") (lib "RacketSchool/Functions2.rkt") (lib "RacketSchool/private/mystery-variables.rkt") (lib "RacketSchool/private/mystery-semantics-records.rkt") (lib "RacketSchool/RecordsAll.rkt") (lib "RacketSchool/private/testing.rkt") (lib "RacketSchool/Records2.rkt") (lib "RacketSchool/Records1.rkt") (lib "RacketSchool/private/mystery-semantics-variables.rkt") (lib "RacketSchool/private/mystery-semantics-functions.rkt"))) (name . "racket-school-mystery-languages") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:justinpombrio@cs.brown.edu . #t) (ring:1 . #t))) (source . "http://github.com/justinpombrio/RacketSchool/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (source . "git://github.com/justinpombrio/RacketSchool") (source_url . "http://github.com/justinpombrio/RacketSchool/tree/master"))))))) ("racket-to" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to.txt"))) (checksum . "c76caf3721c09d68c5871a64481b15be72293259") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A set of lightweight transpilers from racket to other languages.  Entirely for educational and in-class demo purposes.  Don't use this for anything important yet...") (implies . ()) (modules . ((lib "racket-to/processing.rkt") (lib "racket-to/racket2blank.rkt") (lib "racket-to/python.rkt") (lib "racket-to/javascript.rkt"))) (name . "racket-to") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c76caf3721c09d68c5871a64481b15be72293259") (source . "https://github.com/thoughtstem/racket-to.git") (source_url . "https://github.com/thoughtstem/racket-to.git"))))))) ("racket-to-python" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to-python.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to-python.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to-python.txt"))) (checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "My toolset for working with Python as a compilation target from Racket.  It's basically just a lightweight wrapper around the Hy Language, which is basically a Lisp that compiles to Python.") (implies . ()) (modules . ((lib "racket-to-python/python.rkt") (lib "racket-to-python/python-module.rkt") (lib "racket-to-python/main.rkt") (lib "racket-to-python/python-extras.rkt"))) (name . "racket-to-python") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to-python.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (source . "https://github.com/thoughtstem/racket-to-python.git") (source_url . "https://github.com/thoughtstem/racket-to-python.git"))))))) ("rokit-racket" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rokit-racket.txt") (docs . (("main" "rokit-racket" "doc/rokit-racket@rokit-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rokit-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rokit-racket.txt"))) (checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Racket library for compiling to the Rokit Arduino-based robotics kits.  We use these kits in ThoughtSTEM robotics classes. ") (implies . ()) (modules . ((lib "rokit-racket/main.rkt") (lib "rokit-racket/rokit-racket-module.rkt") (lib "rokit-racket/arduino-lang.rkt") (lib "rokit-racket/test.rkt") (lib "rokit-racket/prefs.rkt") (lib "rokit-racket/rokit-racket.scrbl") (lib "rokit-racket/arduino-compile.rkt"))) (name . "rokit-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (source_url . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket"))))))) ("rsa" . #hasheq((author . "michael.g.bowe@gmail.com") (authors . ("michael.g.bowe@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rsa.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsa.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rsa.txt"))) (checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "An rsa encryption library for racket") (implies . ()) (modules . ((lib "rsa/rsa.rkt"))) (name . "rsa") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:michael.g.bowe@gmail.com . #t) (ring:1 . #t))) (source . "http://github.com/mgbowe1/racket-rsa/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (source . "git://github.com/mgbowe1/racket-rsa") (source_url . "http://github.com/mgbowe1/racket-rsa/tree/master"))))))) ("russia-phonologie" . #hasheq((author . "madatao71@gmail.com") (authors . ("madatao71@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/russia-phonologie.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:782:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:382:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "transform graphie to phonologie") (implies . ()) (modules . ()) (name . "russia-phonologie") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:madatao71@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git") (source_url . "https://github.com/.git"))))))) ("science" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "science"))) (failure-log . "server/built/fail/science.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ccd0b7277de38eb871202d1af09542cfd1f125c8") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1642683561) (dependencies . ()) (description . "A collection of modules that provide functions for numerical computing. \r\nCONTRIBUTIONS WELCOME ; IN PROGRESS PORT OF http://planet.racket-lang.org/display.ss?package=science.plt&owner=williams") (implies . ()) (modules . ((lib "science/ode-initval/evolve.rkt") (lib "science/scribblings/physical-constants.scrbl") (lib "science/constants/cgsm-constants.rkt") (lib "science/examples/poisson-plot-example.rkt") (lib "science/examples/bernoulli-example.rkt") (lib "science/examples/beta-example.rkt") (lib "science/random-distributions/poisson-graphics.rkt") (lib "science/random-distributions/bernoulli-graphics.rkt") (lib "science/random-distributions/exponential-graphics.rkt") (lib "science/examples/discrete-plot-example.rkt") (lib "science/random-distributions/discrete-graphics.rkt") (lib "science/constants/cgs-constants.rkt") (lib "science/scribblings/chebyshev.scrbl") (lib "science/examples/gamma-plot-example.rkt") (lib "science/random-distributions-with-graphics.rkt") (lib "science/random-distributions/t-distribution.rkt") (lib "science/examples/f-distribution-plot-example.rkt") (lib "science/scribblings/using.scrbl") (lib "science/unsafe-ops-utils.rkt") (lib "science/examples/gaussian-histogram-example.rkt") (lib "science/scribblings/random-numbers.scrbl") (lib "science/math.rkt") (lib "science/examples/bivariate-gaussian-histogram-example.rkt") (lib "science/constants/mks-constants.rkt") (lib "science/examples/geometric-histogram-example.rkt") (lib "science/examples/gaussian-plot-example.rkt") (lib "science/examples/unchecked-science-test.rkt") (lib "science/random-distributions/binomial-graphics.rkt") (lib "science/special-functions/exponential-integral.rkt") (lib "science/examples/constants-example.rkt") (lib "science/examples/ode-example-1.rkt") (lib "science/examples/pareto-plot-example.rkt") (lib "science/random-distributions/geometric-graphics.rkt") (lib "science/random-distributions/beta-graphics.rkt") (lib "science/scribblings/fft.scrbl") (lib "science/examples/triangular-plot-example.rkt") (lib "science/random-distributions.rkt") (lib "science/random-distributions/t-distribution-graphics.rkt") (lib "science/examples/gamma-histogram-example.rkt") (lib "science/constants.rkt") (lib "science/histogram-graphics.rkt") (lib "science/fft.rkt") (lib "science/examples/f-distribution-histogram-example.rkt") (lib "science/random-distributions/pareto.rkt") (lib "science/examples/discrete-histogram-example.rkt") (lib "science/scribblings/unsafe-ops-utils.scrbl") (lib "science/examples/t-distribution-histogram-example.rkt") (lib "science/histogram-2d-graphics.rkt") (lib "science/examples/unit-gaussian-histogram-example.rkt") (lib "science/examples/lngamma-plot-example.rkt") (lib "science/random-distributions/binomial.rkt") (lib "science/scribblings/special-functions.scrbl") (lib "science/random-distributions/gaussian-tail-graphics.rkt") (lib "science/ode-initval/standard-control.rkt") (lib "science/examples/exponential-example-scaled.rkt") (lib "science/constants/mksa-constants.rkt") (lib "science/examples/logarithmic-plot-example.rkt") (lib "science/examples/gaussian-tail-histogram-example.rkt") (lib "science/discrete-histogram.rkt") (lib "science/statistics.rkt") (lib "science/machine.rkt") (lib "science/examples/exponential-plot-example.rkt") (lib "science/random-distributions/f-distribution.rkt") (lib "science/examples/uniform-int-histogram-example.rkt") (lib "science/header.rkt") (lib "science/random-distributions/gaussian-tail.rkt") (lib "science/random-distributions/logarithmic-graphics.rkt") (lib "science/scribblings/error-handling.scrbl") (lib "science/random-distributions/flat-graphics.rkt") (lib "science/examples/radix2-fft-example.rkt") (lib "science/random-distribution-graphics.rkt") (lib "science/histogram-2d.rkt") (lib "science/scribblings/histograms.scrbl") (lib "science/random-distributions/cdf-beta-inc.rkt") (lib "science/discrete-histogram-with-graphics.rkt") (lib "science/examples/example.rkt") (lib "science/random-distributions/f-distribution-graphics.rkt") (lib "science/constants/num-constants.rkt") (lib "science/scribblings/science.scrbl") (lib "science/histogram-with-graphics.rkt") (lib "science/examples/statistics-example.rkt") (lib "science/random-distributions/discrete.rkt") (lib "science/special-functions/beta.rkt") (lib "science/random-distributions/poisson.rkt") (lib "science/ode-initval/control.rkt") (lib "science/examples/chi-squared-histogram-example.rkt") (lib "science/examples/lognormal-plot-example.rkt") (lib "science/special-functions/gamma-imp.rkt") (lib "science/examples/uniform-histogram-example.rkt") (lib "science/random-distributions/geometric.rkt") (lib "science/random-distributions/lognormal-graphics.rkt") (lib "science/examples/special-functions.rkt") (lib "science/special-functions/gamma-inc-imp.rkt") (lib "science/random-distributions/logarithmic.rkt") (lib "science/examples/triangular-example.rkt") (lib "science/ode-initval/step.rkt") (lib "science/special-functions/zeta-imp.rkt") (lib "science/histogram-2d-with-graphics.rkt") (lib "science/random-distributions/triangular.rkt") (lib "science/test-constants.rkt") (lib "science/examples/science-test.rkt") (lib "science/examples/exponential-example.rkt") (lib "science/random-distributions/chi-squared-graphics.rkt") (lib "science/histogram.rkt") (lib "science/examples/beta-plot-example.rkt") (lib "science/examples/binomial-plot-example.rkt") (lib "science/ode-initval/rk2.rkt") (lib "science/scribblings/random-distributions.scrbl") (lib "science/science-with-graphics.rkt") (lib "science/special-functions/error.rkt") (lib "science/random-distributions/gaussian-graphics.rkt") (lib "science/examples/bivariate-gaussian-plot-example.rkt") (lib "science/ode-initval/system.rkt") (lib "science/examples/unit-gaussian-plot-example.rkt") (lib "science/random-distributions/gamma-graphics.rkt") (lib "science/examples/geometric-plot-example.rkt") (lib "science/examples/binomial-example.rkt") (lib "science/random-distributions/bivariate-gaussian.rkt") (lib "science/special-functions.rkt") (lib "science/random-distributions/bernoulli.rkt") (lib "science/special-functions/gamma.rkt") (lib "science/scribblings/gfdl.scrbl") (lib "science/examples/gaussian-histogram-scaled-example.rkt") (lib "science/examples/bernoulli-plot-example.rkt") (lib "science/random-distributions/flat.rkt") (lib "science/examples/chebyshev-example.rkt") (lib "science/examples/radix2-dif-fft-example.rkt") (lib "science/examples/ode-example-2.rkt") (lib "science/examples/chi-squared-plot-example.rkt") (lib "science/special-functions/psi-imp.rkt") (lib "science/ode-initval.rkt") (lib "science/examples/multi-radix-fft-example.rkt") (lib "science/ode-initval/rk4.rkt") (lib "science/random-distributions/bivariate-gaussian-graphics.rkt") (lib "science/ode-initval/rkf45.rkt") (lib "science/scribblings/statistics.scrbl") (lib "science/examples/poisson-histogram-example.rkt") (lib "science/random-distributions/pareto-graphics.rkt") (lib "science/random-distributions/triangular-graphics.rkt") (lib "science/random-source.rkt") (lib "science/discrete-histogram-graphics.rkt") (lib "science/chebyshev.rkt") (lib "science/examples/lognormal-histogram-example.rkt") (lib "science/random-distributions/exponential.rkt") (lib "science/examples/ode-example-3.rkt") (lib "science/scribblings/introduction.scrbl") (lib "science/random-distributions/gaussian.rkt") (lib "science/examples/t-distribution-plot-example.rkt") (lib "science/random-distributions/lognormal.rkt") (lib "science/science.rkt") (lib "science/scribblings/mathematical-functions.scrbl") (lib "science/scribblings/ode.scrbl") (lib "science/examples/flat-example.rkt") (lib "science/examples/gaussian-tail-plot-example.rkt") (lib "science/random-distributions/beta.rkt") (lib "science/random-distributions/chi-squared.rkt") (lib "science/examples/logarithmic-histogram-example.rkt") (lib "science/random-distributions/gamma.rkt") (lib "science/examples/flat-plot-example.rkt") (lib "science/examples/pareto-histogram-example.rkt"))) (name . "science") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:spdegabrielle@gmail.com . #t) (numerical . #t) (ring:1 . #t) (science . #t))) (source . "https://github.com/planet-ports/science.git") (tags . ("numerical" "science")) (versions . #hash((default . #hasheq((checksum . "ccd0b7277de38eb871202d1af09542cfd1f125c8") (source . "https://github.com/planet-ports/science.git") (source_url . "https://github.com/planet-ports/science.git"))))))) ("smart-completion" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/smart-completion.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smart-completion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smart-completion.txt"))) (checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550970785) (dependencies . ()) (description . "") (implies . ()) (modules . ((lib "smart-completion/tool.rkt"))) (name . "smart-completion") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:1227847322@qq.com . #t) (ring:1 . #t))) (source . "https://github.com/syntacticlosure/smart-completion.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (source . "https://github.com/syntacticlosure/smart-completion.git") (source_url . "https://github.com/syntacticlosure/smart-completion.git"))))))) ("srfi-lib-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/srfi-lib-nonfree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/srfi-lib-nonfree.txt"))) (checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ()) (description . "parts of \"srfi\" implementation that are licensed restrictively") (implies . ()) (modules . ()) (name . "srfi-lib-nonfree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e42473d37c1e7abd5703b0b00d096e84ba297896") (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (source_url . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree"))))))) ("tabtree" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabtree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabtree.txt"))) (checksum . "4b53d73ce2c71d6ac5f3ef89c40388f47f3b34ff") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1618757106) (dependencies . ()) (description . "A library to handle files of Tabtree format") (implies . ()) (modules . ()) (name . "tabtree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/tabtree.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4b53d73ce2c71d6ac5f3ef89c40388f47f3b34ff") (source . "https://github.com/prozion/tabtree.git") (source_url . "https://github.com/prozion/tabtree.git"))))))) ("this-and-that" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "chipmunk"))) (failure-log . "server/built/fail/this-and-that.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Small useful bits and pieces.") (implies . ()) (modules . ((lib "this-and-that/readtable/test2.rkt") (lib "this-and-that/brevity/brevity.rkt") (lib "this-and-that/snoopy/2d-tree.rkt") (lib "this-and-that/readers/read-number.rkt") (lib "this-and-that/tmp/racket-chipmunk/2d-tree.rkt") (lib "this-and-that/tmp/racket-chipmunk/1d-tree.rkt") (lib "this-and-that/readtable/mv-parser.rkt") (lib "this-and-that/readtable/lang/reader.rkt") (lib "this-and-that/tmp/racket-chipmunk/racket-chipmunk.rkt") (lib "this-and-that/readtable/lang/parse-reader-spec.rkt") (lib "this-and-that/brevity/terse-hash.rkt") (lib "this-and-that/heart-beat/in-effect.rkt") (lib "this-and-that/memoize/memo.rkt") (lib "this-and-that/racket-poppler/racket-poppler.rkt") (lib "this-and-that/lexer/lexer.rkt") (lib "this-and-that/snoopy/kd-tree.rkt") (lib "this-and-that/declare/declare.rkt") (lib "this-and-that/heart-beat/in-heart-beat.rkt") (lib "this-and-that/spell-checker/spell-checker.rkt") (lib "this-and-that/snoopy/1d-tree.rkt") (lib "this-and-that/readtable/lang/converter.rkt") (lib "this-and-that/readtable/test.rkt") (lib "this-and-that/split-between.rkt") (lib "this-and-that/snoopy/racket-chipmunk.rkt") (lib "this-and-that/tmp/chipmunk/main.rkt") (lib "this-and-that/snoopy/1d-range-searching.rkt") (lib "this-and-that/readtable/pratt.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.scrbl") (lib "this-and-that/updatable-struct/updatable-struct.rkt") (lib "this-and-that/readtable/test-clojure-maps.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.rkt") (lib "this-and-that/readtable/lang/read-and-read-syntax.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk-ffi.rkt") (lib "this-and-that/readtable/lang/pratt-parser.rkt") (lib "this-and-that/memoize/test-memo.rkt") (lib "this-and-that/readtable/test-parser.rkt"))) (name . "this-and-that") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "http://github.com/soegaard/this-and-that/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (source . "github://github.com/soegaard/this-and-that/master") (source_url . "http://github.com/soegaard/this-and-that/tree/master"))))))) ("treap" . #hasheq((author . "snwhiteh@uwaterloo.ca") (authors . ("snwhiteh@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/treap.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/treap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/treap.txt"))) (checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Balanced binary search trees implemented through treaps") (implies . ()) (modules . ((lib "treap/treap.rkt"))) (name . "treap") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:snwhiteh@uwaterloo.ca . #t) (ring:1 . #t))) (source . "http://github.com/spencereir/treap/tree/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (source . "git://github.com/spencereir/treap") (source_url . "http://github.com/spencereir/treap/tree/master"))))))) ("ts-files" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-files.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3252c883500641609200b698b73a09f0c96a6042") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Demo files for ThoughtSTEM.  Probably not useful to anyone outside of ThoughtSTEM.   ") (implies . ()) (modules . ((lib "ts-files/tscc/tscc_module10.rkt") (lib "ts-files/cpx/tscpx_riff_surprise_1.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot.rkt") (lib "ts-files/tsgd/tsgd_adventure_game_demo.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot2.rkt") (lib "ts-files/cpx/tscpx_saber_c.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot3.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow3.rkt") (lib "ts-files/app/tsapp_asl_app.rkt") (lib "ts-files/mt/tsmt_schematic.rkt") (lib "ts-files/cpx/tscpx_target_a.rkt") (lib "ts-files/cpx/tscpx_blaster_b.rkt") (lib "ts-files/cpx/tscpx_night_light.rkt") (lib "ts-files/cpx/tscpx_sound_meter.rkt") (lib "ts-files/mt/tsmt_multi_face.rkt") (lib "ts-files/mt/tsmt_multi_drop.rkt") (lib "ts-files/tsweb/tsweb_blog_template.rkt") (lib "ts-files/cpx/tscpx_saber_e.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot2.rkt") (lib "ts-files/cpx/tscpx_saber_b.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot4.rkt") (lib "ts-files/cpx/tscpx_set_light.rkt") (lib "ts-files/cpx/tscpx_cool_riff.rkt") (lib "ts-files/tsgd/tsgd_enemy.rkt") (lib "ts-files/cpx/tscpx_blaster_d.rkt") (lib "ts-files/tsgd/tsgd_quest_item.rkt") (lib "ts-files/tsgd/tsgd_wall_and_lava.rkt") (lib "ts-files/cpx/tscpx_led.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot3.rkt") (lib "ts-files/cpx/tscpx_set_light_wait.rkt") (lib "ts-files/tsgd/tsgd_quest10_complete.rkt") (lib "ts-files/tsgd/tsgd_fireball.rkt") (lib "ts-files/cpx/tscpx_saber_d.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot3.rkt") (lib "ts-files/cpx/tscpx_blaster_e.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_3.rkt") (lib "ts-files/tsweb/tsweb_module1_complete.rkt") (lib "ts-files/tsgd/tsgd_race_game_5p.rkt") (lib "ts-files/tsgd/tsgd_quest11_complete.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot3.rkt") (lib "ts-files/tsgd/tsgd_boss_health.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot.rkt") (lib "ts-files/app/tsapp_cookie_clicker.rkt") (lib "ts-files/tsweb/tsweb_module3_complete.rkt") (lib "ts-files/cpx/tscpx_blaster_f.rkt") (lib "ts-files/tsgd/tsgd_quest9_complete.rkt") (lib "ts-files/tsgd/tsgd_quest8_complete.rkt") (lib "ts-files/tsgd/tsgd_quest7_complete.rkt") (lib "ts-files/tsgd/tsgd_quest6_complete.rkt") (lib "ts-files/tsgd/tsgd_quest5_complete.rkt") (lib "ts-files/cpx/tscpx_set_light_function.rkt") (lib "ts-files/cpx/tscpx_notes.rkt") (lib "ts-files/vr/tsvr_components.rkt") (lib "ts-files/cpx/tscpx_colors.rkt") (lib "ts-files/tsgd/tsgd_race_game_starter.rkt") (lib "ts-files/vr/tsvr_streetlamp.rkt") (lib "ts-files/vr/tsvr_start_a.rkt") (lib "ts-files/cpx/tscpx_target_b.rkt") (lib "ts-files/mt/tsmt_custom_drop.rkt") (lib "ts-files/cpx/tscpx_laser_tag_teams.rkt") (lib "ts-files/app/tsapp_flashcards.rkt") (lib "ts-files/mt/tsmt_custom_item.rkt") (lib "ts-files/tsweb/tsweb_module7_complete.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot2.rkt") (lib "ts-files/tsweb/tsweb_text_adventure.rkt") (lib "ts-files/cpx/tscpx_hot_potato.rkt") (lib "ts-files/mt/tsmt_entity.rkt") (lib "ts-files/cpx/tscpx_riff_2.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest5_complete.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest4_complete.rkt") (lib "ts-files/cpx/tscpx_rainbow_sparkle.rkt") (lib "ts-files/cpx/tscpx_saber_a.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_4.rkt") (lib "ts-files/cpx/tscpx_forever_siren.rkt") (lib "ts-files/mt/tsmt_custom_block.rkt") (lib "ts-files/cpx/tscpx_clap_light.rkt") (lib "ts-files/cpx/tscpx_laser_tag.rkt") (lib "ts-files/cpx/tscpx_test.rkt") (lib "ts-files/tsweb/tsweb_module5_complete.rkt") (lib "ts-files/cpx/tscpx_blaster_a.rkt") (lib "ts-files/cpx/tscpx_blaster_c.rkt") (lib "ts-files/mt/tsmt_particle.rkt") (lib "ts-files/cpx/tscpx_set_function_10.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot4.rkt") (lib "ts-files/cpx/tscpx_set_function.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot2.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow2.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_1.rkt") (lib "ts-files/cpx/tscpx_riff_1.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_2.rkt") (lib "ts-files/cpx/tscpx_servo.rkt") (lib "ts-files/vr/tsvr_start_b.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow.rkt") (lib "ts-files/tsgd/tsgd_laser.rkt") (lib "ts-files/vr/tsvr_lighttime.rkt"))) (name . "ts-files") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-files.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3252c883500641609200b698b73a09f0c96a6042") (source . "https://github.com/thoughtstem/ts-files.git") (source_url . "https://github.com/thoughtstem/ts-files.git"))))))) ("viz" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/viz.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "git-checkout: no initial pkts from the server\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:74:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:55:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:31:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:263:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:163:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:150:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:174:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1561670559) (dependencies . ()) (description . "A real-time data visualization surface") (implies . ()) (modules . ()) (name . "viz") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-viz.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/dedbox/racket-viz.git") (source_url . "https://github.com/dedbox/racket-viz.git"))))))) ("web-galaxy-doc" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy-doc.txt"))) (checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Documentation for web-galaxy.") (implies . ()) (modules . ()) (name . "web-galaxy-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (documentation . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (tags . ("documentation" "framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "d484efe7422df0390d291f74c71cebf6006ab87a") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc"))))))) ("web-sessions" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-sessions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-sessions.txt") (test-failure-log . "server/built/test-fail/web-sessions.txt") (test-success-log . #f))) (checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Simple web sessions") (implies . ()) (modules . ((lib "web-sessions/example.rkt") (lib "web-sessions/main.rkt"))) (name . "web-sessions") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (source_url . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git"))))))) ("wn" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/wn.txt") (docs . (("main" "wn" "doc/wn@wn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wn.txt") (test-failure-log . "server/built/test-fail/wn.txt") (test-success-log . #f))) (checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (checksum-error . #f) (collection . "wn") (conflicts . ()) (dependencies . ()) (description . "An FFI interface to WordNet 3.0 -- A Lexical Database for English") (implies . ()) (modules . ((lib "wn/wn.scrbl") (lib "wn/wn.rkt"))) (name . "wn") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:anurag@mendhekar.com . #t) (ffi . #t) (nlp . #t) (ring:1 . #t))) (source . "http://github.com/themetaschemer/wn/tree/master") (tags . ("ffi" "nlp")) (versions . #hash((default . #hasheq((checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (source . "git://github.com/themetaschemer/wn") (source_url . "http://github.com/themetaschemer/wn/tree/master"))))))) ("xdgbasedir0" . #hasheq((author . "lwoodman@vlifesystems.com") (authors . ("lwoodman@vlifesystems.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xdgbasedir"))) (failure-log . "server/built/fail/xdgbasedir0.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Functions to simplify access to the XDG Base Directory Specification.") (implies . ()) (modules . ((lib "xdgbasedir0/xdgbasedir/scribblings/xdgbasedir.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/licence.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/changelog.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/development.scrbl") (lib "xdgbasedir0/xdgbasedir/tests/test-helpers.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/exported-functions.scrbl") (lib "xdgbasedir0/xdgbasedir/xdgbasedir.rkt") (lib "xdgbasedir0/xdgbasedir/tests/xdgbasedir-test.rkt") (lib "xdgbasedir0/xdgbasedir/main.rkt"))) (name . "xdgbasedir0") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:lwoodman@vlifesystems.com . #t) (ring:1 . #t) (unix . #t))) (source . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (source_url . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3"))))))) ("xml-html" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-html.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xml-html.txt"))) (checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "none") (implies . ()) (modules . ()) (name . "xml-html") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zaomir@outlook.com . #t) (ring:1 . #t))) (source . "https://github.com/zaoqi/xml-html.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (source . "https://github.com/zaoqi/xml-html.git") (source_url . "https://github.com/zaoqi/xml-html.git"))))))))